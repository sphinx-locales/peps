# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0648.rst
msgid "PEP"
msgstr ""

#: ../../pep-0648.rst:1
msgid "648"
msgstr ""

#: ../../pep-0648.rst
msgid "Title"
msgstr ""

#: ../../pep-0648.rst:2
msgid "Extensible customizations of the interpreter at startup"
msgstr ""

#: ../../pep-0648.rst
msgid "Author"
msgstr ""

#: ../../pep-0648.rst:3
msgid "Mario Corchero <mariocj89@gmail.com>"
msgstr ""

#: ../../pep-0648.rst
msgid "Sponsor"
msgstr ""

#: ../../pep-0648.rst:4
msgid "Pablo Galindo"
msgstr ""

#: ../../pep-0648.rst
msgid "BDFL-Delegate"
msgstr ""

#: ../../pep-0648.rst:5
msgid "XXXX"
msgstr ""

#: ../../pep-0648.rst
msgid "Discussions-To"
msgstr ""

#: ../../pep-0648.rst:6
msgid ""
"https://discuss.python.org/t/pep-648-extensible-customizations-of-the-"
"interpreter-at-startup/6403"
msgstr ""

#: ../../pep-0648.rst
msgid "Status"
msgstr ""

#: ../../pep-0648.rst:7
msgid "Draft"
msgstr ""

#: ../../pep-0648.rst
msgid "Type"
msgstr ""

#: ../../pep-0648.rst:8
msgid "Standards Track"
msgstr ""

#: ../../pep-0648.rst
msgid "Created"
msgstr ""

#: ../../pep-0648.rst:10
msgid "30-Dec-2020"
msgstr ""

#: ../../pep-0648.rst
msgid "Python-Version"
msgstr ""

#: ../../pep-0648.rst:11
msgid "3.11"
msgstr ""

#: ../../pep-0648.rst
msgid "Post-History"
msgstr ""

#: ../../pep-0648.rst:12
msgid "python-ideas: 16th Dec. python-dev: 18th Dec."
msgstr ""

#: ../../pep-0648.rst:15
msgid "Abstract"
msgstr ""

#: ../../pep-0648.rst:17
msgid ""
"This PEP proposes supporting extensible customization of the interpreter "
"by allowing users to install files that will be executed at startup."
msgstr ""

#: ../../pep-0648.rst:21
msgid "Motivation"
msgstr ""

#: ../../pep-0648.rst:23
msgid ""
"System administrators, tools that repackage the interpreter and some "
"libraries need to customize aspects of the interpreter at startup time."
msgstr ""

#: ../../pep-0648.rst:26
msgid ""
"This is usually achieved via ``sitecustomize.py`` for system "
"administrators whilst libraries rely on exploiting ``pth`` files. This "
"PEP proposes a way of achieving the same functionality in a more user-"
"friendly and structured way."
msgstr ""

#: ../../pep-0648.rst:31
msgid "Limitations of ``pth`` files"
msgstr ""

#: ../../pep-0648.rst:33
msgid ""
"If a library needs to perform any customization before an import or that "
"relates to the general working of the interpreter, they often rely on the"
" fact that ``pth`` files, which are loaded at startup and implemented via"
" the site module [#site]_, can include Python code that will be executed "
"when the ``pth`` file is evaluated."
msgstr ""

#: ../../pep-0648.rst:39
msgid ""
"Note that ``pth`` files were originally developed to just add additional "
"directories to ``sys.path``, but they may also contain lines which start "
"with \"import\", which will be passed to ``exec()``. Users have exploited"
" this feature to allow the customizations that they needed. See "
"setuptools [#setuptools]_ or betterexceptions [#betterexceptions]_ as "
"examples."
msgstr ""

#: ../../pep-0648.rst:45
msgid ""
"Using ``pth`` files for this purpose is far from ideal for library "
"developers, as they need to inject code into a single line preceded by an"
" import, making it rather unreadable. Library developers following that "
"practice will usually create a module that performs all actions on "
"import, as done by betterexceptions [#betterexceptions]_, but the "
"approach is still not really user friendly."
msgstr ""

#: ../../pep-0648.rst:52
msgid ""
"Additionally, it is also non-ideal for users of the interpreter if they "
"want to inspect what is being executed at Python startup as they need to "
"review all the ``pth`` files for potential code execution which can be "
"spread across all site paths. Most of those ``pth`` files will be "
"\"legitimate\" ``pth`` files that just modify the path, answering the "
"question of \"what is changing my interpreter at startup\" a rather "
"complex one."
msgstr ""

#: ../../pep-0648.rst:59
msgid ""
"Lastly, there have been multiple suggestions for removing code execution "
"from ``pth`` files, see [#bpo-24534]_ and [#bpo-33944]_."
msgstr ""

#: ../../pep-0648.rst:63
msgid "Limitations of ``sitecustomize.py``"
msgstr ""

#: ../../pep-0648.rst:65
msgid ""
"Whilst sitecustomize is an acceptable solution, it assumes a single "
"person is in charge of the system and the interpreter. If both the system"
" administrator and the responsibility of provisioning the interpreter "
"want to add customizations at the interpreter startup they need to agree "
"on the contents of the file and combine all the changes. This is not a "
"major limitation though, and it is not the main driver of this change. "
"Should the change happen, it will also improve the situation for these "
"users, as rather than having a ``sitecustomize.py`` which performs all "
"those actions, they can have custom isolated files named after the "
"features they want to enhance. As an example, Ubuntu could change their "
"current ``sitecustomize.py`` to just be ``ubuntu_apport_python_hook``. "
"This not only better represents its intent but also gives users of the "
"interpreter a better understanding of the modifications happening on "
"their interpreter."
msgstr ""

#: ../../pep-0648.rst:80
msgid "Rationale"
msgstr ""

#: ../../pep-0648.rst:82
msgid ""
"This PEP proposes supporting extensible customization of the interpreter "
"at startup by executing all files discovered in directories named "
"``__sitecustomize__`` in sitepackages [#sitepackages-api]_ or "
"usersitepackages [#usersitepackages-api]_ at startup time."
msgstr ""

#: ../../pep-0648.rst:88
msgid "Why ``__sitecustomize__``"
msgstr ""

#: ../../pep-0648.rst:90
msgid ""
"The name aims to follow the already existing concept of "
"``sitecustomize.py``. As the directory will be within ``sys.path``, given"
" that it is located in site paths, we choose to use double underscore "
"around its name, to prevent colliding with the already existing "
"``sitecustomize.py``."
msgstr ""

#: ../../pep-0648.rst:96
msgid "Discovering the new ``__sitecustomize__`` directories"
msgstr ""

#: ../../pep-0648.rst:98
msgid ""
"The Python interpreter will look at startup for directory named "
"``__sitecustomize__`` within any of the standard site-packages path."
msgstr ""

#: ../../pep-0648.rst:101
msgid ""
"These are commonly the Python system location and the user location, but "
"are ultimately defined by the site module logic."
msgstr ""

#: ../../pep-0648.rst:104
msgid ""
"Users can use ``site.sitepackages`` [#sitepackages-api]_ and "
"``site.usersitepackages`` [#usersitepackages-api]_ to know the paths "
"where the interpreter can discover ``__sitecustomize__`` directories."
msgstr ""

#: ../../pep-0648.rst:109
msgid "Time of ``__sitecustomize__`` discovery"
msgstr ""

#: ../../pep-0648.rst:111
msgid ""
"The ``__sitecustomize__`` directories will be discovered exactly after "
"``pth`` files are discovered in a site-packages path as part of "
"``site.addsitedir`` [#siteaddsitedir]_."
msgstr ""

#: ../../pep-0648.rst:115
msgid ""
"These is repeated for each of the site-packages path in the exact same "
"order that is being followed today for ``pth`` files."
msgstr ""

#: ../../pep-0648.rst:119
msgid "Order of execution within ``__sitecustomize__``"
msgstr ""

#: ../../pep-0648.rst:121
msgid ""
"The implementation will execute the files within ``__sitecustomize__`` by"
" sorting them by name when discovering each of the ``__sitecustomize__`` "
"directories. We discourage users to rely on the order of execution "
"though."
msgstr ""

#: ../../pep-0648.rst:125
msgid ""
"We considered executing them in random order, but that could result in "
"different results depending on how the interpreter chooses to pick up "
"those files. So even if it won't be a good practice to rely on other "
"files being executed, we think that is better than having randomly "
"different results on interpreter startup. We chose to run the files after"
" the ``pth`` files in case a user needs to add items to the path before "
"running a files."
msgstr ""

#: ../../pep-0648.rst:133
msgid "Interaction with ``pth`` files"
msgstr ""

#: ../../pep-0648.rst:135
msgid ""
"``pth`` files can be used to add paths into ``sys.path``, but this should"
" not affect the ``__sitecustomize__`` discovery process, as those "
"directories are looked up exclusively in site-packages paths."
msgstr ""

#: ../../pep-0648.rst:140
msgid "Execution of files within ``__sitecustomize__``"
msgstr ""

#: ../../pep-0648.rst:142
msgid ""
"When a ``__sitecustomize__`` directory is discovered, all of the files "
"that have a ``.py`` extension within it will be read with "
"``io.open_code`` and executed by using ``exec`` [#exec]_."
msgstr ""

#: ../../pep-0648.rst:146
msgid ""
"An empty dictionary will be passed as ``globals`` to the ``exec`` "
"function to prevent unexpected interactions between different files."
msgstr ""

#: ../../pep-0648.rst:150
msgid "Failure handling"
msgstr ""

#: ../../pep-0648.rst:152
msgid ""
"Any error on the execution of any of the files will not be logged unless "
"the interpreter is run in verbose mode and it should not stop the "
"evaluation of other files. The user will receive a message in stderr "
"saying that the file failed to be executed and that verbose mode can be "
"used to get more information. This behaviour mimics the one existing for "
"``sitecustomize.py``."
msgstr ""

#: ../../pep-0648.rst:159
msgid "Interaction with virtual environments"
msgstr ""

#: ../../pep-0648.rst:161
msgid ""
"The customizations applied to an interpreter via the new "
"``__sitecustomize__`` solutions will continue to work when a user creates"
" a virtual environment the same way that ``sitecustomize.py`` interact "
"with virtual environments."
msgstr ""

#: ../../pep-0648.rst:166
msgid ""
"This is a difference when compared to ``pth`` files, which are not "
"propagated into virtual environments unless ``include-system-site-"
"packages`` is enabled."
msgstr ""

#: ../../pep-0648.rst:169
msgid ""
"If library maintainers have features installed via ``__sitecustomize__`` "
"that they do not want to propagate into virtual environments, they should"
" detect if they are running within a virtual environment by checking "
"``sys.prefix == sys.base_prefix``. This behavior is similar to packages "
"that modify the global ``sitecustomize.py``."
msgstr ""

#: ../../pep-0648.rst:176
msgid "Interaction with ``sitecustomize.py`` and ``usercustomize.py``"
msgstr ""

#: ../../pep-0648.rst:178
msgid ""
"Until removed, ``sitecustomize`` and ``usercustomize`` will be executed "
"after ``__sitecustomize__`` similar to pth files. See the Backward "
"compatibility section for information on removal plans for "
"``sitecustomize`` and ``usercustomize``."
msgstr ""

#: ../../pep-0648.rst:184
msgid "Identifying all installed files"
msgstr ""

#: ../../pep-0648.rst:186
msgid ""
"To facilitate debugging of the Python startup, if the site module is "
"invoked it will print the ``__sitecustomize__`` directories that will be "
"discovered on startup."
msgstr ""

#: ../../pep-0648.rst:191
msgid "Files naming convention"
msgstr ""

#: ../../pep-0648.rst:193
msgid ""
"Packages will be encouraged to include the name of the package within the"
" name of the file to avoid collisions between packages. But the only "
"requirement on the filename is that it ends in ``.py`` for the "
"interpreter to execute them."
msgstr ""

#: ../../pep-0648.rst:199
msgid "Disabling start files"
msgstr ""

#: ../../pep-0648.rst:201
msgid ""
"In some scenarios, like when the startup time is key, it might be desired"
" to disable this option altogether. The already existing flag ``-S`` "
"[#s-flag]_ will disable all ``site``-related manipulation, including this"
" new feature. If the flag is passed in, ``__sitecustomize__`` directories"
" will not be discovered."
msgstr ""

#: ../../pep-0648.rst:207
msgid ""
"Additionally, to allow for starting the interpreter disabling only this "
"new feature a new option will be added under ``-X``: "
"``disablesitecustomize``, which will disable the discovery of "
"``__sitecustomize__`` exclusively."
msgstr ""

#: ../../pep-0648.rst:211
msgid ""
"Lastly, the user can disable the discovery of ``__sitecustomize__`` "
"directories only in the user site by disabling the user site via any of "
"the multiple options in the ``site.py`` module."
msgstr ""

#: ../../pep-0648.rst:216
msgid "Support in build backends"
msgstr ""

#: ../../pep-0648.rst:218
msgid ""
"Whilst build backends can choose to provide an option to facilitate the "
"installation of these files into a ``__sitecustomize__`` directory, this "
"PEP does not address that directly. Similar to ``pth`` files, build "
"backends can choose to not provide an easy-to-configure mechanism for "
"``__sitecustomize__`` files and let users hook into the installation "
"process to include such files. We do not think build backends enhanced "
"support as a requirement for this PEP."
msgstr ""

#: ../../pep-0648.rst:227
msgid "Impact on startup time"
msgstr ""

#: ../../pep-0648.rst:229
msgid ""
"A concern in this implementation is how Python interpreter startup time "
"can be affected by this addition. We expect the performance impact to be "
"highly coupled to the logic in the files that a user or sysadmin installs"
" in the Python environment being tested."
msgstr ""

#: ../../pep-0648.rst:234
msgid ""
"If the interpreter has any files in their ``__sitecustomize__`` "
"directory, the file execution time plus a call reading the code will be "
"added to the startup time. This is similar to how code execution is "
"impacting startup time through ``sitecustomize.py``, ``usercustomize.py``"
" and code in ``pth`` files. We will therefore focus here on comparing "
"this solution against those three, as otherwise the actual time added to "
"startup is highly dependent on the code that is being executed in those "
"files."
msgstr ""

#: ../../pep-0648.rst:242
msgid ""
"Results were gathered by running \"./python.exe -c pass\" with perf on 50"
" iterations, repeating 50 times the command on each iteration and getting"
" the geometric mean of all the results. The file used to run those "
"benchmarks is checked in in the reference implementation [#reference-"
"implementation]_."
msgstr ""

#: ../../pep-0648.rst:247
msgid ""
"The benchmark was run with 3.10 alpha 7 compiled with PGO and LTO with "
"the following parameters and system state:"
msgstr ""

#: ../../pep-0648.rst:250
msgid "Perf event: Max sample rate set to 1 per second"
msgstr ""

#: ../../pep-0648.rst:251
msgid "CPU Frequency: Minimum frequency of CPU 17,35 set to the maximum frequency"
msgstr ""

#: ../../pep-0648.rst:252
msgid ""
"Turbo Boost (MSR): Turbo Boost disabled on CPU 17: MSR 0x1a0 set to "
"0x4000850089"
msgstr ""

#: ../../pep-0648.rst:253
msgid "IRQ affinity: Set default affinity to CPU 0-16,18-34"
msgstr ""

#: ../../pep-0648.rst:254
msgid ""
"IRQ affinity: Set affinity of IRQ "
"1,3-16,21,25-31,56-59,68-85,87,89-90,92-93,95-104 to CPU 0-16,18-34"
msgstr ""

#: ../../pep-0648.rst:255
msgid "CPU: use 2 logical CPUs: 17,35"
msgstr ""

#: ../../pep-0648.rst:256
msgid "Perf event: Maximum sample rate: 1 per second"
msgstr ""

#: ../../pep-0648.rst:257
msgid "ASLR: Full randomization"
msgstr ""

#: ../../pep-0648.rst:258
msgid "Linux scheduler: Isolated CPUs (2/36): 17,35"
msgstr ""

#: ../../pep-0648.rst:259
msgid "Linux scheduler: RCU disabled on CPUs (2/36): 17,35"
msgstr ""

#: ../../pep-0648.rst:260
msgid ""
"CPU Frequency: 0-16,18-34=min=1200 MHz, max=3600 MHz; 17,35=min=max=3600 "
"MHz"
msgstr ""

#: ../../pep-0648.rst:261
msgid "Turbo Boost (MSR): CPU 17,35: disabled"
msgstr ""

#: ../../pep-0648.rst:263
msgid ""
"The code placed to be executed in ``pth`` files, ``sitecustomize.py``, "
"``usercustomize.py`` and files within ``__sitecustomize__`` is the "
"following:"
msgstr ""

#: ../../pep-0648.rst:266
msgid "import time; x = time.time() ** 5"
msgstr ""

#: ../../pep-0648.rst:268
msgid ""
"The file is aimed at execution a simple operation but still expected to "
"be negligible. This is to put the experiment in a situation where we make"
" visible any hit on performance due to the mechanism whilst still making "
"it relatively realistic. Additionally, it starts with an import and is a "
"single line to be able to be used in ``pth`` files."
msgstr ""

#: ../../pep-0648.rst:275
msgid "Test"
msgstr ""

#: ../../pep-0648.rst:275
msgid "# of files"
msgstr ""

#: ../../pep-0648.rst:275
msgid "Time (us)"
msgstr ""

#: ../../pep-0648.rst:277
msgid "#"
msgstr ""

#: ../../pep-0648.rst:277
msgid "``sitecustomize.py``"
msgstr ""

#: ../../pep-0648.rst:277
msgid "``usercustomize.py``"
msgstr ""

#: ../../pep-0648.rst:277
msgid "``pth``"
msgstr ""

#: ../../pep-0648.rst:277
msgid "``__sitecustomize__``"
msgstr ""

#: ../../pep-0648.rst:277
msgid "Run 1"
msgstr ""

#: ../../pep-0648.rst:277
msgid "Run 2"
msgstr ""

#: ../../pep-0648.rst:279 ../../pep-0648.rst:281 ../../pep-0648.rst:282
#: ../../pep-0648.rst:283
msgid "1"
msgstr ""

#: ../../pep-0648.rst:279 ../../pep-0648.rst:280 ../../pep-0648.rst:281
#: ../../pep-0648.rst:282 ../../pep-0648.rst:283 ../../pep-0648.rst:284
#: ../../pep-0648.rst:285 ../../pep-0648.rst:286
msgid "0"
msgstr ""

#: ../../pep-0648.rst:279
msgid "Dir not created"
msgstr ""

#: ../../pep-0648.rst:279
msgid "13884"
msgstr ""

#: ../../pep-0648.rst:279
msgid "13897"
msgstr ""

#: ../../pep-0648.rst:280
msgid "2"
msgstr ""

#: ../../pep-0648.rst:280
msgid "13871"
msgstr ""

#: ../../pep-0648.rst:280
msgid "13818"
msgstr ""

#: ../../pep-0648.rst:281
msgid "3"
msgstr ""

#: ../../pep-0648.rst:281
msgid "13964"
msgstr ""

#: ../../pep-0648.rst:281
msgid "13924"
msgstr ""

#: ../../pep-0648.rst:282
msgid "4"
msgstr ""

#: ../../pep-0648.rst:282
msgid "13940"
msgstr ""

#: ../../pep-0648.rst:282
msgid "13939"
msgstr ""

#: ../../pep-0648.rst:283
msgid "5"
msgstr ""

#: ../../pep-0648.rst:283
msgid "13990"
msgstr ""

#: ../../pep-0648.rst:283
msgid "13993"
msgstr ""

#: ../../pep-0648.rst:284
msgid "6"
msgstr ""

#: ../../pep-0648.rst:284
msgid "2 (system + user)"
msgstr ""

#: ../../pep-0648.rst:284
msgid "14063"
msgstr ""

#: ../../pep-0648.rst:284
msgid "14040"
msgstr ""

#: ../../pep-0648.rst:285
msgid "7"
msgstr ""

#: ../../pep-0648.rst:285 ../../pep-0648.rst:286
msgid "50"
msgstr ""

#: ../../pep-0648.rst:285
msgid "16011"
msgstr ""

#: ../../pep-0648.rst:285
msgid "16014"
msgstr ""

#: ../../pep-0648.rst:286
msgid "8"
msgstr ""

#: ../../pep-0648.rst:286
msgid "15456"
msgstr ""

#: ../../pep-0648.rst:286
msgid "15448"
msgstr ""

#: ../../pep-0648.rst:289
msgid ""
"Results can be reproduced with ``run-benchmark.py`` script provided in "
"the reference implementation [#reference-implementation]_."
msgstr ""

#: ../../pep-0648.rst:292
msgid "We interpret the following from these results:"
msgstr ""

#: ../../pep-0648.rst:294
msgid ""
"Using two ``__sitecustomize__`` scripts compared to ``sitecustomize.py`` "
"and ``usercustomize.py`` slows down the interpreter by 0.3%. We expect "
"this slowdown until ``sitecustomize.py`` and ``usercustomize.py`` are "
"removed in a future release as even if the user does not create the "
"files, the interpreter will still attempt to import them."
msgstr ""

#: ../../pep-0648.rst:299
#, python-format
msgid ""
"With the arbitrary 50 pth files with code tested, moving those to "
"``__sitecustomize__`` produces a speedup of ~3.5% in startup. Which is "
"likely related to the simpler logic to evaluate ``__sitecustomize__`` "
"files compared to ``pth`` file execution."
msgstr ""

#: ../../pep-0648.rst:303
msgid ""
"In general all measurements show that there is a low impact on startup "
"time with this addition."
msgstr ""

#: ../../pep-0648.rst:307
msgid "Audit Event"
msgstr ""

#: ../../pep-0648.rst:309
msgid ""
"A new audit event will be added and triggered on ``__sitecustomize__`` "
"execution to facilitate security inspection by calling ``sys.audit`` "
"[#sysaudit]_ with \"sitecustimze.exec_file\" as name and the filename as "
"argument."
msgstr ""

#: ../../pep-0648.rst:316
msgid "Security implications"
msgstr ""

#: ../../pep-0648.rst:318
msgid ""
"This PEP aims to move all code execution from ``pth`` files to files "
"within a ``__sitecustomize__`` directory. We think this is an improvement"
" to system admins for the following reasons:"
msgstr ""

#: ../../pep-0648.rst:322
msgid ""
"Allows to quickly identify the code being executed at startup time by the"
" interpreter by looking into a single directory rather than having to "
"scan all ``pth`` files."
msgstr ""

#: ../../pep-0648.rst:326
msgid ""
"Allows to track usage of this feature through the new proposed audit "
"event."
msgstr ""

#: ../../pep-0648.rst:328
msgid ""
"Gives finer grain control by allowing to tune permissions on the "
"``__sitecustomize__`` directory, potentially allowing users to install "
"only packages that does not change the interpreter startup."
msgstr ""

#: ../../pep-0648.rst:332
msgid ""
"In short, whilst this allows for a malicious users to drop a file that "
"will be executed at startup, it's an improvement compared to the existing"
" ``pth`` files."
msgstr ""

#: ../../pep-0648.rst:337
msgid "How to teach this"
msgstr ""

#: ../../pep-0648.rst:339
msgid ""
"This can be documented and taught as simple as saying that the "
"interpreter will try to look for the ``__sitecustomize__`` directory at "
"startup in its site paths and if it finds any files with ``.py`` "
"extension, it will then execute it one by one."
msgstr ""

#: ../../pep-0648.rst:344
msgid ""
"For system administrators and tools that package the interpreter, we can "
"now recommend placing files in ``__sitecustomize__`` as they used to "
"place ``sitecustomize.py``. Being more comfortable on that their content "
"won't be overridden by the next person, as they can provide with specific"
" files to handle the logic they want to customize."
msgstr ""

#: ../../pep-0648.rst:350
msgid ""
"Library developers should be able to specify a new argument on tools like"
" setuptools that will inject those new files. Something like "
"``sitecustomize_files=[\"scripts/betterexceptions.py\"]``, which allows "
"them to add those. Should the build backend not support that, they can "
"manually install them as they used to do with ``pth`` files. We will "
"recommend them to include the name of the package as part of the file's "
"name."
msgstr ""

#: ../../pep-0648.rst:358
msgid "Backward compatibility"
msgstr ""

#: ../../pep-0648.rst:360
msgid ""
"This PEP adds a deprecation warning on ``sitecustomize.py``, "
"``usercustomize.py`` and ``pth`` code execution in 3.11, 3.12 and 3.13. "
"With plans on removing those features by 3.14. The migration from those "
"solutions to ``__sitecustomize__`` should ideally be just moving the "
"logic into a different file."
msgstr ""

#: ../../pep-0648.rst:366
msgid ""
"Whilst the existing ``sitecustomize.py`` mechanism was created targeting "
"System Administrators that placed it in a site path, the file could be "
"actually placed anywhere in the path at the time that the interpreter was"
" starting up. The new mechanism does not allow for users to place "
"``__sitecustomize__`` directories anywhere in the path, but only in site "
"paths. System administrators can recover a similar behavior to "
"``sitecustomize.py`` by adding a custom file in ``__sitecustomize__`` "
"which just imports ``sitecustomize`` as a migration path."
msgstr ""

#: ../../pep-0648.rst:376
msgid "Reference Implementation"
msgstr ""

#: ../../pep-0648.rst:378
msgid ""
"An initial implementation that passes the CPython test suite is available"
" for evaluation [#reference-implementation]_."
msgstr ""

#: ../../pep-0648.rst:381
msgid ""
"This implementation is just for the reviewer to play with and check "
"potential issues that this PEP could generate."
msgstr ""

#: ../../pep-0648.rst:385
msgid "Rejected Ideas"
msgstr ""

#: ../../pep-0648.rst:388
msgid "Do nothing"
msgstr ""

#: ../../pep-0648.rst:390
msgid ""
"Whilst the current status \"works\" it presents the issues listed in the "
"motivation. After analyzing the impact of this change, we believe it is "
"worth it, given the enhanced experience it brings."
msgstr ""

#: ../../pep-0648.rst:395
msgid "Formalize using ``pth`` files"
msgstr ""

#: ../../pep-0648.rst:397
msgid ""
"Another option would be to just glorify and document the usage of ``pth``"
" files to inject code at startup code, but that is a suboptimal "
"experience for users as listed in the motivation."
msgstr ""

#: ../../pep-0648.rst:402
msgid "Making ``__sitecustomize__`` a namespace package"
msgstr ""

#: ../../pep-0648.rst:404
msgid ""
"We considered making the directory a namespace package and just import "
"all the modules within it, which allowed searching across all paths in "
"``sys.path`` at initialization time and provided a way to declare "
"dependencies between files by importing each other. This was rejected for"
" multiple reasons:"
msgstr ""

#: ../../pep-0648.rst:410
msgid ""
"This was unnecessarily broadening the list of paths where arbitrary files"
" are executed."
msgstr ""

#: ../../pep-0648.rst:412
msgid ""
"The logic brought additional complexity, like what to do if a package "
"were to install an ``__init__.py`` file in one of the locations."
msgstr ""

#: ../../pep-0648.rst:414
msgid ""
"It's cheaper to search for ``__sitecustomize__`` as we are looking for "
"``pth`` files already in the site paths compared to performing an actual "
"import of a namespace package."
msgstr ""

#: ../../pep-0648.rst:419
msgid "Support for shutdown customization"
msgstr ""

#: ../../pep-0648.rst:421
msgid ""
"``init.d`` users might be tempted to implement this feature in a way that"
" users could also add code at shutdown, but extra support for that is not"
" needed, as Python users can already do that via ``atexit``."
msgstr ""

#: ../../pep-0648.rst:426
msgid "Using entry_points"
msgstr ""

#: ../../pep-0648.rst:428
msgid ""
"We considered extending the use of entry points to allow specifying files"
" that should be executed at startup but we discarded that solution due to"
" two main reasons. The first one being impact on startup time. This "
"approach will require scanning all packages distribution information to "
"just execute a handful of files.  This has an impact on performance even "
"if the user is not using the feature and such impact growths linearly "
"with the number of packages installed in the environment.  The second "
"reason was that the proposed implementation in this PEP offers a single "
"solution for startup customization for packages and system "
"administrators.  Additionally, if the main objective of entry points is "
"to make it easy for libraries to install files at startup, that can still"
" be added and make the build backends just install the files within the "
"``__sitecustomize__`` directory."
msgstr ""

#: ../../pep-0648.rst:442
msgid "Copyright"
msgstr ""

#: ../../pep-0648.rst:444
msgid ""
"This document is placed in the public domain or under the "
"CC0-1.0-Universal license, whichever is more permissive."
msgstr ""

#: ../../pep-0648.rst:448
msgid "Acknowledgements"
msgstr ""

#: ../../pep-0648.rst:450
msgid ""
"Thanks Pablo Galindo for contributing to this PEP and offering his PC to "
"run the benchmark."
msgstr ""

#: ../../pep-0648.rst:454
msgid "References"
msgstr ""

#: ../../pep-0648.rst:457
msgid "https://bugs.python.org/issue24534"
msgstr ""

#: ../../pep-0648.rst:460
msgid "https://bugs.python.org/issue33944"
msgstr ""

#: ../../pep-0648.rst:463
msgid "https://docs.python.org/3/using/cmdline.html#id3"
msgstr ""

#: ../../pep-0648.rst:466
msgid "https://github.com/pypa/setuptools/blob/b6bbe236ed0689f50b5148f1172510b975687e62/setup.py#L100"
msgstr ""

#: ../../pep-0648.rst:469
msgid ""
"https://github.com/Qix-/better-"
"exceptions/blob/7b417527757d555faedc354c86d3b6fe449200c2/better_exceptions_hook.pth#L1"
msgstr ""

#: ../../pep-0648.rst:472
msgid "https://github.com/mariocj89/cpython/tree/pu/__sitecustomize__"
msgstr ""

#: ../../pep-0648.rst:475
msgid "https://docs.python.org/3/library/site.html"
msgstr ""

#: ../../pep-0648.rst:478
msgid "https://docs.python.org/3/library/site.html?highlight=site#site.getsitepackages"
msgstr ""

#: ../../pep-0648.rst:481
msgid "https://docs.python.org/3/library/site.html?highlight=site#site.getusersitepackages"
msgstr ""

#: ../../pep-0648.rst:484
msgid "https://github.com/python/cpython/blob/5787ba4a45492e232f5470c7d2e93763198e4b22/Lib/site.py#L207"
msgstr ""

#: ../../pep-0648.rst:487
msgid "https://docs.python.org/3/library/functions.html#exec"
msgstr ""

#: ../../pep-0648.rst:490
msgid "https://docs.python.org/3/library/sys.html#sys.audit"
msgstr ""

