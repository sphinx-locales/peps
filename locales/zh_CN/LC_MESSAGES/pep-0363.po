# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0363.txt
msgid "PEP"
msgstr ""

#: ../../pep-0363.txt:1
msgid "363"
msgstr ""

#: ../../pep-0363.txt
msgid "Title"
msgstr ""

#: ../../pep-0363.txt:2
msgid "Syntax For Dynamic Attribute Access"
msgstr ""

#: ../../pep-0363.txt
msgid "Author"
msgstr ""

#: ../../pep-0363.txt:5
msgid "Ben North <ben@redfrontdoor.org>"
msgstr ""

#: ../../pep-0363.txt
msgid "Status"
msgstr ""

#: ../../pep-0363.txt:6
msgid "Rejected"
msgstr ""

#: ../../pep-0363.txt
msgid "Type"
msgstr ""

#: ../../pep-0363.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0363.txt
msgid "Created"
msgstr ""

#: ../../pep-0363.txt:9
msgid "29-Jan-2007"
msgstr ""

#: ../../pep-0363.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0363.txt:10
msgid "12-Feb-2007"
msgstr ""

#: ../../pep-0363.txt:14
msgid "Abstract"
msgstr ""

#: ../../pep-0363.txt:16
msgid ""
"Dynamic attribute access is currently possible using the \"getattr\" and "
"\"setattr\" builtins.  The present PEP suggests a new syntax to make such"
" access easier, allowing the coder for example to write::"
msgstr ""

#: ../../pep-0363.txt:24
msgid "instead of::"
msgstr ""

#: ../../pep-0363.txt:33
msgid "Rationale"
msgstr ""

#: ../../pep-0363.txt:35
msgid ""
"Dictionary access and indexing both have a friendly invocation syntax: "
"instead of ``x.__getitem__(12)`` the coder can write ``x[12]``. This also"
" allows the use of subscripted elements in an augmented assignment, as in"
" \"x[12] += 1\".  The present proposal brings this ease-of-use to dynamic"
" attribute access too."
msgstr ""

#: ../../pep-0363.txt:41
msgid "Attribute access is currently possible in two ways:"
msgstr ""

#: ../../pep-0363.txt:43
msgid ""
"When the attribute name is known at code-writing time, the \".NAME\" "
"trailer can be used, as in::"
msgstr ""

#: ../../pep-0363.txt:49
msgid ""
"When the attribute name is computed dynamically at run-time, the "
"\"getattr\" and \"setattr\" builtins must be used::"
msgstr ""

#: ../../pep-0363.txt:55
msgid ""
"The \"getattr\" builtin also allows the coder to specify a default value "
"to be returned in the event that the object does not have an attribute of"
" the given name::"
msgstr ""

#: ../../pep-0363.txt:61
msgid ""
"This PEP describes a new syntax for dynamic attribute access --- "
"\"x.(expr)\" --- with examples given in the Abstract above."
msgstr ""

#: ../../pep-0363.txt:64
msgid ""
"(The new syntax could also allow the provision of a default value in the "
"\"get\" case, as in::"
msgstr ""

#: ../../pep-0363.txt:69
msgid ""
"This 2-argument form of dynamic attribute access would not be permitted "
"as the target of an (augmented or normal) assignment.  The \"Discussion\""
" section below includes opinions specifically on the 2-argument "
"extension.)"
msgstr ""

#: ../../pep-0363.txt:74
msgid "Finally, the new syntax can be used with the \"del\" statement, as in::"
msgstr ""

#: ../../pep-0363.txt:80
msgid "Impact On Existing Code"
msgstr ""

#: ../../pep-0363.txt:82
msgid ""
"The proposed new syntax is not currently valid, so no existing well-"
"formed programs have their meaning altered by this proposal."
msgstr ""

#: ../../pep-0363.txt:85
msgid ""
"Across all \"\\*.py\" files in the 2.5 distribution, there are around 600"
" uses of \"getattr\", \"setattr\" or \"delattr\".  They break down as "
"follows (figures have some room for error because they were arrived at by"
" partially-manual inspection)::"
msgstr ""

#: ../../pep-0363.txt:119
msgid "As examples, the line::"
msgstr ""

#: ../../pep-0363.txt:123
msgid "from Lib/distutils/command/install.py could be rewritten::"
msgstr ""

#: ../../pep-0363.txt:127
msgid "and the line::"
msgstr ""

#: ../../pep-0363.txt:131
msgid "from Lib/distutils/dist.py could be rewritten::"
msgstr ""

#: ../../pep-0363.txt:137
msgid "Performance Impact"
msgstr ""

#: ../../pep-0363.txt:139
#, python-format
msgid ""
"Initial pystone measurements are inconclusive, but suggest there may be a"
" performance penalty of around 1% in the pystones score with the patched "
"version.  One suggestion is that this is because the longer main loop in "
"ceval.c hurts the cache behaviour, but this has not been confirmed."
msgstr ""

#: ../../pep-0363.txt:145
#, python-format
msgid ""
"On the other hand, measurements suggest a speed-up of around 40--45% for "
"dynamic attribute access."
msgstr ""

#: ../../pep-0363.txt:150
msgid "Error Cases"
msgstr ""

#: ../../pep-0363.txt:152
msgid ""
"Only strings are permitted as attribute names, so for instance the "
"following error is produced::"
msgstr ""

#: ../../pep-0363.txt:160
msgid "This is handled by the existing ``PyObject_GetAttr`` function."
msgstr ""

#: ../../pep-0363.txt:164
msgid "Draft Implementation"
msgstr ""

#: ../../pep-0363.txt:166
msgid ""
"A draft implementation adds a new alternative to the \"trailer\" clause "
"in Grammar/Grammar; a new AST type, \"DynamicAttribute\" in Python.asdl, "
"with accompanying changes to symtable.c, ast.c, and compile.c, and three "
"new opcodes (load/store/del) with accompanying changes to opcode.h and "
"ceval.c.  The patch consists of c.180 additional lines in the core code, "
"and c.100 additional lines of tests.  It is available as sourceforge "
"patch #1657573 [1]_."
msgstr ""

#: ../../pep-0363.txt:176
msgid "Mailing Lists Discussion"
msgstr ""

#: ../../pep-0363.txt:178
msgid ""
"Initial posting of this PEP in draft form was to python-ideas on 20070209"
" [2]_, and the response was generally positive.  The PEP was then posted "
"to python-dev on 20070212 [3]_, and an interesting discussion ensued.  A "
"brief summary:"
msgstr ""

#: ../../pep-0363.txt:183
msgid ""
"Initially, there was reasonable (but not unanimous) support for the idea,"
" although the precise choice of syntax had a more mixed reception.  "
"Several people thought the \".\" would be too easily overlooked, with the"
" result that the syntax could be confused with a method/function call.  A"
" few alternative syntaxes were suggested::"
msgstr ""

#: ../../pep-0363.txt:199
msgid ""
"with \"obj.[foo]\" emerging as the preferred one.  In this initial "
"discussion, the two-argument form was universally disliked, so it was to "
"be taken out of the PEP."
msgstr ""

#: ../../pep-0363.txt:203
msgid ""
"Discussion then took a step back to whether this particular feature "
"provided enough benefit to justify new syntax.  As well as requiring "
"coders to become familiar with the new syntax, there would also be the "
"problem of backward compatibility --- code using the new syntax would not"
" run on older pythons."
msgstr ""

#: ../../pep-0363.txt:209
msgid ""
"Instead of new syntax, a new \"wrapper class\" was proposed, with the "
"following specification / conceptual implementation suggested by Martin "
"von LÃ¶wis::"
msgstr ""

#: ../../pep-0363.txt:225
msgid ""
"This was considered a cleaner and more elegant solution to the original "
"problem.  (Another suggestion was a mixin class providing dictionary-"
"style access to an object's attributes.)"
msgstr ""

#: ../../pep-0363.txt:229
msgid ""
"The decision was made that the present PEP did not meet the burden of "
"proof for the introduction of new syntax, a view which had been put "
"forward by some from the beginning of the discussion.  The wrapper class "
"idea was left open as a possibility for a future PEP."
msgstr ""

#: ../../pep-0363.txt:236
msgid "References"
msgstr ""

#: ../../pep-0363.txt:238
msgid ""
"Sourceforge patch #1657573 "
"http://sourceforge.net/tracker/index.php?func=detail&aid=1657573&group_id=5470&atid=305470"
msgstr ""

#: ../../pep-0363.txt:241
msgid ""
"https://mail.python.org/pipermail/python-ideas/2007-February/000210.html "
"and following posts"
msgstr ""

#: ../../pep-0363.txt:244
msgid ""
"https://mail.python.org/pipermail/python-dev/2007-February/070939.html "
"and following posts"
msgstr ""

#: ../../pep-0363.txt:249
msgid "Copyright"
msgstr ""

#: ../../pep-0363.txt:251
msgid "This document has been placed in the public domain."
msgstr ""

