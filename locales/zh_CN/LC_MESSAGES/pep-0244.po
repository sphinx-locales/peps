# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0244.txt
msgid "PEP"
msgstr ""

#: ../../pep-0244.txt:1
msgid "244"
msgstr ""

#: ../../pep-0244.txt
msgid "Title"
msgstr ""

#: ../../pep-0244.txt:2
msgid "The ``directive`` statement"
msgstr ""

#: ../../pep-0244.txt
msgid "Author"
msgstr ""

#: ../../pep-0244.txt:5
msgid "martin@v.loewis.de (Martin von LÃ¶wis)"
msgstr ""

#: ../../pep-0244.txt
msgid "Status"
msgstr ""

#: ../../pep-0244.txt:6
msgid "Rejected"
msgstr ""

#: ../../pep-0244.txt
msgid "Type"
msgstr ""

#: ../../pep-0244.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0244.txt
msgid "Created"
msgstr ""

#: ../../pep-0244.txt:9
msgid "20-Mar-2001"
msgstr ""

#: ../../pep-0244.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0244.txt:10
msgid "2.1"
msgstr ""

#: ../../pep-0244.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0244.txt:15
msgid "Motivation"
msgstr ""

#: ../../pep-0244.txt:17
msgid ""
"From time to time, Python makes an incompatible change to the advertised "
"semantics of core language constructs, or changes their accidental "
"(implementation-dependent) behavior in some way.  While this is never "
"done capriciously, and is always done with the aim of improving the "
"language over the long term, over the short term it's contentious and "
"disrupting."
msgstr ""

#: ../../pep-0244.txt:24
msgid ""
"PEP 1, Guidelines for Language Evolution [1]_ suggests ways to ease the "
"pain, and this PEP introduces some machinery in support of that."
msgstr ""

#: ../../pep-0244.txt:28
msgid ""
"PEP 2, Statically Nested Scopes [2]_ is the first application, and will "
"be used as an example here."
msgstr ""

#: ../../pep-0244.txt:31
msgid ""
"When a new, potentially incompatible language feature is added, some "
"modules and libraries may chose to use it, while others may not.  This "
"specification introduces a syntax where a module author can denote "
"whether a certain language feature is used in the module or not."
msgstr ""

#: ../../pep-0244.txt:37
msgid ""
"In discussion of this PEP, readers commented that there are two kinds of "
"\"settable\" language features:"
msgstr ""

#: ../../pep-0244.txt:40
msgid ""
"those that are designed to eventually become the only option, at which "
"time specifying use of them is not necessary anymore.  The features for "
"which the syntax of the \"Back to the ``__future__``\" PEP 236, Back to "
"the ``__future__`` [3]_ was proposed fall into this category.  This PEP "
"supports declaring such features, and supports phasing out the \"old\" "
"meaning of constructs whose semantics has changed under the new feature."
"  However, it defines no policy as to what features must be phased out "
"eventually."
msgstr ""

#: ../../pep-0244.txt:50
msgid ""
"those which are designed to stay optional forever, e.g. if they change "
"some default setting in the interpreter.  An example for such settings "
"might be the request to always emit line-number instructions for a "
"certain module; no specific flags of that kind are proposed in this "
"specification."
msgstr ""

#: ../../pep-0244.txt:56
msgid ""
"Since a primary goal of this PEP is to support new language constructs "
"without immediately breaking old libraries, special care was taken not to"
" break old libraries by introducing the new syntax."
msgstr ""

#: ../../pep-0244.txt:63
msgid "Syntax"
msgstr ""

#: ../../pep-0244.txt:65
msgid "A directive_statement is a statement of the form::"
msgstr ""

#: ../../pep-0244.txt:69
msgid ""
"The name in the directive indicates the kind of the directive; it defines"
" whether the optional atom can be present, and whether there are further "
"syntactical or semantical restrictions to the atom.  In addition, "
"depending on the name of the directive, certain additional syntactical or"
" semantical restrictions may be placed on the directive (e.g. placement "
"of the directive in the module may be restricted to the top of the "
"module)."
msgstr ""

#: ../../pep-0244.txt:77
msgid ""
"In the directive_statement, ``directive`` is a new keyword. According to "
"[1]_, this keyword is initially considered as a keyword only when used in"
" a directive statement, see \"Backwards Compatibility\" below."
msgstr ""

#: ../../pep-0244.txt:84
msgid "Semantics"
msgstr ""

#: ../../pep-0244.txt:86
msgid ""
"A directive statement instructs the Python interpreter to process a "
"source file in a different way; the specific details of that processing "
"depend on the directive name.  The optional atom is typically interpreted"
" when the source code is processed; details of that interpretation depend"
" on the directive."
msgstr ""

#: ../../pep-0244.txt:94
msgid "Specific Directives: transitional"
msgstr ""

#: ../../pep-0244.txt:96
msgid ""
"If a syntactical or semantical change is added to Python which is "
"incompatible, [1]_ mandates a transitional evolution of the language, "
"where the new feature is initially available alongside with the old one."
"  Such a transition is possible by means of the transitional directive."
msgstr ""

#: ../../pep-0244.txt:102
msgid ""
"In a transitional directive, the ``NAME`` is 'transitional'. The atom "
"MUST be present, and it MUST be a ``NAME``.  The possible values for that"
" name are defined when the language change is defined.  One example for "
"such a directive is::"
msgstr ""

#: ../../pep-0244.txt:109
msgid ""
"The transitional directive MUST occur at before any other statement in a "
"module, except for the documentation string (i.e. it may appear as the "
"second statement of a module only if the first statement is a "
"``STRING+``)."
msgstr ""

#: ../../pep-0244.txt:116
msgid "Backwards Compatibility"
msgstr ""

#: ../../pep-0244.txt:118
msgid ""
"Introducing ``directive`` as a new keyword might cause incompatibilities "
"with existing code.  Following the guideline in [1]_, in the initial "
"implementation of this specification, directive is a new keyword only if "
"it was used in a valid directive_statement (i.e. if it appeared as the "
"first non-string token in a module)."
msgstr ""

#: ../../pep-0244.txt:127
msgid "Unresolved Problems:  directive as the first identifier"
msgstr ""

#: ../../pep-0244.txt:129
msgid "Using directive in a module as::"
msgstr ""

#: ../../pep-0244.txt:133
msgid ""
"(i.e. the name directive appears as the first thing in a module) will "
"treat it as keyword, not as identifier. It would be possible to classify "
"it as a ``NAME`` with an additional look-ahead token, but such look-ahead"
" is not available in the Python tokenizer."
msgstr ""

#: ../../pep-0244.txt:140
msgid "Questions and Answers"
msgstr ""

#: ../../pep-0244.txt:142
msgid ""
"**Q:** It looks like this PEP was written to allow definition of source "
"code character sets.  Is that true?"
msgstr ""

#: ../../pep-0244.txt:145
msgid ""
"**A:** No.  Even though the directive facility can be extended to allow "
"source code encodings, no specific directive is proposed."
msgstr ""

#: ../../pep-0244.txt:148
msgid "**Q:** Then why was this PEP written at all?"
msgstr ""

#: ../../pep-0244.txt:150
msgid ""
"**A:** It acts as a counter-proposal to [3]_, which proposes to overload "
"the import statement with a new meaning.  This PEP allows to solve the "
"problem in a more general way."
msgstr ""

#: ../../pep-0244.txt:154
msgid ""
"**Q:** But isn't mixing source encodings and language changes like mixing"
" apples and oranges?"
msgstr ""

#: ../../pep-0244.txt:157
msgid ""
"**A:** Perhaps.  To address the difference, the predefined "
"\"transitional\" directive has been defined."
msgstr ""

#: ../../pep-0244.txt:162
msgid "References and Footnotes"
msgstr ""

#: ../../pep-0244.txt:164
msgid ""
"PEP 5, Guidelines for Language Evolution, Prescod "
"http://www.python.org/dev/peps/pep-0005/"
msgstr ""

#: ../../pep-0244.txt:167
msgid ""
"PEP 227, Statically Nested Scopes, Hylton "
"http://www.python.org/dev/peps/pep-0227/"
msgstr ""

#: ../../pep-0244.txt:170
msgid ""
"PEP 236, Back to the ``__future__``, Peters "
"http://www.python.org/dev/peps/pep-0236/"
msgstr ""

#: ../../pep-0244.txt:175
msgid "Copyright"
msgstr ""

#: ../../pep-0244.txt:177
msgid "This document has been placed in the public domain."
msgstr ""

