# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0578.rst
msgid "PEP"
msgstr ""

#: ../../pep-0578.rst:1
msgid "578"
msgstr ""

#: ../../pep-0578.rst
msgid "Title"
msgstr ""

#: ../../pep-0578.rst:2
msgid "Python Runtime Audit Hooks"
msgstr ""

#: ../../pep-0578.rst
msgid "Author"
msgstr ""

#: ../../pep-0578.rst:5
msgid "Steve Dower <steve.dower@python.org>"
msgstr ""

#: ../../pep-0578.rst
msgid "BDFL-Delegate"
msgstr ""

#: ../../pep-0578.rst:6
msgid "Christian Heimes <christian@python.org>"
msgstr ""

#: ../../pep-0578.rst
msgid "Status"
msgstr ""

#: ../../pep-0578.rst:7
msgid "Accepted"
msgstr ""

#: ../../pep-0578.rst
msgid "Type"
msgstr ""

#: ../../pep-0578.rst:8
msgid "Standards Track"
msgstr ""

#: ../../pep-0578.rst
msgid "Created"
msgstr ""

#: ../../pep-0578.rst:10
msgid "16-Jun-2018"
msgstr ""

#: ../../pep-0578.rst
msgid "Python-Version"
msgstr ""

#: ../../pep-0578.rst:11
msgid "3.8"
msgstr ""

#: ../../pep-0578.rst
msgid "Post-History"
msgstr ""

#: ../../pep-0578.rst:12
msgid "28-March-2019, 07-May-2019"
msgstr ""

#: ../../pep-0578.rst:15
msgid "Abstract"
msgstr ""

#: ../../pep-0578.rst:17
msgid ""
"This PEP describes additions to the Python API and specific behaviors for"
" the CPython implementation that make actions taken by the Python runtime"
" visible to auditing tools. Visibility into these actions provides "
"opportunities for test frameworks, logging frameworks, and security tools"
" to monitor and optionally limit actions taken by the runtime."
msgstr ""

#: ../../pep-0578.rst:24
msgid ""
"This PEP proposes adding two APIs to provide insights into a running "
"Python application: one for arbitrary events, and another specific to the"
" module import system. The APIs are intended to be available in all "
"Python implementations, though the specific messages and values used are "
"unspecified here to allow implementations the freedom to determine how "
"best to provide information to their users. Some examples likely to be "
"used in CPython are provided for explanatory purposes."
msgstr ""

#: ../../pep-0578.rst:32
msgid ""
"See PEP 551 for discussion and recommendations on enhancing the security "
"of a Python runtime making use of these auditing APIs."
msgstr ""

#: ../../pep-0578.rst:36
msgid "Background"
msgstr ""

#: ../../pep-0578.rst:38
msgid ""
"Python provides access to a wide range of low-level functionality on many"
" common operating systems. While this is incredibly useful for \"write-"
"once, run-anywhere\" scripting, it also makes monitoring of software "
"written in Python difficult. Because Python uses native system APIs "
"directly, existing monitoring tools either suffer from limited context or"
" auditing bypass."
msgstr ""

#: ../../pep-0578.rst:45
msgid ""
"Limited context occurs when system monitoring can report that an action "
"occurred, but cannot explain the sequence of events leading to it. For "
"example, network monitoring at the OS level may be able to report "
"\"listening started on port 5678\", but may not be able to provide the "
"process ID, command line, parent process, or the local state in the "
"program at the point that triggered the action. Firewall controls to "
"prevent such an action are similarly limited, typically to process names "
"or some global state such as the current user, and in any case rarely "
"provide a useful log file correlated with other application messages."
msgstr ""

#: ../../pep-0578.rst:56
msgid ""
"Auditing bypass can occur when the typical system tool used for an action"
" would ordinarily report its use, but accessing the APIs via Python do "
"not trigger this. For example, invoking \"curl\" to make HTTP requests "
"may be specifically monitored in an audited system, but Python's "
"\"urlretrieve\" function is not."
msgstr ""

#: ../../pep-0578.rst:62
msgid ""
"Within a long-running Python application, particularly one that processes"
" user-provided information such as a web app, there is a risk of "
"unexpected behavior. This may be due to bugs in the code, or deliberately"
" induced by a malicious user. In both cases, normal application logging "
"may be bypassed resulting in no indication that anything out of the "
"ordinary has occurred."
msgstr ""

#: ../../pep-0578.rst:69
msgid ""
"Additionally, and somewhat unique to Python, it is very easy to affect "
"the code that is run in an application by manipulating either the import "
"system's search path or placing files earlier on the path than intended. "
"This is often seen when developers create a script with the same name as "
"the module they intend to use - for example, a ``random.py`` file that "
"attempts to import the standard library ``random`` module."
msgstr ""

#: ../../pep-0578.rst:77
msgid ""
"This is not sandboxing, as this proposal does not attempt to prevent "
"malicious behavior (though it enables some new options to do so). See the"
" `Why Not A Sandbox`_ section below for further discussion."
msgstr ""

#: ../../pep-0578.rst:82
msgid "Overview of Changes"
msgstr ""

#: ../../pep-0578.rst:84
msgid ""
"The aim of these changes is to enable both application developers and "
"system administrators to integrate Python into their existing monitoring "
"systems without dictating how those systems look or behave."
msgstr ""

#: ../../pep-0578.rst:88
msgid ""
"We propose two API changes to enable this: an Audit HookÂ and Verified "
"Open Hook. Both are available from Python and native code, allowing "
"applications and frameworks written in pure Python code to take advantage"
" of the extra messages, while also allowing embedders or system "
"administrators to deploy builds of Python where auditing is always "
"enabled."
msgstr ""

#: ../../pep-0578.rst:95
msgid ""
"Only CPython is bound to provide the native APIs as described here. Other"
" implementations should provide the pure Python APIs, and may provide "
"native versions as appropriate for their underlying runtimes. Auditing "
"events are likewise considered implementation specific, but are bound by "
"normal feature compatibility guarantees."
msgstr ""

#: ../../pep-0578.rst:102
msgid "Audit Hook"
msgstr ""

#: ../../pep-0578.rst:104
msgid ""
"In order to observe actions taken by the runtime (on behalf of the "
"caller), an API is required to raise messages from within certain "
"operations. These operations are typically deep within the Python runtime"
" or standard library, such as dynamic code compilation, module imports, "
"DNS resolution, or use of certain modules such as ``ctypes``."
msgstr ""

#: ../../pep-0578.rst:110
msgid ""
"The following new C APIs allow embedders and CPython implementors to send"
" and receive audit hook messages::"
msgstr ""

#: ../../pep-0578.rst:121
msgid "The new Python APIs for receiving and raising audit hooks are::"
msgstr ""

#: ../../pep-0578.rst:130
msgid ""
"Hooks are added by calling ``PySys_AddAuditHook()`` from C at any time, "
"including before ``Py_Initialize()``, or by calling "
"``sys.addaudithook()`` from Python code. Hooks cannot be removed or "
"replaced. For CPython, hooks added from C are global, while hooks added "
"from Python are only for the current interpreter. Global hooks are "
"executed before interpreter hooks."
msgstr ""

#: ../../pep-0578.rst:137
msgid ""
"When events of interest are occurring, code can either call "
"``PySys_Audit()`` from C (while the GIL is held) or ``sys.audit()``. The "
"string argument is the name of the event, and the tuple contains "
"arguments. A given event name should have a fixed schema for arguments, "
"which should be considered a public API (for each x.y version release), "
"and thus should only change between feature releases with updated "
"documentation. To minimize overhead and simplify handling in native code "
"hook implementations, named arguments are not supported."
msgstr ""

#: ../../pep-0578.rst:146
msgid ""
"For maximum compatibility, events using the same name as an event in the "
"reference interpreter CPython should make every attempt to use compatible"
" arguments. Including the name or an abbreviation of the implementation "
"in implementation-specific event names will also help prevent collisions."
" For example, a ``pypy.jit_invoked`` event is clearly distinguished from "
"an ``ipy.jit_invoked`` event. Events raised from Python modules should "
"include their module or package name in the event name."
msgstr ""

#: ../../pep-0578.rst:155
msgid ""
"While event names may be arbitrary UTF-8 strings, for consistency across "
"implementations it is recommended to use valid Python dotted names and "
"avoid encoding specific details in the name. For example, an ``import`` "
"event with the module name ``spam`` as an argument is preferable to a "
"``spam module imported`` event with no arguments. Avoid using embedded "
"null characters or you may upset those who implement hooks using C."
msgstr ""

#: ../../pep-0578.rst:162
msgid ""
"When an event is audited, each hook is called in the order it was added "
"(as much as is possible), passing the event name and arguments. If any "
"hook returns with an exception set, later hooks are ignored and *in "
"general* the Python runtime should terminate - exceptions from hooks are "
"not intended to be handled or treated as expected occurrences. This "
"allows hook implementations to decide how to respond to any particular "
"event. The typical responses will be to log the event, abort the "
"operation with an exception, or to immediately terminate the process with"
" an operating system exit call."
msgstr ""

#: ../../pep-0578.rst:172
msgid ""
"When an event is audited but no hooks have been set, the ``audit()`` "
"function should impose minimal overhead. Ideally, each argument is a "
"reference to existing data rather than a value calculated just for the "
"auditing call."
msgstr ""

#: ../../pep-0578.rst:177
msgid ""
"As hooks may be Python objects, they need to be freed during interpreter "
"or runtime finalization. These should not be triggered at any other time,"
" and should raise an event hook to ensure that any unexpected calls are "
"observed."
msgstr ""

#: ../../pep-0578.rst:182
msgid ""
"Below in `Suggested Audit Hook Locations`_, we recommend some important "
"operations that should raise audit events. In general, events should be "
"raised at the lowest possible level. Given the choice between raising an "
"event from Python code or native code, raising from native code should be"
" preferred."
msgstr ""

#: ../../pep-0578.rst:188
msgid ""
"Python implementations should document which operations will raise audit "
"events, along with the event schema. It is intentional that "
"``sys.addaudithook(print)`` is a trivial way to display all messages."
msgstr ""

#: ../../pep-0578.rst:193
msgid "Verified Open Hook"
msgstr ""

#: ../../pep-0578.rst:195
msgid ""
"Most operating systems have a mechanism to distinguish between files that"
" can be executed and those that can not. For example, this may be an "
"execute bit in the permissions field, a verified hash of the file "
"contents to detect potential code tampering, or file system path "
"restrictions. These are an important security mechanism for ensuring that"
" only code that has been approved for a given environment is executed."
msgstr ""

#: ../../pep-0578.rst:203
msgid ""
"Most kernels offer ways to restrict or audit binaries loaded and executed"
" by the kernel. File types owned by Python appear as regular data and "
"these features do not apply. This open hook allows Python embedders to "
"integrate with operating system support when launching scripts or "
"importing Python code."
msgstr ""

#: ../../pep-0578.rst:209
msgid "The new public C API for the verified open hook is::"
msgstr ""

#: ../../pep-0578.rst:218
msgid "The new public Python API for the verified open hook is::"
msgstr ""

#: ../../pep-0578.rst:224
msgid ""
"The ``io.open_code()`` function is a drop-in replacement for "
"``open(abspath(str(pathlike)), 'rb')``. Its default behaviour is to open "
"a file for raw, binary access. To change the behaviour a new handler "
"should be set. Handler functions only accept ``str`` arguments. The C API"
" ``PyFile_OpenCode`` function assumes UTF-8 encoding. Paths must be "
"absolute, and it is the responsibility of the caller to ensure the full "
"path is correctly resolved."
msgstr ""

#: ../../pep-0578.rst:232
msgid ""
"A custom handler may be set by calling ``PyFile_SetOpenCodeHook()`` from "
"C at any time, including before ``Py_Initialize()``. However, if a hook "
"has already been set then the call will fail. When ``open_code()`` is "
"called with a hook set, the hook will be passed the path and its return "
"value will be returned directly. The returned object should be an open "
"file-like object that supports reading raw bytes. This is explicitly "
"intended to allow a ``BytesIO`` instance if the open handler has already "
"read the entire file into memory."
msgstr ""

#: ../../pep-0578.rst:241
msgid ""
"Note that these hooks can import and call the ``_io.open()`` function on "
"CPython without triggering themselves. They can also use ``_io.BytesIO`` "
"to return a compatible result using an in-memory buffer."
msgstr ""

#: ../../pep-0578.rst:245
msgid ""
"If the hook determines that the file should not be loaded, it should "
"raise an exception of its choice, as well as performing any other "
"logging."
msgstr ""

#: ../../pep-0578.rst:249
msgid ""
"All import and execution functionality involving code from a file will be"
" changed to use ``open_code()`` unconditionally. It is important to note "
"that calls to ``compile()``, ``exec()`` and ``eval()`` do not go through "
"this function - an audit hook that includes the code from these calls is "
"the best opportunity to validate code that is read from the file. Given "
"the current decoupling between import and execution in Python, most "
"imported code will go through both ``open_code()`` and the log hook for "
"``compile``, and so care should be taken to avoid repeating verification "
"steps."
msgstr ""

#: ../../pep-0578.rst:259
msgid ""
"File accesses that are not intentionally planning to execute code are not"
" expected to use this function. This includes loading pickles, XML or "
"YAML files, where code execution is generally considered malicious rather"
" than intentional. These operations should provide their own auditing "
"events, preferably distinguishing between normal functionality (for "
"example, ``Unpickler.load``) and code execution "
"(``Unpickler.find_class``)."
msgstr ""

#: ../../pep-0578.rst:267
msgid ""
"A few examples: if the file type normally requires an execute bit (on "
"POSIX) or would warn when marked as having been downloaded from the "
"internet (on Windows), it should probably use ``open_code()`` rather than"
" plain ``open()``. Opening ZIP files using the ``ZipFile`` class should "
"use ``open()``, while opening them via ``zipimport`` should use "
"``open_code()`` to signal the correct intent. Code that uses the wrong "
"function for a particular context may bypass the hook, which in CPython "
"and the standard library should be considered a bug. Using a combination "
"of ``open_code`` hooks and auditing hooks is necessary to trace all "
"executed sources in the presence of arbitrary code."
msgstr ""

#: ../../pep-0578.rst:278
msgid ""
"There is no Python API provided for changing the open hook. To modify "
"import behavior from Python code, use the existing functionality provided"
" by ``importlib``."
msgstr ""

#: ../../pep-0578.rst:283
msgid "API Availability"
msgstr ""

#: ../../pep-0578.rst:285
msgid ""
"While all the functions added here are considered public and stable API, "
"the behavior of the functions is implementation specific. Most "
"descriptions here referÂ to the CPythonÂ implementation, and while other "
"implementations should provide the functions, there is no requirement "
"that they behave the same."
msgstr ""

#: ../../pep-0578.rst:291
msgid ""
"For example, ``sys.addaudithook()`` and ``sys.audit()`` should exist but "
"may do nothing. This allows code to make calls to ``sys.audit()`` without"
" having to test for existence, but it should not assume that its call "
"will have any effect. (Including existence tests in security-critical "
"code allows another vector to bypass auditing, so it is preferable that "
"the function always exist.)"
msgstr ""

#: ../../pep-0578.rst:298
msgid ""
"``io.open_code(path)`` should at a minimum always return ``_io.open(path,"
" 'rb')``. Code using the function should make no further assumptions "
"about what may occur, and implementations other than CPython are not "
"required to let developers override the behavior of this function with a "
"hook."
msgstr ""

#: ../../pep-0578.rst:305
msgid "Suggested Audit Hook Locations"
msgstr ""

#: ../../pep-0578.rst:307
msgid ""
"The locations and parameters in calls to ``sys.audit()`` or "
"``PySys_Audit()`` are to be determined by individual Python "
"implementations. This is to allow maximum freedom for implementations to "
"expose the operations that are most relevant to their platform, and to "
"avoid or ignore potentially expensive or noisy events."
msgstr ""

#: ../../pep-0578.rst:313
msgid ""
"Table 1 acts as both suggestions of operations that should trigger audit "
"events on all implementations, and examples of event schemas."
msgstr ""

#: ../../pep-0578.rst:316
msgid ""
"Table 2 provides further examples that are not required, but are likely "
"to be available in CPython."
msgstr ""

#: ../../pep-0578.rst:319
msgid ""
"Refer to the documentation associated with your version of Python to see "
"which operations provide audit events."
msgstr ""

#: ../../pep-0578.rst:322
msgid "Table 1: Suggested Audit Hooks"
msgstr ""

#: ../../pep-0578.rst:1
msgid "API Function"
msgstr ""

#: ../../pep-0578.rst:1
msgid "Event Name"
msgstr ""

#: ../../pep-0578.rst:1
msgid "Arguments"
msgstr ""

#: ../../pep-0578.rst:1
msgid "Rationale"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``PySys_AddAuditHook``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``sys.addaudithook``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "Detect when new audit hooks are being added."
msgstr ""

#: ../../pep-0578.rst:1
msgid "``PyFile_SetOpenCodeHook``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``cpython.PyFile_SetOpenCodeHook``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "Detects any attempt to set the ``open_code`` hook."
msgstr ""

#: ../../pep-0578.rst:1
msgid ""
"``compile``, ``exec``, ``eval``, ``PyAst_CompileString``, "
"``PyAST_obj2mod``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``compile``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``(code, filename_or_none)``"
msgstr ""

#: ../../pep-0578.rst:2
msgid ""
"Detect dynamic code compilation, where ``code`` could be a string or AST."
" Note that this will be called for regular imports of source code, "
"including those that were opened with ``open_code``."
msgstr ""

#: ../../pep-0578.rst:1
msgid "``exec``, ``eval``, ``run_mod``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``exec``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``(code_object,)``"
msgstr ""

#: ../../pep-0578.rst:2
msgid ""
"Detect dynamic execution of code objects. This only occurs for explicit "
"calls, and is not raised for normal function invocation."
msgstr ""

#: ../../pep-0578.rst:1
msgid "``import``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``(module, filename, sys.path, sys.meta_path, sys.path_hooks)``"
msgstr ""

#: ../../pep-0578.rst:1
msgid ""
"Detect when modules are imported. This is raised before the module name "
"is resolved to a file. All arguments other than the module name may be "
"``None`` if they are not used or available."
msgstr ""

#: ../../pep-0578.rst:1
msgid "``open``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``io.open``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``(path, mode, flags)``"
msgstr ""

#: ../../pep-0578.rst:1
msgid ""
"Detect when a file is about to be opened. *path* and *mode* are the usual"
" parameters to ``open`` if available, while *flags* is provided instead "
"of *mode* in some cases."
msgstr ""

#: ../../pep-0578.rst:1
msgid "``PyEval_SetProfile``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``sys.setprofile``"
msgstr ""

#: ../../pep-0578.rst:1
msgid ""
"Detect when code is injecting trace functions. Because of the "
"implementation, exceptions raised from the hook will abort the operation,"
" but will not be raised in Python code. Note that "
"``threading.setprofile`` eventually calls this function, so the event "
"will be audited for each thread."
msgstr ""

#: ../../pep-0578.rst:1
msgid "``PyEval_SetTrace``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``sys.settrace``"
msgstr ""

#: ../../pep-0578.rst:1
msgid ""
"Detect when code is injecting trace functions. Because of the "
"implementation, exceptions raised from the hook will abort the operation,"
" but will not be raised in Python code. Note that ``threading.settrace`` "
"eventually calls this function, so the event will be audited for each "
"thread."
msgstr ""

#: ../../pep-0578.rst:1
msgid ""
"``_PyObject_GenericSetAttr``, ``check_set_special_type_attr``, "
"``object_set_class``, ``func_set_code``, ``func_set_[kw]defaults``"
msgstr ""

#: ../../pep-0578.rst:2
msgid "``object.__setattr__``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``(object, attr, value)``"
msgstr ""

#: ../../pep-0578.rst:1
msgid ""
"Detect monkey patching of types and objects. This event is raised for the"
" ``__class__`` attribute and any attribute on ``type`` objects."
msgstr ""

#: ../../pep-0578.rst:1
msgid "``_PyObject_GenericSetAttr``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``object.__delattr__``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``(object, attr)``"
msgstr ""

#: ../../pep-0578.rst:1
msgid ""
"Detect deletion of object attributes. This event is raised for any "
"attribute on ``type`` objects."
msgstr ""

#: ../../pep-0578.rst:1
msgid "``Unpickler.find_class``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``pickle.find_class``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``(module_name, global_name)``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "Detect imports and global name lookup when unpickling."
msgstr ""

#: ../../pep-0578.rst:382
msgid "Table 2: Potential CPython Audit Hooks"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``_PySys_ClearAuditHooks``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``sys._clearaudithooks``"
msgstr ""

#: ../../pep-0578.rst:1
msgid ""
"Notifies hooks they are being cleaned up, mainly in case the event is "
"triggered unexpectedly. This event cannot be aborted."
msgstr ""

#: ../../pep-0578.rst:1
msgid "``code_new``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``code.__new__``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``(bytecode, filename, name)``"
msgstr ""

#: ../../pep-0578.rst:2
msgid ""
"Detect dynamic creation of code objects. This only occurs for direct "
"instantiation, and is not raised for normal compilation."
msgstr ""

#: ../../pep-0578.rst:1
msgid "``func_new_impl``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``function.__new__``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``(code,)``"
msgstr ""

#: ../../pep-0578.rst:1
msgid ""
"Detect dynamic creation of function objects. This only occurs for direct "
"instantiation, and is not raised for normal compilation."
msgstr ""

#: ../../pep-0578.rst:1
msgid "``_ctypes.dlopen``, ``_ctypes.LoadLibrary``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``ctypes.dlopen``"
msgstr ""

#: ../../pep-0578.rst:2
msgid "``(module_or_path,)``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "Detect when native modules are used."
msgstr ""

#: ../../pep-0578.rst:1
msgid "``_ctypes._FuncPtr``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``ctypes.dlsym``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``(lib_object, name)``"
msgstr ""

#: ../../pep-0578.rst:2
msgid "Collect information about specific symbols retrieved from native modules."
msgstr ""

#: ../../pep-0578.rst:1
msgid "``_ctypes._CData``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``ctypes.cdata``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``(ptr_as_int,)``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "Detect when code is accessing arbitrary memory using ``ctypes``."
msgstr ""

#: ../../pep-0578.rst:1
msgid "``new_mmap_object``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``mmap.__new__``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``(fileno, map_size, access, offset)``"
msgstr ""

#: ../../pep-0578.rst:1
msgid ""
"Detects creation of mmap objects. On POSIX, access may have been "
"calculated from the ``prot`` and ``flags`` arguments."
msgstr ""

#: ../../pep-0578.rst:1
msgid "``sys._getframe``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``(frame_object,)``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "Detect when code is accessing frames directly."
msgstr ""

#: ../../pep-0578.rst:1
msgid "``sys._current_frames``"
msgstr ""

#: ../../pep-0578.rst:1
msgid ""
"``socket.bind``, ``socket.connect``, ``socket.connect_ex``, "
"``socket.getaddrinfo``, ``socket.getnameinfo``, ``socket.sendmsg``, "
"``socket.sendto``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``socket.address``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``(socket, address,)``"
msgstr ""

#: ../../pep-0578.rst:2
msgid ""
"Detect access to network resources. The address is unmodified from the "
"original call."
msgstr ""

#: ../../pep-0578.rst:1
msgid "``member_get``, ``func_get_code``, ``func_get_[kw]defaults``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``object.__getattr__``"
msgstr ""

#: ../../pep-0578.rst:1
msgid ""
"Detect access to restricted attributes. This event is raised for any "
"built-in members that are marked as restricted, and members that may "
"allow bypassing imports."
msgstr ""

#: ../../pep-0578.rst:1
msgid "``urllib.urlopen``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``urllib.Request``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "``(url, data, headers, method)``"
msgstr ""

#: ../../pep-0578.rst:1
msgid "Detects URL requests."
msgstr ""

#: ../../pep-0578.rst:435
msgid "Performance Impact"
msgstr ""

#: ../../pep-0578.rst:437
msgid ""
"The important performance impact is the case where events are being "
"raised but there are no hooks attached. This is the unavoidable case - "
"once a developer has added audit hooks they have explicitly chosen to "
"trade performance for functionality. Performance impact with hooks added "
"are not of interest here, since this is opt-in functionality."
msgstr ""

#: ../../pep-0578.rst:443
msgid ""
"Analysis using the Python Performance Benchmark Suite [1]_ shows no "
"significant impact, with the vast majority of benchmarks showing between "
"1.05x faster to 1.05x slower."
msgstr ""

#: ../../pep-0578.rst:447
msgid ""
"In our opinion, the performance impact of the set of auditing points "
"described in this PEP is negligible."
msgstr ""

#: ../../pep-0578.rst:451
msgid "Rejected Ideas"
msgstr ""

#: ../../pep-0578.rst:454
msgid "Separate module for audit hooks"
msgstr ""

#: ../../pep-0578.rst:456
msgid ""
"The proposal is to add a new module for audit hooks, hypothetically "
"``audit``. This would separate the API and implementation from the "
"``sys`` module, and allow naming the C functions ``PyAudit_AddHook`` and "
"``PyAudit_Audit`` rather than the current variations."
msgstr ""

#: ../../pep-0578.rst:461
msgid ""
"Any such module would need to be a built-in module that is guaranteed to "
"always be present. The nature of these hooks is that they must be "
"callable without condition, as any conditional imports or calls provide "
"opportunities to intercept and suppress or modify events."
msgstr ""

#: ../../pep-0578.rst:466
msgid ""
"Given it is one of the most core modules, the ``sys`` module is somewhat "
"protected against module shadowing attacks. Replacing ``sys`` with a "
"sufficiently functional module that the application can still run is a "
"much more complicated task than replacing a module with only one function"
" of interest. An attacker that has the ability to shadow the ``sys`` "
"module is already capable of running arbitrary code from files, whereas "
"an ``audit`` module could be replaced with a single line in a ``.pth`` "
"file anywhere on the search path::"
msgstr ""

#: ../../pep-0578.rst:478
msgid ""
"Multiple layers of protection already exist for monkey patching attacks "
"against either ``sys`` or ``audit``, but assignments or insertions to "
"``sys.modules`` are not audited."
msgstr ""

#: ../../pep-0578.rst:482
msgid ""
"This idea is rejected because it makes it trivial to suppress all calls "
"to ``audit``."
msgstr ""

#: ../../pep-0578.rst:486
msgid "Flag in sys.flags to indicate \"audited\" mode"
msgstr ""

#: ../../pep-0578.rst:488
msgid ""
"The proposal is to add a value in ``sys.flags`` to indicate when Python "
"is running in a \"secure\" or \"audited\" mode. This would allow "
"applications to detect when some features are enabled or when hooks have "
"been added and modify their behaviour appropriately."
msgstr ""

#: ../../pep-0578.rst:493
msgid ""
"Currently, we are not aware of any legitimate reasons for a program to "
"behave differently in the presence of audit hooks."
msgstr ""

#: ../../pep-0578.rst:496
msgid ""
"Both application-level APIs ``sys.audit`` and ``io.open_code`` are always"
" present and functional, regardless of whether the regular ``python`` "
"entry point or some alternative entry point is used. Callers cannot "
"determine whether any hooks have been added (except by performing side-"
"channel analysis), nor do they need to. The calls should be fast enough "
"that callers do not need to avoid them, and the program is responsible "
"for ensuring that any added hooks are fast enough to not affect "
"application performance."
msgstr ""

#: ../../pep-0578.rst:505
msgid ""
"The argument that this is \"security by obscurity\" is valid, but "
"irrelevant. Security by obscurity is only an issue when there are no "
"other protective mechanisms; obscurity as the first step in avoiding "
"attack is strongly recommended (see `this article "
"<https://danielmiessler.com/study/security-by-obscurity/>`_ for "
"discussion)."
msgstr ""

#: ../../pep-0578.rst:512
msgid ""
"This idea is rejected because there are no appropriate reasons for an "
"application to change its behaviour based on whether these APIs are in "
"use."
msgstr ""

#: ../../pep-0578.rst:517
msgid "Why Not A Sandbox"
msgstr ""

#: ../../pep-0578.rst:519
msgid ""
"Sandboxing CPython has been attempted many times in the past, and each "
"past attempt has failed. Fundamentally, the problem is that certain "
"functionality has to be restricted when executing the sandboxed code, but"
" otherwise needs to be available for normal operation of Python. For "
"example, completely removing the ability to compile strings into bytecode"
" also breaks the ability to import modules from source code, and if it is"
" not completely removed then there are too many ways to get access to "
"that functionality indirectly. There is not yet any feasible way to "
"generically determine whether a given operation is \"safe\" or not. "
"Further information and references available at [2]_."
msgstr ""

#: ../../pep-0578.rst:530
msgid ""
"This proposal does not attempt to restrict functionality, but simply "
"exposes the fact that the functionality is being used. Particularly for "
"intrusion scenarios, detection is significantly more important than early"
" prevention (as early prevention will generally drive attackers to use an"
" alternate, less-detectable, approach). The availability of audit hooks "
"alone does not change the attack surface of Python in any way, but they "
"enable defenders to integrate Python into their environment in ways that "
"are currently not possible."
msgstr ""

#: ../../pep-0578.rst:539
msgid ""
"Since audit hooks have the ability to safely prevent an operation "
"occurring, this feature does enable the ability to provide some level of "
"sandboxing. In most cases, however, the intention is to enable logging "
"rather than creating a sandbox."
msgstr ""

#: ../../pep-0578.rst:545
msgid "Relationship to PEP 551"
msgstr ""

#: ../../pep-0578.rst:547
msgid ""
"This API was originally presented as part of `PEP 551 "
"<https://www.python.org/dev/peps/pep-0551/>`_ Security Transparency in "
"the Python Runtime."
msgstr ""

#: ../../pep-0578.rst:551
msgid ""
"For simpler review purposes, and due to the broader applicability of "
"these APIs beyond security, the API design is now presented separately."
msgstr ""

#: ../../pep-0578.rst:554
msgid ""
"PEP 551 is an informational PEP discussing how to integrate Python into a"
" secure or audited environment."
msgstr ""

#: ../../pep-0578.rst:558
msgid "References"
msgstr ""

#: ../../pep-0578.rst:560
msgid ""
"Python Performance Benchmark Suite "
"`<https://github.com/python/performance>`_"
msgstr ""

#: ../../pep-0578.rst:562
msgid ""
"Python Security model - Sandbox `<https://python-"
"security.readthedocs.io/security.html#sandbox>`_"
msgstr ""

#: ../../pep-0578.rst:565
msgid "Copyright"
msgstr ""

#: ../../pep-0578.rst:567
msgid ""
"Copyright (c) 2019 by Microsoft Corporation. This material may be "
"distributed only subject to the terms and conditions set forth in the "
"Open Publication License, v1.0 or later (the latest version is presently "
"available at http://www.opencontent.org/openpub/)."
msgstr ""

