# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0426.txt
msgid "PEP"
msgstr ""

#: ../../pep-0426.txt:1
msgid "426"
msgstr ""

#: ../../pep-0426.txt
msgid "Title"
msgstr ""

#: ../../pep-0426.txt:2
msgid "Metadata for Python Software Packages 2.0"
msgstr ""

#: ../../pep-0426.txt
msgid "Author"
msgstr ""

#: ../../pep-0426.txt:5
msgid ""
"Nick Coghlan <ncoghlan@gmail.com>, Daniel Holth <dholth@gmail.com>, "
"Donald Stufft <donald@stufft.io>"
msgstr ""

#: ../../pep-0426.txt
msgid "BDFL-Delegate"
msgstr ""

#: ../../pep-0426.txt:8
msgid "Donald Stufft <donald@stufft.io>"
msgstr ""

#: ../../pep-0426.txt
msgid "Discussions-To"
msgstr ""

#: ../../pep-0426.txt:9
msgid "Distutils SIG <distutils-sig@python.org>"
msgstr ""

#: ../../pep-0426.txt
msgid "Status"
msgstr ""

#: ../../pep-0426.txt:10
msgid "Withdrawn"
msgstr ""

#: ../../pep-0426.txt
msgid "Type"
msgstr ""

#: ../../pep-0426.txt:11
msgid "Informational"
msgstr ""

#: ../../pep-0426.txt
msgid "Requires"
msgstr ""

#: ../../pep-0426.txt:13
msgid "440, 508, 518"
msgstr ""

#: ../../pep-0426.txt
msgid "Created"
msgstr ""

#: ../../pep-0426.txt:14
msgid "30-Aug-2012"
msgstr ""

#: ../../pep-0426.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0426.txt:15
msgid ""
"14 Nov 2012, 5 Feb 2013, 7 Feb 2013, 9 Feb 2013, 27 May 2013, 20 Jun "
"2013, 23 Jun 2013, 14 Jul 2013, 21 Dec 2013"
msgstr ""

#: ../../pep-0426.txt
msgid "Replaces"
msgstr ""

#: ../../pep-0426.txt:18
msgid "345"
msgstr ""

#: ../../pep-0426.txt:22
msgid "PEP Withdrawal"
msgstr ""

#: ../../pep-0426.txt:24
msgid ""
"The ground-up metadata redesign proposed in this PEP has been withdrawn "
"in favour of the more modest proposal in PEP 566, which retains the basic"
" Key:Value format of previous metadata versions, but also defines a "
"standardised mechanism for translating that format to nested JSON-"
"compatible data structures."
msgstr ""

#: ../../pep-0426.txt:29
msgid ""
"Some of the ideas in this PEP (or the related PEP 459) may still be "
"considered as part of later proposals, but they will be handled in a more"
" incremental fashion, rather than as a single large proposed change with "
"no feasible migration plan."
msgstr ""

#: ../../pep-0426.txt:36
msgid "Abstract"
msgstr ""

#: ../../pep-0426.txt:38
msgid ""
"This PEP describes a mechanism for publishing and exchanging metadata "
"related to Python distributions. It includes specifics of the field "
"names, and their semantics and usage."
msgstr ""

#: ../../pep-0426.txt:42
msgid ""
"This document specifies the never released version 2.0 of the metadata "
"format."
msgstr ""

#: ../../pep-0426.txt:44
msgid ""
"Version 1.0 is specified in PEP 241. Version 1.1 is specified in PEP 314."
" Version 1.2 is specified in PEP 345."
msgstr ""

#: ../../pep-0426.txt:48
msgid ""
"Version 2.0 of the metadata format proposed migrating from directly "
"defining a custom key-value file format to instead defining a JSON-"
"compatible in-memory representation that may be used to define metadata "
"representation in other contexts (such as API and archive format "
"definitions)."
msgstr ""

#: ../../pep-0426.txt:53
msgid ""
"This version also defines a formal extension mechanism, allowing new "
"fields to be added for particular purposes without requiring updates to "
"the core metadata format."
msgstr ""

#: ../../pep-0426.txt:59
msgid "Note on PEP History"
msgstr ""

#: ../../pep-0426.txt:61
msgid ""
"This PEP was initially deferred for an extended period, from December "
"2013 through to March 2017, as distutils-sig worked through a number of "
"other changes. These changes included:"
msgstr ""

#: ../../pep-0426.txt:65
msgid "defining a binary compatibility tagging format in PEP 425"
msgstr ""

#: ../../pep-0426.txt:66
msgid "defining a binary archive format (``wheel``) in PEP 427"
msgstr ""

#: ../../pep-0426.txt:67
msgid "explicitly defining versioning and version comparison in PEP 440"
msgstr ""

#: ../../pep-0426.txt:68
msgid "explicitly defining the PyPI \"simple\" API in PEP 503"
msgstr ""

#: ../../pep-0426.txt:69
msgid "explicitly defining dependency specifiers and the extras system in PEP 508"
msgstr ""

#: ../../pep-0426.txt:70
msgid "declaring static build system dependencies (``pyproject.toml``) in PEP 518"
msgstr ""

#: ../../pep-0426.txt:71
msgid "migrating PyPI hosting to Rackspace, and placing it behind the Fastly CDN"
msgstr ""

#: ../../pep-0426.txt:72
msgid ""
"shipping ``pip`` with CPython by default in PEP 453, and backporting that"
" addition to Python 2.7 in PEP 477"
msgstr ""

#: ../../pep-0426.txt:74
msgid ""
"establishing `packaging.python.org`_ as the common access point for "
"Python packaging ecosystem documentation"
msgstr ""

#: ../../pep-0426.txt:76
msgid ""
"migrating to using the `specifications`_ section of packaging.python.org "
"as the central location for tracking packaging related PEPs"
msgstr ""

#: ../../pep-0426.txt:79
msgid ""
"The time spent pursuing these changes provided additional perspective on "
"which metadata format changes were genuinely desirable, and which could "
"be omitted from the revised specification as merely being \"change for "
"change's sake\"."
msgstr ""

#: ../../pep-0426.txt:83
msgid ""
"It also allowed a number of features that aren't critical to the core "
"activity of publishing and distributing software to be moved out to PEP "
"459, a separate proposal for a number of standard metadata extensions "
"that provide additional optional information about a release."
msgstr ""

#: ../../pep-0426.txt:88
msgid ""
"As of September 2017, it was deferred again, on the grounds that it "
"doesn't actually help solve any particularly pressing problems:"
msgstr ""

#: ../../pep-0426.txt:91
msgid ""
"JSON representation would be better handled through defining a "
"transformation of the existing metadata 1.2 fields"
msgstr ""

#: ../../pep-0426.txt:93
msgid ""
"clarification of the additional fields defined in the past few years and "
"related changes to the spec management process would be better covered in"
" a `minor spec version update`_"
msgstr ""

#: ../../pep-0426.txt:101
msgid ""
"Finally, the PEP was withdrawn in February 2018 in favour of PEP 566 "
"(which pursues that more incremental strategy)."
msgstr ""

#: ../../pep-0426.txt:106
msgid "Purpose"
msgstr ""

#: ../../pep-0426.txt:108
msgid ""
"The purpose of this PEP is to define a common metadata interchange format"
" for communication between software publication tools and software "
"integration tools in the Python ecosystem. One key aim is to support full"
" dependency analysis in that ecosystem without requiring the execution of"
" arbitrary Python code by those doing the analysis. Another aim is to "
"encourage good software distribution practices by default, while "
"continuing to support the current practices of almost all existing users "
"of the Python Package Index (both publishers and integrators). Finally, "
"the aim is to support an upgrade path from the currently in use metadata "
"formats that is transparent to end users."
msgstr ""

#: ../../pep-0426.txt:119
msgid ""
"The design draws on the Python community's nearly 20 years of experience "
"with distutils based software distribution, and incorporates ideas and "
"concepts from other distribution systems, including Python's setuptools, "
"pip and other projects, Ruby's gems, Perl's CPAN, Node.js's npm, PHP's "
"composer and Linux packaging systems such as RPM and APT."
msgstr ""

#: ../../pep-0426.txt:125
msgid ""
"While the specifics of this format are aimed at the Python ecosystem, "
"some of the ideas may also be useful in the future evolution of other "
"dependency management ecosystems."
msgstr ""

#: ../../pep-0426.txt:131
msgid "Development, Distribution and Deployment of Python Software"
msgstr ""

#: ../../pep-0426.txt:133
msgid ""
"The metadata design in this PEP is based on a particular conceptual model"
" of the software development and distribution process. This model "
"consists of the following phases:"
msgstr ""

#: ../../pep-0426.txt:137
msgid ""
"Software development: this phase involves working with a source checkout "
"for a particular application to add features and fix bugs. It is expected"
" that developers in this phase will need to be able to build the "
"software, run the software's automated test suite, run project specific "
"utility scripts and publish the software."
msgstr ""

#: ../../pep-0426.txt:143
msgid ""
"Software publication: this phase involves taking the developed software "
"and making it available for use by software integrators. This includes "
"creating the descriptive metadata defined in this PEP, as well as making "
"the software available (typically by uploading it to an index server)."
msgstr ""

#: ../../pep-0426.txt:148
msgid ""
"Software integration: this phase involves taking published software "
"components and combining them into a coherent, integrated system. This "
"may be done directly using Python specific cross-platform tools, or it "
"may be handled through conversion to development language neutral "
"platform specific packaging systems."
msgstr ""

#: ../../pep-0426.txt:154
msgid ""
"Software deployment: this phase involves taking integrated software "
"components and deploying them on to the target system where the software "
"will actually execute."
msgstr ""

#: ../../pep-0426.txt:158
msgid ""
"The publication and integration phases are collectively referred to as "
"the distribution phase, and the individual software components "
"distributed in that phase are formally referred to as \"distribution "
"packages\", but are more colloquially known as just \"packages\" (relying"
" on context to disambiguate them from the \"module with submodules\" kind"
" of Python package)."
msgstr ""

#: ../../pep-0426.txt:164
msgid ""
"The exact details of these phases will vary greatly for particular use "
"cases. Deploying a web application to a public Platform-as-a-Service "
"provider, publishing a new release of a web framework or scientific "
"library, creating an integrated Linux distribution, or upgrading a custom"
" application running in a secure enclave are all situations this metadata"
" design should be able to handle."
msgstr ""

#: ../../pep-0426.txt:171
msgid ""
"The complexity of the metadata described in this PEP thus arises directly"
" from the actual complexities associated with software development, "
"distribution and deployment in a wide range of scenarios."
msgstr ""

#: ../../pep-0426.txt:177
msgid "Supporting definitions"
msgstr ""

#: ../../pep-0426.txt:179
msgid ""
"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL "
"NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and "
"\"OPTIONAL\" in this document are to be interpreted as described in RFC "
"2119."
msgstr ""

#: ../../pep-0426.txt:183
msgid ""
"\"Projects\" are software components that are made available for "
"integration. Projects include Python libraries, frameworks, scripts, "
"plugins, applications, collections of data or other resources, and "
"various combinations thereof. Public Python projects are typically "
"registered on the `Python Package Index`_."
msgstr ""

#: ../../pep-0426.txt:189
msgid "\"Releases\" are uniquely identified snapshots of a project."
msgstr ""

#: ../../pep-0426.txt:191
msgid ""
"\"Distribution packages\" are the packaged files which are used to "
"publish and distribute a release."
msgstr ""

#: ../../pep-0426.txt:194
msgid ""
"Depending on context, \"package\" may refer to either a distribution, or "
"to an importable Python module that has a ``__path__`` attribute and "
"hence may also have importable submodules."
msgstr ""

#: ../../pep-0426.txt:198
msgid ""
"\"Source archive\" and \"VCS checkout\" both refer to the raw source code"
" for a release, prior to creation of an sdist or binary archive."
msgstr ""

#: ../../pep-0426.txt:201
msgid ""
"An \"sdist\" is a publication format providing the distribution metadata "
"and any source files that are essential to creating a binary archive for "
"the distribution. Creating a binary archive from an sdist requires that "
"the appropriate build tools be available on the system."
msgstr ""

#: ../../pep-0426.txt:206
msgid ""
"\"Binary archives\" only require that prebuilt files be moved to the "
"correct location on the target system. As Python is a dynamically bound "
"cross-platform language, many so-called \"binary\" archives will contain "
"only pure Python source code."
msgstr ""

#: ../../pep-0426.txt:211
msgid ""
"\"Contributors\" are individuals and organizations that work together to "
"develop a software component."
msgstr ""

#: ../../pep-0426.txt:214
msgid ""
"\"Publishers\" are individuals and organizations that make software "
"components available for integration (typically by uploading "
"distributions to an index server)"
msgstr ""

#: ../../pep-0426.txt:218
msgid ""
"\"Integrators\" are individuals and organizations that incorporate "
"published distributions as components of an application or larger system."
msgstr ""

#: ../../pep-0426.txt:221
msgid ""
"\"Build tools\" are automated tools intended to run on development "
"systems, producing source and binary distribution archives. Build tools "
"may also be invoked by integration tools in order to build software "
"distributed as sdists rather than prebuilt binary archives."
msgstr ""

#: ../../pep-0426.txt:226
msgid ""
"\"Index servers\" are active distribution registries which publish "
"version and dependency metadata and place constraints on the permitted "
"metadata."
msgstr ""

#: ../../pep-0426.txt:229
msgid ""
"\"Public index servers\" are index servers which allow distribution "
"uploads from untrusted third parties. The `Python Package Index`_ is a "
"public index server."
msgstr ""

#: ../../pep-0426.txt:233
msgid ""
"\"Publication tools\" are automated tools intended to run on development "
"systems and upload source and binary distribution archives to index "
"servers."
msgstr ""

#: ../../pep-0426.txt:236
msgid ""
"\"Integration tools\" are automated tools that consume the metadata and "
"distribution archives published by an index server or other designated "
"source, and make use of them in some fashion, such as installing them or "
"converting them to a platform specific packaging format."
msgstr ""

#: ../../pep-0426.txt:241
msgid ""
"\"Installation tools\" are integration tools specifically intended to run"
" on deployment targets, consuming source and binary distribution archives"
" from an index server or other designated location and deploying them to "
"the target system."
msgstr ""

#: ../../pep-0426.txt:246
msgid ""
"\"Automated tools\" is a collective term covering build tools, index "
"servers, publication tools, integration tools and any other software that"
" produces or consumes distribution version and dependency metadata."
msgstr ""

#: ../../pep-0426.txt:250
msgid ""
"\"Legacy metadata\" refers to earlier versions of this metadata "
"specification, along with the supporting metadata file formats defined by"
" the ``setuptools`` project."
msgstr ""

#: ../../pep-0426.txt:254
msgid ""
"\"Distro\" is used as the preferred term for Linux distributions, to help"
" avoid confusion with the Python-specific use of the term \"distribution "
"package\"."
msgstr ""

#: ../../pep-0426.txt:258
msgid ""
"\"Qualified name\" is a dotted Python identifier. For imported modules "
"and packages, the qualified name is available as the ``__name__`` "
"attribute, while for functions and classes it is available as the "
"``__qualname__`` attribute."
msgstr ""

#: ../../pep-0426.txt:263
msgid ""
"A \"fully qualified name\" uniquely locates an object in the Python "
"module namespace. For imported modules and packages, it is the same as "
"the qualified name. For other Python objects, the fully qualified name "
"consists of the qualified name of the containing module or package, a "
"colon (``:``) and the qualified name of the object relative to the "
"containing module or package."
msgstr ""

#: ../../pep-0426.txt:270
msgid ""
"A \"prefixed name\" starts with a qualified name, but is not necessarily "
"a qualified name - it may contain additional dot separated segments which"
" are not valid identifiers."
msgstr ""

#: ../../pep-0426.txt:276
msgid "Integration and deployment of distributions"
msgstr ""

#: ../../pep-0426.txt:278
msgid ""
"The primary purpose of the distribution metadata is to support "
"integration and deployment of distributions as part of larger "
"applications and systems."
msgstr ""

#: ../../pep-0426.txt:281
msgid ""
"Integration and deployment can in turn be broken down into further "
"substeps."
msgstr ""

#: ../../pep-0426.txt:283
msgid ""
"Build: the build step is the process of turning a VCS checkout, source "
"archive or sdist into a binary archive. Dependencies must be available in"
" order to build and create a binary archive of the distribution "
"(including any documentation that is installed on target systems)."
msgstr ""

#: ../../pep-0426.txt:288
msgid ""
"Installation: the installation step involves getting the distribution and"
" all of its runtime dependencies onto the target system. In this step, "
"the distribution may already be on the system (when upgrading or "
"reinstalling) or else it may be a completely new installation."
msgstr ""

#: ../../pep-0426.txt:293
msgid ""
"Runtime: this is normal usage of a distribution after it has been "
"installed on the target system."
msgstr ""

#: ../../pep-0426.txt:296
msgid ""
"These three steps may all occur directly on the target system. "
"Alternatively the build step may be separated out by using binary "
"archives provided by the publisher of the distribution, or by creating "
"the binary archives on a separate system prior to deployment. The "
"advantage of the latter approach is that it minimizes the dependencies "
"that need to be installed on deployment targets (as the build "
"dependencies will be needed only on the build systems)."
msgstr ""

#: ../../pep-0426.txt:304
msgid ""
"The published metadata for distribution packages SHOULD allow "
"integrators, with the aid of build and integration tools, to:"
msgstr ""

#: ../../pep-0426.txt:307
msgid "obtain the original source code that was used to create a distribution"
msgstr ""

#: ../../pep-0426.txt:308
msgid ""
"identify and retrieve the dependencies (if any) required to use a "
"distribution"
msgstr ""

#: ../../pep-0426.txt:310
msgid ""
"identify and retrieve the dependencies (if any) required to build a "
"distribution from source"
msgstr ""

#: ../../pep-0426.txt:312
msgid ""
"identify and retrieve the dependencies (if any) required to run a "
"distribution's test suite"
msgstr ""

#: ../../pep-0426.txt:317
msgid "Development and publication of distributions"
msgstr ""

#: ../../pep-0426.txt:319
msgid ""
"The secondary purpose of the distribution metadata is to support "
"effective collaboration amongst software contributors and publishers "
"during the development phase."
msgstr ""

#: ../../pep-0426.txt:323
msgid ""
"The published metadata for distributions SHOULD allow contributors and "
"publishers, with the aid of build and publication tools, to:"
msgstr ""

#: ../../pep-0426.txt:326
msgid ""
"perform all the same activities needed to effectively integrate and "
"deploy the distribution"
msgstr ""

#: ../../pep-0426.txt:328
msgid ""
"identify and retrieve the additional dependencies needed to develop and "
"publish the distribution"
msgstr ""

#: ../../pep-0426.txt:330
msgid "specify the dependencies (if any) required to use the distribution"
msgstr ""

#: ../../pep-0426.txt:331
msgid ""
"specify the dependencies (if any) required to build the distribution from"
" source"
msgstr ""

#: ../../pep-0426.txt:333
msgid ""
"specify the dependencies (if any) required to run the distribution's test"
" suite"
msgstr ""

#: ../../pep-0426.txt:335
msgid ""
"specify the additional dependencies (if any) required to develop and "
"publish the distribution"
msgstr ""

#: ../../pep-0426.txt:341
msgid "Metadata format"
msgstr ""

#: ../../pep-0426.txt:343
msgid ""
"The format defined in this PEP is an in-memory representation of Python "
"distribution metadata as a string-keyed dictionary. Permitted values for "
"individual entries are strings, lists of strings, and additional nested "
"string-keyed dictionaries."
msgstr ""

#: ../../pep-0426.txt:348
msgid ""
"Except where otherwise noted, dictionary keys in distribution metadata "
"MUST be valid Python identifiers in order to support attribute based "
"metadata access APIs."
msgstr ""

#: ../../pep-0426.txt:352
msgid ""
"The individual field descriptions show examples of the key name and value"
" as they would be serialised as part of a JSON mapping."
msgstr ""

#: ../../pep-0426.txt:355
msgid ""
"Unless otherwise indicated, the fields identified as core metadata are "
"required. Automated tools MUST NOT accept distributions with missing core"
" metadata as valid Python distributions."
msgstr ""

#: ../../pep-0426.txt:359
msgid ""
"All other fields are optional. Automated tools MUST operate correctly if "
"a distribution does not provide them, except for those operations which "
"specifically require the omitted fields."
msgstr ""

#: ../../pep-0426.txt:363
msgid ""
"Automated tools MUST NOT insert dummy data for missing fields. If a valid"
" value is not provided for a required field then the metadata and the "
"associated distribution MUST be rejected as invalid. If a valid value is "
"not provided for an optional field, that field MUST be omitted entirely. "
"Automated tools MAY automatically derive valid values from other "
"information sources (such as a version control system)."
msgstr ""

#: ../../pep-0426.txt:370
msgid ""
"Automated tools, especially public index servers, MAY impose additional "
"length restrictions on metadata beyond those enumerated in this PEP. Such"
" limits SHOULD be imposed where necessary to protect the integrity of a "
"service, based on the available resources and the service provider's "
"judgment of reasonable metadata capacity requirements."
msgstr ""

#: ../../pep-0426.txt:378
msgid "Metadata files"
msgstr ""

#: ../../pep-0426.txt:380
msgid ""
"The information defined in this PEP is serialised to ``pysdist.json`` "
"files for some use cases. These are files containing UTF-8 encoded JSON "
"metadata."
msgstr ""

#: ../../pep-0426.txt:384
msgid ""
"Each metadata file consists of a single serialised mapping, with fields "
"as described in this PEP. When serialising metadata, automated tools "
"SHOULD lexically sort any keys and list elements in order to simplify "
"reviews of any changes."
msgstr ""

#: ../../pep-0426.txt:389
msgid ""
"There are expected to be three standard locations for these metadata "
"files:"
msgstr ""

#: ../../pep-0426.txt:391
msgid ""
"as a ``{distribution}-{version}.dist-info/pysdist.json`` file in an "
"``sdist`` source distribution archive"
msgstr ""

#: ../../pep-0426.txt:393
msgid ""
"as a ``{distribution}-{version}.dist-info/pysdist.json`` file in a "
"``wheel`` binary distribution archive"
msgstr ""

#: ../../pep-0426.txt:395
msgid ""
"as a ``{distribution}-{version}.dist-info/pysdist.json`` file in a local "
"Python installation database"
msgstr ""

#: ../../pep-0426.txt:398
msgid ""
"This file is expected to be identical in all three locations - it is "
"generated when creating a source archive or binary archive from a source "
"tree, and then preserved unchanged on installation, or when building a "
"binary archive from a source archive."
msgstr ""

#: ../../pep-0426.txt:405
msgid ""
"These locations are to be confirmed, since they depend on the definition "
"of sdist 2.0 and the revised installation database standard. There will "
"also be a wheel 1.1 format update after this PEP is approved that "
"mandates provision of 2.0+ metadata."
msgstr ""

#: ../../pep-0426.txt:410
msgid ""
"Note that these metadata files MAY be processed even if the version of "
"the containing location is too low to indicate that they are valid. "
"Specifically, unversioned ``sdist`` archives, unversioned installation "
"database directories and version 1.0 of the ``wheel`` specification may "
"still provide ``pysdist.json`` files."
msgstr ""

#: ../../pep-0426.txt:418
msgid ""
"Until this specification is formally marked as Active, it is recommended "
"that tools following the draft format use an alternative filename like "
"``metadata.json`` or ``pep426-20131213.json`` to avoid colliding with the"
" eventually standardised files."
msgstr ""

#: ../../pep-0426.txt:423
msgid "Other tools involved in Python distribution MAY also use this format."
msgstr ""

#: ../../pep-0426.txt:425
msgid ""
"Note that these metadata files are generated by build tools based on "
"other input formats (such as ``setup.py`` and ``pyproject.toml``) rather "
"than being used directly as a data input format. Generating the metadata "
"as part of the publication process also helps to deal with version "
"specific fields (including the source URL and the version field itself)."
msgstr ""

#: ../../pep-0426.txt:431
msgid ""
"For backwards compatibility with older installation tools, metadata 2.0 "
"files MAY be distributed alongside legacy metadata."
msgstr ""

#: ../../pep-0426.txt:434
msgid ""
"Index servers MAY allow distributions to be uploaded and installation "
"tools MAY allow distributions to be installed with only legacy metadata."
msgstr ""

#: ../../pep-0426.txt:437
msgid ""
"Automated tools MAY attempt to automatically translate legacy metadata to"
" the format described in this PEP. Advice for doing so effectively is "
"given in Appendix A."
msgstr ""

#: ../../pep-0426.txt:443
msgid "Metadata validation"
msgstr ""

#: ../../pep-0426.txt:445
msgid ""
"A `jsonschema <https://pypi.python.org/pypi/jsonschema>`__ description of"
" the distribution metadata is `available "
"<http://hg.python.org/peps/file/default/pep-0426/pydist-schema.json>`__."
msgstr ""

#: ../../pep-0426.txt:449
msgid ""
"This schema does NOT currently handle validation of some of the more "
"complex string fields (instead treating them as opaque strings)."
msgstr ""

#: ../../pep-0426.txt:452
msgid ""
"Except where otherwise noted, all URL fields in the metadata MUST comply "
"with RFC 3986."
msgstr ""

#: ../../pep-0426.txt:457
msgid ""
"The current version of the schema file covers the previous draft of the "
"PEP, and has not yet been updated for the split into the essential "
"dependency resolution metadata and multiple standard extensions, and nor "
"has it been updated for the various other differences between the current"
" draft and the earlier drafts."
msgstr ""

#: ../../pep-0426.txt:465
msgid "Core metadata"
msgstr ""

#: ../../pep-0426.txt:467
msgid ""
"This section specifies the core metadata fields that are required for "
"every Python distribution."
msgstr ""

#: ../../pep-0426.txt:470
msgid ""
"Publication tools MUST ensure at least these fields are present when "
"publishing a distribution."
msgstr ""

#: ../../pep-0426.txt:473
msgid ""
"Index servers MUST ensure at least these fields are present in the "
"metadata when distributions are uploaded."
msgstr ""

#: ../../pep-0426.txt:476
msgid ""
"Installation tools MUST refuse to install distributions with one or more "
"of these fields missing by default, but MAY allow users to force such an "
"installation to occur."
msgstr ""

#: ../../pep-0426.txt:482
msgid "Metadata version"
msgstr ""

#: ../../pep-0426.txt:484
msgid "Version of the file format; ``\"2.0\"`` is the only legal value."
msgstr ""

#: ../../pep-0426.txt:486
msgid ""
"Automated tools consuming metadata SHOULD warn if ``metadata_version`` is"
" greater than the highest version they support, and MUST fail if "
"``metadata_version`` has a greater major version than the highest version"
" they support (as described in PEP 440, the major version is the value "
"before the first dot)."
msgstr ""

#: ../../pep-0426.txt:492
msgid ""
"For broader compatibility, build tools MAY choose to produce distribution"
" metadata using the lowest metadata version that includes all of the "
"needed fields."
msgstr ""

#: ../../pep-0426.txt:496 ../../pep-0426.txt:557 ../../pep-0426.txt:577
#: ../../pep-0426.txt:596 ../../pep-0426.txt:707 ../../pep-0426.txt:826
#: ../../pep-0426.txt:839
msgid "Example::"
msgstr ""

#: ../../pep-0426.txt:502
msgid "Generator"
msgstr ""

#: ../../pep-0426.txt:504
msgid ""
"Name (and optional version) of the program that generated the file, if "
"any.  A manually produced file would omit this field."
msgstr ""

#: ../../pep-0426.txt:507 ../../pep-0426.txt:643
msgid "Examples::"
msgstr ""

#: ../../pep-0426.txt:514
msgid "Name"
msgstr ""

#: ../../pep-0426.txt:516
msgid "The name of the distribution, as defined in PEP 508."
msgstr ""

#: ../../pep-0426.txt:518
msgid ""
"As distribution names are used as part of URLs, filenames, command line "
"parameters and must also interoperate with other packaging systems, the "
"permitted characters are constrained to:"
msgstr ""

#: ../../pep-0426.txt:522
msgid "ASCII letters (``[a-zA-Z]``)"
msgstr ""

#: ../../pep-0426.txt:523 ../../pep-0426.txt:626
msgid "ASCII digits (``[0-9]``)"
msgstr ""

#: ../../pep-0426.txt:524 ../../pep-0426.txt:627
msgid "underscores (``_``)"
msgstr ""

#: ../../pep-0426.txt:525 ../../pep-0426.txt:628
msgid "hyphens (``-``)"
msgstr ""

#: ../../pep-0426.txt:526 ../../pep-0426.txt:629
msgid "periods (``.``)"
msgstr ""

#: ../../pep-0426.txt:528
msgid "Distribution names MUST start and end with an ASCII letter or digit."
msgstr ""

#: ../../pep-0426.txt:530
msgid ""
"Automated tools MUST reject non-compliant names. A regular expression to "
"enforce these constraints (when run with ``re.IGNORECASE``) is::"
msgstr ""

#: ../../pep-0426.txt:535
msgid ""
"All comparisons of distribution names MUST be case insensitive, and MUST "
"consider hyphens and underscores to be equivalent."
msgstr ""

#: ../../pep-0426.txt:538
msgid ""
"Index servers MAY consider \"confusable\" characters (as defined by the "
"Unicode Consortium in `TR39: Unicode Security Mechanisms <TR39_>`_) to be"
" equivalent."
msgstr ""

#: ../../pep-0426.txt:542
msgid ""
"Index servers that permit arbitrary distribution name registrations from "
"untrusted sources SHOULD consider confusable characters to be equivalent "
"when registering new distributions (and hence reject them as duplicates)."
msgstr ""

#: ../../pep-0426.txt:546
msgid ""
"Integration tools MUST NOT silently accept a confusable alternate "
"spelling as matching a requested distribution name."
msgstr ""

#: ../../pep-0426.txt:549
msgid ""
"At time of writing, the characters in the ASCII subset designated as "
"confusables by the Unicode Consortium are:"
msgstr ""

#: ../../pep-0426.txt:552
msgid ""
"``1`` (DIGIT ONE), ``l`` (LATIN SMALL LETTER L), and ``I`` (LATIN CAPITAL"
" LETTER I)"
msgstr ""

#: ../../pep-0426.txt:554
msgid "``0`` (DIGIT ZERO), and ``O`` (LATIN CAPITAL LETTER O)"
msgstr ""

#: ../../pep-0426.txt:563
msgid "Version"
msgstr ""

#: ../../pep-0426.txt:565
msgid ""
"The distribution's public or local version identifier, as defined in PEP "
"440. Version identifiers are designed for consumption by automated tools "
"and support a variety of flexible version specification mechanisms (see "
"PEP 440 for details)."
msgstr ""

#: ../../pep-0426.txt:570
msgid "Version identifiers MUST comply with the format defined in PEP 440."
msgstr ""

#: ../../pep-0426.txt:572
msgid "Version identifiers MUST be unique within each project."
msgstr ""

#: ../../pep-0426.txt:574
msgid ""
"Index servers MAY place restrictions on the use of local version "
"identifiers as described in PEP 440."
msgstr ""

#: ../../pep-0426.txt:583
msgid "Summary"
msgstr ""

#: ../../pep-0426.txt:585
msgid "A short summary of what the distribution does."
msgstr ""

#: ../../pep-0426.txt:587
msgid ""
"This field SHOULD contain fewer than 512 characters and MUST contain "
"fewer than 2048."
msgstr ""

#: ../../pep-0426.txt:590
msgid "This field SHOULD NOT contain any line breaks."
msgstr ""

#: ../../pep-0426.txt:592
msgid ""
"A more complete description SHOULD be included as a separate file in the "
"sdist for the distribution. Refer to the ``python-details`` extension in "
":pep:`459` for more information."
msgstr ""

#: ../../pep-0426.txt:602
msgid "Source code metadata"
msgstr ""

#: ../../pep-0426.txt:604
msgid ""
"This section specifies fields that provide identifying details for the "
"source code used to produce this distribution."
msgstr ""

#: ../../pep-0426.txt:607
msgid ""
"All of these fields are optional. Automated tools MUST operate correctly "
"if a distribution does not provide them, including failing cleanly when "
"an operation depending on one of these fields is requested."
msgstr ""

#: ../../pep-0426.txt:613 ../../pep-0426.txt:1236
msgid "Source labels"
msgstr ""

#: ../../pep-0426.txt:615
msgid ""
"Source labels are text strings with minimal defined semantics. They are "
"intended to allow the original source code to be unambiguously "
"identified, even if an integrator has applied additional local "
"modifications to a particular distribution."
msgstr ""

#: ../../pep-0426.txt:620
msgid ""
"To ensure source labels can be readily incorporated as part of file names"
" and URLs, and to avoid formatting inconsistencies in hexadecimal hash "
"representations they MUST be limited to the following set of permitted "
"characters:"
msgstr ""

#: ../../pep-0426.txt:625
msgid "Lowercase ASCII letters (``[a-z]``)"
msgstr ""

#: ../../pep-0426.txt:630
msgid "plus signs (``+``)"
msgstr ""

#: ../../pep-0426.txt:632
msgid "Source labels MUST start and end with an ASCII letter or digit."
msgstr ""

#: ../../pep-0426.txt:634
msgid ""
"A regular expression to rnforce these constraints (when run with "
"``re.IGNORECASE``) is::"
msgstr ""

#: ../../pep-0426.txt:639
msgid ""
"A source label for a project MUST NOT match any defined version for that "
"project. This restriction ensures that there is no ambiguity between "
"version identifiers and source labels."
msgstr ""

#: ../../pep-0426.txt:655
msgid "Source URL"
msgstr ""

#: ../../pep-0426.txt:657
msgid ""
"A string containing a full URL where the source for this specific version"
" of the distribution can be downloaded."
msgstr ""

#: ../../pep-0426.txt:660
msgid ""
"Source URLs MUST be unique within each project. This means that the URL "
"can't be something like "
"``\"https://github.com/pypa/pip/archive/master.zip\"``, but instead must "
"be ``\"https://github.com/pypa/pip/archive/1.3.1.zip\"``."
msgstr ""

#: ../../pep-0426.txt:664
msgid ""
"The source URL MUST reference either a source archive or a tag or "
"specific commit in an online version control system that permits creation"
" of a suitable VCS checkout. It is intended primarily for integrators "
"that wish to recreate the distribution from the original source form."
msgstr ""

#: ../../pep-0426.txt:669
msgid ""
"All source URL references SHOULD specify a secure transport mechanism "
"(such as ``https``) AND include an expected hash value in the URL for "
"verification purposes. If a source URL is specified without any hash "
"information, with hash information that the tool doesn't understand, or "
"with a selected hash algorithm that the tool considers too weak to trust,"
" automated tools SHOULD at least emit a warning and MAY refuse to rely on"
" the URL. If such a source URL also uses an insecure transport, automated"
" tools SHOULD NOT rely on the URL."
msgstr ""

#: ../../pep-0426.txt:678
msgid ""
"For source archive references, an expected hash value may be specified by"
" including a ``<hash-algorithm>=<expected-hash>`` entry as part of the "
"URL fragment."
msgstr ""

#: ../../pep-0426.txt:682
msgid ""
"As of 2017, it is RECOMMENDED that ``'sha256'`` hashes be used for source"
" URLs, as this hash is not yet known to be vulnerable to generation of "
"malicious collisions, while also being widely available on client "
"systems."
msgstr ""

#: ../../pep-0426.txt:686
msgid ""
"For version control references, the ``VCS+protocol`` scheme SHOULD be "
"used to identify both the version control system and the secure "
"transport, and a version control system with hash based commit "
"identifiers SHOULD be used. Automated tools MAY omit warnings about "
"missing hashes for version control systems that do not provide hash based"
" commit identifiers."
msgstr ""

#: ../../pep-0426.txt:692
msgid ""
"To handle version control systems that do not support including commit or"
" tag references directly in the URL, that information may be appended to "
"the end of the URL using the ``@<commit-hash>`` or the ``@<tag>#<commit-"
"hash>`` notation."
msgstr ""

#: ../../pep-0426.txt:699
msgid ""
"This isn't *quite* the same as the existing VCS reference notation "
"supported by pip. Firstly, the distribution name is a separate field "
"rather than embedded as part of the URL. Secondly, the commit hash is "
"included even when retrieving based on a tag, in order to meet the "
"requirement above that *every* link should include a hash to make things "
"harder to forge (creating a malicious repo with a particular tag is easy,"
" creating one with a specific *hash*, less so)."
msgstr ""

#: ../../pep-0426.txt:715
msgid "Semantic dependencies"
msgstr ""

#: ../../pep-0426.txt:717
msgid ""
"Dependency metadata allows published projects to make use of "
"functionality provided by other published projects, without needing to "
"bundle copies of particular releases of those projects."
msgstr ""

#: ../../pep-0426.txt:721
msgid ""
"Semantic dependencies allow publishers to indicate not only which other "
"projects are needed, but also *why* they're needed. This additional "
"information allows integrators to install just the dependencies they need"
" for specific activities, making it easier to minimise installation "
"footprints in constrained environments (regardless of the reasons for "
"those constraints)."
msgstr ""

#: ../../pep-0426.txt:728
msgid ""
"By default, dependency declarations are assumed to be for \"runtime "
"dependencies\": other releases that are needed to actually use the "
"published release."
msgstr ""

#: ../../pep-0426.txt:732
msgid ""
"There are also four different kinds of optional dependency that releases "
"may declare:"
msgstr ""

#: ../../pep-0426.txt:735
msgid ""
"``test`` dependencies: other releases that are needed to run the "
"automated test suite for this release, but are not needed just to use it "
"(e.g. ``nose2`` or ``pytest``)"
msgstr ""

#: ../../pep-0426.txt:738
msgid ""
"``build`` dependencies: other releases that are needed to build this a "
"deployable binary version of this release from source (e.g. ``flit`` or "
"``setuptools``)"
msgstr ""

#: ../../pep-0426.txt:741
msgid ""
"``doc`` dependencies: other releases that are needed to build the "
"documentation for this distribution (e.g. the ``sphinx`` build tool)"
msgstr ""

#: ../../pep-0426.txt:743
msgid ""
"``dev`` dependencies: other releases that are needed when working on this"
" distribution, but do not fit into exactly one of the other optional "
"dependency categories (e.g. ``pylint``, ``flake8``). ``dev`` dependencies"
" are also effectively considered as combined ``test``, ``build``, and "
"``doc`` dependencies, without needing to be listed three times"
msgstr ""

#: ../../pep-0426.txt:749
msgid ""
"These optional categories are known as `Extras <Extras (optional "
"dependencies)_>`_. In addition to the four standard categories, projects "
"may also declare their own custom categories in the `Extras`_ field."
msgstr ""

#: ../../pep-0426.txt:754
msgid ""
"There are also two standard extra categories that imply dependencies on "
"other extras:"
msgstr ""

#: ../../pep-0426.txt:757
msgid "``alldev``: implies the ``test``, ``build``, ``doc``, ``dev`` extras"
msgstr ""

#: ../../pep-0426.txt:758
msgid "``all``: if not otherwise defined, implies all declared extras"
msgstr ""

#: ../../pep-0426.txt:760
msgid ""
"Dependency management is heavily dependent on the version identification "
"and specification scheme defined in PEP 440 and the dependency "
"specification, extra, and environment marker schemes defined in PEP 508."
msgstr ""

#: ../../pep-0426.txt:764
msgid ""
"All of these fields are optional. Automated tools MUST operate correctly "
"if a distribution does not provide them, by assuming that a missing field"
" indicates \"Not applicable for this distribution\"."
msgstr ""

#: ../../pep-0426.txt:770
msgid "Mapping dependencies to development and distribution activities"
msgstr ""

#: ../../pep-0426.txt:772
msgid ""
"The different categories of dependency are based on the various "
"distribution and development activities identified above, and govern "
"which dependencies should be installed for the specified activities:"
msgstr ""

#: ../../pep-0426.txt:776
msgid "Required runtime dependencies:"
msgstr ""

#: ../../pep-0426.txt:778 ../../pep-0426.txt:789
msgid "unconditional dependencies"
msgstr ""

#: ../../pep-0426.txt:780
msgid "Required build dependencies:"
msgstr ""

#: ../../pep-0426.txt:782 ../../pep-0426.txt:791
msgid "the ``build`` extra"
msgstr ""

#: ../../pep-0426.txt:783 ../../pep-0426.txt:793
msgid "the ``dev`` extra"
msgstr ""

#: ../../pep-0426.txt:784
msgid ""
"If running the distribution's test suite as part of the build process, "
"also install the unconditional dependencies and ``test`` extra"
msgstr ""

#: ../../pep-0426.txt:787
msgid "Required development and publication dependencies:"
msgstr ""

#: ../../pep-0426.txt:790
msgid "the ``test`` extra"
msgstr ""

#: ../../pep-0426.txt:792
msgid "the ``doc`` extra"
msgstr ""

#: ../../pep-0426.txt:795
msgid ""
"The notation described in `Extras (optional dependencies)`_ SHOULD be "
"used to determine exactly what gets installed for various operations."
msgstr ""

#: ../../pep-0426.txt:798
msgid ""
"Installation tools SHOULD report an error if dependencies cannot be "
"satisfied, MUST at least emit a warning, and MAY allow the user to force "
"the installation to proceed regardless."
msgstr ""

#: ../../pep-0426.txt:802
msgid ""
"See Appendix B for an overview of mapping these dependencies to an RPM "
"spec file."
msgstr ""

#: ../../pep-0426.txt:807
msgid "Extras"
msgstr ""

#: ../../pep-0426.txt:809
msgid ""
"A list of optional sets of dependencies that may be used to define "
"conditional dependencies in dependency fields. See `Extras (optional "
"dependencies)`_ for details."
msgstr ""

#: ../../pep-0426.txt:813
msgid ""
"The names of extras MUST abide by the same restrictions as those for "
"distribution names."
msgstr ""

#: ../../pep-0426.txt:816
msgid ""
"The following extra names are available by default and MUST NOT be "
"declared explicitly in this field:"
msgstr ""

#: ../../pep-0426.txt:819
msgid "``all``"
msgstr ""

#: ../../pep-0426.txt:820
msgid "``alldev``"
msgstr ""

#: ../../pep-0426.txt:821
msgid "``build``"
msgstr ""

#: ../../pep-0426.txt:822
msgid "``dev``"
msgstr ""

#: ../../pep-0426.txt:823
msgid "``doc``"
msgstr ""

#: ../../pep-0426.txt:824
msgid "``test``"
msgstr ""

#: ../../pep-0426.txt:832
msgid "Dependencies"
msgstr ""

#: ../../pep-0426.txt:834
msgid "A list of release requirements needed to actually run this release."
msgstr ""

#: ../../pep-0426.txt:836
msgid ""
"Public index servers MAY prohibit strict version matching clauses or "
"direct references in this field."
msgstr ""

#: ../../pep-0426.txt:855
msgid ""
"While many dependencies will be needed to use a project release at all, "
"others are needed only on particular platforms or only when particular "
"optional features of the release are needed."
msgstr ""

#: ../../pep-0426.txt:859
msgid ""
"To handle this, release dependency specifiers are mappings with the "
"following subfields:"
msgstr ""

#: ../../pep-0426.txt:862
msgid "``requires``: a list of requirements needed to satisfy the dependency"
msgstr ""

#: ../../pep-0426.txt:863
msgid ""
"``extra``: the name of a set of optional dependencies that are requested "
"and installed together. See `Extras (optional dependencies)`_ for details"
msgstr ""

#: ../../pep-0426.txt:865
msgid ""
"``environment``: an environment marker defining the environment that "
"needs these dependencies. The syntax and capabilities of environment "
"markers are defined in PEP 508"
msgstr ""

#: ../../pep-0426.txt:869
msgid ""
"Individual entries in the ``requires`` lists are strings using the "
"dependency declaration format defined in PEP 508, with the exception that"
" environment markers MUST NOT be included in the individual dependency "
"declarations, and are instead supplied in the separate ``environment`` "
"field."
msgstr ""

#: ../../pep-0426.txt:874
msgid ""
"``requires`` is the only required subfield. When it is the only subfield,"
" the dependencies are said to be *unconditional*. If ``extra`` or "
"``environment`` is specified, then the dependencies are *conditional*."
msgstr ""

#: ../../pep-0426.txt:878
msgid ""
"All three fields may be supplied, indicating that the dependencies are "
"needed only when the named extra is requested in a particular "
"environment."
msgstr ""

#: ../../pep-0426.txt:881
msgid ""
"Automated tools MUST combine related dependency specifiers (those with "
"common values for ``extra`` and ``environment``) into a single specifier "
"listing multiple requirements when serialising metadata."
msgstr ""

#: ../../pep-0426.txt:885
msgid ""
"Despite this required normalisation, the same extra name or environment "
"marker MAY appear in multiple conditional dependencies. This may happen, "
"for example, if an extra itself only needs some of its dependencies in "
"specific environments. It is only the combination of extras and "
"environment markers that is required to be unique in a list of dependency"
" specifiers."
msgstr ""

#: ../../pep-0426.txt:891
msgid ""
"Aside from the six standard extra categories, any extras referenced from "
"a dependency specifier MUST be named in the `Extras`_ field for this "
"distribution. This helps avoid typographical errors and also makes it "
"straightforward to identify the available extras without scanning the "
"full set of dependencies."
msgstr ""

#: ../../pep-0426.txt:896
msgid ""
"To reuse an extra definition as part of another extra, project releases "
"MAY declare dependencies on themselves. To avoid infinite recursion in "
"these cases, automated tools MUST special case dependencies from a "
"project back onto itself."
msgstr ""

#: ../../pep-0426.txt:902
msgid "Metadata Extensions"
msgstr ""

#: ../../pep-0426.txt:904
msgid ""
"Extensions to the metadata MAY be present in a mapping under the "
"``extensions`` key.  The keys MUST be valid prefixed names, while the "
"values MUST themselves be nested mappings."
msgstr ""

#: ../../pep-0426.txt:908
msgid ""
"Two key names are reserved and MUST NOT be used by extensions, except as "
"described below:"
msgstr ""

#: ../../pep-0426.txt:911
msgid "``extension_version``"
msgstr ""

#: ../../pep-0426.txt:912
msgid "``installer_must_handle``"
msgstr ""

#: ../../pep-0426.txt:914
msgid ""
"The following example shows the ``python.details`` and "
"``python.commands`` standard extensions from :pep:`459`::"
msgstr ""

#: ../../pep-0426.txt:941
msgid ""
"Extension names are defined by distributions that will then make use of "
"the additional published metadata in some way."
msgstr ""

#: ../../pep-0426.txt:944
msgid ""
"To reduce the chance of name conflicts, extension names SHOULD use a "
"prefix that corresponds to a module name in the distribution that defines"
" the meaning of the extension. This practice will also make it easier to "
"find authoritative documentation for metadata extensions."
msgstr ""

#: ../../pep-0426.txt:949
msgid ""
"Metadata extensions allow development tools to record information in the "
"metadata that may be useful during later phases of distribution, but is "
"not essential for dependency resolution or building the software."
msgstr ""

#: ../../pep-0426.txt:955
msgid "Extension versioning"
msgstr ""

#: ../../pep-0426.txt:957
msgid ""
"Extensions MUST be versioned, using the ``extension_version`` key. "
"However, if this key is omitted, then the implied version is ``1.0``."
msgstr ""

#: ../../pep-0426.txt:960
msgid ""
"Automated tools consuming extension metadata SHOULD warn if "
"``extension_version`` is greater than the highest version they support, "
"and MUST fail if ``extension_version`` has a greater major version than "
"the highest version they support (as described in PEP 440, the major "
"version is the value before the first dot)."
msgstr ""

#: ../../pep-0426.txt:966
msgid ""
"For broader compatibility, build tools MAY choose to produce extension "
"metadata using the lowest metadata version that includes all of the "
"needed fields."
msgstr ""

#: ../../pep-0426.txt:972
msgid "Required extension handling"
msgstr ""

#: ../../pep-0426.txt:974
msgid ""
"A project may consider correct handling of some extensions to be "
"essential to correct installation of the software. This is indicated by "
"setting the ``installer_must_handle`` field to ``true``. Setting it to "
"``false`` or omitting it altogether indicates that processing the "
"extension when installing the distribution is not considered mandatory by"
" the developers."
msgstr ""

#: ../../pep-0426.txt:980
msgid ""
"Installation tools MUST fail if ``installer_must_handle`` is set to "
"``true`` for an extension and the tool does not have any ability to "
"process that particular extension (whether directly or through a tool-"
"specific plugin system)."
msgstr ""

#: ../../pep-0426.txt:985
msgid ""
"If an installation tool encounters a required extension it doesn't "
"understand when attempting to install from a wheel archive, it MAY fall "
"back on attempting to install from source rather than failing entirely."
msgstr ""

#: ../../pep-0426.txt:991
msgid "Extras (optional dependencies)"
msgstr ""

#: ../../pep-0426.txt:993
msgid ""
"As defined in PEP 508, extras are additional dependencies that enable an "
"optional aspect of a project release, often corresponding to a ``try: "
"import optional_dependency ...`` block in the code. They are also used to"
" indicate semantic dependencies for activities other than normal runtime "
"using (such as testing, building, or working on the component)."
msgstr ""

#: ../../pep-0426.txt:999
msgid ""
"To support the use of the release with or without the optional "
"dependencies, they are listed separately from the release's core runtime "
"dependencies and must be requested explicitly, either in the dependency "
"specifications of another project, or else when issuing a command to an "
"installation tool."
msgstr ""

#: ../../pep-0426.txt:1004
msgid "Example of a distribution with optional dependencies::"
msgstr ""

#: ../../pep-0426.txt:1019
msgid ""
"Other distributions require the additional dependencies by placing the "
"relevant extra names inside square brackets after the distribution name "
"when specifying the dependency. Multiple extras from a dependency can be "
"requested by placing to"
msgstr ""

#: ../../pep-0426.txt:1024
msgid ""
"If the standard ``all`` extra has no explicitly declared entries, then "
"integration tools SHOULD implicitly define it as a dependency on all of "
"the extras explicitly declared by the project."
msgstr ""

#: ../../pep-0426.txt:1028
msgid ""
"If the standard ``alldev`` extra has no explicitly declared entries, then"
" integration tools SHOULD implicitly define it as a dependency on the "
"standard ``test``, ``build``, ``doc``, and ``dev`` extras."
msgstr ""

#: ../../pep-0426.txt:1032
msgid ""
"The full set of dependency requirements is then based on the "
"unconditional dependencies, along with those of any requested extras."
msgstr ""

#: ../../pep-0426.txt:1035
msgid "Dependency examples (showing just the ``requires`` subfield)::"
msgstr ""

#: ../../pep-0426.txt:1049
msgid "Updating the metadata specification"
msgstr ""

#: ../../pep-0426.txt:1051
msgid ""
"The metadata specification may be updated with clarifications without "
"requiring a new PEP or a change to the metadata version."
msgstr ""

#: ../../pep-0426.txt:1054
msgid ""
"Changing the meaning of existing fields or adding new features (other "
"than through the extension mechanism) requires a new metadata version "
"defined in a new PEP."
msgstr ""

#: ../../pep-0426.txt:1060
msgid "Appendix A: Conversion notes for legacy metadata"
msgstr ""

#: ../../pep-0426.txt:1062
msgid ""
"The reference implementations for converting from legacy metadata to "
"metadata 2.0 are:"
msgstr ""

#: ../../pep-0426.txt:1065
msgid ""
"the `wheel project <https://bitbucket.org/dholth/wheel/overview>`__, "
"which adds the ``bdist_wheel`` command to ``setuptools``"
msgstr ""

#: ../../pep-0426.txt:1067
msgid ""
"the `Warehouse project <https://github.com/dstufft/warehouse>`__, which "
"will eventually be migrated to the Python Packaging Authority as the next"
" generation Python Package Index implementation"
msgstr ""

#: ../../pep-0426.txt:1070
msgid ""
"the `distlib project <https://bitbucket.org/pypa/distlib/>`__ which is "
"derived from the core packaging infrastructure created for the "
"``distutils2`` project"
msgstr ""

#: ../../pep-0426.txt:1076
msgid ""
"These tools have yet to be updated for the switch to standard extensions "
"for several fields."
msgstr ""

#: ../../pep-0426.txt:1079
msgid ""
"While it is expected that there may be some edge cases where manual "
"intervention is needed for clean conversion, the specification has been "
"designed to allow fully automated conversion of almost all projects on "
"PyPI."
msgstr ""

#: ../../pep-0426.txt:1084
msgid ""
"Metadata conversion (especially on the part of the index server) is a "
"necessary step to allow installation and analysis tools to start "
"benefiting from the new metadata format, without having to wait for "
"developers to upgrade to newer build systems."
msgstr ""

#: ../../pep-0426.txt:1091
msgid "Appendix B: Mapping dependency declarations to an RPM SPEC file"
msgstr ""

#: ../../pep-0426.txt:1093
msgid ""
"As an example of mapping this PEP to Linux distro packages, assume an "
"example project without any extras defined is split into 2 RPMs in a SPEC"
" file: ``example`` and ``example-devel``."
msgstr ""

#: ../../pep-0426.txt:1097
msgid ""
"The unconditional dependencies would be mapped to the Requires "
"dependencies for the \"example\" RPM (a mapping from environment markers "
"relevant to Linux to SPEC file conditions would also allow those to be "
"handled correctly)."
msgstr ""

#: ../../pep-0426.txt:1101
#, python-format
msgid ""
"The ``build`` and ``dev`` extra dependencies would be mapped to the "
"BuildRequires dependencies for the \"example\" RPM. Depending on how the "
"``%check`` section in the RPM was defined, the ``test`` extra may also be"
" mapped to the BuildRequires declaration for the RPM."
msgstr ""

#: ../../pep-0426.txt:1106
msgid ""
"All defined dependencies relevant to Linux in the ``dev``, ``test``, "
"``build``, and ``doc`` extras would become Requires dependencies for the "
"\"example-devel\" RPM."
msgstr ""

#: ../../pep-0426.txt:1110
msgid ""
"A documentation toolchain dependency like Sphinx would either go in the "
"``build`` extra (for example, if man pages were included in the built "
"distribution) or in the ``doc`` extra (for example, if the documentation "
"is published solely through ReadTheDocs or the project website). This "
"would be enough to allow an automated converter to map it to an "
"appropriate dependency in the spec file."
msgstr ""

#: ../../pep-0426.txt:1117
msgid ""
"If the project did define any extras, those could be mapped to additional"
" virtual RPMs with appropriate BuildRequires and Requires entries based "
"on the details of the dependency specifications. Alternatively, they "
"could be mapped to other system package manager features (such as weak "
"dependencies)."
msgstr ""

#: ../../pep-0426.txt:1122
msgid ""
"The metadata extension format should also provide a way for distribution "
"specific hints to be included in the upstream project metadata without "
"needing to manually duplicate any of the upstream metadata in a "
"distribution specific format."
msgstr ""

#: ../../pep-0426.txt:1129
msgid "Appendix C: Summary of differences from \\PEP 345"
msgstr ""

#: ../../pep-0426.txt:1131
msgid ""
"Metadata-Version is now 2.0, with semantics specified for handling "
"version changes"
msgstr ""

#: ../../pep-0426.txt:1134
msgid ""
"The increasingly complex ad hoc \"Key: Value\" format has been replaced "
"by a more structured JSON compatible format that is easily represented as"
" Python dictionaries, strings, lists."
msgstr ""

#: ../../pep-0426.txt:1138
msgid ""
"Most fields are now optional and filling in dummy data for omitted fields"
" is explicitly disallowed"
msgstr ""

#: ../../pep-0426.txt:1141
msgid ""
"Explicit permission for in-place clarifications without releasing a new "
"version of the specification"
msgstr ""

#: ../../pep-0426.txt:1144
msgid ""
"The PEP now attempts to provide more of an explanation of *why* the "
"fields exist and how they are intended to be used, rather than being a "
"simple description of the permitted contents"
msgstr ""

#: ../../pep-0426.txt:1148
msgid "Changed the version scheme to be based on PEP 440 rather than PEP 386"
msgstr ""

#: ../../pep-0426.txt:1150
msgid "Added the source label mechanism as described in PEP 440"
msgstr ""

#: ../../pep-0426.txt:1152
msgid ""
"Formally defined dependency declarations, extras, and environment markers"
" in PEP 508"
msgstr ""

#: ../../pep-0426.txt:1155
msgid ""
"Support for different kinds of dependencies through additional reserved "
"extra names"
msgstr ""

#: ../../pep-0426.txt:1158
msgid "Updated obsolescence mechanism"
msgstr ""

#: ../../pep-0426.txt:1160
msgid ""
"A well-defined metadata extension mechanism, and migration of any fields "
"not needed for dependency resolution to standard extensions"
msgstr ""

#: ../../pep-0426.txt:1163
msgid ""
"With all due respect to Charles Schulz and Peanuts, many of the examples "
"have been updated to be more thematically appropriate for Python ;)"
msgstr ""

#: ../../pep-0426.txt:1166
msgid "The rationale for major changes is given in the following sections."
msgstr ""

#: ../../pep-0426.txt:1170
msgid "Metadata-Version semantics"
msgstr ""

#: ../../pep-0426.txt:1172
msgid ""
"The semantics of major and minor version increments are now specified, "
"and follow the same model as the format version semantics specified for "
"the wheel format in PEP 427: minor version increments must behave "
"reasonably when processed by a tool that only understand earlier metadata"
" versions with the same major version, while major version increments may"
" include changes that are not compatible with existing tools."
msgstr ""

#: ../../pep-0426.txt:1179
msgid ""
"The major version number of the specification has been incremented "
"accordingly, as interpreting PEP 426 metadata obviously cannot be "
"interpreted in accordance with earlier metadata specifications."
msgstr ""

#: ../../pep-0426.txt:1183
msgid ""
"Whenever the major version number of the specification is incremented, it"
" is expected that deployment will take some time, as either metadata "
"consuming tools must be updated before other tools can safely start "
"producing the new format, or else the sdist and wheel formats, along with"
" the installation database definition, will need to be updated to support"
" provision of multiple versions of the metadata in parallel."
msgstr ""

#: ../../pep-0426.txt:1190
msgid ""
"Existing tools won't abide by this guideline until they're updated to "
"support the new metadata standard, so the new semantics will first take "
"effect for a hypothetical 2.x -> 3.0 transition. For the 1.x -> 2.x "
"transition, we will use the approach where tools continue to produce the "
"existing supplementary files (such as ``entry_points.txt``) in addition "
"to any equivalents specified using the new features of the standard "
"metadata format (including the formal extension mechanism)."
msgstr ""

#: ../../pep-0426.txt:1200
msgid "Switching to a JSON compatible format"
msgstr ""

#: ../../pep-0426.txt:1202
msgid ""
"The old \"Key:Value\" format was becoming increasingly limiting, with "
"various complexities like parsers needing to know which fields were "
"permitted to occur more than once, which fields supported the environment"
" marker syntax (with an optional ``\";\"`` to separate the value from the"
" marker) and eventually even the option to embed arbitrary JSON inside "
"particular subfields."
msgstr ""

#: ../../pep-0426.txt:1209
msgid ""
"The old serialisation format also wasn't amenable to easy conversion to "
"standard Python data structures for use in any new install hook APIs, or "
"in future extensions to the runtime importer APIs to allow them to "
"provide information for inclusion in the installation database."
msgstr ""

#: ../../pep-0426.txt:1214
msgid ""
"Accordingly, we've taken the step of switching to a JSON-compatible "
"metadata format. This works better for APIs and is much easier for tools "
"to parse and generate correctly. Changing the name of the metadata file "
"also makes it easy to distribute 1.x and 2.x metadata in parallel, "
"greatly simplifying several aspects of the migration to the new metadata "
"format."
msgstr ""

#: ../../pep-0426.txt:1220
msgid ""
"The specific choice of ``pydist.json`` as the preferred file name relates"
" to the fact that the metadata described in these files applies to the "
"distribution as a whole, rather than to any particular build. Additional "
"metadata formats may be defined in the future to hold information that "
"can only be determined after building a binary distribution for a "
"particular target environment."
msgstr ""

#: ../../pep-0426.txt:1229
msgid "Changing the version scheme"
msgstr ""

#: ../../pep-0426.txt:1231
msgid ""
"See PEP 440 for a detailed rationale for the various changes made to the "
"versioning scheme."
msgstr ""

#: ../../pep-0426.txt:1238
msgid ""
"The new source label support is intended to make it clearer that the "
"constraints on public version identifiers are there primarily to aid in "
"the creation of reliable automated dependency analysis tools. Projects "
"are free to use whatever versioning scheme they like internally, so long "
"as they are able to translate it to something the dependency analysis "
"tools will understand."
msgstr ""

#: ../../pep-0426.txt:1245
msgid ""
"Source labels also make it straightforward to record specific details of "
"a version, like a hash or tag name that allows the release to be "
"reconstructed from the project version control system."
msgstr ""

#: ../../pep-0426.txt:1251
msgid "Support for optional dependencies for distributions"
msgstr ""

#: ../../pep-0426.txt:1253
msgid ""
"The new extras system allows distributions to declare optional behaviour,"
" and to use the dependency fields to indicate when particular "
"dependencies are needed only to support that behaviour. It is derived "
"from the equivalent system that is already in widespread use as part of "
"``setuptools`` and allows that aspect of the legacy ``setuptools`` "
"metadata to be accurately represented in the new metadata format."
msgstr ""

#: ../../pep-0426.txt:1260
msgid ""
"The additions to the extras syntax relative to setuptools are defined to "
"make it easier to express the various possible combinations of "
"dependencies, in particular those associated with build systems (with "
"optional support for running the test suite) and development systems."
msgstr ""

#: ../../pep-0426.txt:1267
msgid "Support for different kinds of semantic dependencies"
msgstr ""

#: ../../pep-0426.txt:1269
msgid ""
"The separation of the five different kinds of dependency through the "
"Extras system allows a project to optionally indicate whether a "
"dependency is needed specifically to develop, build, test or use the "
"distribution."
msgstr ""

#: ../../pep-0426.txt:1273
msgid ""
"The advantage of having these distinctions supported in the upstream "
"Python specific metadata is that even if a project doesn't care about "
"these distinction themselves, they may be more amenable to patches from "
"downstream redistributors that separate the fields appropriately. Over "
"time, this should allow much greater control over where and when "
"particular dependencies end up being installed."
msgstr ""

#: ../../pep-0426.txt:1282
msgid "Support for metadata extensions"
msgstr ""

#: ../../pep-0426.txt:1284
msgid ""
"The new extension effectively allows sections of the metadata namespace "
"to be delegated to other projects, while preserving a standard overal "
"format metadata format for easy of processing by distribution tools that "
"do not support a particular extension."
msgstr ""

#: ../../pep-0426.txt:1289
msgid ""
"It also works well in combination with the new ``build`` extra to allow a"
" distribution to depend on tools which *do* know how to handle the chosen"
" extension, and the new extras mechanism in general, allowing support for"
" particular extensions to be provided as optional features."
msgstr ""

#: ../../pep-0426.txt:1294
msgid ""
"Possible future uses for extensions include declaration of plugins for "
"other projects and hints for automatic conversion to Linux system "
"packages."
msgstr ""

#: ../../pep-0426.txt:1298
msgid ""
"The ability to declare an extension as required is included primarily to "
"allow the definition of the metadata hooks extension to be deferred until"
" some time after the initial adoption of the metadata 2.0 specification. "
"If a release needs a ``postinstall`` hook to run in order to complete the"
" installation successfully, then earlier versions of tools should fall "
"back to installing from source rather than installing from a wheel file "
"and then failing to run the expected postinstall hook."
msgstr ""

#: ../../pep-0426.txt:1309
msgid "Appendix D: Deferred features"
msgstr ""

#: ../../pep-0426.txt:1311
msgid ""
"Several potentially useful features have been deliberately deferred in "
"order to better prioritise our efforts in migrating to the new metadata "
"standard. These all reflect information that may be nice to have in the "
"new metadata, but which can be readily added through metadata extensions "
"or in metadata 2.1 without breaking any use cases already supported by "
"metadata 2.0."
msgstr ""

#: ../../pep-0426.txt:1318
msgid ""
"Once the ``pypi``, ``setuptools``, ``pip``, ``wheel`` and ``distlib`` "
"projects support creation and consumption of metadata 2.0, then we may "
"revisit the creation of metadata 2.1 with some or all of these additional"
" features."
msgstr ""

#: ../../pep-0426.txt:1325
msgid "Standard extensions"
msgstr ""

#: ../../pep-0426.txt:1327
msgid ""
"Some of the information provided by the legacy metadata system has been "
"moved out to standard extensions defined in PEP 459."
msgstr ""

#: ../../pep-0426.txt:1330
msgid ""
"This allows publication of the core dependency metadata in a more readily"
" consumable format to proceed even before the full details of those "
"extensions have been resolved."
msgstr ""

#: ../../pep-0426.txt:1336
msgid "Improved handling of project obsolescence, renames and mergers"
msgstr ""

#: ../../pep-0426.txt:1338
msgid ""
"Earlier drafts of this PEP included new ``Provides`` and ``Obsoleted-By``"
" fields for more robust automated notifications and tracking of project "
"obsolescence, renames and mergers."
msgstr ""

#: ../../pep-0426.txt:1342
msgid ""
"This isn't an essential feature of a dependency management system, and "
"has been deferred indefinitely as a possible future metadata extension."
msgstr ""

#: ../../pep-0426.txt:1347
msgid "MIME type registration"
msgstr ""

#: ../../pep-0426.txt:1349
msgid ""
"At some point after acceptance of the PEP, we may submit the following "
"MIME type registration request to IANA:"
msgstr ""

#: ../../pep-0426.txt:1352
msgid "``application/vnd.python.pydist+json``"
msgstr ""

#: ../../pep-0426.txt:1354
msgid ""
"It's even possible we may be able to just register the ``vnd.python`` "
"namespace under the banner of the PSF rather than having to register the "
"individual subformats."
msgstr ""

#: ../../pep-0426.txt:1360
msgid "String methods in environment markers"
msgstr ""

#: ../../pep-0426.txt:1362
msgid ""
"Supporting at least \".startswith\" and \".endswith\" string methods in "
"environment markers would allow some conditions to be written more "
"naturally. For example, ``\"sys.platform.startswith('win')\"`` is a "
"somewhat more intuitive way to mark Windows specific dependencies, since "
"``\"'win' in sys.platform\"`` is incorrect thanks to ``cygwin`` and the  "
"fact that 64-bit Windows still shows up as ``win32`` is more than a "
"little strange."
msgstr ""

#: ../../pep-0426.txt:1372
msgid "Appendix E: Rejected features"
msgstr ""

#: ../../pep-0426.txt:1374
msgid ""
"The following features have been explicitly considered and rejected as "
"introducing too much additional complexity for too small a gain in "
"expressiveness."
msgstr ""

#: ../../pep-0426.txt:1380
msgid "Separate lists for conditional and unconditional dependencies"
msgstr ""

#: ../../pep-0426.txt:1382
msgid ""
"Earlier versions of this PEP used separate lists for conditional and "
"unconditional dependencies. This turned out to be annoying to handle in "
"automated tools and removing it also made the PEP and metadata schema "
"substantially shorter, suggesting it was actually harder to explain as "
"well."
msgstr ""

#: ../../pep-0426.txt:1389
msgid "Separate lists for semantic dependencies"
msgstr ""

#: ../../pep-0426.txt:1391
msgid ""
"Earlier versions of this PEP used separate fields rather than the extras "
"system for test, build, documentation, and development dependencies. This"
" turned out to be annoying to handle in automated tools and removing it "
"also made the PEP and metadata schema substantially shorter, suggesting "
"it was actually harder to explain as well."
msgstr ""

#: ../../pep-0426.txt:1399
msgid "Introducing friction for overly precise dependency declarations"
msgstr ""

#: ../../pep-0426.txt:1401
msgid ""
"Earlier versions of this PEP attempted to introduce friction into the "
"inappropriate use of overly strict dependency declarations in published "
"releases. Discussion on distutils-sig came to the conclusion that wasn't "
"a serious enough problem to tackle directly at the interoperability "
"specification layer, and if it does become a problem in the future, it "
"would be better tackled at the point where projects are uploaded to the "
"public Python Package Index."
msgstr ""

#: ../../pep-0426.txt:1411
msgid "Disallowing underscores in distribution names"
msgstr ""

#: ../../pep-0426.txt:1413
msgid ""
"Debian doesn't actually permit underscores in names, but that seems "
"unduly restrictive for this spec given the common practice of using valid"
" Python identifiers as Python distribution names. A Debian side policy of"
" converting underscores to hyphens seems easy enough to implement (and "
"the requirement to consider hyphens and underscores as equivalent ensures"
" that doing so won't introduce any name conflicts)."
msgstr ""

#: ../../pep-0426.txt:1422
msgid "Allowing the use of Unicode in distribution names"
msgstr ""

#: ../../pep-0426.txt:1424
msgid ""
"This PEP deliberately avoids following Python 3 down the path of "
"arbitrary Unicode identifiers, as the security implications of doing so "
"are substantially worse in the software distribution use case (it opens "
"up far more interesting attack vectors than mere code obfuscation)."
msgstr ""

#: ../../pep-0426.txt:1429
msgid ""
"In addition, the existing tools really only work properly if you restrict"
" names to ASCII and changing that would require a *lot* of work for all "
"the automated tools in the chain."
msgstr ""

#: ../../pep-0426.txt:1433
msgid ""
"It may be reasonable to revisit this question at some point in the "
"(distant) future, but setting up a more reliable software distribution "
"system is challenging enough without adding more general Unicode "
"identifier support into the mix."
msgstr ""

#: ../../pep-0426.txt:1440
msgid "Depending on source labels"
msgstr ""

#: ../../pep-0426.txt:1442
msgid ""
"There is no mechanism to express a dependency on a source label - they "
"are included in the metadata for internal project reference only. "
"Instead, dependencies must be expressed in terms of either public "
"versions or else direct URL references."
msgstr ""

#: ../../pep-0426.txt:1449
msgid "Alternative dependencies"
msgstr ""

#: ../../pep-0426.txt:1451
msgid ""
"An earlier draft of this PEP considered allowing lists in place of the "
"usual strings in dependency specifications to indicate that there are "
"multiple ways to satisfy a dependency."
msgstr ""

#: ../../pep-0426.txt:1455
msgid ""
"If at least one of the individual dependencies was already available, "
"then the entire dependency would be considered satisfied, otherwise the "
"first entry would be added to the dependency set."
msgstr ""

#: ../../pep-0426.txt:1459
msgid "Alternative dependency specification example::"
msgstr ""

#: ../../pep-0426.txt:1464
msgid ""
"However, neither of the given examples is particularly compelling, since "
"Pillow/PIL style forks aren't common, and the database driver use case "
"would arguably be better served by an SQL Alchemy defined \"supported "
"database driver\" metadata extension where a project depends on SQL "
"Alchemy, and then declares in the extension which database drivers are "
"checked for compatibility by the upstream project."
msgstr ""

#: ../../pep-0426.txt:1473
msgid "Compatible release comparisons in environment markers"
msgstr ""

#: ../../pep-0426.txt:1475
msgid ""
"PEP 440 defines a rich syntax for version comparisons that could "
"potentially be useful with ``python_version`` and ``python_full_version``"
" in environment markers. However, allowing the full syntax would mean "
"environment markers are no longer a Python subset, while allowing only "
"some of the comparisons would introduce yet another special case to "
"handle."
msgstr ""

#: ../../pep-0426.txt:1482
msgid ""
"Given that environment markers are only used in cases where a higher "
"level \"or\" is implied by the metadata structure, it seems easier to "
"require the use of multiple comparisons against specific Python versions "
"for the rare cases where this would be useful."
msgstr ""

#: ../../pep-0426.txt:1489
msgid "Conditional provides"
msgstr ""

#: ../../pep-0426.txt:1491
msgid ""
"Under the revised metadata design, conditional \"provides\" based on "
"runtime features or the environment would go in a separate "
"\"may_provide\" field. However, it isn't clear there's any use case for "
"doing that, so the idea is rejected unless someone can present a "
"compelling use case (and even then the idea won't be reconsidered until "
"metadata 2.1 at the earliest)."
msgstr ""

#: ../../pep-0426.txt:1499
msgid "References"
msgstr ""

#: ../../pep-0426.txt:1501
msgid ""
"This document specifies version 2.0 of the metadata format. Version 1.0 "
"is specified in PEP 241. Version 1.1 is specified in PEP 314. Version 1.2"
" is specified in PEP 345."
msgstr ""

#: ../../pep-0426.txt:1506
msgid ""
"The initial attempt at a standardised version scheme, along with the "
"justifications for needing such a standard can be found in PEP 386."
msgstr ""

#: ../../pep-0426.txt:1509
msgid "reStructuredText markup: http://docutils.sourceforge.net/"
msgstr ""

#: ../../pep-0426.txt:1518
msgid "Copyright"
msgstr ""

#: ../../pep-0426.txt:1520
msgid "This document has been placed in the public domain."
msgstr ""

