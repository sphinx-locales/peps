# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-3133.txt
msgid "PEP"
msgstr ""

#: ../../pep-3133.txt:1
msgid "3133"
msgstr ""

#: ../../pep-3133.txt
msgid "Title"
msgstr ""

#: ../../pep-3133.txt:2
msgid "Introducing Roles"
msgstr ""

#: ../../pep-3133.txt
msgid "Author"
msgstr ""

#: ../../pep-3133.txt:5
msgid "Collin Winter <collinwinter@google.com>"
msgstr ""

#: ../../pep-3133.txt
msgid "Status"
msgstr ""

#: ../../pep-3133.txt:6
msgid "Rejected"
msgstr ""

#: ../../pep-3133.txt
msgid "Type"
msgstr ""

#: ../../pep-3133.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-3133.txt
msgid "Requires"
msgstr ""

#: ../../pep-3133.txt:9
msgid "3115, 3129"
msgstr ""

#: ../../pep-3133.txt
msgid "Created"
msgstr ""

#: ../../pep-3133.txt:10
msgid "01-May-2007"
msgstr ""

#: ../../pep-3133.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-3133.txt:11
msgid "3.0"
msgstr ""

#: ../../pep-3133.txt
msgid "Post-History"
msgstr ""

#: ../../pep-3133.txt:12
msgid "13-May-2007"
msgstr ""

#: ../../pep-3133.txt:16
msgid "Rejection Notice"
msgstr ""

#: ../../pep-3133.txt:18
msgid ""
"This PEP has helped push PEP 3119 towards a saner, more minimalistic "
"approach.  But given the latest version of PEP 3119 I much prefer that.  "
"GvR."
msgstr ""

#: ../../pep-3133.txt:24
msgid "Abstract"
msgstr ""

#: ../../pep-3133.txt:26
msgid ""
"Python's existing object model organizes objects according to their "
"implementation.  It is often desirable -- especially in duck typing-based"
" language like Python -- to organize objects by the part they play in a "
"larger system (their intent), rather than by how they fulfill that part "
"(their implementation).  This PEP introduces the concept of roles, a "
"mechanism for organizing objects according to their intent rather than "
"their implementation."
msgstr ""

#: ../../pep-3133.txt:36
msgid "Rationale"
msgstr ""

#: ../../pep-3133.txt:38
msgid ""
"In the beginning were objects.  They allowed programmers to marry "
"function and state, and to increase code reusability through concepts "
"like polymorphism and inheritance, and lo, it was good.  There came a "
"time, however, when inheritance and polymorphism weren't enough. With the"
" invention of both dogs and trees, we were no longer able to be content "
"with knowing merely, \"Does it understand 'bark'?\" We now needed to know"
" what a given object thought that \"bark\" meant."
msgstr ""

#: ../../pep-3133.txt:46
msgid ""
"One solution, the one detailed here, is that of roles, a mechanism "
"orthogonal and complementary to the traditional class/instance system. "
"Whereas classes concern themselves with state and implementation, the "
"roles mechanism deals exclusively with the behaviours embodied in a given"
" class."
msgstr ""

#: ../../pep-3133.txt:52
msgid ""
"This system was originally called \"traits\" and implemented for Squeak "
"Smalltalk [#traits-paper]_.  It has since been adapted for use in Perl 6 "
"[#perl6-s12]_ where it is called \"roles\", and it is primarily from "
"there that the concept is now being interpreted for Python 3. Python 3 "
"will preserve the name \"roles\"."
msgstr ""

#: ../../pep-3133.txt:58
msgid ""
"In a nutshell: roles tell you *what* an object does, classes tell you "
"*how* an object does it."
msgstr ""

#: ../../pep-3133.txt:61
msgid ""
"In this PEP, I will outline a system for Python 3 that will make it "
"possible to easily determine whether a given object's understanding of "
"\"bark\" is tree-like or dog-like.  (There might also be more serious "
"examples.)"
msgstr ""

#: ../../pep-3133.txt:68
msgid "A Note on Syntax"
msgstr ""

#: ../../pep-3133.txt:70
msgid ""
"A syntax proposals in this PEP are tentative and should be considered to "
"be strawmen.  The necessary bits that this PEP depends on -- namely PEP "
"3115's class definition syntax and PEP 3129's class decorators -- are "
"still being formalized and may change.  Function names will, of course, "
"be subject to lengthy bikeshedding debates."
msgstr ""

#: ../../pep-3133.txt:78
msgid "Performing Your Role"
msgstr ""

#: ../../pep-3133.txt:81
msgid "Static Role Assignment"
msgstr ""

#: ../../pep-3133.txt:83
msgid "Let's start out by defining ``Tree`` and ``Dog`` classes ::"
msgstr ""

#: ../../pep-3133.txt:96
msgid ""
"While both implement a ``bark()`` method with the same signature, they do"
" wildly different things.  We need some way of differentiating what we're"
" expecting. Relying on inheritance and a simple ``isinstance()`` test "
"will limit code reuse and/or force any dog-like classes to inherit from "
"``Dog``, whether or not that makes sense. Let's see if roles can help. ::"
msgstr ""

#: ../../pep-3133.txt:115
msgid ""
"We use class decorators from PEP 3129 to associate a particular role or "
"roles with a class.  Client code can now verify that an incoming object "
"performs the ``Doglike`` role, allowing it to handle ``Wolf``, "
"``LaughingHyena`` and ``Aibo`` [#aibo]_ instances, too."
msgstr ""

#: ../../pep-3133.txt:120
msgid "Roles can be composed via normal inheritance: ::"
msgstr ""

#: ../../pep-3133.txt:133
msgid ""
"Here, ``GermanShepherd`` instances perform three roles: ``Guard`` and "
"``MummysLittleDarling`` are applied directly, whereas ``Doglike`` is "
"inherited from ``Dog``."
msgstr ""

#: ../../pep-3133.txt:139
msgid "Assigning Roles at Runtime"
msgstr ""

#: ../../pep-3133.txt:141
msgid ""
"Roles can be assigned at runtime, too, by unpacking the syntactic sugar "
"provided by decorators."
msgstr ""

#: ../../pep-3133.txt:144
msgid ""
"Say we import a ``Robot`` class from another module, and since we know "
"that ``Robot`` already implements our ``Guard`` interface, we'd like it "
"to play nicely with guard-related code, too. ::"
msgstr ""

#: ../../pep-3133.txt:150
msgid "This takes effect immediately and impacts all instances of ``Robot``."
msgstr ""

#: ../../pep-3133.txt:154
msgid "Asking Questions About Roles"
msgstr ""

#: ../../pep-3133.txt:156
msgid ""
"Just because we've told our robot army that they're guards, we'd like to "
"check in on them occasionally and make sure they're still at their task. "
"::"
msgstr ""

#: ../../pep-3133.txt:163
msgid "What about that one robot over there? ::"
msgstr ""

#: ../../pep-3133.txt:168
msgid ""
"The ``performs()`` function is used to ask if a given object fulfills a "
"given role.  It cannot be used, however, to ask a class if its instances "
"fulfill a role: ::"
msgstr ""

#: ../../pep-3133.txt:175
msgid ""
"This is because the ``Robot`` class is not interchangeable with a "
"``Robot`` instance."
msgstr ""

#: ../../pep-3133.txt:180
msgid "Defining New Roles"
msgstr ""

#: ../../pep-3133.txt:183
msgid "Empty Roles"
msgstr ""

#: ../../pep-3133.txt:185
msgid "Roles are defined like a normal class, but use the ``Role`` metaclass. ::"
msgstr ""

#: ../../pep-3133.txt:191
msgid ""
"Metaclasses are used to indicate that ``Doglike`` is a ``Role`` in the "
"same way 5 is an ``int`` and ``tuple`` is a ``type``."
msgstr ""

#: ../../pep-3133.txt:196
msgid "Composing Roles via Inheritance"
msgstr ""

#: ../../pep-3133.txt:198
msgid ""
"Roles may inherit from other roles; this has the effect of composing "
"them.  Here, instances of ``Dog`` will perform both the ``Doglike`` and "
"``FourLegs`` roles. ::"
msgstr ""

#: ../../pep-3133.txt:214
msgid "Requiring Concrete Methods"
msgstr ""

#: ../../pep-3133.txt:216
msgid ""
"So far we've only defined empty roles -- not very useful things. Let's "
"now require that all classes that claim to fulfill the ``Doglike`` role "
"define a ``bark()`` method: ::"
msgstr ""

#: ../../pep-3133.txt:225
msgid ""
"No decorators are required to flag the method as \"abstract\", and the "
"method will never be called, meaning whatever code it contains (if any) "
"is irrelevant.  Roles provide *only* abstract methods; concrete default "
"implementations are left to other, better-suited mechanisms like mixins."
msgstr ""

#: ../../pep-3133.txt:231
msgid ""
"Once you have defined a role, and a class has claimed to perform that "
"role, it is essential that that claim be verified.  Here, the programmer "
"has misspelled one of the methods required by the role. ::"
msgstr ""

#: ../../pep-3133.txt:241
msgid ""
"This will cause the role system to raise an exception, complaining that "
"you're missing a ``run_like_the_wind()`` method.  The role system carries"
" out these checks as soon as a class is flagged as performing a given "
"role."
msgstr ""

#: ../../pep-3133.txt:246
msgid ""
"Concrete methods are required to match exactly the signature demanded by "
"the role.  Here, we've attempted to fulfill our role by defining a "
"concrete version of ``bark()``, but we've missed the mark a bit. ::"
msgstr ""

#: ../../pep-3133.txt:256
msgid ""
"This method's signature doesn't match exactly with what the ``Doglike`` "
"role was expecting, so the role system will throw a bit of a tantrum."
msgstr ""

#: ../../pep-3133.txt:262
msgid "Mechanism"
msgstr ""

#: ../../pep-3133.txt:264
msgid ""
"The following are strawman proposals for how roles might be expressed in "
"Python.  The examples here are phrased in a way that the roles mechanism "
"may be implemented without changing the Python interpreter. (Examples "
"adapted from an article on Perl 6 roles by Curtis Poe [#roles-"
"examples]_.)"
msgstr ""

#: ../../pep-3133.txt:270
msgid "Static class role assignment ::"
msgstr ""

#: ../../pep-3133.txt:276
msgid ""
"``perform_role()`` accepts multiple arguments, such that this is also "
"legal: ::"
msgstr ""

#: ../../pep-3133.txt:283
msgid ""
"The ``Elf`` class now performs both the ``Thieving``, ``Spying``, and "
"``Archer`` roles."
msgstr ""

#: ../../pep-3133.txt:286
msgid "Querying instances ::"
msgstr ""

#: ../../pep-3133.txt:291
msgid ""
"The second argument to ``performs()`` may also be anything with a "
"``__contains__()`` method, meaning the following is legal: ::"
msgstr ""

#: ../../pep-3133.txt:297
msgid ""
"Like ``isinstance()``, the object needs only to perform a single role out"
" of the set in order for the expression to be true."
msgstr ""

#: ../../pep-3133.txt:302
msgid "Relationship to Abstract Base Classes"
msgstr ""

#: ../../pep-3133.txt:304
msgid ""
"Early drafts of this PEP [#proposal]_ envisioned roles as competing with "
"the abstract base classes proposed in PEP 3119.  After further discussion"
" and deliberation, a compromise and a delegation of responsibilities and "
"use-cases has been worked out as follows:"
msgstr ""

#: ../../pep-3133.txt:309
msgid ""
"Roles provide a way of indicating an object's semantics and abstract "
"capabilities.  A role may define abstract methods, but only as a way of "
"delineating an interface through which a particular set of semantics are "
"accessed.  An ``Ordering`` role might require that some set of ordering "
"operators  be defined. ::"
msgstr ""

#: ../../pep-3133.txt:327
msgid ""
"In this way, we're able to indicate an object's role or function within a"
" larger system without constraining or concerning ourselves with a "
"particular implementation."
msgstr ""

#: ../../pep-3133.txt:331
msgid ""
"Abstract base classes, by contrast, are a way of reusing common, discrete"
" units of implementation.  For example, one might define an "
"``OrderingMixin`` that implements several ordering operators in terms of "
"other operators. ::"
msgstr ""

#: ../../pep-3133.txt:348
msgid ""
"Using this abstract base class - more properly, a concrete mixin - allows"
" a programmer to define a limited set of operators and let the mixin in "
"effect \"derive\" the others."
msgstr ""

#: ../../pep-3133.txt:352
msgid ""
"By combining these two orthogonal systems, we're able to both a) provide "
"functionality, and b) alert consumer systems to the presence and "
"availability of this functionality.  For example, since the "
"``OrderingMixin`` class above satisfies the interface and semantics "
"expressed in the ``Ordering`` role, we say the mixin performs the role: "
"::"
msgstr ""

#: ../../pep-3133.txt:372
msgid ""
"Now, any class that uses the mixin will automatically -- that is, without"
" further programmer effort -- be tagged as performing the ``Ordering`` "
"role."
msgstr ""

#: ../../pep-3133.txt:376
msgid ""
"The separation of concerns into two distinct, orthogonal systems is "
"desirable because it allows us to use each one separately. Take, for "
"example, a third-party package providing a ``RecursiveHash`` role that "
"indicates a container takes its contents into account when determining "
"its hash value.  Since Python's built-in ``tuple`` and ``frozenset`` "
"classes follow this semantic, the ``RecursiveHash`` role can be applied "
"to them. ::"
msgstr ""

#: ../../pep-3133.txt:387
msgid ""
"Now, any code that consumes ``RecursiveHash`` objects will now be able to"
" consume tuples and frozensets."
msgstr ""

#: ../../pep-3133.txt:392
msgid "Open Issues"
msgstr ""

#: ../../pep-3133.txt:395
msgid "Allowing Instances to Perform Different Roles Than Their Class"
msgstr ""

#: ../../pep-3133.txt:397
msgid ""
"Perl 6 allows instances to perform different roles than their class. "
"These changes are local to the single instance and do not affect other "
"instances of the class.  For example: ::"
msgstr ""

#: ../../pep-3133.txt:407
msgid ""
"In Perl 6, this is done by creating an anonymous class that inherits from"
" the instance's original parent and performs the additional role(s).  "
"This is possible in Python 3, though whether it is desirable is still is "
"another matter."
msgstr ""

#: ../../pep-3133.txt:412
msgid ""
"Inclusion of this feature would, of course, make it much easier to "
"express the works of Charles Dickens in Python: ::"
msgstr ""

#: ../../pep-3133.txt:429
msgid "Requiring Attributes"
msgstr ""

#: ../../pep-3133.txt:431
msgid ""
"Neal Norwitz has requested the ability to make assertions about the "
"presence of attributes using the same mechanism used to require methods."
"  Since roles take effect at class definition-time, and since the vast "
"majority of attributes are defined at runtime by a class's ``__init__()``"
" method, there doesn't seem to be a good way to check for attributes at "
"the same time as methods."
msgstr ""

#: ../../pep-3133.txt:438
msgid ""
"It may still be desirable to include non-enforced attributes in the role "
"definition, if only for documentation purposes."
msgstr ""

#: ../../pep-3133.txt:443
msgid "Roles of Roles"
msgstr ""

#: ../../pep-3133.txt:445
msgid ""
"Under the proposed semantics, it is possible for roles to have roles of "
"their own. ::"
msgstr ""

#: ../../pep-3133.txt:452
msgid ""
"While this is possible, it is meaningless, since roles are generally not "
"instantiated.  There has been some off-line discussion about giving "
"meaning to this expression, but so far no good ideas have emerged."
msgstr ""

#: ../../pep-3133.txt:459
msgid "class_performs()"
msgstr ""

#: ../../pep-3133.txt:461
msgid ""
"It is currently not possible to ask a class if its instances perform a "
"given role.  It may be desirable to provide an analogue to ``performs()``"
" such that ::"
msgstr ""

#: ../../pep-3133.txt:476
msgid "Prettier Dynamic Role Assignment"
msgstr ""

#: ../../pep-3133.txt:478
msgid ""
"An early draft of this PEP included a separate mechanism for dynamically "
"assigning a role to a class.  This was spelled ::"
msgstr ""

#: ../../pep-3133.txt:483
msgid ""
"This same functionality already exists by unpacking the syntactic sugar "
"provided by decorators: ::"
msgstr ""

#: ../../pep-3133.txt:488
msgid ""
"At issue is whether dynamic role assignment is sufficiently important to "
"warrant a dedicated spelling."
msgstr ""

#: ../../pep-3133.txt:493
msgid "Syntax Support"
msgstr ""

#: ../../pep-3133.txt:495
msgid ""
"Though the phrasings laid out in this PEP are designed so that the roles "
"system could be shipped as a stand-alone package, it may be desirable to "
"add special syntax for defining, assigning and querying roles.  One "
"example might be a role keyword, which would translate ::"
msgstr ""

#: ../../pep-3133.txt:504
msgid "into ::"
msgstr ""

#: ../../pep-3133.txt:509
msgid ""
"Assigning a role could take advantage of the class definition arguments "
"proposed in PEP 3115: ::"
msgstr ""

#: ../../pep-3133.txt:517
msgid "Implementation"
msgstr ""

#: ../../pep-3133.txt:519
msgid "A reference implementation is forthcoming."
msgstr ""

#: ../../pep-3133.txt:523
msgid "Acknowledgements"
msgstr ""

#: ../../pep-3133.txt:525
msgid ""
"Thanks to Jeffery Yasskin, Talin and Guido van Rossum for several hours "
"of in-person discussion to iron out the differences, overlap and finer "
"points of roles and abstract base classes."
msgstr ""

#: ../../pep-3133.txt:531
msgid "References"
msgstr ""

#: ../../pep-3133.txt:534
msgid "http://en.wikipedia.org/wiki/AIBO"
msgstr ""

#: ../../pep-3133.txt:537
msgid "http://www.perlmonks.org/?node_id=384858"
msgstr ""

#: ../../pep-3133.txt:540
msgid "http://dev.perl.org/perl6/doc/design/syn/S12.html"
msgstr ""

#: ../../pep-3133.txt:543
msgid "http://www.iam.unibe.ch/~scg/Archive/Papers/Scha03aTraits.pdf"
msgstr ""

#: ../../pep-3133.txt:546
msgid "https://mail.python.org/pipermail/python-3000/2007-April/007026.html"
msgstr ""

#: ../../pep-3133.txt:550
msgid "Copyright"
msgstr ""

#: ../../pep-3133.txt:552
msgid "This document has been placed in the public domain."
msgstr ""

