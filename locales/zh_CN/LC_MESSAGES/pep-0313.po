# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0313.txt
msgid "PEP"
msgstr ""

#: ../../pep-0313.txt:1
msgid "313"
msgstr ""

#: ../../pep-0313.txt
msgid "Title"
msgstr ""

#: ../../pep-0313.txt:2
msgid "Adding Roman Numeral Literals to Python"
msgstr ""

#: ../../pep-0313.txt
msgid "Author"
msgstr ""

#: ../../pep-0313.txt:5
msgid "Mike Meyer <mwm@mired.org>"
msgstr ""

#: ../../pep-0313.txt
msgid "Status"
msgstr ""

#: ../../pep-0313.txt:6
msgid "Rejected"
msgstr ""

#: ../../pep-0313.txt
msgid "Type"
msgstr ""

#: ../../pep-0313.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0313.txt
msgid "Created"
msgstr ""

#: ../../pep-0313.txt:9
msgid "01-Apr-2003"
msgstr ""

#: ../../pep-0313.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0313.txt:10
msgid "2.4"
msgstr ""

#: ../../pep-0313.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0313.txt:15
msgid "Abstract"
msgstr ""

#: ../../pep-0313.txt:17
msgid ""
"This PEP (also known as PEP CCCXIII) proposes adding Roman numerals as a "
"literal type.  It also proposes the new built-in function \"roman\", "
"which converts an object to an integer, then converts the integer to a "
"string that is the Roman numeral literal equivalent to the integer."
msgstr ""

#: ../../pep-0313.txt:25
msgid "BDFL Pronouncement"
msgstr ""

#: ../../pep-0313.txt:27
msgid ""
"This PEP is rejected.  While the majority of Python users deemed this to "
"be a nice-to-have feature, the community was unable to reach a consensus "
"on whether nine should be represented as IX, the modern form, or VIIII, "
"the classic form.  Likewise, no agreement was reached on whether MXM or "
"MCMXC would be considered a well-formed representation of 1990.  A vocal "
"minority of users has also requested support for lower-cased numerals for"
" use in (i) powerpoint slides, (ii) academic work, and (iii) Perl "
"documentation."
msgstr ""

#: ../../pep-0313.txt:38
msgid "Rationale"
msgstr ""

#: ../../pep-0313.txt:40
msgid ""
"Roman numerals are used in a number of areas, and adding them to Python "
"as literals would make computations in those areas easier. For instance, "
"Super Bowls are counted with Roman numerals, and many older movies have "
"copyright dates in Roman numerals.  Further, LISP provides a Roman "
"numerals literal package, so adding Roman numerals to Python will help "
"ease the LISP-envy sometimes seen in comp.lang.python.  Besides, the "
"author thinks this is the easiest way to get his name on a PEP."
msgstr ""

#: ../../pep-0313.txt:51
msgid "Syntax for Roman literals"
msgstr ""

#: ../../pep-0313.txt:53
msgid ""
"Roman numeral literals will consist of the characters M, D, C, L, X, V "
"and I, and only those characters.  They must be in upper case, and "
"represent an integer with the following rules:"
msgstr ""

#: ../../pep-0313.txt:57
msgid ""
"Except as noted below, they must appear in the order M, D, C, L, X, V "
"then I.  Each occurrence of each character adds 1000, 500, 100, 50, 10, 5"
" and 1 to the value of the literal, respectively."
msgstr ""

#: ../../pep-0313.txt:61
msgid "Only one D, V or L may appear in any given literal."
msgstr ""

#: ../../pep-0313.txt:63
msgid ""
"At most three each of Is, Xs and Cs may appear consecutively in any given"
" literal."
msgstr ""

#: ../../pep-0313.txt:66
msgid ""
"A single I may appear immediately to the left of the single V, followed "
"by no Is, and adds 4 to the value of the literal."
msgstr ""

#: ../../pep-0313.txt:69
msgid ""
"A single I may likewise appear before the last X, followed by no Is or "
"Vs, and adds 9 to the value."
msgstr ""

#: ../../pep-0313.txt:72
msgid ""
"X is to L and C as I is to V and X, except the values are 40 and 90, "
"respectively."
msgstr ""

#: ../../pep-0313.txt:75
msgid ""
"C is to D and M as I is to V and X, except the values are 400 and 900, "
"respectively."
msgstr ""

#: ../../pep-0313.txt:78
msgid ""
"Any literal composed entirely of M, D, C, L, X, V and I characters that "
"does not follow this format will raise a syntax error, because explicit "
"is better than implicit."
msgstr ""

#: ../../pep-0313.txt:84
msgid "Built-In \"roman\" Function"
msgstr ""

#: ../../pep-0313.txt:86
msgid ""
"The new built-in function \"roman\" will aide the translation from "
"integers to Roman numeral literals.  It will accept a single object as an"
" argument, and return a string containing the literal of the same value."
"  If the argument is not an integer or a rational (see PEP 239 [1]_) it "
"will passed through the existing built-in \"int\" to obtain the value.  "
"This may cause a loss of information if the object was a float.  If the "
"object is a rational, then the result will be formatted as a rational "
"literal (see PEP 240 [2]_) with the integers in the string being Roman "
"numeral literals."
msgstr ""

#: ../../pep-0313.txt:99
msgid "Compatibility Issues"
msgstr ""

#: ../../pep-0313.txt:101
msgid ""
"No new keywords are introduced by this proposal.  Programs that use "
"variable names that are all upper case and contain only the characters M,"
" D, C, L, X, V and I will be affected by the new literals.  These "
"programs will now have syntax errors when those variables are assigned, "
"and either syntax errors or subtle bugs when those variables are "
"referenced in expressions.  Since such variable names violate PEP 8 [3]_,"
" the code is already broken, it just wasn't generating exceptions. This "
"proposal corrects that oversight in the language."
msgstr ""

#: ../../pep-0313.txt:113
msgid "References"
msgstr ""

#: ../../pep-0313.txt:115
msgid ""
"PEP 239, Adding a Rational Type to Python "
"http://www.python.org/dev/peps/pep-0239/"
msgstr ""

#: ../../pep-0313.txt:118
msgid ""
"PEP 240, Adding a Rational Literal to Python "
"http://www.python.org/dev/peps/pep-0240/"
msgstr ""

#: ../../pep-0313.txt:121
msgid ""
"PEP 8, Style Guide for Python Code "
"http://www.python.org/dev/peps/pep-0008/"
msgstr ""

#: ../../pep-0313.txt:126
msgid "Copyright"
msgstr ""

#: ../../pep-0313.txt:128
msgid "This document has been placed in the public domain."
msgstr ""

