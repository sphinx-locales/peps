# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0423.txt
msgid "PEP"
msgstr ""

#: ../../pep-0423.txt:1
msgid "423"
msgstr ""

#: ../../pep-0423.txt
msgid "Title"
msgstr ""

#: ../../pep-0423.txt:2
msgid "Naming conventions and recipes related to packaging"
msgstr ""

#: ../../pep-0423.txt
msgid "Author"
msgstr ""

#: ../../pep-0423.txt:5
msgid "Benoit Bryon <benoit@marmelune.net>"
msgstr ""

#: ../../pep-0423.txt
msgid "Discussions-To"
msgstr ""

#: ../../pep-0423.txt:6
msgid "<distutils-sig@python.org>"
msgstr ""

#: ../../pep-0423.txt
msgid "Status"
msgstr ""

#: ../../pep-0423.txt:7
msgid "Deferred"
msgstr ""

#: ../../pep-0423.txt
msgid "Type"
msgstr ""

#: ../../pep-0423.txt:8
msgid "Informational"
msgstr ""

#: ../../pep-0423.txt
msgid "Created"
msgstr ""

#: ../../pep-0423.txt:10
msgid "24-May-2012"
msgstr ""

#: ../../pep-0423.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0423.txt:15
msgid "Abstract"
msgstr ""

#: ../../pep-0423.txt:17
msgid "This document deals with:"
msgstr ""

#: ../../pep-0423.txt:19
msgid "names of Python projects,"
msgstr ""

#: ../../pep-0423.txt:20
msgid "names of Python packages or modules being distributed,"
msgstr ""

#: ../../pep-0423.txt:21
msgid "namespace packages."
msgstr ""

#: ../../pep-0423.txt:23
msgid "It provides guidelines and recipes for distribution authors:"
msgstr ""

#: ../../pep-0423.txt:25
msgid "new projects should follow the `guidelines <#overview>`_ below."
msgstr ""

#: ../../pep-0423.txt:27
msgid ""
"existing projects should be aware of these guidelines and can follow "
"`specific recipes for existing projects <#how-to-apply-naming-guidelines-"
"on-existing-projects>`_."
msgstr ""

#: ../../pep-0423.txt:32
msgid "PEP Deferral"
msgstr ""

#: ../../pep-0423.txt:34
msgid ""
"Further consideration of this PEP has been deferred at least until after "
"PEP 426 (package metadata 2.0) and related updates have been resolved."
msgstr ""

#: ../../pep-0423.txt:38
msgid "Terminology"
msgstr ""

#: ../../pep-0423.txt:40
msgid "Reference is `packaging terminology in Python documentation`_."
msgstr ""

#: ../../pep-0423.txt:44
msgid "Relationship with other PEPs"
msgstr ""

#: ../../pep-0423.txt:46
msgid ""
"`PEP 8`_ deals with code style guide, including names of Python packages "
"and modules. It covers syntax of package/modules names."
msgstr ""

#: ../../pep-0423.txt:49
msgid ""
"`PEP 345`_ deals with packaging metadata, and defines name argument of "
"the ``packaging.core.setup()`` function."
msgstr ""

#: ../../pep-0423.txt:52
msgid ""
"`PEP 420`_ deals with namespace packages. It brings support of namespace "
"packages to Python core. Before, namespaces packages were implemented by "
"external libraries."
msgstr ""

#: ../../pep-0423.txt:56
msgid ""
"`PEP 3108`_ deals with transition between Python 2.x and Python 3.x "
"applied to standard library: some modules to be deleted, some to be "
"renamed. It points out that naming conventions matter and is an example "
"of transition plan."
msgstr ""

#: ../../pep-0423.txt:63
msgid "Overview"
msgstr ""

#: ../../pep-0423.txt:65
msgid "Here is a summarized list of guidelines you should follow to choose names:"
msgstr ""

#: ../../pep-0423.txt:68
msgid "`understand and respect namespace ownership <#respect-ownership>`_."
msgstr ""

#: ../../pep-0423.txt:70
msgid "if your project is related to another project or community:"
msgstr ""

#: ../../pep-0423.txt:72
msgid ""
"search for conventions in main project's documentation, because `projects"
" should organize community contributions <#organize-community-"
"contributions>`_."
msgstr ""

#: ../../pep-0423.txt:76
msgid ""
"`follow specific project or related community conventions <#follow-"
"community-or-related-project-conventions-if-any>`_, if any."
msgstr ""

#: ../../pep-0423.txt:79
msgid ""
"if there is no convention, `follow a standard naming pattern <#use-"
"standard-pattern-for-community-contributions>`_."
msgstr ""

#: ../../pep-0423.txt:82
msgid "make sure your project name is unique, i.e. avoid duplicates:"
msgstr ""

#: ../../pep-0423.txt:84
msgid ""
"`use top-level namespace for ownership <#top-level-namespace-relates-to-"
"code-ownership>`_,"
msgstr ""

#: ../../pep-0423.txt:86
msgid "`check for name availability <#how-to-check-for-name-availability>`_,"
msgstr ""

#: ../../pep-0423.txt:88
msgid "`register names with PyPI`_."
msgstr ""

#: ../../pep-0423.txt:90
msgid ""
"make sure distributed packages and modules names are unique, unless you "
"explicitly want to distribute alternatives to existing packages or "
"modules. `Using the same value for package/module name and project name "
"<#use-a-single-name>`_ is the recommended way to achieve this."
msgstr ""

#: ../../pep-0423.txt:96
msgid ""
"`distribute only one package or module at a time <#multiple-packages-"
"modules-should-be-rare>`_, unless you know what you are doing. It makes "
"it possible to apply the \"`use a single name`_\" rule, and thus make "
"names consistent."
msgstr ""

#: ../../pep-0423.txt:101
msgid "make it easy to discover and remember your project:"
msgstr ""

#: ../../pep-0423.txt:103
msgid "`use as much memorable names as possible <#pick-memorable-names>`_,"
msgstr ""

#: ../../pep-0423.txt:105
msgid "`use as much meaningful names as possible <#pick-meaningful-names>`_,"
msgstr ""

#: ../../pep-0423.txt:107
msgid "`use other packaging metadata <#use-packaging-metadata>`_."
msgstr ""

#: ../../pep-0423.txt:109
msgid ""
"`avoid deep nesting`_. Flat things are easier to use and remember than "
"nested ones:"
msgstr ""

#: ../../pep-0423.txt:112
msgid ""
"one or two namespace levels are recommended, because they are almost "
"always enough."
msgstr ""

#: ../../pep-0423.txt:114
msgid "even if not recommended, three levels are, de facto, a common case."
msgstr ""

#: ../../pep-0423.txt:116
msgid "in most cases, you should not need more than three levels."
msgstr ""

#: ../../pep-0423.txt:118
msgid ""
"`follow PEP 8 <#follow-pep-8-for-syntax-of-package-and-module-names>`_ "
"for syntax of package and module names."
msgstr ""

#: ../../pep-0423.txt:122
msgid ""
"if you followed specific conventions, or if your project is intended to "
"receive contributions from the community, `organize community "
"contributions`_."
msgstr ""

#: ../../pep-0423.txt:126
msgid "`if still in doubt, ask <#if-in-doubt-ask>`_."
msgstr ""

#: ../../pep-0423.txt:130
msgid "If in doubt, ask"
msgstr ""

#: ../../pep-0423.txt:132
msgid ""
"If you feel unsure after reading this document, ask `Python community`_ "
"on IRC or on a mailing list."
msgstr ""

#: ../../pep-0423.txt:137
msgid "Top-level namespace relates to code ownership"
msgstr ""

#: ../../pep-0423.txt:139
msgid "This helps avoid clashes between project names."
msgstr ""

#: ../../pep-0423.txt:141
msgid "Ownership could be:"
msgstr ""

#: ../../pep-0423.txt:143
msgid ""
"an individual. Example: `gp.fileupload`_ is owned and maintained by Gael "
"Pasgrimaud."
msgstr ""

#: ../../pep-0423.txt:147
msgid "an organization. Examples:"
msgstr ""

#: ../../pep-0423.txt:150
msgid "`zest.releaser`_ is owned and maintained by Zest Software."
msgstr ""

#: ../../pep-0423.txt:151
msgid "`Django`_ is owned and maintained by the Django Software Foundation."
msgstr ""

#: ../../pep-0423.txt:154
msgid ""
"a group or community. Example: `sphinx`_ is maintained by developers of "
"the Sphinx project, not only by its author, Georg Brandl."
msgstr ""

#: ../../pep-0423.txt:158
msgid ""
"a group or community related to another package. Example: "
"`collective.recaptcha`_ is owned by its author: David Glick, Groundwire. "
"But the \"collective\" namespace is owned by Plone community."
msgstr ""

#: ../../pep-0423.txt:164
msgid "Respect ownership"
msgstr ""

#: ../../pep-0423.txt:166
msgid "Understand the purpose of namespace before you use it."
msgstr ""

#: ../../pep-0423.txt:168
msgid "Don't plug into a namespace you don't own, unless explicitly authorized."
msgstr ""

#: ../../pep-0423.txt:171
msgid "`If in doubt, ask`_."
msgstr ""

#: ../../pep-0423.txt:173
msgid ""
"As an example, don't plug in \"django.contrib\" namespace because it is "
"managed by Django's core contributors."
msgstr ""

#: ../../pep-0423.txt:176
msgid ""
"Exceptions can be defined by project authors. See `Organize community "
"contributions`_ below."
msgstr ""

#: ../../pep-0423.txt:179
msgid "Also, this rule applies to non-Python projects."
msgstr ""

#: ../../pep-0423.txt:181
msgid ""
"As an example, don't use \"apache\" as top-level namespace: \"Apache\" is"
" the name of an existing project (in the case of \"Apache\", it is also a"
" trademark)."
msgstr ""

#: ../../pep-0423.txt:186
msgid "Private (including closed-source) projects use a namespace"
msgstr ""

#: ../../pep-0423.txt:188
msgid ""
"... because private projects are owned by somebody. So apply the "
"`ownership rule <#top-level-namespace-relates-to-code-ownership>`_."
msgstr ""

#: ../../pep-0423.txt:191
msgid "For internal/customer projects, use your company name as the namespace."
msgstr ""

#: ../../pep-0423.txt:194
msgid "This rule applies to closed-source projects."
msgstr ""

#: ../../pep-0423.txt:196
msgid ""
"As an example, if you are creating a \"climbing\" project for the "
"\"Python Sport\" company: use \"pythonsport.climbing\" name, even if it "
"is closed source."
msgstr ""

#: ../../pep-0423.txt:201
msgid "Individual projects use a namespace"
msgstr ""

#: ../../pep-0423.txt:203
msgid ""
"... because they are owned by individuals. So apply the `ownership rule "
"<#top-level-namespace-relates-to-code-ownership>`_."
msgstr ""

#: ../../pep-0423.txt:206
msgid ""
"There is no shame in releasing a project as open source even if it has an"
" \"internal\" or \"individual\" name."
msgstr ""

#: ../../pep-0423.txt:209
msgid ""
"If the project comes to a point where the author wants to change "
"ownership (i.e. the project no longer belongs to an individual), keep in "
"mind `it is easy to rename the project <#how-to-rename-a-project>`_."
msgstr ""

#: ../../pep-0423.txt:215
msgid "Community-owned projects can avoid namespace packages"
msgstr ""

#: ../../pep-0423.txt:217
msgid ""
"If your project is generic enough (i.e. it is not a contrib to another "
"product or framework), you can avoid namespace packages. The base "
"condition is generally that your project is owned by a group (i.e. the "
"development team) which is dedicated to this project."
msgstr ""

#: ../../pep-0423.txt:222
msgid ""
"Only use a \"shared\" namespace if you really intend the code to be "
"community owned."
msgstr ""

#: ../../pep-0423.txt:225
msgid ""
"As an example, `sphinx`_ project belongs to the Sphinx development team. "
"There is no need to have some \"sphinx\" namespace package with only one "
"\"sphinx.sphinx\" project inside."
msgstr ""

#: ../../pep-0423.txt:230
msgid "In doubt, use an individual/organization namespace"
msgstr ""

#: ../../pep-0423.txt:232
msgid ""
"If your project is really experimental, best choice is to use an "
"individual or organization namespace:"
msgstr ""

#: ../../pep-0423.txt:235
msgid "it allows projects to be released early."
msgstr ""

#: ../../pep-0423.txt:237
msgid "it won't block a name if the project is abandoned."
msgstr ""

#: ../../pep-0423.txt:239
msgid ""
"it doesn't block future changes. When a project becomes mature and there "
"is no reason to keep individual ownership, `it remains possible to rename"
" the project <#how-to-rename-a-project>`_."
msgstr ""

#: ../../pep-0423.txt:245
msgid "Use a single name"
msgstr ""

#: ../../pep-0423.txt:247
msgid ""
"Distribute only one package (or only one module) per project, and use "
"package (or module) name as project name."
msgstr ""

#: ../../pep-0423.txt:250
msgid ""
"It avoids possible confusion between project name and distributed package"
" or module name."
msgstr ""

#: ../../pep-0423.txt:253
msgid "It makes the name consistent."
msgstr ""

#: ../../pep-0423.txt:255
msgid ""
"It is explicit: when one sees project name, he guesses package/module "
"name, and vice versa."
msgstr ""

#: ../../pep-0423.txt:258
msgid ""
"It also limits implicit clashes between package/module names. By using a "
"single name, when you register a project name to `PyPI`_, you also "
"perform a basic package/module name availability verification."
msgstr ""

#: ../../pep-0423.txt:263
msgid ""
"As an example, `pipeline`_, `python-pipeline`_ and `django-pipeline`_ all"
" distribute a package or module called \"pipeline\". So installing two of"
" them leads to errors. This issue wouldn't have occurred if these "
"distributions used a single name."
msgstr ""

#: ../../pep-0423.txt:268
msgid "Yes:"
msgstr ""

#: ../../pep-0423.txt:270
msgid "Package name: \"kheops.pyramid\", i.e. ``import kheops.pyramid``"
msgstr ""

#: ../../pep-0423.txt:273
msgid "Project name: \"kheops.pyramid\", i.e. ``pip install kheops.pyramid``"
msgstr ""

#: ../../pep-0423.txt:276
msgid "No:"
msgstr ""

#: ../../pep-0423.txt:278
msgid "Package name: \"kheops\""
msgstr ""

#: ../../pep-0423.txt:279
msgid "Project name: \"KheopsPyramid\""
msgstr ""

#: ../../pep-0423.txt:283
msgid ""
"For historical reasons, `PyPI`_ contains many distributions where project"
" and distributed package/module names differ."
msgstr ""

#: ../../pep-0423.txt:287
msgid "Multiple packages/modules should be rare"
msgstr ""

#: ../../pep-0423.txt:289
msgid ""
"Technically, Python distributions can provide multiple packages and/or "
"modules. See `setup script reference`_ for details."
msgstr ""

#: ../../pep-0423.txt:292
msgid ""
"Some distributions actually do. As an example, `setuptools`_ and "
"`distribute`_ are both declaring \"pkg_resources\", \"easy_install\" and "
"\"site\" modules in addition to respective \"setuptools\" and "
"\"distribute\" packages."
msgstr ""

#: ../../pep-0423.txt:297
msgid ""
"Consider this use case as exceptional. In most cases, you don't need this"
" feature. So a distribution should provide only one package or module at "
"a time."
msgstr ""

#: ../../pep-0423.txt:302
msgid "Distinct names should be rare"
msgstr ""

#: ../../pep-0423.txt:304
msgid ""
"A notable exception to the `Use a single name`_ rule is when you "
"explicitly need distinct names."
msgstr ""

#: ../../pep-0423.txt:307
msgid ""
"As an example, the `Pillow`_ project provides an alternative to the "
"original `PIL`_ distribution. Both projects distribute a \"PIL\" package."
msgstr ""

#: ../../pep-0423.txt:311
msgid ""
"Consider this use case as exceptional. In most cases, you don't need this"
" feature. So a distributed package name should be equal to project name."
msgstr ""

#: ../../pep-0423.txt:317
msgid "Follow PEP 8 for syntax of package and module names"
msgstr ""

#: ../../pep-0423.txt:319
msgid "`PEP 8`_ applies to names of Python packages and modules."
msgstr ""

#: ../../pep-0423.txt:321
msgid ""
"If you `Use a single name`_, `PEP 8`_ also applies to project names. The "
"exceptions are namespace packages, where dots are required in project "
"name."
msgstr ""

#: ../../pep-0423.txt:327
msgid "Pick memorable names"
msgstr ""

#: ../../pep-0423.txt:329
msgid "One important thing about a project name is that it be memorable."
msgstr ""

#: ../../pep-0423.txt:331
msgid ""
"As an example, `celery`_ is not a meaningful name. At first, it is not "
"obvious that it deals with message queuing. But it is memorable, partly "
"because it can be used to feed a `RabbitMQ`_ server."
msgstr ""

#: ../../pep-0423.txt:337
msgid "Pick meaningful names"
msgstr ""

#: ../../pep-0423.txt:339
msgid ""
"Ask yourself \"how would I describe in one sentence what this name is "
"for?\", and then \"could anyone have guessed that by looking at the "
"name?\"."
msgstr ""

#: ../../pep-0423.txt:343
msgid ""
"As an example, `DateUtils`_ is a meaningful name. It is obvious that it "
"deals with utilities for dates."
msgstr ""

#: ../../pep-0423.txt:346
msgid "When you are using namespaces, try to make each part meaningful."
msgstr ""

#: ../../pep-0423.txt:350
msgid "Use packaging metadata"
msgstr ""

#: ../../pep-0423.txt:352
msgid "Consider project names as unique identifiers on PyPI:"
msgstr ""

#: ../../pep-0423.txt:354
msgid "it is important that these identifiers remain human-readable."
msgstr ""

#: ../../pep-0423.txt:355
msgid "it is even better when these identifiers are meaningful."
msgstr ""

#: ../../pep-0423.txt:356
msgid ""
"but the primary purpose of identifiers is not to classify or describe "
"projects."
msgstr ""

#: ../../pep-0423.txt:359
msgid ""
"**Classifiers and keywords metadata are made for categorization of "
"distributions.** Summary and description metadata are meant to describe "
"the project."
msgstr ""

#: ../../pep-0423.txt:363
msgid ""
"As an example, there is a \"`Framework :: Twisted`_\" classifier. Even if"
" names are quite heterogeneous (they don't follow a particular pattern), "
"we get the list."
msgstr ""

#: ../../pep-0423.txt:367
msgid ""
"In order to `Organize community contributions`_, conventions about names "
"and namespaces matter, but conventions about metadata should be even more"
" important."
msgstr ""

#: ../../pep-0423.txt:371
msgid "As an example, we can find Plone portlets in many places:"
msgstr ""

#: ../../pep-0423.txt:373
msgid "plone.portlet.*"
msgstr ""

#: ../../pep-0423.txt:374
msgid "collective.portlet.*"
msgstr ""

#: ../../pep-0423.txt:375
msgid "collective.portlets.*"
msgstr ""

#: ../../pep-0423.txt:376
msgid "collective.*.portlets"
msgstr ""

#: ../../pep-0423.txt:377
msgid "some vendor-related projects such as \"quintagroup.portlet.cumulus\""
msgstr ""

#: ../../pep-0423.txt:378
msgid "and even projects where \"portlet\" pattern doesn't appear in the name."
msgstr ""

#: ../../pep-0423.txt:381
msgid ""
"Even if Plone community has conventions, using the name to categorize "
"distributions is inappropriate. It's impossible to get the full list of "
"distributions that provide portlets for Plone by filtering on names. But "
"it would be possible if all these distributions used \"Framework :: "
"Plone\" classifier and \"portlet\" keyword."
msgstr ""

#: ../../pep-0423.txt:389
msgid "Avoid deep nesting"
msgstr ""

#: ../../pep-0423.txt:391
msgid "`The Zen of Python`_ says \"Flat is better than nested\"."
msgstr ""

#: ../../pep-0423.txt:394
msgid "Two levels is almost always enough"
msgstr ""

#: ../../pep-0423.txt:396
msgid ""
"Don't define everything in deeply nested hierarchies: you will end up "
"with projects and packages like \"pythonsport.common.maps.forest\". This "
"type of name is both verbose and cumbersome (e.g. if you have many "
"imports from the package)."
msgstr ""

#: ../../pep-0423.txt:401
msgid ""
"Furthermore, big hierarchies tend to break down over time as the "
"boundaries between different packages blur."
msgstr ""

#: ../../pep-0423.txt:404
msgid "The consensus is that two levels of nesting are preferred."
msgstr ""

#: ../../pep-0423.txt:406
msgid ""
"For example, we have ``plone.principalsource`` instead of "
"``plone.source.principal`` or something like that. The name is shorter, "
"the package structure is simpler, and there would be very little to gain "
"from having three levels of nesting here. It would be impractical to try "
"to put all \"core Plone\" sources (a source is kind of vocabulary) into "
"the ``plone.source.*`` namespace, in part because some sources are part "
"of other packages, and in part because sources already exist in other "
"places. Had we made a new namespace, it would be inconsistently used from"
" the start."
msgstr ""

#: ../../pep-0423.txt:416
msgid "Yes: \"pyranha\""
msgstr ""

#: ../../pep-0423.txt:418
msgid "Yes: \"pythonsport.climbing\""
msgstr ""

#: ../../pep-0423.txt:420
msgid "Yes: \"pythonsport.forestmap\""
msgstr ""

#: ../../pep-0423.txt:422
msgid "No: \"pythonsport.maps.forest\""
msgstr ""

#: ../../pep-0423.txt:425
msgid "Use only one level for ownership"
msgstr ""

#: ../../pep-0423.txt:427
msgid ""
"Don't use 3 levels to set individual/organization ownership in a "
"community namespace."
msgstr ""

#: ../../pep-0423.txt:430
msgid "As an example, let's consider:"
msgstr ""

#: ../../pep-0423.txt:432
msgid "you are plugging into a community namespace, such as \"collective\"."
msgstr ""

#: ../../pep-0423.txt:434
msgid ""
"and you want to add a more restrictive \"ownership\" level, to avoid "
"clashes inside the community."
msgstr ""

#: ../../pep-0423.txt:437
msgid ""
"In such a case, **you'd better use the most restrictive ownership level "
"as first level.**"
msgstr ""

#: ../../pep-0423.txt:440
msgid ""
"As an example, where \"collective\" is a major community namespace that "
"\"gergovie\" belongs to, and \"vercingetorix\" it the name of "
"\"gergovie\" author:"
msgstr ""

#: ../../pep-0423.txt:444
msgid "No: \"collective.vercingetorix.gergovie\""
msgstr ""

#: ../../pep-0423.txt:446
msgid "Yes: \"vercingetorix.gergovie\""
msgstr ""

#: ../../pep-0423.txt:449
msgid "Don't use namespace levels for categorization"
msgstr ""

#: ../../pep-0423.txt:451
msgid "`Use packaging metadata`_ instead."
msgstr ""

#: ../../pep-0423.txt:454
msgid "Don't use more than 3 levels"
msgstr ""

#: ../../pep-0423.txt:456
msgid ""
"Technically, you can create deeply nested hierarchies. However, in most "
"cases, you shouldn't need it."
msgstr ""

#: ../../pep-0423.txt:461
msgid ""
"Even communities where namespaces are standard don't use more than 3 "
"levels."
msgstr ""

#: ../../pep-0423.txt:465
msgid "Conventions for communities or related projects"
msgstr ""

#: ../../pep-0423.txt:468
msgid "Follow community or related project conventions, if any"
msgstr ""

#: ../../pep-0423.txt:470
msgid ""
"Projects or related communities can have specific conventions, which may "
"differ from those explained in this document."
msgstr ""

#: ../../pep-0423.txt:473
msgid ""
"In such a case, `they should declare specific conventions in "
"documentation <#organize-community-contributions>`_."
msgstr ""

#: ../../pep-0423.txt:476
msgid ""
"So, if your project belongs to another project or to a community, first "
"look for specific conventions in main project's documentation."
msgstr ""

#: ../../pep-0423.txt:479
msgid ""
"If there is no specific conventions, follow the ones declared in this "
"document."
msgstr ""

#: ../../pep-0423.txt:482
msgid ""
"As an example, `Plone community`_ releases community contributions in the"
" \"collective\" namespace package. It differs from the `standard "
"namespace for contributions <#use-standard-pattern-for-community-"
"contributions>`_ proposed here. But since it is documented, there is no "
"ambiguity and you should follow this specific convention."
msgstr ""

#: ../../pep-0423.txt:490
msgid "Use standard pattern for community contributions"
msgstr ""

#: ../../pep-0423.txt:492
msgid ""
"When no specific rule is defined, use the "
"``${MAINPROJECT}contrib.${PROJECT}`` pattern to store community "
"contributions for any product or framework, where:"
msgstr ""

#: ../../pep-0423.txt:496
msgid ""
"``${MAINPROJECT}`` is the name of the related project. \"pyranha\" in the"
" example below."
msgstr ""

#: ../../pep-0423.txt:499
msgid ""
"``${PROJECT}`` is the name of your project. \"giantteeth\" in the example"
" below."
msgstr ""

#: ../../pep-0423.txt:502
msgid "As an example:"
msgstr ""

#: ../../pep-0423.txt:504
msgid ""
"you are the author of \"pyranha\" project. You own the \"pyranha\" "
"namespace."
msgstr ""

#: ../../pep-0423.txt:507
msgid ""
"you didn't defined specific naming conventions for community "
"contributions."
msgstr ""

#: ../../pep-0423.txt:510
msgid ""
"a third-party developer wants to publish a \"giantteeth\" project related"
" to your \"pyranha\" project in a community namespace. So he should "
"publish it as \"pyranhacontrib.giantteeth\"."
msgstr ""

#: ../../pep-0423.txt:514
msgid "It is the simplest way to `Organize community contributions`_."
msgstr ""

#: ../../pep-0423.txt:518
msgid "Why ``${MAINPROJECT}contrib.*`` pattern?"
msgstr ""

#: ../../pep-0423.txt:520
msgid ""
"``${MAINPROJECT}c.*`` is not explicit enough. As examples, \"zc\" belongs"
" to \"Zope Corporation\" whereas \"z3c\" belongs to \"Zope 3 community\"."
msgstr ""

#: ../../pep-0423.txt:524
msgid "``${MAINPROJECT}community`` is too long."
msgstr ""

#: ../../pep-0423.txt:526
msgid ""
"``${MAINPROJECT}community`` conflicts with existing namespaces such as "
"\"iccommunity\" or \"PyCommunity\"."
msgstr ""

#: ../../pep-0423.txt:529
msgid ""
"``${MAINPROJECT}.contrib.*`` is inside ${MAINPROJECT} namespace, i.e. it "
"is owned by ${MAINPROJECT} authors. It breaks the `Top-level namespace "
"relates to code ownership`_ rule."
msgstr ""

#: ../../pep-0423.txt:533
msgid "``${MAINPROJECT}.contrib.*`` breaks the `Avoid deep nesting`_ rule."
msgstr ""

#: ../../pep-0423.txt:536
msgid ""
"names where ``${MAINPROJECT}`` doesn't appear are not explicit enough, "
"i.e. nobody can guess they are related to ``${MAINPROJECT}``. As an "
"example, it is not obvious that \"collective.*\" belongs to Plone "
"community."
msgstr ""

#: ../../pep-0423.txt:541
msgid ""
"``{$DIST}contrib.*`` looks like existing ``sphinxcontrib-*`` packages. "
"But ``sphinxcontrib-*`` is actually about Sphinx contrib, so this is not "
"a real conflict... In fact, the \"contrib\" suffix was inspired by "
"\"sphinxcontrib\"."
msgstr ""

#: ../../pep-0423.txt:547
msgid "Organize community contributions"
msgstr ""

#: ../../pep-0423.txt:549
msgid ""
"This is the counterpart of the `follow community conventions <#follow-"
"community-or-related-project-conventions-if-any>`_ and `standard pattern "
"for contributions <#use-standard-pattern-for-community-contributions>`_ "
"rules."
msgstr ""

#: ../../pep-0423.txt:554
msgid "Actions:"
msgstr ""

#: ../../pep-0423.txt:556
msgid "Choose a naming convention for community contributions."
msgstr ""

#: ../../pep-0423.txt:558
msgid ""
"If it is not `the default <#use-standard-pattern-for-community-"
"contributions>`_, then document it."
msgstr ""

#: ../../pep-0423.txt:562
msgid ""
"if you use the `default convention <#use-standard-pattern-for-community-"
"contributions>`_, then this document should be enough. Don't repeat it. "
"You may reference it."
msgstr ""

#: ../../pep-0423.txt:567
msgid ""
"else, tell users about custom conventions in project's \"contribute\" or "
"\"create modules\" documentation."
msgstr ""

#: ../../pep-0423.txt:570
msgid ""
"Also recommend the use of additional metadata, such as `classifiers and "
"keywords <#use-packaging-metadata>`_."
msgstr ""

#: ../../pep-0423.txt:573
msgid "About convention choices:"
msgstr ""

#: ../../pep-0423.txt:575
msgid ""
"New projects should choose the `default contrib pattern <#use-standard-"
"pattern-for-community-contributions>`_."
msgstr ""

#: ../../pep-0423.txt:578
msgid ""
"Existing projects with community contributions should start with custom "
"conventions. Then they can `Promote migrations`_."
msgstr ""

#: ../../pep-0423.txt:581
msgid ""
"It means that existing community conventions don't have to be changed. "
"But, at least, they should be explicitly documented."
msgstr ""

#: ../../pep-0423.txt:584
msgid ""
"Example: \"pyranha\" is your project name and package name. Tell "
"contributors that:"
msgstr ""

#: ../../pep-0423.txt:587
msgid "pyranha-related distributions should use the \"pyranha\" keyword"
msgstr ""

#: ../../pep-0423.txt:589
msgid ""
"pyranha-related distributions providing templates should also use "
"\"templates\" keyword."
msgstr ""

#: ../../pep-0423.txt:592
msgid ""
"community contributions should be released under \"pyranhacontrib\" "
"namespace (i.e. use \"pyranhacontrib.*\" pattern)."
msgstr ""

#: ../../pep-0423.txt:597
msgid "Register names with PyPI"
msgstr ""

#: ../../pep-0423.txt:599
msgid ""
"`PyPI`_ is the central place for distributions in Python community. So, "
"it is also the place where to register project and package names."
msgstr ""

#: ../../pep-0423.txt:602
msgid "See `Registering with the Package Index`_ for details."
msgstr ""

#: ../../pep-0423.txt:606
msgid "Recipes"
msgstr ""

#: ../../pep-0423.txt:608
msgid ""
"The following recipes will help you follow the guidelines and conventions"
" above."
msgstr ""

#: ../../pep-0423.txt:612
msgid "How to check for name availability?"
msgstr ""

#: ../../pep-0423.txt:614
msgid ""
"Before you choose a project name, make sure it hasn't already been "
"registered in the following locations:"
msgstr ""

#: ../../pep-0423.txt:617
msgid "`PyPI`_"
msgstr ""

#: ../../pep-0423.txt:618
msgid "that's all. PyPI is the only official place."
msgstr ""

#: ../../pep-0423.txt:620
msgid ""
"As an example, you could also check in various locations such as popular "
"code hosting services, but keep in mind that PyPI is the only place you "
"can **register** for names in Python community."
msgstr ""

#: ../../pep-0423.txt:624
msgid "That's why it is important you `register names with PyPI`_."
msgstr ""

#: ../../pep-0423.txt:626
msgid ""
"Also make sure the names of distributed packages or modules haven't "
"already been registered:"
msgstr ""

#: ../../pep-0423.txt:629
msgid "in the `Python Standard Library`_."
msgstr ""

#: ../../pep-0423.txt:631
msgid ""
"inside projects at `PyPI`. There is currently no helper for that. Notice "
"that the more projects follow the `use a single name`_ rule, the easier "
"is the verification."
msgstr ""

#: ../../pep-0423.txt:635
msgid "you may `ask the community <#if-in-doubt-ask>`_."
msgstr ""

#: ../../pep-0423.txt:637
msgid ""
"The `use a single name`_ rule also helps you avoid clashes with package "
"names: if a project name is available, then the package name has good "
"chances to be available too."
msgstr ""

#: ../../pep-0423.txt:642
msgid "How to rename a project?"
msgstr ""

#: ../../pep-0423.txt:644
msgid ""
"Renaming a project is possible, but keep in mind that it will cause some "
"confusions. So, pay particular attention to README and documentation, so "
"that users understand what happened."
msgstr ""

#: ../../pep-0423.txt:648
msgid ""
"First of all, **do not remove legacy distributions from PyPI**. Because "
"some users may be using them."
msgstr ""

#: ../../pep-0423.txt:651
msgid ""
"Copy the legacy project, then change names (project and package/module). "
"Pay attention to, at least:"
msgstr ""

#: ../../pep-0423.txt:654
msgid "packaging files,"
msgstr ""

#: ../../pep-0423.txt:655
msgid "folder name that contains source files,"
msgstr ""

#: ../../pep-0423.txt:656
msgid "documentation, including README,"
msgstr ""

#: ../../pep-0423.txt:657
msgid "import statements in code."
msgstr ""

#: ../../pep-0423.txt:659
msgid ""
"Assign ``Obsoletes-Dist`` metadata to new distribution in setup.cfg file."
" See `PEP 345 about Obsolete-Dist`_ and `setup.cfg specification`_."
msgstr ""

#: ../../pep-0423.txt:663
msgid "Release a new version of the renamed project, then publish it."
msgstr ""

#: ../../pep-0423.txt:665
msgid "Edit legacy project:"
msgstr ""

#: ../../pep-0423.txt:667
msgid "add dependency to new project,"
msgstr ""

#: ../../pep-0423.txt:668
msgid "drop everything except packaging stuff,"
msgstr ""

#: ../../pep-0423.txt:669
msgid "add the ``Development Status :: 7 - Inactive`` classifier in setup script,"
msgstr ""

#: ../../pep-0423.txt:671
msgid "publish a new release."
msgstr ""

#: ../../pep-0423.txt:673
msgid "So, users of the legacy package:"
msgstr ""

#: ../../pep-0423.txt:675
msgid "can continue using the legacy distributions at a deprecated version,"
msgstr ""

#: ../../pep-0423.txt:676
msgid "can upgrade to last version of legacy distribution, which is empty..."
msgstr ""

#: ../../pep-0423.txt:678
msgid ""
"... and automatically download new distribution as a dependency of the "
"legacy one."
msgstr ""

#: ../../pep-0423.txt:681
msgid "Users who discover the legacy project see it is inactive."
msgstr ""

#: ../../pep-0423.txt:684
msgid "Improved handling of renamed projects on PyPI"
msgstr ""

#: ../../pep-0423.txt:686
msgid ""
"If many projects follow `Renaming howto <#how-to-rename-a-project>`_ "
"recipe, then many legacy distributions will have the following "
"characteristics:"
msgstr ""

#: ../../pep-0423.txt:690
msgid "``Development Status :: 7 - Inactive`` classifier."
msgstr ""

#: ../../pep-0423.txt:691
msgid "latest version is empty, except packaging stuff."
msgstr ""

#: ../../pep-0423.txt:692
msgid ""
"latest version \"redirects\" to another distribution. E.g. it has a "
"single dependency on the renamed project."
msgstr ""

#: ../../pep-0423.txt:694
msgid "referenced as ``Obsoletes-Dist`` in a newer distribution."
msgstr ""

#: ../../pep-0423.txt:696
msgid ""
"So it will be possible to detect renamed projects and improve readability"
" on PyPI. So that users can focus on active distributions. But this "
"feature is not required now. There is no urge. It won't be covered in "
"this document."
msgstr ""

#: ../../pep-0423.txt:702
msgid "How to apply naming guidelines on existing projects?"
msgstr ""

#: ../../pep-0423.txt:704
msgid ""
"**There is no obligation for existing projects to be renamed**. The "
"choice is left to project authors and mainteners for obvious reasons."
msgstr ""

#: ../../pep-0423.txt:707
msgid "However, project authors are invited to:"
msgstr ""

#: ../../pep-0423.txt:709
msgid "at least, `state about current naming`_."
msgstr ""

#: ../../pep-0423.txt:710
msgid "then `plan and promote migration <#promote-migrations>`_."
msgstr ""

#: ../../pep-0423.txt:711
msgid ""
"optionally actually `rename existing project or distributed "
"packages/modules <#how-to-rename-a-project>`_."
msgstr ""

#: ../../pep-0423.txt:715
msgid "State about current naming"
msgstr ""

#: ../../pep-0423.txt:717
msgid "The important thing, at first, is that you state about current choices:"
msgstr ""

#: ../../pep-0423.txt:720
msgid "Ask yourself \"why did I choose the current name?\", then document it."
msgstr ""

#: ../../pep-0423.txt:721
msgid ""
"If there are differences with the guidelines provided in this document, "
"you should tell your users."
msgstr ""

#: ../../pep-0423.txt:723
msgid ""
"If possible, create issues in the project's bugtracker, at least for "
"record. Then you are free to resolve them later, or maybe mark them as "
"\"wontfix\"."
msgstr ""

#: ../../pep-0423.txt:727
msgid ""
"Projects that are meant to receive contributions from community should "
"also `organize community contributions`_."
msgstr ""

#: ../../pep-0423.txt:731
msgid "Promote migrations"
msgstr ""

#: ../../pep-0423.txt:733
msgid ""
"Every Python developer should migrate whenever possible, or promote the "
"migrations in their respective communities."
msgstr ""

#: ../../pep-0423.txt:736
msgid ""
"Apply these guidelines on your projects, then the community will see it "
"is safe."
msgstr ""

#: ../../pep-0423.txt:739
msgid ""
"In particular, \"leaders\" such as authors of popular projects are "
"influential, they have power and, thus, responsibility over communities."
msgstr ""

#: ../../pep-0423.txt:743
msgid ""
"Apply these guidelines on popular projects, then communities will adopt "
"the conventions too."
msgstr ""

#: ../../pep-0423.txt:746
msgid ""
"**Projects should promote migrations when they release a new (major) "
"version**, particularly `if this version introduces support for Python "
"3.x, new standard library's packaging or namespace packages "
"<#opportunity>`_."
msgstr ""

#: ../../pep-0423.txt:752
msgid "Opportunity"
msgstr ""

#: ../../pep-0423.txt:754
msgid "As of Python 3.3 being developed:"
msgstr ""

#: ../../pep-0423.txt:756
msgid ""
"many projects are not Python 3.x compatible. It includes \"big\" products"
" or frameworks. It means that many projects will have to do a migration "
"to support Python 3.x."
msgstr ""

#: ../../pep-0423.txt:760
msgid ""
"packaging (aka distutils2) is on the starting blocks. When it is "
"released, projects will be invited to migrate and use new packaging."
msgstr ""

#: ../../pep-0423.txt:763
msgid "`PEP 420`_ brings official support of namespace packages to Python."
msgstr ""

#: ../../pep-0423.txt:765
msgid ""
"It means that most active projects should be about to migrate in the next"
" year(s) to support Python 3.x, new packaging or new namespace packages."
msgstr ""

#: ../../pep-0423.txt:769
msgid ""
"Such an opportunity is unique and won't come again soon! So let's "
"introduce and promote naming conventions as soon as possible (i.e. "
"**now**)."
msgstr ""

#: ../../pep-0423.txt:775
msgid "References"
msgstr ""

#: ../../pep-0423.txt:777
msgid "Additional background:"
msgstr ""

#: ../../pep-0423.txt:779
msgid ""
"`Martin Aspeli's article about names`_. Some parts of this document are "
"quotes from this article."
msgstr ""

#: ../../pep-0423.txt:782
msgid "`in development official packaging documentation`_."
msgstr ""

#: ../../pep-0423.txt:784
msgid ""
"`The Hitchhiker's Guide to Packaging`_, which has an empty placeholder "
"for \"naming specification\"."
msgstr ""

#: ../../pep-0423.txt:787
msgid "References and footnotes:"
msgstr ""

#: ../../pep-0423.txt:837
msgid "Copyright"
msgstr ""

#: ../../pep-0423.txt:839
msgid "This document has been placed in the public domain."
msgstr ""

