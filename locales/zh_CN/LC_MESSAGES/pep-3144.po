# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-3144.txt
msgid "PEP"
msgstr ""

#: ../../pep-3144.txt:1
msgid "3144"
msgstr ""

#: ../../pep-3144.txt
msgid "Title"
msgstr ""

#: ../../pep-3144.txt:2
msgid "IP Address Manipulation Library for the Python Standard Library"
msgstr ""

#: ../../pep-3144.txt
msgid "Author"
msgstr ""

#: ../../pep-3144.txt:5
msgid "Peter Moody <pmoody@google.com>"
msgstr ""

#: ../../pep-3144.txt
msgid "BDFL-Delegate"
msgstr ""

#: ../../pep-3144.txt:6
msgid "Nick Coghlan"
msgstr ""

#: ../../pep-3144.txt
msgid "Discussions-To"
msgstr ""

#: ../../pep-3144.txt:7
msgid "<ipaddr-py-dev@googlegroups.com>"
msgstr ""

#: ../../pep-3144.txt
msgid "Status"
msgstr ""

#: ../../pep-3144.txt:8
msgid "Final"
msgstr ""

#: ../../pep-3144.txt
msgid "Type"
msgstr ""

#: ../../pep-3144.txt:9
msgid "Standards Track"
msgstr ""

#: ../../pep-3144.txt
msgid "Created"
msgstr ""

#: ../../pep-3144.txt:11
msgid "06-Feb-2012"
msgstr ""

#: ../../pep-3144.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-3144.txt:12
msgid "3.3"
msgstr ""

#: ../../pep-3144.txt
msgid "Resolution"
msgstr ""

#: ../../pep-3144.txt:13
msgid "https://mail.python.org/pipermail/python-dev/2012-May/119474.html"
msgstr ""

#: ../../pep-3144.txt:17
msgid "Abstract"
msgstr ""

#: ../../pep-3144.txt:19
msgid ""
"This PEP proposes a design and for an IP address manipulation module for "
"python."
msgstr ""

#: ../../pep-3144.txt:24
msgid "PEP Acceptance"
msgstr ""

#: ../../pep-3144.txt:26
msgid "This PEP was accepted by Nick Coghlan on the 15th of May, 2012."
msgstr ""

#: ../../pep-3144.txt:30
msgid "Motivation"
msgstr ""

#: ../../pep-3144.txt:32
msgid ""
"Several very good IP address modules for python already exist. The truth "
"is that all of them struggle with the balance between adherence to "
"Pythonic principals and the shorthand upon which network engineers and "
"administrators rely.  ``ipaddress`` aims to strike the right balance."
msgstr ""

#: ../../pep-3144.txt:40
msgid "Rationale"
msgstr ""

#: ../../pep-3144.txt:42
msgid ""
"The existence of several Python IP address manipulation modules is "
"evidence of an outstanding need for the functionality this module seeks "
"to provide."
msgstr ""

#: ../../pep-3144.txt:48
msgid "Background"
msgstr ""

#: ../../pep-3144.txt:50
msgid ""
"PEP 3144 and ``ipaddr`` have been up for inclusion before.  The version "
"of the library specified here is backwards incompatible with the version "
"on PyPI and the one which was discussed before. In order to avoid "
"confusing users of the current ``ipaddr``, I've renamed this version of "
"the library ``ipaddress``."
msgstr ""

#: ../../pep-3144.txt:56
msgid "The main differences between ipaddr and ipaddress are:"
msgstr ""

#: ../../pep-3144.txt:58
msgid ""
"``ipaddress`` \\*Network classes are equivalent to the ``ipaddr`` "
"\\*Network class counterparts with the ``strict`` flag set to ``True``."
msgstr ""

#: ../../pep-3144.txt:61
msgid ""
"``ipaddress`` \\*Interface classes are equivalent to the ``ipaddr`` "
"\\*Network class counterparts with the ``strict`` flag set to ``False``."
msgstr ""

#: ../../pep-3144.txt:64
msgid ""
"The factory functions in ``ipaddress`` were renamed to disambiguate them "
"from classes."
msgstr ""

#: ../../pep-3144.txt:67
msgid ""
"A few attributes were renamed to disambiguate their purpose as well. (eg."
" ``network``, ``network_address``)"
msgstr ""

#: ../../pep-3144.txt:70
msgid ""
"A number of methods and functions which returned containers in ``ipaddr``"
" now return iterators. This includes ``subnets``, ``address_exclude``, "
"``summarize_address_range`` and ``collapse_address_list``."
msgstr ""

#: ../../pep-3144.txt:75
msgid ""
"Due to the backwards incompatible API changes between ``ipaddress`` and "
"``ipaddr``, the proposal is to add the module using the new provisional "
"API status:"
msgstr ""

#: ../../pep-3144.txt:78
msgid "http://docs.python.org/dev/glossary.html#term-provisional-package"
msgstr ""

#: ../../pep-3144.txt:81
msgid "Relevant messages on python-dev:"
msgstr ""

#: ../../pep-3144.txt:83
msgid "https://mail.python.org/pipermail/python-dev/2012-January/116016.html"
msgstr ""

#: ../../pep-3144.txt:84
msgid "https://mail.python.org/pipermail/python-dev/2012-February/116656.html"
msgstr ""

#: ../../pep-3144.txt:85
msgid "https://mail.python.org/pipermail/python-dev/2012-February/116688.html"
msgstr ""

#: ../../pep-3144.txt:89
msgid "Specification"
msgstr ""

#: ../../pep-3144.txt:91
msgid ""
"The ``ipaddr`` module defines a total of 6 new public classes, 3 for "
"manipulating IPv4 objects and 3 for manipulating IPv6 objects. The "
"classes are as follows:"
msgstr ""

#: ../../pep-3144.txt:95
msgid ""
"``IPv4Address``/``IPv6Address`` - These define individual addresses, for "
"example the IPv4 address returned by an A record query for www.google.com"
" (74.125.224.84) or the IPv6 address returned by a AAAA record query for "
"ipv6.google.com (2001:4860:4001:801::1011)."
msgstr ""

#: ../../pep-3144.txt:100
msgid ""
"``IPv4Network``/``IPv6Network`` - These define networks or groups of "
"addresses, for example the IPv4 network reserved for multicast use "
"(224.0.0.0/4) or the IPv6 network reserved for multicast (ff00::/8, wow, "
"that's big)."
msgstr ""

#: ../../pep-3144.txt:105
msgid ""
"``IPv4Interface``/``IPv6Interface`` - These hybrid classes refer to an "
"individual address on a given network.  For example, the IPV4 address "
"192.0.2.1 on the network 192.0.2.0/24 could be referred to as "
"192.0.2.1/24.  Likewise, the IPv6 address 2001:DB8::1 on the network "
"2001:DB8::/96 could be referred to as 2001:DB8::1/96. It's very common to"
" refer to addresses assigned to computer network interfaces like this, "
"hence the Interface name."
msgstr ""

#: ../../pep-3144.txt:113
msgid ""
"All IPv4 classes share certain characteristics and methods; the number of"
" bits needed to represent them, whether or not they belong to certain "
"special IPv4 network ranges, etc.  Similarly, all IPv6 classes share "
"characteristics and methods."
msgstr ""

#: ../../pep-3144.txt:118
msgid ""
"``ipaddr`` makes extensive use of inheritance to avoid code duplication "
"as much as possible.  The parent classes are private, but they are "
"outlined here:"
msgstr ""

#: ../../pep-3144.txt:122
msgid "``_IPAddrBase`` - Provides methods common to all ``ipaddr`` objects."
msgstr ""

#: ../../pep-3144.txt:124
msgid ""
"``_BaseAddress`` - Provides methods common to ``IPv4Address`` and "
"``IPv6Address``."
msgstr ""

#: ../../pep-3144.txt:127
msgid ""
"``_BaseInterface`` - Provides methods common to ``IPv4Interface`` and "
"``IPv6Interface``, as well as ``IPv4Network`` and ``IPv6Network`` "
"(``ipaddr`` treats the Network classes as a special case of Interface)."
msgstr ""

#: ../../pep-3144.txt:131
msgid ""
"``_BaseV4`` - Provides methods and variables (eg, ``_max_prefixlen``) "
"common to all IPv4 classes."
msgstr ""

#: ../../pep-3144.txt:134
msgid "``_BaseV6`` - Provides methods and variables common to all IPv6 classes."
msgstr ""

#: ../../pep-3144.txt:136
msgid ""
"Comparisons between objects of differing IP versions results in a "
"``TypeError`` [1]_.  Additionally, comparisons of objects with different "
"_Base parent classes results in a ``TypeError``.  The effect of the _Base"
" parent class limitation is that ``IPv4Interface``'s can be compared to "
"``IPv4Network``'s and ``IPv6Interface``'s can be compared to "
"``IPv6Network``'s."
msgstr ""

#: ../../pep-3144.txt:145
msgid "Reference Implementation"
msgstr ""

#: ../../pep-3144.txt:147
msgid "The current reference implementation can be found at:"
msgstr ""

#: ../../pep-3144.txt:149
msgid "http://code.google.com/p/ipaddress-py/source/browse/ipaddress.py"
msgstr ""

#: ../../pep-3144.txt:151
msgid ""
"Or see the tarball to include the README and unittests. "
"http://code.google.com/p/ipaddress-"
"py/downloads/detail?name=ipaddress-1.0.tar.gz"
msgstr ""

#: ../../pep-3144.txt:154
msgid ""
"More information about using the reference implementation can be found "
"at: http://code.google.com/p/ipaddr-py/wiki/Using3144"
msgstr ""

#: ../../pep-3144.txt:159
msgid "References"
msgstr ""

#: ../../pep-3144.txt:162
msgid ""
"Appealing to authority is a logical fallacy, but Vint Cerf is an "
"authority who can't be ignored. Full text of the email follows:"
msgstr ""

#: ../../pep-3144.txt:166
msgid ""
"I have seen a substantial amount of traffic about IPv4 and IPv6 "
"comparisons and the general consensus is that these are not comparable."
msgstr ""

#: ../../pep-3144.txt:170
msgid ""
"If we were to take a very simple minded view, we might treat these as "
"pure integers in which case there is an ordering but not a useful one."
msgstr ""

#: ../../pep-3144.txt:174
msgid ""
"In the IPv4 world, \"length\" is important because we take longest (most "
"specific) address first for routing.  Length is determine by the mask, as"
" you know."
msgstr ""

#: ../../pep-3144.txt:178
msgid ""
"Assuming that the same style of argument works in IPv6, we would have to "
"conclude that treating an IPv6 value purely as an integer for comparison "
"with IPv4 would lead to some really strange results."
msgstr ""

#: ../../pep-3144.txt:183
msgid ""
"All of IPv4 space would lie in the host space of 0::0/96 prefix of IPv6. "
"For any useful interpretation of IPv4, this is a non-starter."
msgstr ""

#: ../../pep-3144.txt:187
msgid ""
"I think the only sensible conclusion is that IPv4 values and IPv6 values "
"should be treated as non-comparable."
msgstr ""

#: ../../pep-3144.txt:190
msgid "Vint"
msgstr ""

#: ../../pep-3144.txt:194
msgid "Copyright"
msgstr ""

#: ../../pep-3144.txt:196
msgid "This document has been placed in the public domain."
msgstr ""

