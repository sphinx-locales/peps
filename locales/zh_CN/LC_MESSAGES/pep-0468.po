# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0468.txt
msgid "PEP"
msgstr ""

#: ../../pep-0468.txt:1
msgid "468"
msgstr ""

#: ../../pep-0468.txt
msgid "Title"
msgstr ""

#: ../../pep-0468.txt:2
msgid "Preserving the order of \\*\\*kwargs in a function."
msgstr ""

#: ../../pep-0468.txt
msgid "Author"
msgstr ""

#: ../../pep-0468.txt:5
msgid "Eric Snow <ericsnowcurrently@gmail.com>"
msgstr ""

#: ../../pep-0468.txt
msgid "Discussions-To"
msgstr ""

#: ../../pep-0468.txt:6
msgid "python-ideas@python.org"
msgstr ""

#: ../../pep-0468.txt
msgid "Status"
msgstr ""

#: ../../pep-0468.txt:7
msgid "Final"
msgstr ""

#: ../../pep-0468.txt
msgid "Type"
msgstr ""

#: ../../pep-0468.txt:8
msgid "Standards Track"
msgstr ""

#: ../../pep-0468.txt
msgid "Created"
msgstr ""

#: ../../pep-0468.txt:10
msgid "05-Apr-2014"
msgstr ""

#: ../../pep-0468.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0468.txt:11
msgid "3.6"
msgstr ""

#: ../../pep-0468.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0468.txt:12
msgid "5-Apr-2014,8-Sep-2016"
msgstr ""

#: ../../pep-0468.txt
msgid "Resolution"
msgstr ""

#: ../../pep-0468.txt:13
msgid "https://mail.python.org/pipermail/python-dev/2016-September/146329.html"
msgstr ""

#: ../../pep-0468.txt:17
msgid "Abstract"
msgstr ""

#: ../../pep-0468.txt:19
msgid ""
"The \\*\\*kwargs syntax in a function definition indicates that the "
"interpreter should collect all keyword arguments that do not correspond "
"to other named parameters.  However, Python does not preserved the order "
"in which those collected keyword arguments were passed to the function.  "
"In some contexts the order matters.  This PEP dictates that the collected"
" keyword arguments be exposed in the function body as an ordered mapping."
msgstr ""

#: ../../pep-0468.txt:29
msgid "Motivation"
msgstr ""

#: ../../pep-0468.txt:31
msgid ""
"Python's \\*\\*kwargs syntax in function definitions provides a powerful "
"means of dynamically handling keyword arguments.  In some applications of"
" the syntax (see _`Use Cases`), the semantics applied to the collected "
"keyword arguments requires that order be preserved. Unsurprisingly, this "
"is similar to how OrderedDict is related to dict."
msgstr ""

#: ../../pep-0468.txt:37
msgid ""
"Currently to preserved the order you have to do so manually and "
"separately from the actual function call.  This involves building an "
"ordered mapping, whether an OrderedDict or an iterable of 2-tuples, which"
" is then passed as a single argument to the function. [#arg_unpacking]_"
msgstr ""

#: ../../pep-0468.txt:43
msgid ""
"With the capability described in this PEP, that boilerplate would no "
"longer be required."
msgstr ""

#: ../../pep-0468.txt:46
msgid "For comparison, currently::"
msgstr ""

#: ../../pep-0468.txt:54
msgid "and with this proposal::"
msgstr ""

#: ../../pep-0468.txt:59
msgid ""
"Nick Coglan, speaking of some of the uses cases, summed it up well "
"[#nick_obvious]_::"
msgstr ""

#: ../../pep-0468.txt:74
msgid ""
"This observation is supported by the appearance of this proposal over the"
" years and the numerous times that people have been confused by the "
"constructor for OrderedDict. [#past_threads]_ [#loss_of_order]_ "
"[#compact_dict]_"
msgstr ""

#: ../../pep-0468.txt:81
msgid "Use Cases"
msgstr ""

#: ../../pep-0468.txt:83
msgid ""
"As Nick noted, the current behavior of \\*\\*kwargs is unintuitive in "
"cases where one would expect order to matter.  Aside from more specific "
"cases outlined below, in general \"anything else where you want to "
"control the iteration order *and* set field names and values in a single "
"call will potentially benefit.\" [#nick_general]_  That matters in the "
"case of factories (e.g. __init__()) for ordered types."
msgstr ""

#: ../../pep-0468.txt:91
msgid "Serialization"
msgstr ""

#: ../../pep-0468.txt:93
msgid ""
"Obviously OrderedDict would benefit (both __init__() and update()) from "
"ordered kwargs.  However, the benefit also extends to serialization APIs "
"[#nick_obvious]_::"
msgstr ""

#: ../../pep-0468.txt:116
msgid "Debugging"
msgstr ""

#: ../../pep-0468.txt:118
msgid "In the words of Raymond Hettinger [#raymond_debug]_::"
msgstr ""

#: ../../pep-0468.txt:124
msgid "Other Use Cases"
msgstr ""

#: ../../pep-0468.txt:126
msgid "Mock objects. [#mock]_"
msgstr ""

#: ../../pep-0468.txt:127
msgid "Controlling object presentation."
msgstr ""

#: ../../pep-0468.txt:128
msgid "Alternate namedtuple() where defaults can be specified."
msgstr ""

#: ../../pep-0468.txt:129
msgid "Specifying argument priority by order."
msgstr ""

#: ../../pep-0468.txt:133
msgid "Concerns"
msgstr ""

#: ../../pep-0468.txt:136
msgid "Performance"
msgstr ""

#: ../../pep-0468.txt:138
msgid ""
"As already noted, the idea of ordered keyword arguments has come up on a "
"number of occasions.  Each time it has been met with the same response, "
"namely that preserving keyword arg order would have a sufficiently "
"adverse effect on function call performance that it's not worth doing.  "
"However, Guido noted the following [#guido_open]_::"
msgstr ""

#: ../../pep-0468.txt:147
msgid ""
"As will be noted below, there are ways to work around this at the expense"
" of increased complication.  Ultimately the simplest approach is the one "
"that makes the most sense: pack collected key word arguments into an "
"OrderedDict.  However, without a C implementation of OrderedDict there "
"isn't much to discuss.  That changed in Python 3.5. [#c_ordereddict]_"
msgstr ""

#: ../../pep-0468.txt:154
msgid ""
"Note: in Python 3.6 dict is order-preserving.  This virtually eliminates "
"performance concerns."
msgstr ""

#: ../../pep-0468.txt:158
msgid "Other Python Implementations"
msgstr ""

#: ../../pep-0468.txt:160
msgid ""
"Another important issue to consider is that new features must be "
"cognizant of the multiple Python implementations.  At some point each of "
"them would be expected to have implemented ordered kwargs.  In this "
"regard there doesn't seem to be an issue with the idea. [#ironpython]_ An"
" informal survey of the major Python implementations has indicated that "
"this feature will not be a significant burden."
msgstr ""

#: ../../pep-0468.txt:169
msgid "Specification"
msgstr ""

#: ../../pep-0468.txt:171
msgid ""
"Starting in version 3.6 Python will preserve the order of keyword "
"arguments as passed to a function.  To accomplish this the collected "
"kwargs will now be an ordered mapping.  Note that this does not "
"necessarily mean OrderedDict.  dict in CPython 3.6 is now ordered, "
"similar to PyPy."
msgstr ""

#: ../../pep-0468.txt:176
msgid ""
"This will apply only to functions for which the definition uses the "
"\\*\\*kwargs syntax for collecting otherwise unspecified keyword "
"arguments.  Only the order of those keyword arguments will be preserved."
msgstr ""

#: ../../pep-0468.txt:182
msgid "Relationship to \\*\\*-unpacking syntax"
msgstr ""

#: ../../pep-0468.txt:184
msgid ""
"The ** unpacking syntax in function calls has no special connection with "
"this proposal.  Keyword arguments provided by unpacking will be treated "
"in exactly the same way as they are now: ones that match defined "
"parameters are gather there and the remainder will be collected into the "
"ordered kwargs (just like any other unmatched keyword argument)."
msgstr ""

#: ../../pep-0468.txt:190
msgid ""
"Note that unpacking a mapping with undefined order, such as dict, will "
"preserve its iteration order like normal.  It's just that the order will "
"remain undefined.  The ordered mapping into which the unpacked key-value "
"pairs will then be packed will not be able to provide any alternate "
"ordering.  This should not be surprising."
msgstr ""

#: ../../pep-0468.txt:196
msgid ""
"There have been brief discussions of simply passing these mappings "
"through to the functions kwargs without unpacking and repacking them, but"
" that is both outside the scope of this proposal and probably a bad idea "
"regardless.  (There is a reason those discussions were brief.)"
msgstr ""

#: ../../pep-0468.txt:202
msgid "Relationship to inspect.Signature"
msgstr ""

#: ../../pep-0468.txt:204
msgid ""
"Signature objects should need no changes.  The `kwargs` parameter of "
"inspect.BoundArguments (returned by Signature.bind() and "
"Signature.bind_partial()) will change from a dict to an OrderedDict."
msgstr ""

#: ../../pep-0468.txt:209
msgid "C-API"
msgstr ""

#: ../../pep-0468.txt:211
msgid "No changes."
msgstr ""

#: ../../pep-0468.txt:214
msgid "Syntax"
msgstr ""

#: ../../pep-0468.txt:216
msgid "No syntax is added or changed by this proposal."
msgstr ""

#: ../../pep-0468.txt:219
msgid "Backward-Compatibility"
msgstr ""

#: ../../pep-0468.txt:221
msgid "The following will change:"
msgstr ""

#: ../../pep-0468.txt:223
msgid ""
"iteration order of kwargs will now be consistent (except of course in the"
" case described above)"
msgstr ""

#: ../../pep-0468.txt:228
msgid "Reference Implementation"
msgstr ""

#: ../../pep-0468.txt:230
msgid "For CPython there's nothing to do."
msgstr ""

#: ../../pep-0468.txt:234
msgid "Alternate Approaches"
msgstr ""

#: ../../pep-0468.txt:237
msgid "Opt-out Decorator"
msgstr ""

#: ../../pep-0468.txt:239
msgid ""
"This is identical to the current proposal with the exception that Python "
"would also provide a decorator in functools that would cause collected "
"keyword arguments to be packed into a normal dict instead of an "
"OrderedDict."
msgstr ""

#: ../../pep-0468.txt:244 ../../pep-0468.txt:259 ../../pep-0468.txt:275
#: ../../pep-0468.txt:286 ../../pep-0468.txt:300 ../../pep-0468.txt:314
#: ../../pep-0468.txt:328 ../../pep-0468.txt:341
msgid "Prognosis:"
msgstr ""

#: ../../pep-0468.txt:246
msgid ""
"This would only be necessary if performance is determined to be "
"significantly different in some uncommon cases or that there are other "
"backward-compatibility concerns that cannot be resolved otherwise."
msgstr ""

#: ../../pep-0468.txt:251
msgid "Opt-in Decorator"
msgstr ""

#: ../../pep-0468.txt:253
msgid ""
"The status quo would be unchanged.  Instead Python would provide a "
"decorator in functools that would register or mark the decorated function"
" as one that should get ordered keyword arguments.  The performance "
"overhead to check the function at call time would be marginal."
msgstr ""

#: ../../pep-0468.txt:261
msgid ""
"The only real down-side is in the case of function wrappers factories "
"(e.g.  functools.partial and many decorators) that aim to perfectly "
"preserve keyword arguments by using kwargs in the wrapper definition and "
"kwargs unpacking in the call to the wrapped function.  Each wrapper would"
" have to be updated separately, though having functools.wraps() do this "
"automaticallywould help."
msgstr ""

#: ../../pep-0468.txt:269
msgid "__kworder__"
msgstr ""

#: ../../pep-0468.txt:271
msgid ""
"The order of keyword arguments would be stored separately in a list at "
"call time.  The list would be bound to __kworder__ in the function "
"locals."
msgstr ""

#: ../../pep-0468.txt:277
msgid "This likewise complicates the wrapper case."
msgstr ""

#: ../../pep-0468.txt:280
msgid "Compact dict with faster iteration"
msgstr ""

#: ../../pep-0468.txt:282
msgid ""
"Raymond Hettinger has introduced the idea of a dict implementation that "
"would result in preserving insertion order on dicts (until the first "
"deletion).  This would be a perfect fit for kwargs. [#compact_dict]_"
msgstr ""

#: ../../pep-0468.txt:288
msgid "The idea is still uncertain in both viability and timeframe."
msgstr ""

#: ../../pep-0468.txt:290
msgid "Note that Python 3.6 now has this dict implementation."
msgstr ""

#: ../../pep-0468.txt:293
msgid "\\*\\*\\*kwargs"
msgstr ""

#: ../../pep-0468.txt:295
msgid ""
"This would add a new form to a function's signature as a mutually "
"exclusive parallel to \\*\\*kwargs.  The new syntax, \\*\\*\\*kwargs "
"(note that there are three asterisks), would indicate that kwargs should "
"preserve the order of keyword arguments."
msgstr ""

#: ../../pep-0468.txt:302
msgid ""
"New syntax is only added to Python under the most *dire* circumstances. "
"With other available solutions, new syntax is not justifiable. "
"Furthermore, like all opt-in solutions, the new syntax would complicate "
"the pass-through case."
msgstr ""

#: ../../pep-0468.txt:308
msgid "annotations"
msgstr ""

#: ../../pep-0468.txt:310
msgid ""
"This is a variation on the decorator approach.  Instead of using a "
"decorator to mark the function, you would use a function annotation on "
"\\*\\*kwargs."
msgstr ""

#: ../../pep-0468.txt:316
msgid ""
"In addition to the pass-through complication, annotations have been "
"actively discouraged in Python core development.  Use of annotations to "
"opt-in to order preservation runs the risk of interfering with other "
"application-level use of annotations."
msgstr ""

#: ../../pep-0468.txt:322
msgid "dict.__order__"
msgstr ""

#: ../../pep-0468.txt:324
msgid ""
"dict objects would have a new attribute, `__order__` that would default "
"to None and that in the kwargs case the interpreter would use in the same"
" way as described above for __kworder__."
msgstr ""

#: ../../pep-0468.txt:330
msgid ""
"It would mean zero impact on kwargs performance but the change would be "
"pretty intrusive (Python uses dict a lot).  Also, for the wrapper case "
"the interpreter would have to be careful to preserve `__order__`."
msgstr ""

#: ../../pep-0468.txt:335
msgid "KWArgsDict.__order__"
msgstr ""

#: ../../pep-0468.txt:337
msgid ""
"This is the same as the `dict.__order__` idea, but kwargs would be an "
"instance of a new minimal dict subclass that provides the `__order__` "
"attribute.  dict would instead be unchanged."
msgstr ""

#: ../../pep-0468.txt:343
msgid ""
"Simply switching to OrderedDict is a less complicated and more intuitive "
"change."
msgstr ""

#: ../../pep-0468.txt:348
msgid "Acknowledgements"
msgstr ""

#: ../../pep-0468.txt:350
msgid ""
"Thanks to Andrew Barnert for helpful feedback and to the participants of "
"all the past email threads."
msgstr ""

#: ../../pep-0468.txt:355
msgid "Footnotes"
msgstr ""

#: ../../pep-0468.txt:359
msgid ""
"Alternately, you could also replace ** in your function definition with *"
" and then pass in key/value 2-tuples.  This has the advantage of not "
"requiring the keys to be valid identifier strings. See "
"https://mail.python.org/pipermail/python-ideas/2014-April/027491.html."
msgstr ""

#: ../../pep-0468.txt:366
msgid "References"
msgstr ""

#: ../../pep-0468.txt:369
msgid "https://mail.python.org/pipermail/python-ideas/2014-April/027512.html"
msgstr ""

#: ../../pep-0468.txt:372 ../../pep-0468.txt:411
msgid "https://mail.python.org/pipermail/python-ideas/2009-April/004163.html"
msgstr ""

#: ../../pep-0468.txt:374
msgid "https://mail.python.org/pipermail/python-ideas/2010-October/008445.html"
msgstr ""

#: ../../pep-0468.txt:376
msgid "https://mail.python.org/pipermail/python-ideas/2011-January/009037.html"
msgstr ""

#: ../../pep-0468.txt:378
msgid "https://mail.python.org/pipermail/python-ideas/2013-February/019690.html"
msgstr ""

#: ../../pep-0468.txt:380
msgid "https://mail.python.org/pipermail/python-ideas/2013-May/020727.html"
msgstr ""

#: ../../pep-0468.txt:382
msgid "https://mail.python.org/pipermail/python-ideas/2014-March/027225.html"
msgstr ""

#: ../../pep-0468.txt:384
msgid "http://bugs.python.org/issue16276"
msgstr ""

#: ../../pep-0468.txt:386
msgid "http://bugs.python.org/issue16553"
msgstr ""

#: ../../pep-0468.txt:388
msgid "http://bugs.python.org/issue19026"
msgstr ""

#: ../../pep-0468.txt:390
msgid "http://bugs.python.org/issue5397#msg82972"
msgstr ""

#: ../../pep-0468.txt:393
msgid "https://mail.python.org/pipermail/python-dev/2007-February/071310.html"
msgstr ""

#: ../../pep-0468.txt:396
msgid "https://mail.python.org/pipermail/python-dev/2012-December/123028.html"
msgstr ""

#: ../../pep-0468.txt:398 ../../pep-0468.txt:405
msgid "https://mail.python.org/pipermail/python-dev/2012-December/123105.html"
msgstr ""

#: ../../pep-0468.txt:400 ../../pep-0468.txt:408
msgid "https://mail.python.org/pipermail/python-dev/2013-May/126327.html"
msgstr ""

#: ../../pep-0468.txt:402
msgid "https://mail.python.org/pipermail/python-dev/2013-May/126328.html"
msgstr ""

#: ../../pep-0468.txt:413
msgid "https://mail.python.org/pipermail/python-ideas/2009-April/004165.html"
msgstr ""

#: ../../pep-0468.txt:415
msgid "https://mail.python.org/pipermail/python-ideas/2009-April/004175.html"
msgstr ""

#: ../../pep-0468.txt:418
msgid "https://mail.python.org/pipermail/python-dev/2013-May/126404.html"
msgstr ""

#: ../../pep-0468.txt:421
msgid "http://bugs.python.org/issue16991"
msgstr ""

#: ../../pep-0468.txt:424
msgid "https://mail.python.org/pipermail/python-dev/2012-December/123100.html"
msgstr ""

#: ../../pep-0468.txt:428
msgid "Copyright"
msgstr ""

#: ../../pep-0468.txt:430
msgid "This document has been placed in the public domain."
msgstr ""

