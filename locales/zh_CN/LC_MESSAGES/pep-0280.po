# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0280.txt
msgid "PEP"
msgstr ""

#: ../../pep-0280.txt:1
msgid "280"
msgstr ""

#: ../../pep-0280.txt
msgid "Title"
msgstr ""

#: ../../pep-0280.txt:2
msgid "Optimizing access to globals"
msgstr ""

#: ../../pep-0280.txt
msgid "Author"
msgstr ""

#: ../../pep-0280.txt:5
msgid "guido@python.org (Guido van Rossum)"
msgstr ""

#: ../../pep-0280.txt
msgid "Status"
msgstr ""

#: ../../pep-0280.txt:6
msgid "Deferred"
msgstr ""

#: ../../pep-0280.txt
msgid "Type"
msgstr ""

#: ../../pep-0280.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0280.txt
msgid "Created"
msgstr ""

#: ../../pep-0280.txt:9
msgid "10-Feb-2002"
msgstr ""

#: ../../pep-0280.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0280.txt:10
msgid "2.3"
msgstr ""

#: ../../pep-0280.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0280.txt:15
msgid "Deferral"
msgstr ""

#: ../../pep-0280.txt:17
msgid ""
"While this PEP is a nice idea, no-one has yet emerged to do the work of "
"hashing out the differences between this PEP, PEP 266 and PEP 267. Hence,"
" it is being deferred."
msgstr ""

#: ../../pep-0280.txt:23
msgid "Abstract"
msgstr ""

#: ../../pep-0280.txt:25
msgid ""
"This PEP describes yet another approach to optimizing access to module "
"globals, providing an alternative to PEP 266 (Optimizing Global "
"Variable/Attribute Access by Skip Montanaro) and PEP 267 (Optimized "
"Access to Module Namespaces by Jeremy Hylton)."
msgstr ""

#: ../../pep-0280.txt:30
msgid ""
"The expectation is that eventually one approach will be picked and "
"implemented; possibly multiple approaches will be prototyped first."
msgstr ""

#: ../../pep-0280.txt:36
msgid "Description"
msgstr ""

#: ../../pep-0280.txt:38
#, python-format
msgid ""
"(Note: Jason Orendorff writes: \"\"\"I implemented this once, long ago, "
"for Python 1.5-ish, I believe.  I got it to the point where it was only "
"15% slower than ordinary Python, then abandoned it. ;) In my "
"implementation, \"cells\" were real first-class objects, and \"celldict\""
" was a copy-and-hack version of dictionary.  I forget how the rest "
"worked.\"\"\"  Reference: https://mail.python.org/pipermail/python-"
"dev/2002-February/019876.html)"
msgstr ""

#: ../../pep-0280.txt:46
msgid ""
"Let a cell be a really simple Python object, containing a pointer to a "
"Python object and a pointer to a cell.  Both pointers may be ``NULL``.  A"
" Python implementation could be::"
msgstr ""

#: ../../pep-0280.txt:56
msgid ""
"The cellptr attribute is used for chaining cells together for searching "
"built-ins; this will be explained later."
msgstr ""

#: ../../pep-0280.txt:59
msgid ""
"Let a celldict be a mapping from strings (the names of a module's "
"globals) to objects (the values of those globals), implemented using a "
"dict of cells.  A Python implementation could be::"
msgstr ""

#: ../../pep-0280.txt:119
msgid ""
"It is possible that a cell exists corresponding to a given key, but the "
"cell's objptr is ``NULL``; let's call such a cell empty.  When the "
"celldict is used as a mapping, it is as if empty cells don't exist.  "
"However, once added, a cell is never deleted from a celldict, and it is "
"possible to get at empty cells using the ``getcell()`` method."
msgstr ""

#: ../../pep-0280.txt:126
msgid "The celldict implementation never uses the cellptr attribute of cells."
msgstr ""

#: ../../pep-0280.txt:129
msgid ""
"We change the module implementation to use a celldict for its "
"``__dict__``.  The module's getattr, setattr and delattr operations now "
"map to getitem, setitem and delitem on the celldict.  The type of "
"``<module>.__dict__`` and ``globals()`` is probably the only backwards "
"incompatibility."
msgstr ""

#: ../../pep-0280.txt:135
msgid ""
"When a module is initialized, its ``__builtins__`` is initialized from "
"the ``__builtin__`` module's ``__dict__``, which is itself a celldict. "
"For each cell in ``__builtins__``, the new module's ``__dict__`` adds a "
"cell with a ``NULL`` objptr, whose cellptr points to the corresponding "
"cell of ``__builtins__``.  Python pseudo-code (ignoring rexec)::"
msgstr ""

#: ../../pep-0280.txt:164
msgid ""
"The compiler generates ``LOAD_GLOBAL_CELL <i>`` (and ``STORE_GLOBAL_CELL "
"<i>`` etc.) opcodes for references to globals, where ``<i>`` is a small "
"index with meaning only within one code object like the const index in "
"``LOAD_CONST``.  The code object has a new tuple, ``co_globals``, giving "
"the names of the globals referenced by the code indexed by ``<i>``.  No "
"new analysis is required to be able to do this."
msgstr ""

#: ../../pep-0280.txt:171
msgid ""
"When a function object is created from a code object and a celldict, the "
"function object creates an array of cell pointers by asking the celldict "
"for cells corresponding to the names in the code object's ``co_globals``."
"  If the celldict doesn't already have a cell for a particular name, it "
"creates and an empty one.  This array of cell pointers is stored on the "
"function object as ``func_cells``.  When a function object is created "
"from a regular dict instead of a celldict, ``func_cells`` is a ``NULL`` "
"pointer."
msgstr ""

#: ../../pep-0280.txt:180
msgid ""
"When the VM executes a ``LOAD_GLOBAL_CELL <i>`` instruction, it gets cell"
" number ``<i>`` from ``func_cells``.  It then looks in the cell's "
"``PyObject`` pointer, and if not ``NULL``, that's the global value.  If "
"it is ``NULL``, it follows the cell's cell pointer to the next cell, if "
"it is not ``NULL``, and looks in the ``PyObject`` pointer in that cell.  "
"If that's also ``NULL``, or if there is no second cell, ``NameError`` is "
"raised.  (It could follow the chain of cell pointers until a ``NULL`` "
"cell pointer is found; but I have no use for this.)  Similar for "
"``STORE_GLOBAL_CELL <i>``, except it doesn't follow the cell pointer "
"chain -- it always stores in the first cell."
msgstr ""

#: ../../pep-0280.txt:191
msgid ""
"There are fallbacks in the VM for the case where the function's globals "
"aren't a celldict, and hence ``func_cells`` is ``NULL``.  In that case, "
"the code object's ``co_globals`` is indexed with ``<i>`` to find the name"
" of the corresponding global and this name is used to index the "
"function's globals dict."
msgstr ""

#: ../../pep-0280.txt:199
msgid "Additional Ideas"
msgstr ""

#: ../../pep-0280.txt:201
msgid ""
"Never make ``func_cell`` a ``NULL`` pointer; instead, make up an array of"
" empty cells, so that ``LOAD_GLOBAL_CELL`` can index ``func_cells`` "
"without a ``NULL`` check."
msgstr ""

#: ../../pep-0280.txt:205
msgid ""
"Make ``c.cellptr`` equal to c when a cell is created, so that "
"``LOAD_GLOBAL_CELL`` can always dereference ``c.cellptr`` without a "
"``NULL`` check."
msgstr ""

#: ../../pep-0280.txt:209
msgid ""
"With these two additional ideas added, here's Python pseudo-code for "
"``LOAD_GLOBAL_CELL``::"
msgstr ""

#: ../../pep-0280.txt:220
msgid ""
"Be more aggressive:  put the actual values of builtins into module dicts,"
" not just pointers to cells containing the actual values."
msgstr ""

#: ../../pep-0280.txt:223
msgid ""
"There are two points to this:  (1) Simplify and speed access, which is "
"the most common operation.  (2) Support faithful emulation of extreme "
"existing corner cases."
msgstr ""

#: ../../pep-0280.txt:227
msgid ""
"WRT  #2, the set of builtins in the scheme above is captured at the time "
"a module dict is first created.  Mutations to the set of builtin names "
"following that don't get reflected in the module dicts.  Example: "
"consider files ``main.py`` and ``cheater.py``::"
msgstr ""

#: ../../pep-0280.txt:244
msgid ""
"If ``main.py`` is run under Python 2.2 (or before), 666 is printed.  But "
"under the proposal, ``__builtin__.pachinko`` doesn't exist at the time "
"main's ``__dict__`` is initialized.  When the function object for f is "
"created, ``main.__dict__`` grows a pachinko cell mapping to two "
"``NULLs``.  When ``cheat()`` is called, ``__builtin__.__dict__`` grows a "
"pachinko cell too, but ``main.__dict__`` doesn't know-- and will never "
"know --about that.  When f's return stmt references pachinko, in will "
"still find the double-NULLs in ``main.__dict__``'s ``pachinko`` cell, and"
" so raise ``NameError``."
msgstr ""

#: ../../pep-0280.txt:254
msgid ""
"A similar (in cause) break in compatibility can occur if a module global "
"foo is del'ed, but a builtin foo was created prior to that but after the "
"module dict was first created.  Then the builtin foo becomes visible in "
"the module under 2.2 and before, but remains invisible under the "
"proposal."
msgstr ""

#: ../../pep-0280.txt:260
msgid ""
"Mutating builtins is extremely rare (most programs never mutate the "
"builtins, and it's hard to imagine a plausible use for frequent mutation "
"of the builtins -- I've never seen or heard of one), so it doesn't matter"
" how expensive mutating the builtins becomes.  OTOH, referencing globals "
"and builtins is very common.  Combining those observations suggests a "
"more aggressive caching of builtins in module globals, speeding access at"
" the expense of making mutations of the builtins (potentially much) more "
"expensive to keep the caches in synch."
msgstr ""

#: ../../pep-0280.txt:270
msgid ""
"Much of the scheme above remains the same, and most of the rest is just a"
" little different.  A cell changes to::"
msgstr ""

#: ../../pep-0280.txt:278
msgid ""
"and a celldict maps strings to this version of cells.  ``builtinflag`` is"
" true when and only when objptr contains a value obtained from the "
"builtins; in other words, it's true when and only when a cell is acting "
"as a cached value.  When ``builtinflag`` is false, objptr is the value of"
" a module global (possibly ``NULL``).  celldict changes to::"
msgstr ""

#: ../../pep-0280.txt:344
msgid ""
"The speed benefit comes from simplifying ``LOAD_GLOBAL_CELL``, which I "
"expect is executed more frequently than all other namespace operations "
"combined::"
msgstr ""

#: ../../pep-0280.txt:353
msgid ""
"That is, accessing builtins and accessing module globals are equally "
"fast.  For module globals, a NULL-pointer test+branch is saved.  For "
"builtins, an additional pointer chase is also saved."
msgstr ""

#: ../../pep-0280.txt:357
msgid ""
"The other part needed to make this fly is expensive, propagating "
"mutations of builtins into the module dicts that were initialized from "
"the builtins.  This is much like, in 2.2, propagating changes in new-"
"style base classes to their descendants:  the builtins need to maintain a"
" list of weakrefs to the modules (or module dicts) initialized from the "
"builtin's dict.  Given a mutation to the builtin dict (adding a new key, "
"changing the value associated with an existing key, or deleting a key), "
"traverse the list of module dicts and make corresponding mutations to "
"them.  This is straightforward; for example, if a key is deleted from "
"builtins, execute ``reflect_bltin_del`` in each module::"
msgstr ""

#: ../../pep-0280.txt:379
msgid ""
"Note that ``c.builtinflag`` protects from us erroneously deleting a "
"module global of the same name.  Adding a new (key, value) builtin pair "
"is similar::"
msgstr ""

#: ../../pep-0280.txt:398
msgid "Changing the value of an existing builtin::"
msgstr ""

#: ../../pep-0280.txt:411
msgid "FAQs"
msgstr ""

#: ../../pep-0280.txt:414
msgid "Q: Will it still be possible to:"
msgstr ""

#: ../../pep-0280.txt:416
msgid ""
"a) install new builtins in the ``__builtin__`` namespace and have them "
"available in all already loaded modules right away ?"
msgstr ""

#: ../../pep-0280.txt:419
msgid ""
"b) override builtins (e.g. ``open()``) with my own copies (e.g. to "
"increase security) in a way that makes these new copies override the "
"previous ones in all modules ?"
msgstr ""

#: ../../pep-0280.txt:423
msgid ""
"A: Yes, this is the whole point of this design.  In the original "
"approach, when ``LOAD_GLOBAL_CELL`` finds a ``NULL`` in the second cell, "
"it should go back to see if the ``__builtins__`` dict has been modified "
"(the pseudo code doesn't have this yet).  Tim's \"more aggressive\" "
"alternative also takes care of this."
msgstr ""

#: ../../pep-0280.txt:429
msgid "Q: How does the new scheme get along with the restricted execution model?"
msgstr ""

#: ../../pep-0280.txt:432
msgid "A: It is intended to support that fully."
msgstr ""

#: ../../pep-0280.txt:434
msgid "Q: What happens when a global is deleted?"
msgstr ""

#: ../../pep-0280.txt:436
msgid ""
"A: The module's celldict would have a cell with a ``NULL`` objptr for "
"that key.  This is true in both variations, but the \"aggressive\" "
"variation goes on to see whether this unmasks a builtin of the same name,"
" and if so copies its value (just a pointer-copy of the ultimate "
"``PyObject*``) into the cell's objptr and sets the cell's ``builtinflag``"
" to true."
msgstr ""

#: ../../pep-0280.txt:443
msgid "Q: What would the C code for ``LOAD_GLOBAL_CELL`` look like?"
msgstr ""

#: ../../pep-0280.txt:445
msgid ""
"A: The first version, with the first two bullets under \"Additional "
"ideas\" incorporated, could look like this::"
msgstr ""

#: ../../pep-0280.txt:462
msgid "We could even write it like this (idea courtesy of Ka-Ping Yee)::"
msgstr ""

#: ../../pep-0280.txt:475
msgid ""
"In modern CPU architectures, this reduces the number of branches taken "
"for built-ins, which might be a really good thing, while any decent "
"memory cache should realize that ``cell->cellptr`` is the same as cell "
"for regular globals and hence this should be very fast in that case too."
msgstr ""

#: ../../pep-0280.txt:481
msgid "For the aggressive variant::"
msgstr ""

#: ../../pep-0280.txt:494
msgid ""
"Q: What happens in the module's top-level code where there is presumably "
"no ``func_cells`` array?"
msgstr ""

#: ../../pep-0280.txt:497
msgid ""
"A: We could do some code analysis and create a ``func_cells`` array, or "
"we could use ``LOAD_NAME`` which should use ``PyMapping_GetItem`` on the "
"globals dict."
msgstr ""

#: ../../pep-0280.txt:503
msgid "Graphics"
msgstr ""

#: ../../pep-0280.txt:505
msgid ""
"Ka-Ping Yee supplied a drawing of the state of things after \"import "
"spam\", where ``spam.py`` contains::"
msgstr ""

#: ../../pep-0280.txt:517
msgid ""
"The drawing is at http://web.lfw.org/repo/cells.gif; a larger version is "
"at http://lfw.org/repo/cells-big.gif; the source is at "
"http://lfw.org/repo/cells.ai."
msgstr ""

#: ../../pep-0280.txt:523
msgid "Comparison"
msgstr ""

#: ../../pep-0280.txt:525
msgid "XXX Here, a comparison of the three approaches could be added."
msgstr ""

#: ../../pep-0280.txt:529
msgid "Copyright"
msgstr ""

#: ../../pep-0280.txt:531
msgid "This document has been placed in the public domain."
msgstr ""

