# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0553.rst
msgid "PEP"
msgstr ""

#: ../../pep-0553.rst:1
msgid "553"
msgstr ""

#: ../../pep-0553.rst
msgid "Title"
msgstr ""

#: ../../pep-0553.rst:2
msgid "Built-in breakpoint()"
msgstr ""

#: ../../pep-0553.rst
msgid "Author"
msgstr ""

#: ../../pep-0553.rst:3
msgid "Barry Warsaw <barry@python.org>"
msgstr ""

#: ../../pep-0553.rst
msgid "Status"
msgstr ""

#: ../../pep-0553.rst:4
msgid "Final"
msgstr ""

#: ../../pep-0553.rst
msgid "Type"
msgstr ""

#: ../../pep-0553.rst:5
msgid "Standards Track"
msgstr ""

#: ../../pep-0553.rst
msgid "Created"
msgstr ""

#: ../../pep-0553.rst:7
msgid "05-Sep-2017"
msgstr ""

#: ../../pep-0553.rst
msgid "Python-Version"
msgstr ""

#: ../../pep-0553.rst:8
msgid "3.7"
msgstr ""

#: ../../pep-0553.rst
msgid "Post-History"
msgstr ""

#: ../../pep-0553.rst:9
msgid "2017-09-05, 2017-09-07, 2017-09-13"
msgstr ""

#: ../../pep-0553.rst
msgid "Resolution"
msgstr ""

#: ../../pep-0553.rst:10
msgid "https://mail.python.org/pipermail/python-dev/2017-October/149705.html"
msgstr ""

#: ../../pep-0553.rst:14
msgid "Abstract"
msgstr ""

#: ../../pep-0553.rst:16
msgid ""
"This PEP proposes adding a new built-in function called ``breakpoint()`` "
"which enters a Python debugger at the point of the call.  Additionally, "
"two new names are added to the ``sys`` module to make the choice of which"
" debugger is entered configurable."
msgstr ""

#: ../../pep-0553.rst:23
msgid "Rationale"
msgstr ""

#: ../../pep-0553.rst:25
msgid ""
"Python has long had a great debugger in its standard library called "
"``pdb``. Setting a break point is commonly written like this::"
msgstr ""

#: ../../pep-0553.rst:32
msgid ""
"Thus after executing ``foo()`` and before executing ``bar()``, Python "
"will enter the debugger.  However this idiom has several disadvantages."
msgstr ""

#: ../../pep-0553.rst:35
msgid "It's a lot to type (27 characters)."
msgstr ""

#: ../../pep-0553.rst:37
msgid ""
"It's easy to typo.  The PEP author often mistypes this line, e.g. "
"omitting the semicolon, or typing a dot instead of an underscore."
msgstr ""

#: ../../pep-0553.rst:40
msgid ""
"It ties debugging directly to the choice of pdb.  There might be other "
"debugging options, say if you're using an IDE or some other development "
"environment."
msgstr ""

#: ../../pep-0553.rst:44
msgid ""
"Python linters (e.g. flake8 [linters]_) complain about this line because "
"it contains two statements.  Breaking the idiom up into two lines "
"complicates its use because there are more opportunities for mistakes at "
"clean up time. I.e. you might forget to delete one of those lines when "
"you no longer need to debug the code."
msgstr ""

#: ../../pep-0553.rst:50
msgid ""
"Python developers also have many other debuggers to choose from, but "
"remembering how to invoke them can be problematic.  For example, even "
"when IDEs have user interface for setting breakpoints, it may still be "
"more convenient to just edit the code.  The APIs for entering the "
"debugger programmatically are inconsistent, so it can be difficult to "
"remember exactly what to type."
msgstr ""

#: ../../pep-0553.rst:57
msgid ""
"We can solve all these problems by providing a universal API for entering"
" the debugger, as proposed in this PEP."
msgstr ""

#: ../../pep-0553.rst:62
msgid "Proposal"
msgstr ""

#: ../../pep-0553.rst:64
msgid ""
"The JavaScript language provides a ``debugger`` statement [js-debugger]_ "
"which enters the debugger at the point where the statement appears."
msgstr ""

#: ../../pep-0553.rst:67
msgid ""
"This PEP proposes a new built-in function called ``breakpoint()`` which "
"enters a Python debugger at the call site.  Thus the example above would "
"be written like so::"
msgstr ""

#: ../../pep-0553.rst:75
msgid ""
"Further, this PEP proposes two new name bindings for the ``sys`` module, "
"called ``sys.breakpointhook()`` and ``sys.__breakpointhook__``.  By "
"default, ``sys.breakpointhook()`` implements the actual importing and "
"entry into ``pdb.set_trace()``, and it can be set to a different function"
" to change the debugger that ``breakpoint()`` enters."
msgstr ""

#: ../../pep-0553.rst:82
msgid ""
"``sys.__breakpointhook__`` is initialized to the same function as "
"``sys.breakpointhook()`` so that you can always easily reset "
"``sys.breakpointhook()`` to the default value (e.g. by doing "
"``sys.breakpointhook = sys.__breakpointhook__``).  This is exactly the "
"same as how the existing ``sys.displayhook()`` / ``sys.__displayhook__`` "
"and ``sys.excepthook()`` / ``sys.__excepthook__`` work [hooks]_."
msgstr ""

#: ../../pep-0553.rst:89
msgid ""
"The signature of the built-in is ``breakpoint(*args, **kws)``.  The "
"positional and keyword arguments are passed straight through to "
"``sys.breakpointhook()`` and the signatures must match or a ``TypeError``"
" will be raised.  The return from ``sys.breakpointhook()`` is passed back"
" up to, and returned from ``breakpoint()``."
msgstr ""

#: ../../pep-0553.rst:95
msgid ""
"The rationale for this is based on the observation that the underlying "
"debuggers may accept additional optional arguments.  For example, IPython"
" allows you to specify a string that gets printed when the break point is"
" entered [ipython-embed]_.  As of Python 3.7, the pdb module also "
"supports an optional ``header`` argument [pdb-header]_."
msgstr ""

#: ../../pep-0553.rst:103
msgid "Environment variable"
msgstr ""

#: ../../pep-0553.rst:105
msgid ""
"The default implementation of ``sys.breakpointhook()`` consults a new "
"environment variable called ``PYTHONBREAKPOINT``.  This environment "
"variable can have various values:"
msgstr ""

#: ../../pep-0553.rst:109
msgid ""
"``PYTHONBREAKPOINT=0`` disables debugging.  Specifically, with this value"
" ``sys.breakpointhook()`` returns ``None`` immediately."
msgstr ""

#: ../../pep-0553.rst:112
msgid ""
"``PYTHONBREAKPOINT=`` (i.e. the empty string).  This is the same as not "
"setting the environment variable at all, in which case "
"``pdb.set_trace()`` is run as usual."
msgstr ""

#: ../../pep-0553.rst:116
msgid ""
"``PYTHONBREAKPOINT=some.importable.callable``.  In this case, "
"``sys.breakpointhook()`` imports the ``some.importable`` module and gets "
"the ``callable`` object from the resulting module, which it then calls.  "
"The value may be a string with no dots, in which case it names a built-in"
" callable, e.g. ``PYTHONBREAKPOINT=int``.  (Guido has expressed the "
"preference for normal Python dotted-paths, not setuptools-style entry "
"point syntax [syntax]_.)"
msgstr ""

#: ../../pep-0553.rst:124
msgid ""
"This environment variable allows external processes to control how "
"breakpoints are handled.  Some uses cases include:"
msgstr ""

#: ../../pep-0553.rst:127
msgid ""
"Completely disabling all accidental ``breakpoint()`` calls pushed to "
"production.  This could be accomplished by setting ``PYTHONBREAKPOINT=0``"
" in the execution environment.  Another suggestion by reviewers of the "
"PEP was to set ``PYTHONBREAKPOINT=sys.exit`` in this case."
msgstr ""

#: ../../pep-0553.rst:132
msgid ""
"IDE integration with specialized debuggers for embedded execution.  The "
"IDE would run the program in its debugging environment with "
"``PYTHONBREAKPOINT`` set to their internal debugging hook."
msgstr ""

#: ../../pep-0553.rst:136
msgid ""
"``PYTHONBREAKPOINT`` is re-interpreted every time "
"``sys.breakpointhook()`` is reached.  This allows processes to change its"
" value during the execution of a program and have ``breakpoint()`` "
"respond to those changes.  It is not considered a performance critical "
"section since entering a debugger by definition stops execution.  Thus, "
"programs can do the following::"
msgstr ""

#: ../../pep-0553.rst:145
msgid ""
"Overriding ``sys.breakpointhook`` defeats the default consultation of "
"``PYTHONBREAKPOINT``.  It is up to the overriding code to consult "
"``PYTHONBREAKPOINT`` if they want."
msgstr ""

#: ../../pep-0553.rst:149
msgid ""
"If access to the ``PYTHONBREAKPOINT`` callable fails in any way (e.g. the"
" import fails, or the resulting module does not contain the callable), a "
"``RuntimeWarning`` is issued, and no breakpoint function is called."
msgstr ""

#: ../../pep-0553.rst:153
msgid ""
"Note that as with all other ``PYTHON*`` environment variables, "
"``PYTHONBREAKPOINT`` is ignored when the interpreter is started with "
"``-E``.  This means the default behavior will occur (i.e. "
"``pdb.set_trace()`` will run).  There was some discussion about "
"alternatively treating ``PYTHONBREAKPOINT=0`` when ``-E`` as in effect, "
"but the opinions were inconclusive, so it was decided that this wasn't "
"special enough for a special case."
msgstr ""

#: ../../pep-0553.rst:163
msgid "Implementation"
msgstr ""

#: ../../pep-0553.rst:165
msgid "A pull request exists with the proposed implementation [impl]_."
msgstr ""

#: ../../pep-0553.rst:167
msgid ""
"While the actual implementation is in C, the Python pseudo-code for this "
"feature looks roughly like the following::"
msgstr ""

#: ../../pep-0553.rst:205
msgid "Rejected alternatives"
msgstr ""

#: ../../pep-0553.rst:208
msgid "A new keyword"
msgstr ""

#: ../../pep-0553.rst:210
msgid ""
"Originally, the author considered a new keyword, or an extension to an "
"existing keyword such as ``break here``.  This is rejected on several "
"fronts."
msgstr ""

#: ../../pep-0553.rst:213
msgid ""
"A brand new keyword would require a ``__future__`` to enable it since "
"almost any new keyword could conflict with existing code.  This negates "
"the ease with which you can enter the debugger."
msgstr ""

#: ../../pep-0553.rst:217
msgid ""
"An extended keyword such as ``break here``, while more readable and not "
"requiring a ``__future__`` would tie the keyword extension to this new "
"feature, preventing more useful extensions such as those proposed in PEP "
"548."
msgstr ""

#: ../../pep-0553.rst:222
msgid ""
"A new keyword would require a modified grammar and likely a new bytecode."
" Each of these makes the implementation more complex.  A new built-in "
"breaks no existing code (since any existing module global would just "
"shadow the built-in) and is quite easy to implement."
msgstr ""

#: ../../pep-0553.rst:229
msgid "sys.breakpoint()"
msgstr ""

#: ../../pep-0553.rst:231
msgid ""
"Why not ``sys.breakpoint()``?  Requiring an import to invoke the debugger"
" is explicitly rejected because ``sys`` is not imported in every module."
"  That just requires more typing and would lead to::"
msgstr ""

#: ../../pep-0553.rst:237
msgid "which inherits several of the problems this PEP aims to solve."
msgstr ""

#: ../../pep-0553.rst:241
msgid "Version History"
msgstr ""

#: ../../pep-0553.rst:243
msgid "2019-10-13"
msgstr ""

#: ../../pep-0553.rst:245
msgid "Add missing ``return None`` in ``except`` clause to pseudo-code."
msgstr ""

#: ../../pep-0553.rst:247
msgid "2017-09-13"
msgstr ""

#: ../../pep-0553.rst:249
msgid ""
"The ``PYTHONBREAKPOINT`` environment variable is made a first class "
"feature."
msgstr ""

#: ../../pep-0553.rst:252
msgid "2017-09-07"
msgstr ""

#: ../../pep-0553.rst:254
msgid "``debug()`` renamed to ``breakpoint()``"
msgstr ""

#: ../../pep-0553.rst:255
msgid ""
"Signature changed to ``breakpoint(*args, **kws)`` which is passed "
"straight through to ``sys.breakpointhook()``."
msgstr ""

#: ../../pep-0553.rst:260
msgid "References"
msgstr ""

#: ../../pep-0553.rst:263
msgid "http://ipython.readthedocs.io/en/stable/api/generated/IPython.terminal.embed.html"
msgstr ""

#: ../../pep-0553.rst:266
msgid "https://docs.python.org/3.7/library/pdb.html#pdb.set_trace"
msgstr ""

#: ../../pep-0553.rst:269
msgid "http://flake8.readthedocs.io/en/latest/"
msgstr ""

#: ../../pep-0553.rst:272
msgid ""
"https://developer.mozilla.org/en-"
"US/docs/Web/JavaScript/Reference/Statements/debugger"
msgstr ""

#: ../../pep-0553.rst:275
msgid "https://docs.python.org/3/library/sys.html#sys.displayhook"
msgstr ""

#: ../../pep-0553.rst:278
msgid ""
"http://setuptools.readthedocs.io/en/latest/setuptools.html?highlight=console"
"#automatic-script-creation"
msgstr ""

#: ../../pep-0553.rst:281
msgid "https://github.com/python/cpython/pull/3355"
msgstr ""

#: ../../pep-0553.rst:284
msgid "https://mail.python.org/pipermail/python-dev/2017-September/149447.html"
msgstr ""

#: ../../pep-0553.rst:288
msgid "Copyright"
msgstr ""

#: ../../pep-0553.rst:290
msgid "This document has been placed in the public domain."
msgstr ""

