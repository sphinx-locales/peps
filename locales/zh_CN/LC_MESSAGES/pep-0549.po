# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0549.rst
msgid "PEP"
msgstr ""

#: ../../pep-0549.rst:1
msgid "549"
msgstr ""

#: ../../pep-0549.rst
msgid "Title"
msgstr ""

#: ../../pep-0549.rst:2
msgid "Instance Descriptors"
msgstr ""

#: ../../pep-0549.rst
msgid "Author"
msgstr ""

#: ../../pep-0549.rst:5
msgid "larry@hastings.org (Larry Hastings)"
msgstr ""

#: ../../pep-0549.rst
msgid "Discussions-To"
msgstr ""

#: ../../pep-0549.rst:6
msgid "Python-Dev <python-dev@python.org>"
msgstr ""

#: ../../pep-0549.rst
msgid "Status"
msgstr ""

#: ../../pep-0549.rst:7
msgid "Rejected"
msgstr ""

#: ../../pep-0549.rst
msgid "Type"
msgstr ""

#: ../../pep-0549.rst:8
msgid "Standards Track"
msgstr ""

#: ../../pep-0549.rst
msgid "Created"
msgstr ""

#: ../../pep-0549.rst:10
msgid "04-Sep-2017"
msgstr ""

#: ../../pep-0549.rst
msgid "Python-Version"
msgstr ""

#: ../../pep-0549.rst:11
msgid "3.7"
msgstr ""

#: ../../pep-0549.rst
msgid "Post-History"
msgstr ""

#: ../../pep-0549.rst:12
msgid "4-Sep-2017"
msgstr ""

#: ../../pep-0549.rst:16
msgid "Rejection Notice"
msgstr ""

#: ../../pep-0549.rst:18
msgid "https://mail.python.org/pipermail/python-dev/2017-November/150528.html"
msgstr ""

#: ../../pep-0549.rst:21
msgid "Abstract"
msgstr ""

#: ../../pep-0549.rst:23
msgid ""
"Python's descriptor protocol requires that descriptors be members of the "
"*type* of an object.  This PEP proposes an extension to the descriptor "
"protocol allowing use of the descriptor protocol for members of "
"*instances.*  This would permit using properties in modules."
msgstr ""

#: ../../pep-0549.rst:30
msgid "Rationale"
msgstr ""

#: ../../pep-0549.rst:32
msgid ""
"Python's descriptor protocol guides programmers towards elegant API "
"design.  If your class supports a data-like member, and you *might* "
"someday need to run code when changing the member's value, you're "
"encouraged to simply declare it as a simple data member of the class for "
"now.  If in the future you do need to run code, you can change it to a "
"\"property\", and happily the API doesn't change."
msgstr ""

#: ../../pep-0549.rst:41
msgid ""
"But consider this second bit of best-practice Python API design: if "
"you're writing a singleton, don't write a class, just build your code "
"directly into a module.  Don't make your users instantiate a singleton "
"class, don't make your users have to dereference through a singleton "
"object stored in a module, just have module-level functions and module-"
"level data."
msgstr ""

#: ../../pep-0549.rst:48
msgid ""
"Unfortunately these two best practices are in opposition. The problem is "
"that properties aren't supported on modules. Modules are instances of a "
"single generic ``module`` type, and it's not feasible to modify or "
"subclass this type to add a property to one's module.  This means that "
"programmers facing this API design decision, where the data-like member "
"is a singleton stored in a module, must preemptively add ugly \"getters\""
" and \"setters\" for the data."
msgstr ""

#: ../../pep-0549.rst:57
msgid ""
"Adding support for module properties in pure Python has recently become "
"*possible;* as of Python 3.5, Python permits assigning to the "
"``__class__`` attribute of module objects, specifically for this purpose."
"  Here's an example of using this functionality to add a property to a "
"module::"
msgstr ""

#: ../../pep-0549.rst:71
msgid "This works, and is supported behavior, but it's clumsy and obscure."
msgstr ""

#: ../../pep-0549.rst:73
msgid ""
"This PEP proposes a per-type opt-in extension to the descriptor protocol "
"specifically designed to enable properties in modules. The mechanism is a"
" way to honor the descriptor protocol for members of *instances* of a "
"class without the member being declared as a class variable."
msgstr ""

#: ../../pep-0549.rst:79
msgid ""
"Although this is being proposed as a general mechanism, the author "
"currently only foresees this as being useful for module objects."
msgstr ""

#: ../../pep-0549.rst:83
msgid "Implementation"
msgstr ""

#: ../../pep-0549.rst:85
msgid ""
"The basic idea is simple: modify the ``tp_descr_get`` and "
"``tp_descr_set`` functions exposed by ``PyModule_Type`` to inspect the "
"attribute interacted with, and if it supports the descriptor protocol, "
"call the relevant exposed function."
msgstr ""

#: ../../pep-0549.rst:90
msgid "Our implementation faces two challenges:"
msgstr ""

#: ../../pep-0549.rst:92
msgid ""
"Since this code will be run every time an attribute is looked up on a "
"method, it needs to add very little overhead in the general case, where "
"the object stored in the attribute is not a descriptor."
msgstr ""

#: ../../pep-0549.rst:96
msgid ""
"Since functions are descriptors, we must take care to *not* honor the "
"descriptor protocol for all objects.  Otherwise, all module-level "
"functions will suddenly become bound to the module instance as if they "
"were method calls on the module object.  The module handle would be "
"passed in as a \"self\" argument to all module-level functions."
msgstr ""

#: ../../pep-0549.rst:102
msgid ""
"Both challenges can be solved with the same approach: we define a new "
"\"fast subclass\" flag that means \"This object is a descriptor, and it "
"should be honored directly when this object is looked up as an attribute "
"of an instance\".  So far this flag is only set on two types: "
"``property`` and ``collections.abc.InstanceDescriptor``. The latter is an"
" abstract base class, whose only purpose is to allow user classes to "
"inherit this \"fast subclass\" flag."
msgstr ""

#: ../../pep-0549.rst:111
msgid "Prototype"
msgstr ""

#: ../../pep-0549.rst:113
msgid ""
"A prototype of this functionality is under development at GitHub "
"[github]_."
msgstr ""

#: ../../pep-0549.rst:117
msgid "Acknowledgements"
msgstr ""

#: ../../pep-0549.rst:119
msgid ""
"Armin Rigo essentially proposed this mechanism when presented with the "
"idea of \"module properties\", and educated the author both on the "
"complexities of the problem and the proper solution. Nathaniel J. Smith "
"pointed out the 3.5 extension about assigning to ``__class__`` on module "
"objects, and provided the example."
msgstr ""

#: ../../pep-0549.rst:126
msgid "References"
msgstr ""

#: ../../pep-0549.rst:129
msgid "The branch is here:"
msgstr ""

#: ../../pep-0549.rst:130
msgid "https://github.com/larryhastings/cpython/tree/module-properties"
msgstr ""

#: ../../pep-0549.rst:132
msgid "A pull request against the main CPython repo is here:"
msgstr ""

#: ../../pep-0549.rst:132
msgid "https://github.com/python/cpython/pull/3534"
msgstr ""

#: ../../pep-0549.rst:135
msgid "Copyright"
msgstr ""

#: ../../pep-0549.rst:137
msgid "This document has been placed in the public domain."
msgstr ""

