# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-3123.txt
msgid "PEP"
msgstr ""

#: ../../pep-3123.txt:1
msgid "3123"
msgstr ""

#: ../../pep-3123.txt
msgid "Title"
msgstr ""

#: ../../pep-3123.txt:2
msgid "Making PyObject_HEAD conform to standard C"
msgstr ""

#: ../../pep-3123.txt
msgid "Author"
msgstr ""

#: ../../pep-3123.txt:5
msgid "Martin von LÃ¶wis <martin@v.loewis.de>"
msgstr ""

#: ../../pep-3123.txt
msgid "Status"
msgstr ""

#: ../../pep-3123.txt:6
msgid "Final"
msgstr ""

#: ../../pep-3123.txt
msgid "Type"
msgstr ""

#: ../../pep-3123.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-3123.txt
msgid "Created"
msgstr ""

#: ../../pep-3123.txt:9
msgid "27-Apr-2007"
msgstr ""

#: ../../pep-3123.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-3123.txt:10
msgid "3.0"
msgstr ""

#: ../../pep-3123.txt
msgid "Post-History"
msgstr ""

#: ../../pep-3123.txt:14
msgid "Abstract"
msgstr ""

#: ../../pep-3123.txt:16
msgid ""
"Python currently relies on undefined C behavior, with its usage of "
"``PyObject_HEAD``. This PEP proposes to change that into standard C."
msgstr ""

#: ../../pep-3123.txt:21
msgid "Rationale"
msgstr ""

#: ../../pep-3123.txt:23
msgid ""
"Standard C defines that an object must be accessed only through a pointer"
" of its type, and that all other accesses are undefined behavior, with a "
"few exceptions. In particular, the following code has undefined "
"behavior::"
msgstr ""

#: ../../pep-3123.txt:45
msgid ""
"The problem here is that the storage is both accessed as if it where "
"struct ``PyObject``, and as struct ``FooObject``."
msgstr ""

#: ../../pep-3123.txt:48
msgid ""
"Historically, compilers did not have any problems with this code. "
"However, modern compilers use that clause as an optimization opportunity,"
" finding that ``f->ob_refcnt`` and ``o->ob_refcnt`` cannot possibly refer"
" to the same memory, and that therefore the function should return 0, "
"without having to fetch the value of ob_refcnt at all in the return "
"statement. For GCC, Python now uses ``-fno-strict-aliasing`` to work "
"around that problem; with other compilers, it may just see undefined "
"behavior. Even with GCC, using ``-fno-strict-aliasing`` may pessimize the"
" generated code unnecessarily."
msgstr ""

#: ../../pep-3123.txt:61
msgid "Specification"
msgstr ""

#: ../../pep-3123.txt:63
msgid ""
"Standard C has one specific exception to its aliasing rules precisely "
"designed to support the case of Python: a value of a struct type may also"
" be accessed through a pointer to the first field. E.g. if a struct "
"starts with an ``int``, the ``struct *`` may also be cast to an ``int "
"*``, allowing to write int values into the first field."
msgstr ""

#: ../../pep-3123.txt:69
msgid ""
"For Python, ``PyObject_HEAD`` and ``PyObject_VAR_HEAD`` will be changed "
"to not list all fields anymore, but list a single field of type "
"``PyObject``/``PyVarObject``::"
msgstr ""

#: ../../pep-3123.txt:87
msgid ""
"Types defined as fixed-size structure will then include PyObject as its "
"first field, PyVarObject for variable-sized objects. E.g.::"
msgstr ""

#: ../../pep-3123.txt:101
msgid ""
"The above definitions of ``PyObject_HEAD`` are normative, so extension "
"authors MAY either use the macro, or put the ``ob_base`` field explicitly"
" into their structs."
msgstr ""

#: ../../pep-3123.txt:105
msgid ""
"As a convention, the base field SHOULD be called ob_base. However, all "
"accesses to ob_refcnt and ob_type MUST cast the object pointer to "
"PyObject* (unless the pointer is already known to have that type), and "
"SHOULD use the respective accessor macros. To simplify access to ob_type,"
" ob_refcnt, and ob_size, macros::"
msgstr ""

#: ../../pep-3123.txt:115
msgid "are added. E.g. the code blocks ::"
msgstr ""

#: ../../pep-3123.txt:121
msgid "needs to be changed to::"
msgstr ""

#: ../../pep-3123.txt:127
msgid "For initialization of type objects, the current sequence ::"
msgstr ""

#: ../../pep-3123.txt:132
msgid "becomes incorrect, and must be replaced with ::"
msgstr ""

#: ../../pep-3123.txt:137
msgid "Compatibility with Python 2.6"
msgstr ""

#: ../../pep-3123.txt:139
msgid ""
"To support modules that compile with both Python 2.6 and Python 3.0, the "
"``Py_*`` macros are added to Python 2.6. The macros ``Py_INCREF`` and "
"``Py_DECREF`` will be changed to cast their argument to ``PyObject *``, "
"so that module authors can also explicitly declare the ``ob_base`` field "
"in modules designed for Python 2.6."
msgstr ""

#: ../../pep-3123.txt:146
msgid "Copyright"
msgstr ""

#: ../../pep-3123.txt:148
msgid "This document has been placed in the public domain."
msgstr ""

