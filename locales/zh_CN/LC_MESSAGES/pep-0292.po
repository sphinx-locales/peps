# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0292.txt
msgid "PEP"
msgstr ""

#: ../../pep-0292.txt:1
msgid "292"
msgstr ""

#: ../../pep-0292.txt
msgid "Title"
msgstr ""

#: ../../pep-0292.txt:2
msgid "Simpler String Substitutions"
msgstr ""

#: ../../pep-0292.txt
msgid "Author"
msgstr ""

#: ../../pep-0292.txt:5
msgid "barry@python.org (Barry Warsaw)"
msgstr ""

#: ../../pep-0292.txt
msgid "Status"
msgstr ""

#: ../../pep-0292.txt:6
msgid "Final"
msgstr ""

#: ../../pep-0292.txt
msgid "Type"
msgstr ""

#: ../../pep-0292.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0292.txt
msgid "Created"
msgstr ""

#: ../../pep-0292.txt:9
msgid "18-Jun-2002"
msgstr ""

#: ../../pep-0292.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0292.txt:10
msgid "2.4"
msgstr ""

#: ../../pep-0292.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0292.txt:11
msgid "18-Jun-2002, 23-Mar-2004, 22-Aug-2004"
msgstr ""

#: ../../pep-0292.txt
msgid "Replaces"
msgstr ""

#: ../../pep-0292.txt:12
msgid "215"
msgstr ""

#: ../../pep-0292.txt:16
msgid "Abstract"
msgstr ""

#: ../../pep-0292.txt:18
msgid ""
"This PEP describes a simpler string substitution feature, also known as "
"string interpolation.  This PEP is \"simpler\" in two respects:"
msgstr ""

#: ../../pep-0292.txt:22
msgid ""
"Python's current string substitution feature (i.e. ``%``-substitution) is"
" complicated and error prone.  This PEP is simpler at the cost of some "
"expressiveness."
msgstr ""

#: ../../pep-0292.txt:26
msgid ""
"PEP 215 proposed an alternative string interpolation feature, introducing"
" a new ``$`` string prefix.  PEP 292 is simpler than this because it "
"involves no syntax changes and has much simpler rules for what "
"substitutions can occur in the string."
msgstr ""

#: ../../pep-0292.txt:33
msgid "Rationale"
msgstr ""

#: ../../pep-0292.txt:35
#, python-format
msgid ""
"Python currently supports a string substitution syntax based on C's "
"``printf()`` '``%``' formatting character [1]_.  While quite rich, "
"``%``-formatting codes are also error prone, even for experienced Python "
"programmers.  A common mistake is to leave off the trailing format "
"character, e.g. the '``s``' in ``\"%(name)s\"``."
msgstr ""

#: ../../pep-0292.txt:41
#, python-format
msgid ""
"In addition, the rules for what can follow a ``%`` sign are fairly "
"complex, while the usual application rarely needs such complexity. Most "
"scripts need to do some string interpolation, but most of those use "
"simple 'stringification' formats, i.e. ``%s`` or ``%(name)s`` This form "
"should be made simpler and less error prone."
msgstr ""

#: ../../pep-0292.txt:49
msgid "A Simpler Proposal"
msgstr ""

#: ../../pep-0292.txt:51
msgid ""
"We propose the addition of a new class, called ``Template``, which will "
"live in the string module.  The ``Template`` class supports new rules for"
" string substitution; its value contains placeholders, introduced with "
"the ``$`` character.  The following rules for ``$``-placeholders apply:"
msgstr ""

#: ../../pep-0292.txt:57
msgid "``$$`` is an escape; it is replaced with a single ``$``"
msgstr ""

#: ../../pep-0292.txt:59
msgid ""
"``$identifier`` names a substitution placeholder matching a mapping key "
"of \"identifier\".  By default, \"identifier\" must spell a Python "
"identifier as defined in [2]_.  The first non-identifier character after "
"the ``$`` character terminates this placeholder specification."
msgstr ""

#: ../../pep-0292.txt:65
msgid ""
"``${identifier}`` is equivalent to ``$identifier``.  It is required when "
"valid identifier characters follow the placeholder but are not part of "
"the placeholder, e.g. ``\"${noun}ification\"``."
msgstr ""

#: ../../pep-0292.txt:69
msgid ""
"If the ``$`` character appears at the end of the line, or is followed by "
"any other character than those described above, a ``ValueError`` will be "
"raised at interpolation time.  Values in mapping are converted "
"automatically to strings."
msgstr ""

#: ../../pep-0292.txt:74
msgid ""
"No other characters have special meaning, however it is possible to "
"derive from the ``Template`` class to define different substitution "
"rules.  For example, a derived class could allow for periods in the "
"placeholder (e.g. to support a kind of dynamic namespace and attribute "
"path lookup), or could define a delimiter character other than ``$``."
msgstr ""

#: ../../pep-0292.txt:81
msgid ""
"Once the ``Template`` has been created, substitutions can be performed by"
" calling one of two methods:"
msgstr ""

#: ../../pep-0292.txt:84
msgid ""
"``substitute()``.  This method returns a new string which results when "
"the values of a mapping are substituted for the placeholders in the "
"``Template``.  If there are placeholders which are not present in the "
"mapping, a ``KeyError`` will be raised."
msgstr ""

#: ../../pep-0292.txt:89
msgid ""
"``safe_substitute()``.  This is similar to the ``substitute()`` method, "
"except that ``KeyErrors`` are never raised (due to placeholders missing "
"from the mapping).  When a placeholder is missing, the original "
"placeholder will appear in the resulting string."
msgstr ""

#: ../../pep-0292.txt:94
msgid "Here are some examples::"
msgstr ""

#: ../../pep-0292.txt:108
msgid ""
"The signature of ``substitute()`` and ``safe_substitute()`` allows for "
"passing the mapping of placeholders to values, either as a single "
"dictionary-like object in the first positional argument, or as keyword "
"arguments as shown above.  The exact details and signatures of these two "
"methods is reserved for the standard library documentation."
msgstr ""

#: ../../pep-0292.txt:117
msgid "Why ``$`` and Braces?"
msgstr ""

#: ../../pep-0292.txt:119
msgid ""
"The BDFL said it best [4]_: \"The ``$`` means \"substitution\" in so many"
" languages besides Perl that I wonder where you've been. [...] We're "
"copying this from the shell.\""
msgstr ""

#: ../../pep-0292.txt:123
msgid ""
"Thus the substitution rules are chosen because of the similarity with so "
"many other languages.  This makes the substitution rules easier to teach,"
" learn, and remember."
msgstr ""

#: ../../pep-0292.txt:129
msgid "Comparison to PEP 215"
msgstr ""

#: ../../pep-0292.txt:131
msgid ""
"PEP 215 describes an alternate proposal for string interpolation. Unlike "
"that PEP, this one does not propose any new syntax for Python.  All the "
"proposed new features are embodied in a new library module.  PEP 215 "
"proposes a new string prefix representation such as ``$\"\"`` which "
"signal to Python that a new type of string is present.  ``$``-strings "
"would have to interact with the existing r-prefixes and u-prefixes, "
"essentially doubling the number of string prefix combinations."
msgstr ""

#: ../../pep-0292.txt:140
msgid ""
"PEP 215 also allows for arbitrary Python expressions inside the "
"``$``-strings, so that you could do things like::"
msgstr ""

#: ../../pep-0292.txt:146
msgid "which would return::"
msgstr ""

#: ../../pep-0292.txt:150
msgid ""
"It's generally accepted that the rules in PEP 215 are safe in the sense "
"that they introduce no new security issues (see PEP 215, \"Security "
"Issues\" for details).  However, the rules are still quite complex, and "
"make it more difficult to see the substitution placeholder in the "
"original ``$``-string."
msgstr ""

#: ../../pep-0292.txt:156
msgid ""
"The interesting thing is that the ``Template`` class defined in this PEP "
"is designed for inheritance and, with a little extra work, it's possible "
"to support PEP 215's functionality using existing Python syntax."
msgstr ""

#: ../../pep-0292.txt:161
msgid ""
"For example, one could define subclasses of ``Template`` and dict that "
"allowed for a more complex placeholder syntax and a mapping that "
"evaluated those placeholders."
msgstr ""

#: ../../pep-0292.txt:167
msgid "Internationalization"
msgstr ""

#: ../../pep-0292.txt:169
msgid ""
"The implementation supports internationalization by recording the "
"original template string in the ``Template`` instance's ``template`` "
"attribute.  This attribute would serve as the lookup key in an gettext-"
"based catalog.  It is up to the application to turn the resulting string "
"back into a ``Template`` for substitution."
msgstr ""

#: ../../pep-0292.txt:175
msgid ""
"However, the ``Template`` class was designed to work more intuitively in "
"an internationalized application, by supporting the mixing-in of "
"``Template`` and unicode subclasses.  Thus an internationalized "
"application could create an application-specific subclass, multiply "
"inheriting from ``Template`` and unicode, and using instances of that "
"subclass as the gettext catalog key.  Further, the subclass could alias "
"the special ``__mod__()`` method to either ``.substitute()`` or "
"``.safe_substitute()`` to provide a more traditional string/unicode like "
"``%``-operator substitution syntax."
msgstr ""

#: ../../pep-0292.txt:187
msgid "Reference Implementation"
msgstr ""

#: ../../pep-0292.txt:189
msgid "The implementation has been committed to the Python 2.4 source tree."
msgstr ""

#: ../../pep-0292.txt:193
msgid "References"
msgstr ""

#: ../../pep-0292.txt:195
msgid ""
"String Formatting Operations http://docs.python.org/library/stdtypes.html"
"#string-formatting-operations"
msgstr ""

#: ../../pep-0292.txt:198
msgid ""
"Identifiers and Keywords "
"http://docs.python.org/reference/lexical_analysis.html#identifiers-and-"
"keywords"
msgstr ""

#: ../../pep-0292.txt:201
msgid ""
"Guido's python-dev posting from 21-Jul-2002 "
"https://mail.python.org/pipermail/python-dev/2002-July/026397.html"
msgstr ""

#: ../../pep-0292.txt:204
msgid "https://mail.python.org/pipermail/python-dev/2002-June/025652.html"
msgstr ""

#: ../../pep-0292.txt:206
msgid ""
"Reference Implementation "
"http://sourceforge.net/tracker/index.php?func=detail&aid=1014055&group_id=5470&atid=305470"
msgstr ""

#: ../../pep-0292.txt:210
msgid "Copyright"
msgstr ""

#: ../../pep-0292.txt:212
msgid "This document has been placed in the public domain."
msgstr ""

