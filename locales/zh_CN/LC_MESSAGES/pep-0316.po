# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0316.txt
msgid "PEP"
msgstr ""

#: ../../pep-0316.txt:1
msgid "316"
msgstr ""

#: ../../pep-0316.txt
msgid "Title"
msgstr ""

#: ../../pep-0316.txt:2
msgid "Programming by Contract for Python"
msgstr ""

#: ../../pep-0316.txt
msgid "Author"
msgstr ""

#: ../../pep-0316.txt:5
msgid "Terence Way <terry@wayforward.net>"
msgstr ""

#: ../../pep-0316.txt
msgid "Status"
msgstr ""

#: ../../pep-0316.txt:6
msgid "Deferred"
msgstr ""

#: ../../pep-0316.txt
msgid "Type"
msgstr ""

#: ../../pep-0316.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0316.txt
msgid "Created"
msgstr ""

#: ../../pep-0316.txt:9
msgid "02-May-2003"
msgstr ""

#: ../../pep-0316.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0316.txt:14
msgid "Abstract"
msgstr ""

#: ../../pep-0316.txt:16
msgid ""
"This submission describes programming by contract for Python. Eiffel's "
"Design By Contract(tm) is perhaps the most popular use of programming "
"contracts [#dbc]_."
msgstr ""

#: ../../pep-0316.txt:20
msgid ""
"Programming contracts extends the language to include invariant "
"expressions for classes and modules, and pre- and post-condition "
"expressions for functions and methods."
msgstr ""

#: ../../pep-0316.txt:24
msgid ""
"These expressions (contracts) are similar to assertions: they must be "
"true or the program is stopped, and run-time checking of the contracts is"
" typically only enabled while debugging.  Contracts are higher-level than"
" straight assertions and are typically included in documentation."
msgstr ""

#: ../../pep-0316.txt:31
msgid "Motivation"
msgstr ""

#: ../../pep-0316.txt:33
msgid ""
"Python already has assertions, why add extra stuff to the language to "
"support something like contracts?  The two best reasons are 1) better, "
"more accurate documentation, and 2) easier testing."
msgstr ""

#: ../../pep-0316.txt:37
msgid ""
"Complex modules and classes never seem to be documented quite right. The "
"documentation provided may be enough to convince a programmer to use a "
"particular module or class over another, but the programmer almost always"
" has to read the source code when the real debugging starts."
msgstr ""

#: ../../pep-0316.txt:43
msgid ""
"Contracts extend the excellent example provided by the ``doctest`` module"
" [#doctest]_.  Documentation is readable by programmers, yet has "
"executable tests embedded in it."
msgstr ""

#: ../../pep-0316.txt:47
msgid ""
"Testing code with contracts is easier too.  Comprehensive contracts are "
"equivalent to unit tests [#xp]_.  Tests exercise the full range of pre-"
"conditions, and fail if the post-conditions are triggered. Theoretically,"
" a correctly specified function can be tested completely randomly."
msgstr ""

#: ../../pep-0316.txt:53
msgid ""
"So why add this to the language?  Why not have several different "
"implementations, or let programmers implement their own assertions? The "
"answer is the behavior of contracts under inheritance."
msgstr ""

#: ../../pep-0316.txt:57
msgid ""
"Suppose Alice and Bob use different assertions packages.  If Alice "
"produces a class library protected by assertions, Bob cannot derive "
"classes from Alice's library and expect proper checking of post-"
"conditions and invariants.  If they both use the same assertions package,"
" then Bob can override Alice's methods yet still test against Alice's "
"contract assertions.  The natural place to find this assertions system is"
" in the language's run-time library."
msgstr ""

#: ../../pep-0316.txt:67
msgid "Specification"
msgstr ""

#: ../../pep-0316.txt:69
msgid ""
"The docstring of any module or class can include invariant contracts "
"marked off with a line that starts with the keyword ``inv`` followed by a"
" colon (:).  Whitespace at the start of the line and around the colon is "
"ignored.  The colon is either immediately followed by a single expression"
" on the same line, or by a series of expressions on following lines "
"indented past the ``inv`` keyword.  The normal Python rules about "
"implicit and explicit line continuations are followed here.  Any number "
"of invariant contracts can be in a docstring."
msgstr ""

#: ../../pep-0316.txt:78
msgid "Some examples::"
msgstr ""

#: ../../pep-0316.txt:113
msgid ""
"Module invariants must be true after the module is loaded, and at the "
"entry and exit of every public function within the module."
msgstr ""

#: ../../pep-0316.txt:116
msgid ""
"Class invariants must be true after the ``__init__`` function returns, at"
" the entry of the ``__del__`` function, and at the entry and exit of "
"every other public method of the class.  Class invariants must use the "
"self variable to access instance variables."
msgstr ""

#: ../../pep-0316.txt:121
msgid ""
"A method or function is public if its name doesn't start with an "
"underscore (_), unless it starts and ends with '__' (two underscores)."
msgstr ""

#: ../../pep-0316.txt:124
msgid ""
"The docstring of any function or method can have pre-conditions "
"documented with the keyword ``pre`` following the same rules above. Post-"
"conditions are documented with the keyword ``post`` optionally followed "
"by a list of variables.  The variables are in the same scope as the body "
"of the function or method.  This list declares the variables that the "
"function/method is allowed to modify."
msgstr ""

#: ../../pep-0316.txt:131 ../../pep-0316.txt:161 ../../pep-0316.txt:199
msgid "An example::"
msgstr ""

#: ../../pep-0316.txt:144
msgid ""
"A double-colon (::) can be used instead of a single colon (:) to support "
"docstrings written using reStructuredText [#rst]_.  For example, the "
"following two docstrings describe the same contract::"
msgstr ""

#: ../../pep-0316.txt:151
msgid ""
"Expressions in pre- and post-conditions are defined in the module "
"namespace -- they have access to nearly all the variables that the "
"function can access, except closure variables."
msgstr ""

#: ../../pep-0316.txt:155
msgid ""
"The contract expressions in post-conditions have access to two additional"
" variables: ``__old__`` which is filled with shallow copies of values "
"declared in the variable list immediately following the post keyword, and"
" ``__return__`` which is bound to the return value of the function or "
"method."
msgstr ""

#: ../../pep-0316.txt:174
msgid ""
"All contract expressions have access to some additional convenience "
"functions.  To make evaluating the truth of sequences easier, two "
"functions ``forall`` and ``exists`` are defined as::"
msgstr ""

#: ../../pep-0316.txt:216
msgid ""
"To make evaluating conditions easier, the function ``implies`` is "
"defined.  With two arguments, this is similar to the logical implies (=>)"
" operator.  With three arguments, this is similar to C's conditional "
"expression (x?a:b).  This is defined as::"
msgstr ""

#: ../../pep-0316.txt:226
msgid ""
"On entry to a function, the function's pre-conditions are checked.  An "
"assertion error is raised if any pre-condition is false.  If the function"
" is public, then the class or module's invariants are also checked.  "
"Copies of variables declared in the post are saved, the function is "
"called, and if the function exits without raising an exception, the post-"
"conditions are checked."
msgstr ""

#: ../../pep-0316.txt:235
msgid "Exceptions"
msgstr ""

#: ../../pep-0316.txt:237
msgid ""
"Class/module invariants are checked even if a function or method exits by"
" signalling an exception (post-conditions are not)."
msgstr ""

#: ../../pep-0316.txt:240
msgid ""
"All failed contracts raise exceptions which are subclasses of the "
"``ContractViolationError`` exception, which is in turn a subclass of the "
"``AssertionError`` exception.  Failed pre-conditions raise a "
"``PreconditionViolationError`` exception.  Failed post-conditions raise a"
" ``PostconditionViolationError`` exception, and failed invariants raise a"
" ``InvariantViolationError`` exception."
msgstr ""

#: ../../pep-0316.txt:247
msgid "The class hierarchy::"
msgstr ""

#: ../../pep-0316.txt:256
msgid ""
"The ``InvalidPreconditionError`` is raised when pre-conditions are "
"illegally strengthened, see the next section on Inheritance."
msgstr ""

#: ../../pep-0316.txt:259
msgid "Example::"
msgstr ""

#: ../../pep-0316.txt:269
msgid "Inheritance"
msgstr ""

#: ../../pep-0316.txt:271
msgid ""
"A class's invariants include all the invariants for all super-classes "
"(class invariants are ANDed with super-class invariants).  These "
"invariants are checked in method-resolution order."
msgstr ""

#: ../../pep-0316.txt:275
msgid ""
"A method's post-conditions also include all overridden post-conditions "
"(method post-conditions are ANDed with all overridden method post-"
"conditions)."
msgstr ""

#: ../../pep-0316.txt:279
msgid ""
"An overridden method's pre-conditions can be ignored if the overriding "
"method's pre-conditions are met.  However, if the overriding method's "
"pre-conditions fail, *all* of the overridden method's pre-conditions must"
" also fail.  If not, a separate exception is raised, the "
"InvalidPreconditionError.  This supports weakening pre-conditions."
msgstr ""

#: ../../pep-0316.txt:285
msgid "A somewhat contrived example::"
msgstr ""

#: ../../pep-0316.txt:324
msgid ""
"Because pre-conditions can only be weakened, a ``ComplexMailClient`` can "
"replace a ``SimpleMailClient`` with no fear of breaking existing code."
msgstr ""

#: ../../pep-0316.txt:329
msgid "Rationale"
msgstr ""

#: ../../pep-0316.txt:331
msgid ""
"Except for the following differences, programming-by-contract for Python "
"mirrors the Eiffel DBC specification [#oosc]_."
msgstr ""

#: ../../pep-0316.txt:334
msgid ""
"Embedding contracts in docstrings is patterned after the doctest module."
"  It removes the need for extra syntax, ensures that programs with "
"contracts are backwards-compatible, and no further work is necessary to "
"have the contracts included in the docs."
msgstr ""

#: ../../pep-0316.txt:339
msgid ""
"The keywords ``pre``, ``post``, and ``inv`` were chosen instead of the "
"Eiffel-style ``REQUIRE``, ``ENSURE``, and ``INVARIANT`` because they're "
"shorter, more in line with mathematical notation, and for a more subtle "
"reason: the word 'require' implies caller responsibilities, while "
"'ensure' implies provider guarantees.  Yet pre-conditions can fail "
"through no fault of the caller when using multiple inheritance, and post-"
"conditions can fail through no fault of the function when using multiple "
"threads."
msgstr ""

#: ../../pep-0316.txt:348
msgid ""
"Loop invariants as used in Eiffel are unsupported.  They're a pain to "
"implement, and not part of the documentation anyway."
msgstr ""

#: ../../pep-0316.txt:351
msgid ""
"The variable names ``__old__`` and ``__return__`` were picked to avoid "
"conflicts with the ``return`` keyword and to stay consistent with Python "
"naming conventions: they're public and provided by the Python "
"implementation."
msgstr ""

#: ../../pep-0316.txt:356
msgid ""
"Having variable declarations after a post keyword describes exactly what "
"the function or method is allowed to modify.  This removes the need for "
"the ``NoChange`` syntax in Eiffel, and makes the implementation of "
"``__old__`` much easier.  It also is more in line with Z schemas [#z]_, "
"which are divided into two parts: declaring what changes followed by "
"limiting the changes."
msgstr ""

#: ../../pep-0316.txt:363
msgid ""
"Shallow copies of variables for the ``__old__`` value prevent an "
"implementation of contract programming from slowing down a system too "
"much.  If a function changes values that wouldn't be caught by a shallow "
"copy, it can declare the changes like so::"
msgstr ""

#: ../../pep-0316.txt:370
msgid ""
"The ``forall``, ``exists``, and ``implies`` functions were added after "
"spending some time documenting existing functions with contracts. These "
"capture a majority of common specification idioms.  It might seem that "
"defining ``implies`` as a function might not work (the arguments are "
"evaluated whether needed or not, in contrast with other boolean "
"operators), but it works for contracts since there should be no side-"
"effects for any expression in a contract."
msgstr ""

#: ../../pep-0316.txt:380
msgid "Reference Implementation"
msgstr ""

#: ../../pep-0316.txt:382
msgid ""
"A reference implementation is available [#imp]_.  It replaces existing "
"functions with new functions that do contract checking, by directly "
"changing the class' or module's namespace."
msgstr ""

#: ../../pep-0316.txt:386
msgid ""
"Other implementations exist that either hack ``__getattr__`` [#dbc4p]_ or"
" use ``__metaclass__`` [#pydbc]_."
msgstr ""

#: ../../pep-0316.txt:391
msgid "References"
msgstr ""

#: ../../pep-0316.txt:393
msgid ""
"Implementation described in this document. "
"(http://www.wayforward.net/pycontract/)"
msgstr ""

#: ../../pep-0316.txt:396
msgid ""
"Design By Contract is a registered trademark of Eiffel Software Inc. "
"(http://archive.eiffel.com/doc/manuals/technology/contract/)"
msgstr ""

#: ../../pep-0316.txt:400
msgid "Object-oriented Software Construction,  Bertrand Meyer, ISBN 0-13-629031-0"
msgstr ""

#: ../../pep-0316.txt:403
msgid ""
"http://docs.python.org/library/doctest.html doctest -- Test docstrings "
"represent reality"
msgstr ""

#: ../../pep-0316.txt:406
msgid ""
"Design by Contract for Python, R. Plosch *IEEE Proceedings of the Joint "
"Asia Pacific Software Engineering Conference (APSEC97/ICSC97), Hong Kong,"
" December 2-5, 1997* (http://www.swe.uni-linz.ac.at/publications/abstract"
"/TR-SE-97.24.html)"
msgstr ""

#: ../../pep-0316.txt:411
msgid ""
"PyDBC -- Design by Contract for Python 2.2+, Daniel Arbuckle "
"(http://www.nongnu.org/pydbc/)"
msgstr ""

#: ../../pep-0316.txt:415
msgid "ReStructuredText (http://docutils.sourceforge.net/rst.html)"
msgstr ""

#: ../../pep-0316.txt:417
msgid "Extreme Programming Explained, Kent Beck, ISBN 0-201-61641-6"
msgstr ""

#: ../../pep-0316.txt:420
msgid "The Z Notation, Second Edition, J.M. Spivey ISBN 0-13-978529-9"
msgstr ""

#: ../../pep-0316.txt:425
msgid "Copyright"
msgstr ""

#: ../../pep-0316.txt:427
msgid "This document has been placed in the public domain."
msgstr ""

