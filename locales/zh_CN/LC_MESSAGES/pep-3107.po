# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-3107.txt
msgid "PEP"
msgstr ""

#: ../../pep-3107.txt:1
msgid "3107"
msgstr ""

#: ../../pep-3107.txt
msgid "Title"
msgstr ""

#: ../../pep-3107.txt:2
msgid "Function Annotations"
msgstr ""

#: ../../pep-3107.txt
msgid "Author"
msgstr ""

#: ../../pep-3107.txt:5
msgid "Collin Winter <collinwinter@google.com>, Tony Lownds <tony@lownds.com>"
msgstr ""

#: ../../pep-3107.txt
msgid "Status"
msgstr ""

#: ../../pep-3107.txt:7
msgid "Final"
msgstr ""

#: ../../pep-3107.txt
msgid "Type"
msgstr ""

#: ../../pep-3107.txt:8
msgid "Standards Track"
msgstr ""

#: ../../pep-3107.txt
msgid "Created"
msgstr ""

#: ../../pep-3107.txt:10
msgid "02-Dec-2006"
msgstr ""

#: ../../pep-3107.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-3107.txt:11
msgid "3.0"
msgstr ""

#: ../../pep-3107.txt
msgid "Post-History"
msgstr ""

#: ../../pep-3107.txt:16
msgid "Abstract"
msgstr ""

#: ../../pep-3107.txt:18
msgid ""
"This PEP introduces a syntax for adding arbitrary metadata annotations to"
" Python functions [#functerm]_."
msgstr ""

#: ../../pep-3107.txt:23
msgid "Rationale"
msgstr ""

#: ../../pep-3107.txt:25
msgid ""
"Because Python's 2.x series lacks a standard way of annotating a "
"function's parameters and return values, a variety of tools and libraries"
" have appeared to fill this gap.  Some utilise the decorators introduced "
"in \"PEP 318\", while others parse a function's docstring, looking for "
"annotations there."
msgstr ""

#: ../../pep-3107.txt:31
msgid ""
"This PEP aims to provide a single, standard way of specifying this "
"information, reducing the confusion caused by the wide variation in "
"mechanism and syntax that has existed until this point."
msgstr ""

#: ../../pep-3107.txt:37
msgid "Fundamentals of Function Annotations"
msgstr ""

#: ../../pep-3107.txt:39
msgid ""
"Before launching into a discussion of the precise ins and outs of Python "
"3.0's function annotations, let's first talk broadly about what "
"annotations are and are not:"
msgstr ""

#: ../../pep-3107.txt:43
msgid ""
"Function annotations, both for parameters and return values, are "
"completely optional."
msgstr ""

#: ../../pep-3107.txt:46
msgid ""
"Function annotations are nothing more than a way of associating arbitrary"
" Python expressions with various parts of a function at compile-time."
msgstr ""

#: ../../pep-3107.txt:50
msgid ""
"By itself, Python does not attach any particular meaning or significance "
"to annotations.  Left to its own, Python simply makes these expressions "
"available as described in `Accessing Function Annotations`_ below."
msgstr ""

#: ../../pep-3107.txt:55
msgid ""
"The only way that annotations take on meaning is when they are "
"interpreted by third-party libraries.  These annotation consumers can do "
"anything they want with a function's annotations.  For example, one "
"library might use string-based annotations to provide improved help "
"messages, like so::"
msgstr ""

#: ../../pep-3107.txt:66
msgid ""
"Another library might be used to provide typechecking for Python "
"functions and methods.  This library could use annotations to indicate "
"the function's expected input and return types, possibly something like::"
msgstr ""

#: ../../pep-3107.txt:74
msgid ""
"However, neither the strings in the first example nor the type "
"information in the second example have any meaning on their own; meaning "
"comes from third-party libraries alone."
msgstr ""

#: ../../pep-3107.txt:78
msgid ""
"Following from point 2, this PEP makes no attempt to introduce any kind "
"of standard semantics, even for the built-in types. This work will be "
"left to third-party libraries."
msgstr ""

#: ../../pep-3107.txt:84
msgid "Syntax"
msgstr ""

#: ../../pep-3107.txt:87
msgid "Parameters"
msgstr ""

#: ../../pep-3107.txt:89
msgid ""
"Annotations for parameters take the form of optional expressions that "
"follow the parameter name::"
msgstr ""

#: ../../pep-3107.txt:95
msgid ""
"In pseudo-grammar, parameters now look like ``identifier [: expression] "
"[= expression]``.  That is, annotations always precede a parameter's "
"default value and both annotations and default values are optional.  Just"
" like how equal signs are used to indicate a default value, colons are "
"used to mark annotations.  All annotation expressions are evaluated when "
"the function definition is executed, just like default values."
msgstr ""

#: ../../pep-3107.txt:103
msgid ""
"Annotations for excess parameters (i.e., ``*args`` and ``**kwargs``) are "
"indicated similarly::"
msgstr ""

#: ../../pep-3107.txt:109
msgid ""
"Annotations for nested parameters always follow the name of the "
"parameter, not the last parenthesis.  Annotating all parameters of a "
"nested parameter is not required::"
msgstr ""

#: ../../pep-3107.txt:119
msgid "Return Values"
msgstr ""

#: ../../pep-3107.txt:121
msgid ""
"The examples thus far have omitted examples of how to annotate the type "
"of a function's return value.  This is done like so::"
msgstr ""

#: ../../pep-3107.txt:127
msgid ""
"That is, the parameter list can now be followed by a literal ``->`` and a"
" Python expression.  Like the annotations for parameters, this expression"
" will be evaluated when the function definition is executed."
msgstr ""

#: ../../pep-3107.txt:131
msgid "The grammar for function definitions [#grammar]_ is now::"
msgstr ""

#: ../../pep-3107.txt:146
msgid "Lambda"
msgstr ""

#: ../../pep-3107.txt:148
msgid ""
"``lambda``'s syntax does not support annotations.  The syntax of "
"``lambda`` could be changed to support annotations, by requiring "
"parentheses around the parameter list.  However it was decided [#lambda]_"
" not to make this change because:"
msgstr ""

#: ../../pep-3107.txt:153
msgid "It would be an incompatible change."
msgstr ""

#: ../../pep-3107.txt:154
msgid "Lambdas are neutered anyway."
msgstr ""

#: ../../pep-3107.txt:155
msgid "The lambda can always be changed to a function."
msgstr ""

#: ../../pep-3107.txt:159
msgid "Accessing Function Annotations"
msgstr ""

#: ../../pep-3107.txt:161
msgid ""
"Once compiled, a function's annotations are available via the function's "
"``__annotations__`` attribute.  This attribute is a mutable dictionary, "
"mapping parameter names to an object representing the evaluated "
"annotation expression"
msgstr ""

#: ../../pep-3107.txt:166
msgid ""
"There is a special key in the ``__annotations__`` mapping, "
"``\"return\"``.  This key is present only if an annotation was supplied "
"for the function's return value."
msgstr ""

#: ../../pep-3107.txt:170
msgid "For example, the following annotation::"
msgstr ""

#: ../../pep-3107.txt:175
msgid "would result in an ``__annotations__`` mapping of ::"
msgstr ""

#: ../../pep-3107.txt:182
msgid ""
"The ``return`` key was chosen because it cannot conflict with the name of"
" a parameter; any attempt to use ``return`` as a parameter name would "
"result in a ``SyntaxError``."
msgstr ""

#: ../../pep-3107.txt:186
msgid ""
"``__annotations__`` is an empty, mutable dictionary if there are no "
"annotations on the function or if the functions was created from a "
"``lambda`` expression."
msgstr ""

#: ../../pep-3107.txt:191
msgid "Use Cases"
msgstr ""

#: ../../pep-3107.txt:193
msgid ""
"In the course of discussing annotations, a number of use-cases have been "
"raised.  Some of these are presented here, grouped by what kind of "
"information they convey.  Also included are examples of existing products"
" and packages that could make use of annotations."
msgstr ""

#: ../../pep-3107.txt:198
msgid "Providing typing information"
msgstr ""

#: ../../pep-3107.txt:200
msgid "Type checking ([#typecheck]_, [#maxime]_)"
msgstr ""

#: ../../pep-3107.txt:201
msgid "Let IDEs show what types a function expects and returns ([#idle]_)"
msgstr ""

#: ../../pep-3107.txt:202
msgid "Function overloading / generic functions ([#scaling]_)"
msgstr ""

#: ../../pep-3107.txt:203
msgid "Foreign-language bridges ([#jython]_, [#ironpython]_)"
msgstr ""

#: ../../pep-3107.txt:204
msgid "Adaptation ([#adaptationpost]_, [#pyprotocols]_)"
msgstr ""

#: ../../pep-3107.txt:205
msgid "Predicate logic functions"
msgstr ""

#: ../../pep-3107.txt:206
msgid "Database query mapping"
msgstr ""

#: ../../pep-3107.txt:207
msgid "RPC parameter marshaling ([#rpyc]_)"
msgstr ""

#: ../../pep-3107.txt:209
msgid "Other information"
msgstr ""

#: ../../pep-3107.txt:211
msgid "Documentation for parameters and return values ([#pydoc]_)"
msgstr ""

#: ../../pep-3107.txt:215
msgid "Standard Library"
msgstr ""

#: ../../pep-3107.txt:218
msgid "pydoc and inspect"
msgstr ""

#: ../../pep-3107.txt:220
msgid ""
"The ``pydoc`` module should display the function annotations when "
"displaying help for a function.  The ``inspect`` module should change to "
"support annotations."
msgstr ""

#: ../../pep-3107.txt:226
msgid "Relation to Other PEPs"
msgstr ""

#: ../../pep-3107.txt:229
msgid "Function Signature Objects [#pep-362]_"
msgstr ""

#: ../../pep-3107.txt:231
msgid ""
"Function Signature Objects should expose the function's annotations. The "
"``Parameter`` object may change or other changes may be warranted."
msgstr ""

#: ../../pep-3107.txt:236
msgid "Implementation"
msgstr ""

#: ../../pep-3107.txt:238
msgid ""
"A reference implementation has been checked into the py3k (formerly "
"\"p3yk\") branch as revision 53170 [#implementation]_."
msgstr ""

#: ../../pep-3107.txt:243
msgid "Rejected Proposals"
msgstr ""

#: ../../pep-3107.txt:245
msgid ""
"The BDFL rejected the author's idea for a special syntax for adding "
"annotations to generators as being \"too ugly\" [#rejectgensyn]_."
msgstr ""

#: ../../pep-3107.txt:248
msgid ""
"Though discussed early on ([#threadgen]_, [#threadhof]_), including "
"special objects in the stdlib for annotating generator functions and "
"higher-order functions was ultimately rejected as being more appropriate "
"for third-party libraries; including them in the standard library raised "
"too many thorny issues."
msgstr ""

#: ../../pep-3107.txt:254
msgid ""
"Despite considerable discussion about a standard type parameterisation "
"syntax, it was decided that this should also be left to third-party "
"libraries.  ([#threadimmlist]_, [#threadmixing]_, [#emphasistpls]_)."
msgstr ""

#: ../../pep-3107.txt:259
msgid ""
"Despite yet more discussion, it was decided not to standardize a "
"mechanism for annotation interoperability.  Standardizing "
"interoperability conventions at this point would be premature. We would "
"rather let these conventions develop organically, based on real-world "
"usage and necessity, than try to force all users into some contrived "
"scheme.  ([#interop0]_, [#interop1]_, [#interop2]_)."
msgstr ""

#: ../../pep-3107.txt:269
msgid "References and Footnotes"
msgstr ""

#: ../../pep-3107.txt:271
msgid ""
"Unless specifically stated, \"function\" is generally used as a synonym "
"for \"callable\" throughout this document."
msgstr ""

#: ../../pep-3107.txt:275
msgid "https://mail.python.org/pipermail/python-3000/2006-May/002103.html"
msgstr ""

#: ../../pep-3107.txt:278
msgid "http://web.archive.org/web/20070730120117/http://oakwinter.com/code/typecheck/"
msgstr ""

#: ../../pep-3107.txt:281
msgid "http://web.archive.org/web/20070603221429/http://maxrepo.info/"
msgstr ""

#: ../../pep-3107.txt:284
msgid "https://mail.python.org/pipermail/python-3000/2006-May/002091.html"
msgstr ""

#: ../../pep-3107.txt:287
msgid "https://mail.python.org/pipermail/python-3000/2006-May/001972.html"
msgstr ""

#: ../../pep-3107.txt:290
msgid "https://mail.python.org/pipermail/python-3000/2006-May/002105.html"
msgstr ""

#: ../../pep-3107.txt:293
msgid "https://mail.python.org/pipermail/python-3000/2006-May/002209.html"
msgstr ""

#: ../../pep-3107.txt:296
msgid "https://mail.python.org/pipermail/python-3000/2006-June/002438.html"
msgstr ""

#: ../../pep-3107.txt:299
msgid "http://svn.python.org/view?rev=53170&view=rev"
msgstr ""

#: ../../pep-3107.txt:302
msgid "http://docs.python.org/reference/compound_stmts.html#function-definitions"
msgstr ""

#: ../../pep-3107.txt:305
msgid "https://mail.python.org/pipermail/python-3000/2006-May/001613.html"
msgstr ""

#: ../../pep-3107.txt:308
msgid "http://www.python.org/dev/peps/pep-0362/"
msgstr ""

#: ../../pep-3107.txt:311
msgid "https://mail.python.org/pipermail/python-3000/2006-August/002895.html"
msgstr ""

#: ../../pep-3107.txt:314
msgid "https://mail.python.org/pipermail/python-ideas/2007-January/000032.html"
msgstr ""

#: ../../pep-3107.txt:317
msgid "https://mail.python.org/pipermail/python-list/2006-December/420645.html"
msgstr ""

#: ../../pep-3107.txt:320
msgid "http://www.python.org/idle/doc/idle2.html#Tips"
msgstr ""

#: ../../pep-3107.txt:323
msgid "http://www.jython.org/Project/index.html"
msgstr ""

#: ../../pep-3107.txt:326
msgid "http://www.codeplex.com/Wiki/View.aspx?ProjectName=IronPython"
msgstr ""

#: ../../pep-3107.txt:329
msgid "http://peak.telecommunity.com/PyProtocols.html"
msgstr ""

#: ../../pep-3107.txt:332
msgid "http://www.artima.com/weblogs/viewpost.jsp?thread=155123"
msgstr ""

#: ../../pep-3107.txt:335
msgid "http://www-128.ibm.com/developerworks/library/l-cppeak2/"
msgstr ""

#: ../../pep-3107.txt:338
msgid "http://rpyc.wikispaces.com/"
msgstr ""

#: ../../pep-3107.txt:341
msgid "http://docs.python.org/library/pydoc.html"
msgstr ""

#: ../../pep-3107.txt:345
msgid "Copyright"
msgstr ""

#: ../../pep-3107.txt:347
msgid "This document has been placed in the public domain."
msgstr ""

