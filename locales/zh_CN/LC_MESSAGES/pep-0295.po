# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0295.txt
msgid "PEP"
msgstr ""

#: ../../pep-0295.txt:1
msgid "295"
msgstr ""

#: ../../pep-0295.txt
msgid "Title"
msgstr ""

#: ../../pep-0295.txt:2
msgid "Interpretation of multiline string constants"
msgstr ""

#: ../../pep-0295.txt
msgid "Author"
msgstr ""

#: ../../pep-0295.txt:5
msgid "yozh@mx1.ru (Stepan Koltsov)"
msgstr ""

#: ../../pep-0295.txt
msgid "Status"
msgstr ""

#: ../../pep-0295.txt:6
msgid "Rejected"
msgstr ""

#: ../../pep-0295.txt
msgid "Type"
msgstr ""

#: ../../pep-0295.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0295.txt
msgid "Created"
msgstr ""

#: ../../pep-0295.txt:9
msgid "22-Jul-2002"
msgstr ""

#: ../../pep-0295.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0295.txt:10
msgid "3.0"
msgstr ""

#: ../../pep-0295.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0295.txt:15
msgid "Abstract"
msgstr ""

#: ../../pep-0295.txt:17
msgid ""
"This PEP describes an interpretation of multiline string constants for "
"Python.  It suggests stripping spaces after newlines and stripping a "
"newline if it is first character after an opening quotation."
msgstr ""

#: ../../pep-0295.txt:24
msgid "Rationale"
msgstr ""

#: ../../pep-0295.txt:26
msgid ""
"This PEP proposes an interpretation of multiline string constants in "
"Python.  Currently, the value of string constant is all the text between "
"quotations, maybe with escape sequences substituted, e.g.::"
msgstr ""

#: ../../pep-0295.txt:44
msgid "prints::"
msgstr ""

#: ../../pep-0295.txt:49
msgid "This PEP suggest two things:"
msgstr ""

#: ../../pep-0295.txt:51
msgid "ignore the first character after opening quotation, if it is newline"
msgstr ""

#: ../../pep-0295.txt:54
msgid ""
"ignore in string constants all spaces and tabs up to first non-whitespace"
" character, but no more than current indentation."
msgstr ""

#: ../../pep-0295.txt:58
msgid "After applying this, previous program will print::"
msgstr ""

#: ../../pep-0295.txt:63
msgid ""
"To get this result, previous programs could be rewritten for current "
"Python as (note, this gives the same result with new strings meaning)::"
msgstr ""

#: ../../pep-0295.txt:77
msgid ""
"Or stripping can be done with library routines at runtime (as pydoc "
"does), but this decreases program readability."
msgstr ""

#: ../../pep-0295.txt:82
msgid "Implementation"
msgstr ""

#: ../../pep-0295.txt:84
msgid "I'll say nothing about CPython, Jython or Python.NET."
msgstr ""

#: ../../pep-0295.txt:86
msgid ""
"In original Python, there is no info about the current indentation (in "
"spaces) at compile time, so space and tab stripping should be done at "
"parse time.  Currently no flags can be passed to the parser in program "
"text (like ``from __future__ import xxx``).  I suggest enabling or "
"disabling of this feature at Python compile time depending of CPP flag "
"``Py_PARSE_MULTILINE_STRINGS``."
msgstr ""

#: ../../pep-0295.txt:95
msgid "Alternatives"
msgstr ""

#: ../../pep-0295.txt:97
msgid ""
"New interpretation of string constants can be implemented with flags 'i' "
"and 'o' to string constants, like::"
msgstr ""

#: ../../pep-0295.txt:114
msgid ""
"Also this feature can be disabled if string is raw, i.e. if flag 'r' "
"specified."
msgstr ""

#: ../../pep-0295.txt:119
msgid "Copyright"
msgstr ""

#: ../../pep-0295.txt:121
msgid "This document has been placed in the Public Domain."
msgstr ""

