# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0275.txt
msgid "PEP"
msgstr ""

#: ../../pep-0275.txt:1
msgid "275"
msgstr ""

#: ../../pep-0275.txt
msgid "Title"
msgstr ""

#: ../../pep-0275.txt:2
msgid "Switching on Multiple Values"
msgstr ""

#: ../../pep-0275.txt
msgid "Author"
msgstr ""

#: ../../pep-0275.txt:5
msgid "mal@lemburg.com (Marc-AndrÃ© Lemburg)"
msgstr ""

#: ../../pep-0275.txt
msgid "Status"
msgstr ""

#: ../../pep-0275.txt:6
msgid "Rejected"
msgstr ""

#: ../../pep-0275.txt
msgid "Type"
msgstr ""

#: ../../pep-0275.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0275.txt
msgid "Created"
msgstr ""

#: ../../pep-0275.txt:9
msgid "10-Nov-2001"
msgstr ""

#: ../../pep-0275.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0275.txt:10
msgid "2.6"
msgstr ""

#: ../../pep-0275.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0275.txt:14
msgid "Rejection Notice"
msgstr ""

#: ../../pep-0275.txt:16
msgid ""
"A similar PEP for Python 3000, PEP 3103 [2]_, was already rejected, so "
"this proposal has no chance of being accepted either."
msgstr ""

#: ../../pep-0275.txt:20
msgid "Abstract"
msgstr ""

#: ../../pep-0275.txt:22
msgid ""
"This PEP proposes strategies to enhance Python's performance with respect"
" to handling switching on a single variable having one of multiple "
"possible values."
msgstr ""

#: ../../pep-0275.txt:27
msgid "Problem"
msgstr ""

#: ../../pep-0275.txt:29
msgid ""
"Up to Python 2.5, the typical way of writing multi-value switches has "
"been to use long switch constructs of the following type::"
msgstr ""

#: ../../pep-0275.txt:44
msgid ""
"This works fine for short switch constructs, since the overhead of "
"repeated loading of a local (the variable x in this case) and comparing "
"it to some constant is low (it has a complexity of O(n) on average). "
"However, when using such a construct to write a state machine such as is "
"needed for writing parsers the number of possible states can easily reach"
" 10 or more cases."
msgstr ""

#: ../../pep-0275.txt:51
msgid ""
"The current solution to this problem lies in using a dispatch table to "
"find the case implementing method to execute depending on the value of "
"the switch variable (this can be tuned to have a complexity of O(1) on "
"average, e.g. by using perfect hash tables). This works well for state "
"machines which require complex and lengthy processing in the different "
"case methods. It does not perform well for ones which only process one or"
" two instructions per case, e.g."
msgstr ""

#: ../../pep-0275.txt:65
msgid ""
"A nice example of this is the state machine implemented in pickle.py "
"which is used to serialize Python objects. Other prominent cases include "
"XML SAX parsers and Internet protocol handlers."
msgstr ""

#: ../../pep-0275.txt:71
msgid "Proposed Solutions"
msgstr ""

#: ../../pep-0275.txt:73
msgid "This PEP proposes two different but not necessarily conflicting solutions:"
msgstr ""

#: ../../pep-0275.txt:76
msgid ""
"Adding an optimization to the Python compiler and VM which detects the "
"above if-elif-else construct and generates special opcodes for it which "
"use a read-only dictionary for storing jump offsets."
msgstr ""

#: ../../pep-0275.txt:81
msgid "Adding new syntax to Python which mimics the C style switch statement."
msgstr ""

#: ../../pep-0275.txt:84
msgid ""
"The first solution has the benefit of not relying on adding new keywords "
"to the language, while the second looks cleaner. Both involve some run-"
"time overhead to assure that the switching variable is immutable and "
"hashable."
msgstr ""

#: ../../pep-0275.txt:89
msgid ""
"Both solutions use a dictionary lookup to find the right jump location, "
"so they both share the same problem space in terms of requiring that both"
" the switch variable and the constants need to be compatible to the "
"dictionary implementation (hashable, comparable, a==b => "
"hash(a)==hash(b))."
msgstr ""

#: ../../pep-0275.txt:96
msgid "Solution 1: Optimizing if-elif-else"
msgstr ""

#: ../../pep-0275.txt:98
msgid "Implementation:"
msgstr ""

#: ../../pep-0275.txt:100
msgid ""
"It should be possible for the compiler to detect an if-elif-else "
"construct which has the following signature::"
msgstr ""

#: ../../pep-0275.txt:107
msgid ""
"i.e. the left hand side always references the same variable, the right "
"hand side a hashable immutable builtin type.  The right hand sides need "
"not be all of the same type, but they should be comparable to the type of"
" the left hand switch variable."
msgstr ""

#: ../../pep-0275.txt:113
msgid ""
"The compiler could then setup a read-only (perfect) hash table, store it "
"in the constants and add an opcode SWITCH in front of the standard if-"
"elif-else byte code stream which triggers the following run-time "
"behaviour:"
msgstr ""

#: ../../pep-0275.txt:118
msgid ""
"At runtime, SWITCH would check x for being one of the well-known "
"immutable types (strings, unicode, numbers) and use the hash table for "
"finding the right opcode snippet. If this condition is not met, the "
"interpreter should revert to the standard if-elif-else processing by "
"simply skipping the SWITCH opcode and proceeding with the usual if-elif-"
"else byte code stream."
msgstr ""

#: ../../pep-0275.txt:127
msgid "Issues:"
msgstr ""

#: ../../pep-0275.txt:129
msgid ""
"The new optimization should not change the current Python semantics (by "
"reducing the number of ``__cmp__`` calls and adding ``__hash__`` calls in"
" if-elif-else constructs which are affected by the optimization). To "
"assure this, switching can only safely be implemented either if a \"from "
"__future__\" style flag is used, or the switching variable is one of the "
"builtin immutable types: int, float, string, unicode, etc. (not subtypes,"
" since it's not clear whether these are still immutable or not)"
msgstr ""

#: ../../pep-0275.txt:139
msgid ""
"To prevent post-modifications of the jump-table dictionary (which could "
"be used to reach protected code), the jump-table will have to be a read-"
"only type (e.g. a read-only dictionary)."
msgstr ""

#: ../../pep-0275.txt:144
msgid ""
"The optimization should only be used for if-elif-else constructs which "
"have a minimum number of n cases (where n is a number which has yet to be"
" defined depending on performance tests)."
msgstr ""

#: ../../pep-0275.txt:150
msgid "Solution 2: Adding a switch statement to Python"
msgstr ""

#: ../../pep-0275.txt:153
msgid "New Syntax"
msgstr ""

#: ../../pep-0275.txt:165
msgid "(modulo indentation variations)"
msgstr ""

#: ../../pep-0275.txt:167
msgid ""
"The \"else\" part is optional. If no else part is given and none of the "
"defined cases matches, no action is taken and the switch statement is "
"ignored. This is in line with the current if-behaviour. A user who wants "
"to signal this situation using an exception can define an else-branch "
"which then implements the intended action."
msgstr ""

#: ../../pep-0275.txt:174
msgid ""
"Note that the constants need not be all of the same type, but they should"
" be comparable to the type of the switch variable."
msgstr ""

#: ../../pep-0275.txt:178
msgid "Implementation"
msgstr ""

#: ../../pep-0275.txt:180
msgid "The compiler would have to compile this into byte code similar to this::"
msgstr ""

#: ../../pep-0275.txt:194
msgid "into (omitting POP_TOP's and SET_LINENO's)::"
msgstr ""

#: ../../pep-0275.txt:222
msgid "Where the 'SWITCH' opcode would jump to 14, 22, 30 or 38 depending on 'x'."
msgstr ""

#: ../../pep-0275.txt:225
msgid ""
"Thomas Wouters has written a patch which demonstrates the above. You can "
"download it from [1]_."
msgstr ""

#: ../../pep-0275.txt:229
msgid "Issues"
msgstr ""

#: ../../pep-0275.txt:231
msgid ""
"The switch statement should not implement fall-through behaviour (as does"
" the switch statement in C). Each case defines a complete and independent"
" suite; much like in an if-elif-else statement. This also enables using "
"break in switch statements inside loops."
msgstr ""

#: ../../pep-0275.txt:237
msgid ""
"If the interpreter finds that the switch variable x is not hashable, it "
"should raise a TypeError at run-time pointing out the problem."
msgstr ""

#: ../../pep-0275.txt:241
msgid ""
"There have been other proposals for the syntax which reuse existing "
"keywords and avoid adding two new ones (\"switch\" and \"case\"). Others "
"have argued that the keywords should use new terms to avoid confusion "
"with the C keywords of the same name but slightly different semantics "
"(e.g. fall-through without break). Some of the proposed variants::"
msgstr ""

#: ../../pep-0275.txt:273
msgid ""
"The switch statement could be extended to allow multiple values for one "
"section (e.g. case 'a', 'b', 'c': ...). Another proposed extension would "
"allow ranges of values (e.g. case 10..14: ...). These should probably be "
"post-poned, but already kept in mind when designing and implementing a "
"first version."
msgstr ""

#: ../../pep-0275.txt:280
msgid "Examples"
msgstr ""

#: ../../pep-0275.txt:282
msgid ""
"The following examples all use a new syntax as proposed by solution 2. "
"However, all of these examples would work with solution 1 as well."
msgstr ""

#: ../../pep-0275.txt:327
msgid ""
"Here's another nice application found by Jack Jansen (switching on "
"argument types)::"
msgstr ""

#: ../../pep-0275.txt:337
msgid "Scope"
msgstr ""

#: ../../pep-0275.txt:339
msgid "XXX Explain \"from __future__ import switch\""
msgstr ""

#: ../../pep-0275.txt:342
msgid "Credits"
msgstr ""

#: ../../pep-0275.txt:344
msgid "Martin von LÃ¶wis (issues with the optimization idea)"
msgstr ""

#: ../../pep-0275.txt:345
msgid "Thomas Wouters (switch statement + byte code compiler example)"
msgstr ""

#: ../../pep-0275.txt:346
msgid "Skip Montanaro (dispatching ideas, examples)"
msgstr ""

#: ../../pep-0275.txt:347
msgid "Donald Beaudry (switch syntax)"
msgstr ""

#: ../../pep-0275.txt:348
msgid "Greg Ewing (switch syntax)"
msgstr ""

#: ../../pep-0275.txt:349
msgid "Jack Jansen (type switching examples)"
msgstr ""

#: ../../pep-0275.txt:352
msgid "References"
msgstr ""

#: ../../pep-0275.txt:354
msgid "https://sourceforge.net/tracker/index.php?func=detail&aid=481118&group_id=5470&atid=305470"
msgstr ""

#: ../../pep-0275.txt:356
msgid "http://www.python.org/dev/peps/pep-3103"
msgstr ""

#: ../../pep-0275.txt:360
msgid "Copyright"
msgstr ""

#: ../../pep-0275.txt:362
msgid "This document has been placed in the public domain."
msgstr ""

