# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0641.rst
msgid "PEP"
msgstr ""

#: ../../pep-0641.rst:1
msgid "641"
msgstr ""

#: ../../pep-0641.rst
msgid "Title"
msgstr ""

#: ../../pep-0641.rst:2
msgid ""
"Using an underscore in the version portion of Python 3.10 compatibility "
"tags"
msgstr ""

#: ../../pep-0641.rst
msgid "Author"
msgstr ""

#: ../../pep-0641.rst:3
msgid ""
"Brett Cannon <brett@python.org>, Steve Dower <steve.dower@python.org>, "
"Barry Warsaw <barry@python.org>"
msgstr ""

#: ../../pep-0641.rst
msgid "PEP-Delegate"
msgstr ""

#: ../../pep-0641.rst:6
msgid "Pablo Galindo <pablogsal@python.org>"
msgstr ""

#: ../../pep-0641.rst
msgid "Discussions-To"
msgstr ""

#: ../../pep-0641.rst:7
msgid ""
"https://discuss.python.org/t/pep-641-using-an-underscore-in-the-version-"
"portion-of-python-3-10-compatibility-tags/5513"
msgstr ""

#: ../../pep-0641.rst
msgid "Status"
msgstr ""

#: ../../pep-0641.rst:8
msgid "Rejected"
msgstr ""

#: ../../pep-0641.rst
msgid "Type"
msgstr ""

#: ../../pep-0641.rst:9
msgid "Standards Track"
msgstr ""

#: ../../pep-0641.rst
msgid "Created"
msgstr ""

#: ../../pep-0641.rst:11
msgid "20-Oct-2020"
msgstr ""

#: ../../pep-0641.rst
msgid "Python-Version"
msgstr ""

#: ../../pep-0641.rst:12
msgid "3.10"
msgstr ""

#: ../../pep-0641.rst
msgid "Post-History"
msgstr ""

#: ../../pep-0641.rst:13
msgid "2020-10-21"
msgstr ""

#: ../../pep-0641.rst
msgid "Resolution"
msgstr ""

#: ../../pep-0641.rst:14
msgid ""
"https://discuss.python.org/t/pep-641-using-an-underscore-in-the-version-"
"portion-of-python-3-10-compatibility-tags/5513/42"
msgstr ""

#: ../../pep-0641.rst:17
msgid "Abstract"
msgstr ""

#: ../../pep-0641.rst:20
msgid "This PEP was rejected due to potential breakage in the community."
msgstr ""

#: ../../pep-0641.rst:22
msgid ""
"Using the tag system outlined in :pep:`425` (primarily used for wheel "
"file names), each release of Python specifies compatibility tags (e.g. "
"``cp39``, ``py39`` for CPython 3.9). For CPython 3.10, this PEP proposes "
"using ``3_10`` as the version portion of the tags (instead of ``310``)."
msgstr ""

#: ../../pep-0641.rst:30
msgid "Motivation"
msgstr ""

#: ../../pep-0641.rst:32
msgid ""
"Up to this point, the version portion of compatibility tags used in e.g. "
"wheel file names has been a straight concatenation of the major and minor"
" versions of Python, both for the CPython interpreter tag and the "
"generic, interpreter-agnostic interpreter tag (e.g. ``cp39`` and "
"``py39``, respectively). This also applies to the ABI tag (e.g. "
"``cp39``). Thanks to both the major and minor versions being single "
"digits, it has been unambiguous what which digit in e.g. ``39`` "
"represented."
msgstr ""

#: ../../pep-0641.rst:41
msgid ""
"But starting with Python 3.10, ambiguity comes up as ``310`` does not "
"clearly delineate whether the Python version is ``3.10``, ``31.0``, or "
"``310`` as the major-only version of Python. Thus using ``3_10`` to "
"separate major/minor portions as allowed by :pep:`425` disambiguates the "
"Python version being supported."
msgstr ""

#: ../../pep-0641.rst:49
msgid "Rationale"
msgstr ""

#: ../../pep-0641.rst:51
msgid ""
"Using ``3_10`` instead of another proposed separator is a restriction of "
":pep:`425`, thus the only options are ``3_10`` or ``310``."
msgstr ""

#: ../../pep-0641.rst:56
msgid "Specification"
msgstr ""

#: ../../pep-0641.rst:58
msgid ""
"The ``SOABI`` configure variable and "
"``sysconfig.get_config_var('py_version_nodot')`` will be updated to use "
"``3_10`` appropriately."
msgstr ""

#: ../../pep-0641.rst:64
msgid "Backwards Compatibility"
msgstr ""

#: ../../pep-0641.rst:66
msgid ""
"Tools relying on the 'packaging' project [2]_ already expect a version "
"specification of ``3_10`` for Python 3.10. Keeping the version specifier "
"as ``310`` would require backing that change out and updating dependent "
"projects (e.g. pip)."
msgstr ""

#: ../../pep-0641.rst:71
msgid ""
"Switching to ``3_10`` will impact any tools that implicitly rely on the "
"convention that the minor version is a single digit. However, these are "
"broken regardless of any change here."
msgstr ""

#: ../../pep-0641.rst:75
msgid ""
"For tools assuming the major version is only the first digit, they will "
"require updating if we switch to ``3_10``."
msgstr ""

#: ../../pep-0641.rst:78
msgid ""
"In non-locale ASCII, ``_`` sorts after any digit, so lexicographic "
"sorting matching a sort by Python version of a wheel file name will be "
"kept."
msgstr ""

#: ../../pep-0641.rst:82
msgid ""
"Since PEP 515 (Python 3.6), underscores in numeric literals are ignored. "
"This means that ``int(\"3_10\")`` and ``int(\"310\")`` produce the same "
"result, and ordering based on conversion to an integer will be preserved."
" **However**, this is still a bad way to sort tags, and the point is "
"raised here simply to show that this proposal does not make things worse."
msgstr ""

#: ../../pep-0641.rst:89
msgid "Security Implications"
msgstr ""

#: ../../pep-0641.rst:91
msgid "There are no known security concerns."
msgstr ""

#: ../../pep-0641.rst:95
msgid "How to Teach This"
msgstr ""

#: ../../pep-0641.rst:97
msgid ""
"As use of the interpreter tag is mostly machine-based and this PEP "
"disambiguates, there should not be any special teaching consideration "
"required."
msgstr ""

#: ../../pep-0641.rst:103
msgid "Reference Implementation"
msgstr ""

#: ../../pep-0641.rst:105
msgid ""
"A pull request [1]_ already exists adding support to CPython 3.10. "
"Support for reading wheel files with this proposed PEP is already "
"implemented."
msgstr ""

#: ../../pep-0641.rst:111
msgid "Rejected Ideas"
msgstr ""

#: ../../pep-0641.rst:114
msgid "Not making the change"
msgstr ""

#: ../../pep-0641.rst:115
msgid ""
"It was considered to not change the tag and stay with ``310``. The "
"argument was it's less work and it won't break any existing tooling. But "
"in the end it was thought that the disambiguation is better to have."
msgstr ""

#: ../../pep-0641.rst:122
msgid "Open Issues"
msgstr ""

#: ../../pep-0641.rst:125
msgid "How far should we take this?"
msgstr ""

#: ../../pep-0641.rst:126
msgid ""
"Other places where the major and minor version are used could be updated "
"to use an underscore as well (e.g. ``.pyc`` files, the import path to the"
" zip file for the stdlib). It is not known how useful it would be to make"
" this pervasive."
msgstr ""

#: ../../pep-0641.rst:132
msgid "Standardizing on double digit minor version numbers"
msgstr ""

#: ../../pep-0641.rst:133
msgid ""
"An alternative suggestion has been made to disambiguate where the major "
"and minor versions start/stop by forcing the minor version to always be "
"two digits, padding with a ``0`` as required. The advantages of this is "
"it makes the current ``cp310`` interpreter tag accurate, thus minimizing "
"breakage. It also does differentiate going forward."
msgstr ""

#: ../../pep-0641.rst:139
msgid ""
"There are a couple of drawbacks, though. One is the disambiguation only "
"exists *if* you know that the minor version number is two digits; compare"
" that to ``cp3_10`` which is unambiguous regardless of your base "
"knowledge. The potential for a three digit minor version number is also "
"not addressed by this two digit requirement."
msgstr ""

#: ../../pep-0641.rst:145
msgid ""
"There is also the issue of other interpreters not following the practice "
"in the past, present, or future. For instance, it is unknown if other "
"people have used a three digit version portion of the interpreter tag "
"previously for another interpreter where this rule would be incorrect. "
"This change would also suggest that interpreters which currently have a "
"single digit minor version -- e.g. PyPy 7.3 -- to change from ``pp73`` to"
" ``pp703`` or make the switch from their next minor release onward (e.g. "
"7.4 or 8.0). Otherwise this would make this rule exclusive to the ``cp`` "
"interpreter type which would make it more confusing for people."
msgstr ""

#: ../../pep-0641.rst:158
msgid "References"
msgstr ""

#: ../../pep-0641.rst:160
msgid "Reference implementation (https://github.com/python/cpython/pull/20333)"
msgstr ""

#: ../../pep-0641.rst:163
msgid "The 'packaging' project (https://pypi.org/project/packaging/)"
msgstr ""

#: ../../pep-0641.rst:168
msgid "Copyright"
msgstr ""

#: ../../pep-0641.rst:170
msgid ""
"This document is placed in the public domain or under the "
"CC0-1.0-Universal license, whichever is more permissive."
msgstr ""

