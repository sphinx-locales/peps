# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0007.txt
msgid "PEP"
msgstr ""

#: ../../pep-0007.txt:1
msgid "7"
msgstr ""

#: ../../pep-0007.txt
msgid "Title"
msgstr ""

#: ../../pep-0007.txt:2
msgid "Style Guide for C Code"
msgstr "C 代码的风格指南"

#: ../../pep-0007.txt
msgid "Author"
msgstr ""

#: ../../pep-0007.txt:5
msgid "Guido van Rossum <guido@python.org>, Barry Warsaw <barry@python.org>"
msgstr ""

#: ../../pep-0007.txt
msgid "Status"
msgstr ""

#: ../../pep-0007.txt:6
msgid "Active"
msgstr ""

#: ../../pep-0007.txt
msgid "Type"
msgstr ""

#: ../../pep-0007.txt:7
msgid "Process"
msgstr ""

#: ../../pep-0007.txt
msgid "Created"
msgstr ""

#: ../../pep-0007.txt:9
msgid "05-Jul-2001"
msgstr ""

#: ../../pep-0007.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0007.txt:14
msgid "Introduction"
msgstr "介绍"

#: ../../pep-0007.txt:16
msgid ""
"This document gives coding conventions for the C code comprising the C "
"implementation of Python.  Please see the companion informational PEP "
"describing style guidelines for Python code [1]_."
msgstr ""
"本文档给出了构成 Python 的 C 语言实现的 C 代码的编码规则。"
"请参见描述 Python 代码风格指南的配套信息性 PEP [1]_ 。"

#: ../../pep-0007.txt:20
msgid ""
"Note, rules are there to be broken.  Two good reasons to break a "
"particular rule:"
msgstr ""
"注意，规则是用来被打破的。打破某项规则的两个好理由："

#: ../../pep-0007.txt:23
msgid ""
"When applying the rule would make the code less readable, even for "
"someone who is used to reading code that follows the rules."
msgstr ""
"当应用该规则会使代码的可读性降低，即使是对于习惯于阅读遵循规则的代码的人来说。"

#: ../../pep-0007.txt:26
msgid ""
"To be consistent with surrounding code that also breaks it (maybe for "
"historic reasons) -- although this is also an opportunity to clean up "
"someone else's mess (in true XP style)."
msgstr ""
"要与周围的代码保持一致，这些代码也会破坏它（也许是出于历史原因）-- "
"尽管这也是一个清理别人的烂摊子的机会（真正的 XP 风格）。"

#: ../../pep-0007.txt:32
msgid "C dialect"
msgstr "C 方言"

#: ../../pep-0007.txt:34
msgid ""
"Python versions before 3.6 use ANSI/ISO standard C (the 1989 version of "
"the standard).  This means (amongst many other things) that all "
"declarations must be at the top of a block (not necessarily at the top of"
" function)."
msgstr ""
"3.6 之前的 Python 版本使用 ANSI/ISO 标准 C (1989 年版本的标准)。"
"这意味着（除其他外）所有的声明都必须在块的顶部（不一定在函数的顶部）。"

#: ../../pep-0007.txt:39
msgid ""
"Python versions greater than or equal to 3.6 use C89 with several select "
"C99 features:"
msgstr ""
"大于或等于 3.6 的 Python 版本使用 C89 与几个精选的 C99 特性："

#: ../../pep-0007.txt:42
msgid ""
"Standard integer types in ``<stdint.h>`` and ``<inttypes.h>``. We require"
" the fixed width integer types."
msgstr ""
"标准整数类型在 ``<stdint.h>`` 和 ``<inttypes.h>``。我们需要固定宽度的整数类型。"

#: ../../pep-0007.txt:44
msgid "``static inline`` functions"
msgstr "``static inline`` 函数"

#: ../../pep-0007.txt:45
msgid "designated initializers (especially nice for type declarations)"
msgstr "指定的初始化器（对类型声明来说特别好）"

#: ../../pep-0007.txt:46
msgid "intermingled declarations"
msgstr "混杂的声明"

#: ../../pep-0007.txt:47
msgid "booleans"
msgstr "布尔运算"

#: ../../pep-0007.txt:48
msgid "C++-style line comments"
msgstr "C++ 风格的行注释"

#: ../../pep-0007.txt:50
msgid ""
"Future C99 features may be added to this list in the future depending on "
"compiler support (mostly significantly MSVC)."
msgstr ""
"未来的 C99 特性可能会被添加到这个列表中，这取决于编译器的支持（主要是明显的 MSVC）。"

#: ../../pep-0007.txt:53
msgid ""
"Don't use GCC extensions (e.g. don't write multi-line strings without "
"trailing backslashes)."
msgstr ""
"不要使用 GCC 扩展（例如，不要写没有尾部反斜线的多行字符串）。"

#: ../../pep-0007.txt:56
msgid ""
"All function declarations and definitions must use full prototypes (i.e. "
"specify the types of all arguments)."
msgstr ""
"所有的函数声明和定义必须使用完整的原型（即指定所有参数的类型）。"

#: ../../pep-0007.txt:59
msgid "Only use C++ style // one-line comments in Python 3.6 or later."
msgstr "只在 Python 3.6 或更高版本中使用 C++ 风格的 // 单行注释。"

#: ../../pep-0007.txt:61
msgid "No compiler warnings with major compilers (gcc, VC++, a few others)."
msgstr "在主要的编译器（gcc、VC++ 和其他一些）中没有编译器警告。"

#: ../../pep-0007.txt:65
msgid "Code lay-out"
msgstr "代码布局"

#: ../../pep-0007.txt:67
msgid "Use 4-space indents and no tabs at all."
msgstr "使用4个空格的缩进，完全没有标签。"

#: ../../pep-0007.txt:69
msgid ""
"No line should be longer than 79 characters.  If this and the previous "
"rule together don't give you enough room to code, your code is too "
"complicated -- consider using subroutines."
msgstr ""
"任何一行的长度都不应超过79个字符。"
"如果这条规则和前面的规则加在一起也没有给你足够的空间来编码，你的代码就太复杂了 -- 考虑使用子程序"。

#: ../../pep-0007.txt:73
msgid ""
"No line should end in whitespace.  If you think you need significant "
"trailing whitespace, think again -- somebody's editor might delete it as "
"a matter of routine."
msgstr ""
"任何一行都不应以空白结束。"
"如果你认为你需要大量的尾部空白，那就再想想吧 -- 有人的编辑可能会把它作为例行公事来删除。"

#: ../../pep-0007.txt:77
msgid ""
"Function definition style: function name in column 1, outermost curly "
"braces in column 1, blank line after local variable declarations.  ::"
msgstr ""
"函数定义风格：函数名在第 1 栏，最外层的大括号在第 1 栏，局部变量声明后为空行 :: "

#: ../../pep-0007.txt:92
msgid ""
"Code structure: one space between keywords like ``if``, ``for`` and the "
"following left paren; no spaces inside the paren; braces are required "
"everywhere, even where C permits them to be omitted, but do not add them "
"to code you are not otherwise modifying.  All new C code requires braces."
"  Braces should be formatted as shown::"
msgstr ""
"代码结构：在 ``if``、``for`` 等关键字和下面的左括号之间有一个空格；"
"括号内没有空格；"
"到处都需要大括号，即使在 C 允许省略的地方也是如此，但不要在你没有修改的代码中添加大括号。"
"所有新的 C 代码都需要大括号。大括号的格式应如图所示 ::"

#: ../../pep-0007.txt:105
msgid "The return statement should *not* get redundant parentheses::"
msgstr "返回语句不应该有多余的括号 ::"

#: ../../pep-0007.txt:110
msgid ""
"Function and macro call style: ``foo(a, b, c)`` -- no space before the "
"open paren, no spaces inside the parens, no spaces before commas, one "
"space after each comma."
msgstr ""
"函数和宏的调用方式：``foo(a, b, c)`` -- 开放的括号前没有空格，括号内没有空格，逗号前没有空格，每个逗号后有一个空格。"

#: ../../pep-0007.txt:114
msgid ""
"Always put spaces around assignment, Boolean and comparison operators.  "
"In expressions using a lot of operators, add spaces around the outermost "
"(lowest-priority) operators."
msgstr ""
"总是在赋值、布尔和比较运算符周围加上空格。"
"在使用大量运算符的表达式中，在最外层（优先级最低）的运算符周围添加空格。"

#: ../../pep-0007.txt:118
msgid ""
"Breaking long lines: if you can, break after commas in the outermost "
"argument list.  Always indent continuation lines appropriately, e.g.::"
msgstr ""
"断开长行：如果可以，在最外层参数列表的逗号之后断开。总是适当地缩进续行，例如 ::"

#: ../../pep-0007.txt:126
msgid ""
"When you break a long expression at a binary operator, the operator goes "
"at the end of the previous line, and braces should be formatted as shown."
"  E.g.::"
msgstr ""
"当你在二进制运算符处断开一个长表达式时，运算符会在前一行的末尾，大括号的格式应该如图所示。"
"例如 ::"。

#: ../../pep-0007.txt:137
msgid ""
"Put blank lines around functions, structure definitions, and major "
"sections inside functions."
msgstr ""
"在函数、结构定义和函数内部的主要部分周围放上空行。"

#: ../../pep-0007.txt:140
msgid "Comments go before the code they describe."
msgstr "注释放在其描述的代码之前。"

#: ../../pep-0007.txt:142
msgid ""
"All functions and global variables should be declared static unless they "
"are to be part of a published interface"
msgstr ""
"所有的函数和全局变量都应该被声明为静态的，除非它们将成为已发布的接口的一部分"

#: ../../pep-0007.txt:145
msgid ""
"For external functions and variables, we always have a declaration in an "
"appropriate header file in the \"Include\" directory, which uses the "
"``PyAPI_FUNC()`` macro, like this::"
msgstr ""
"对于外部函数和变量，我们总是在 \"Include\" 目录下的适当头文件中进行声明，该文件使用 ``PyAPI_FUNC()`` 宏，像这样 ::"

#: ../../pep-0007.txt:153
msgid "Naming conventions"
msgstr "命名公约"

#: ../../pep-0007.txt:155
msgid ""
"Use a ``Py`` prefix for public functions; never for static functions.  "
"The ``Py_`` prefix is reserved for global service routines like "
"``Py_FatalError``; specific groups of routines (e.g. specific object type"
" APIs) use a longer prefix, e.g. ``PyString_`` for string functions."
msgstr ""
"对公共函数使用 ``Py`` 前缀；对静态函数绝不使用。"
"``Py_`` 前缀保留给全局服务例程，如 ``Py_FatalError``；"
"特定的例程组（如特定的对象类型 API）使用更长的前缀，如 ``PyString_`` 用于字符串函数。"

#: ../../pep-0007.txt:161
msgid ""
"Public functions and variables use MixedCase with underscores, like this:"
" ``PyObject_GetAttr``, ``Py_BuildValue``, ``PyExc_TypeError``."
msgstr ""
"公共函数和变量使用带下划线的 MixedCase，像这样：``PyObject_GetAttr``、``Py_BuildValue``、``PyExc_TypeError``。"

#: ../../pep-0007.txt:164
msgid ""
"Occasionally an \"internal\" function has to be visible to the loader; we"
" use the ``_Py`` prefix for this, e.g.: ``_PyObject_Dump``."
msgstr ""
"有时候，一个 \"internal\" 函数必须对加载器可见；我们使用 ``_Py`` 前缀来表示，例如：``_PyObject_Dump``。"

#: ../../pep-0007.txt:167
msgid ""
"Macros should have a MixedCase prefix and then use upper case, for "
"example: ``PyString_AS_STRING``, ``Py_PRINT_RAW``."
msgstr ""
"宏应该有一个 MixedCase 前缀，然后使用大写字母，例如：``PyString_AS_STRING``、``Py_PRINT_RAW``。"

#: ../../pep-0007.txt:172
msgid "Documentation Strings"
msgstr "文档字符串"

#: ../../pep-0007.txt:174
msgid ""
"Use the ``PyDoc_STR()`` or ``PyDoc_STRVAR()`` macro for docstrings to "
"support building Python without docstrings (``./configure --without-doc-"
"strings``)."
msgstr ""
"使用 ``PyDoc_STR()`` 或 ``PyDoc_STRVAR()`` 宏来处理文档字符串，"
"以支持在没有文档字符串的情况下构建 Python (``./configure --without-doc-strings``)。"

#: ../../pep-0007.txt:178
msgid ""
"For C code that needs to support versions of Python older than 2.3, you "
"can include this after including ``Python.h``::"
msgstr ""
"对于需要支持高于 2.3 版本的 Python 的 C 语言代码，你可以在包括 ``Python.h`` 之后包括这个 ::"

#: ../../pep-0007.txt:187
msgid ""
"The first line of each function docstring should be a \"signature line\" "
"that gives a brief synopsis of the arguments and return value. For "
"example::"
msgstr ""
"每个函数文档字符串的第一行应该是一个 “签名行”，给出参数和返回值的简要概述。比如说 ::"

#: ../../pep-0007.txt:195
msgid ""
"Always include a blank line between the signature line and the text of "
"the description."
msgstr ""
"在签名行和说明文字之间一定要有一个空行。"

#: ../../pep-0007.txt:198
msgid ""
"If the return value for the function is always None (because there is no "
"meaningful return value), do not include the indication of the return "
"type."
msgstr ""
"如果函数的返回值总是 None（因为没有有意义的返回值），不要包括返回类型的指示。"

#: ../../pep-0007.txt:202
msgid ""
"When writing multi-line docstrings, be sure to always use backslash "
"continuations, as in the example above, or string literal concatenation::"
msgstr ""
"在编写多行文档字符串时，请确保总是使用反斜线连续，如上面的例子，或字符串字面连接 ::"

#: ../../pep-0007.txt:210
msgid "Though some C compilers accept string literals without either::"
msgstr "虽然有些 C 语言编译器在接受字符串字头时，不需要使用 ::"

#: ../../pep-0007.txt:217
msgid "not all do; the MSVC compiler is known to complain about this."
msgstr "不是所有的人都这样做；众所周知，MSVC 编译器会抱怨这一点。"

#: ../../pep-0007.txt:221
msgid "References"
msgstr "参考"

#: ../../pep-0007.txt:223
msgid ""
"PEP 8, \"Style Guide for Python Code\", van Rossum, Warsaw "
"(http://www.python.org/dev/peps/pep-0008)"
msgstr ""
"PEP 8，\"Python代码的风格指南\"，"
"van Rossum, Warsaw（http://www.python.org/dev/peps/pep-0008）"

#: ../../pep-0007.txt:228
msgid "Copyright"
msgstr "版权声明"

#: ../../pep-0007.txt:230
msgid "This document has been placed in the public domain."
msgstr "本文档已被置于公共领域。"

