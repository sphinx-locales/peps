# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0007.txt
msgid "PEP"
msgstr ""

#: ../../pep-0007.txt:1
msgid "7"
msgstr ""

#: ../../pep-0007.txt
msgid "Title"
msgstr ""

#: ../../pep-0007.txt:2
msgid "Style Guide for C Code"
msgstr ""

#: ../../pep-0007.txt
msgid "Author"
msgstr ""

#: ../../pep-0007.txt:5
msgid "Guido van Rossum <guido@python.org>, Barry Warsaw <barry@python.org>"
msgstr ""

#: ../../pep-0007.txt
msgid "Status"
msgstr ""

#: ../../pep-0007.txt:6
msgid "Active"
msgstr ""

#: ../../pep-0007.txt
msgid "Type"
msgstr ""

#: ../../pep-0007.txt:7
msgid "Process"
msgstr ""

#: ../../pep-0007.txt
msgid "Created"
msgstr ""

#: ../../pep-0007.txt:9
msgid "05-Jul-2001"
msgstr ""

#: ../../pep-0007.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0007.txt:14
msgid "Introduction"
msgstr ""

#: ../../pep-0007.txt:16
msgid ""
"This document gives coding conventions for the C code comprising the C "
"implementation of Python.  Please see the companion informational PEP "
"describing style guidelines for Python code [1]_."
msgstr ""

#: ../../pep-0007.txt:20
msgid ""
"Note, rules are there to be broken.  Two good reasons to break a "
"particular rule:"
msgstr ""

#: ../../pep-0007.txt:23
msgid ""
"When applying the rule would make the code less readable, even for "
"someone who is used to reading code that follows the rules."
msgstr ""

#: ../../pep-0007.txt:26
msgid ""
"To be consistent with surrounding code that also breaks it (maybe for "
"historic reasons) -- although this is also an opportunity to clean up "
"someone else's mess (in true XP style)."
msgstr ""

#: ../../pep-0007.txt:32
msgid "C dialect"
msgstr ""

#: ../../pep-0007.txt:34
msgid ""
"Python versions before 3.6 use ANSI/ISO standard C (the 1989 version of "
"the standard).  This means (amongst many other things) that all "
"declarations must be at the top of a block (not necessarily at the top of"
" function)."
msgstr ""

#: ../../pep-0007.txt:39
msgid ""
"Python versions greater than or equal to 3.6 use C89 with several select "
"C99 features:"
msgstr ""

#: ../../pep-0007.txt:42
msgid ""
"Standard integer types in ``<stdint.h>`` and ``<inttypes.h>``. We require"
" the fixed width integer types."
msgstr ""

#: ../../pep-0007.txt:44
msgid "``static inline`` functions"
msgstr ""

#: ../../pep-0007.txt:45
msgid "designated initializers (especially nice for type declarations)"
msgstr ""

#: ../../pep-0007.txt:46
msgid "intermingled declarations"
msgstr ""

#: ../../pep-0007.txt:47
msgid "booleans"
msgstr ""

#: ../../pep-0007.txt:48
msgid "C++-style line comments"
msgstr ""

#: ../../pep-0007.txt:50
msgid ""
"Future C99 features may be added to this list in the future depending on "
"compiler support (mostly significantly MSVC)."
msgstr ""

#: ../../pep-0007.txt:53
msgid ""
"Don't use GCC extensions (e.g. don't write multi-line strings without "
"trailing backslashes)."
msgstr ""

#: ../../pep-0007.txt:56
msgid ""
"All function declarations and definitions must use full prototypes (i.e. "
"specify the types of all arguments)."
msgstr ""

#: ../../pep-0007.txt:59
msgid "Only use C++ style // one-line comments in Python 3.6 or later."
msgstr ""

#: ../../pep-0007.txt:61
msgid "No compiler warnings with major compilers (gcc, VC++, a few others)."
msgstr ""

#: ../../pep-0007.txt:65
msgid "Code lay-out"
msgstr ""

#: ../../pep-0007.txt:67
msgid "Use 4-space indents and no tabs at all."
msgstr ""

#: ../../pep-0007.txt:69
msgid ""
"No line should be longer than 79 characters.  If this and the previous "
"rule together don't give you enough room to code, your code is too "
"complicated -- consider using subroutines."
msgstr ""

#: ../../pep-0007.txt:73
msgid ""
"No line should end in whitespace.  If you think you need significant "
"trailing whitespace, think again -- somebody's editor might delete it as "
"a matter of routine."
msgstr ""

#: ../../pep-0007.txt:77
msgid ""
"Function definition style: function name in column 1, outermost curly "
"braces in column 1, blank line after local variable declarations.  ::"
msgstr ""

#: ../../pep-0007.txt:92
msgid ""
"Code structure: one space between keywords like ``if``, ``for`` and the "
"following left paren; no spaces inside the paren; braces are required "
"everywhere, even where C permits them to be omitted, but do not add them "
"to code you are not otherwise modifying.  All new C code requires braces."
"  Braces should be formatted as shown::"
msgstr ""

#: ../../pep-0007.txt:105
msgid "The return statement should *not* get redundant parentheses::"
msgstr ""

#: ../../pep-0007.txt:110
msgid ""
"Function and macro call style: ``foo(a, b, c)`` -- no space before the "
"open paren, no spaces inside the parens, no spaces before commas, one "
"space after each comma."
msgstr ""

#: ../../pep-0007.txt:114
msgid ""
"Always put spaces around assignment, Boolean and comparison operators.  "
"In expressions using a lot of operators, add spaces around the outermost "
"(lowest-priority) operators."
msgstr ""

#: ../../pep-0007.txt:118
msgid ""
"Breaking long lines: if you can, break after commas in the outermost "
"argument list.  Always indent continuation lines appropriately, e.g.::"
msgstr ""

#: ../../pep-0007.txt:126
msgid ""
"When you break a long expression at a binary operator, the operator goes "
"at the end of the previous line, and braces should be formatted as shown."
"  E.g.::"
msgstr ""

#: ../../pep-0007.txt:137
msgid ""
"Put blank lines around functions, structure definitions, and major "
"sections inside functions."
msgstr ""

#: ../../pep-0007.txt:140
msgid "Comments go before the code they describe."
msgstr ""

#: ../../pep-0007.txt:142
msgid ""
"All functions and global variables should be declared static unless they "
"are to be part of a published interface"
msgstr ""

#: ../../pep-0007.txt:145
msgid ""
"For external functions and variables, we always have a declaration in an "
"appropriate header file in the \"Include\" directory, which uses the "
"``PyAPI_FUNC()`` macro, like this::"
msgstr ""

#: ../../pep-0007.txt:153
msgid "Naming conventions"
msgstr ""

#: ../../pep-0007.txt:155
msgid ""
"Use a ``Py`` prefix for public functions; never for static functions.  "
"The ``Py_`` prefix is reserved for global service routines like "
"``Py_FatalError``; specific groups of routines (e.g. specific object type"
" APIs) use a longer prefix, e.g. ``PyString_`` for string functions."
msgstr ""

#: ../../pep-0007.txt:161
msgid ""
"Public functions and variables use MixedCase with underscores, like this:"
" ``PyObject_GetAttr``, ``Py_BuildValue``, ``PyExc_TypeError``."
msgstr ""

#: ../../pep-0007.txt:164
msgid ""
"Occasionally an \"internal\" function has to be visible to the loader; we"
" use the ``_Py`` prefix for this, e.g.: ``_PyObject_Dump``."
msgstr ""

#: ../../pep-0007.txt:167
msgid ""
"Macros should have a MixedCase prefix and then use upper case, for "
"example: ``PyString_AS_STRING``, ``Py_PRINT_RAW``."
msgstr ""

#: ../../pep-0007.txt:172
msgid "Documentation Strings"
msgstr ""

#: ../../pep-0007.txt:174
msgid ""
"Use the ``PyDoc_STR()`` or ``PyDoc_STRVAR()`` macro for docstrings to "
"support building Python without docstrings (``./configure --without-doc-"
"strings``)."
msgstr ""

#: ../../pep-0007.txt:178
msgid ""
"For C code that needs to support versions of Python older than 2.3, you "
"can include this after including ``Python.h``::"
msgstr ""

#: ../../pep-0007.txt:187
msgid ""
"The first line of each function docstring should be a \"signature line\" "
"that gives a brief synopsis of the arguments and return value. For "
"example::"
msgstr ""

#: ../../pep-0007.txt:195
msgid ""
"Always include a blank line between the signature line and the text of "
"the description."
msgstr ""

#: ../../pep-0007.txt:198
msgid ""
"If the return value for the function is always None (because there is no "
"meaningful return value), do not include the indication of the return "
"type."
msgstr ""

#: ../../pep-0007.txt:202
msgid ""
"When writing multi-line docstrings, be sure to always use backslash "
"continuations, as in the example above, or string literal concatenation::"
msgstr ""

#: ../../pep-0007.txt:210
msgid "Though some C compilers accept string literals without either::"
msgstr ""

#: ../../pep-0007.txt:217
msgid "not all do; the MSVC compiler is known to complain about this."
msgstr ""

#: ../../pep-0007.txt:221
msgid "References"
msgstr ""

#: ../../pep-0007.txt:223
msgid ""
"PEP 8, \"Style Guide for Python Code\", van Rossum, Warsaw "
"(http://www.python.org/dev/peps/pep-0008)"
msgstr ""

#: ../../pep-0007.txt:228
msgid "Copyright"
msgstr ""

#: ../../pep-0007.txt:230
msgid "This document has been placed in the public domain."
msgstr ""

