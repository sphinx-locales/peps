# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0413.txt
msgid "PEP"
msgstr ""

#: ../../pep-0413.txt:1
msgid "413"
msgstr ""

#: ../../pep-0413.txt
msgid "Title"
msgstr ""

#: ../../pep-0413.txt:2
msgid "Faster evolution of the Python Standard Library"
msgstr ""

#: ../../pep-0413.txt
msgid "Author"
msgstr ""

#: ../../pep-0413.txt:5
msgid "Nick Coghlan <ncoghlan@gmail.com>"
msgstr ""

#: ../../pep-0413.txt
msgid "Status"
msgstr ""

#: ../../pep-0413.txt:6
msgid "Withdrawn"
msgstr ""

#: ../../pep-0413.txt
msgid "Type"
msgstr ""

#: ../../pep-0413.txt:7
msgid "Process"
msgstr ""

#: ../../pep-0413.txt
msgid "Created"
msgstr ""

#: ../../pep-0413.txt:9
msgid "24-Feb-2012"
msgstr ""

#: ../../pep-0413.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0413.txt:10
msgid "2012-02-24, 2012-02-25"
msgstr ""

#: ../../pep-0413.txt:14
msgid "PEP Withdrawal"
msgstr ""

#: ../../pep-0413.txt:16
msgid ""
"With the acceptance of :pep:`453` meaning that ``pip`` will be available "
"to most new Python users by default, this will hopefully reduce the "
"pressure to add new modules to the standard library before they are "
"sufficiently mature."
msgstr ""

#: ../../pep-0413.txt:21
msgid ""
"The last couple of years have also seen increased usage of the model "
"where a standard library package also has an equivalent available from "
"the Python Package Index that also supports older versions of Python."
msgstr ""

#: ../../pep-0413.txt:25
msgid ""
"Given these two developments and the level of engagement throughout the "
"Python 3.4 release cycle, the PEP author no longer feels it would be "
"appropriate to make such a fundamental change to the standard library "
"development process."
msgstr ""

#: ../../pep-0413.txt:31
msgid "Abstract"
msgstr ""

#: ../../pep-0413.txt:33
msgid ""
"This PEP proposes the adoption of a separate versioning scheme for the "
"standard library (distinct from, but coupled to, the existing language "
"versioning scheme) that allows accelerated releases of the Python "
"standard library, while maintaining (or even slowing down) the current "
"rate of change in the core language definition."
msgstr ""

#: ../../pep-0413.txt:39
msgid ""
"Like PEP 407, it aims to adjust the current balance between measured "
"change that allows the broader community time to adapt and being able to "
"keep pace with external influences that evolve more rapidly than the "
"current release cycle can handle (this problem is particularly notable "
"for standard library elements that relate to web technologies)."
msgstr ""

#: ../../pep-0413.txt:45
msgid ""
"However, it's more conservative in its aims than PEP 407, seeking to "
"restrict the increased pace of development to builtin and standard "
"library interfaces, without affecting the rate of change for other "
"elements such as the language syntax and version numbering as well as the"
" CPython binary API and bytecode format."
msgstr ""

#: ../../pep-0413.txt:53
msgid "Rationale"
msgstr ""

#: ../../pep-0413.txt:55
msgid "To quote the PEP 407 abstract:"
msgstr ""

#: ../../pep-0413.txt:57
msgid ""
"Finding a release cycle for an open-source project is a delicate exercise"
" in managing mutually contradicting constraints: developer manpower, "
"availability of release management volunteers, ease of maintenance for "
"users and third-party packagers, quick availability of new features (and "
"behavioural changes), availability of bug fixes without pulling in new "
"features or behavioural changes."
msgstr ""

#: ../../pep-0413.txt:64
msgid ""
"The current release cycle errs on the conservative side. It is adequate "
"for people who value stability over reactivity. This PEP is an attempt to"
" keep the stability that has become a Python trademark, while offering a "
"more fluid release of features, by introducing the notion of long-term "
"support versions."
msgstr ""

#: ../../pep-0413.txt:70
msgid ""
"I agree with the PEP 407 authors that the current release cycle of the "
"*standard library* is too slow to effectively cope with the pace of "
"change in some key programming areas (specifically, web protocols and "
"related technologies, including databases, templating and serialisation "
"formats)."
msgstr ""

#: ../../pep-0413.txt:75
msgid ""
"However, I have written this competing PEP because I believe that the "
"approach proposed in PEP 407 of offering full, potentially binary "
"incompatible releases of CPython every 6 months places too great a burden"
" on the wider Python ecosystem."
msgstr ""

#: ../../pep-0413.txt:80
msgid ""
"Under the current CPython release cycle, distributors of key binary "
"extensions will often support Python releases even after the CPython "
"branches enter \"security fix only\" mode (for example, Twisted currently"
" ships binaries for 2.5, 2.6 and 2.7, NumPy and SciPy support those 3 "
"along with 3.1 and 3.2, PyGame adds a 2.4 binary release, wxPython "
"provides both 32-bit and 64-bit binaries for 2.6 and 2.7, etc)."
msgstr ""

#: ../../pep-0413.txt:87
msgid ""
"If CPython were to triple (or more) its rate of releases, the developers "
"of those libraries (many of which are even more resource starved than "
"CPython) would face an unpalatable choice: either adopt the faster "
"release cycle themselves (up to 18 simultaneous binary releases for "
"PyGame!), drop older Python versions more quickly, or else tell their "
"users to stick to the CPython LTS releases (thus defeating the entire "
"point of speeding up the CPython release cycle in the first place)."
msgstr ""

#: ../../pep-0413.txt:95
msgid ""
"Similarly, many support tools for Python (e.g. syntax highlighters) can "
"take quite some time to catch up with language level changes."
msgstr ""

#: ../../pep-0413.txt:98
msgid ""
"At a cultural level, the Python community is also accustomed to a certain"
" meaning for Python version numbers - they're linked to deprecation "
"periods, support periods, all sorts of things. PEP 407 proposes that "
"collective knowledge all be swept aside, without offering a compelling "
"rationale for why such a course of action is actually *necessary* (aside "
"from, perhaps, making the lives of the CPython core developers a little "
"easier at the expense of everyone else)."
msgstr ""

#: ../../pep-0413.txt:106
msgid ""
"However, if we go back to the primary rationale for increasing the pace "
"of change (i.e. more timely support for web protocols and related "
"technologies), we can note that those only require *standard library* "
"changes. That means many (perhaps even most) of the negative effects on "
"the wider community can be avoided by explicitly limiting which parts of "
"CPython are affected by the new release cycle, and allowing other parts "
"to evolve at their current, more sedate, pace."
msgstr ""

#: ../../pep-0413.txt:116
msgid "Proposal"
msgstr ""

#: ../../pep-0413.txt:118
msgid ""
"This PEP proposes the introduction of a new kind of CPython release: "
"\"standard library releases\". As with PEP 407, this will give CPython 3 "
"kinds of release:"
msgstr ""

#: ../../pep-0413.txt:122
msgid "Language release: \"x.y.0\""
msgstr ""

#: ../../pep-0413.txt:123
msgid "Maintenance release: \"x.y.z\" (where z > 0)"
msgstr ""

#: ../../pep-0413.txt:124
msgid "Standard library release: \"x.y (xy.z)\" (where z > 0)"
msgstr ""

#: ../../pep-0413.txt:126
msgid ""
"Under this scheme, an unqualified version reference (such as \"3.3\") "
"would always refer to the most recent corresponding language or "
"maintenance release. It will never be used without qualification to refer"
" to a standard library release (at least, not by python-dev - obviously, "
"we can only set an example, not force the rest of the Python ecosystem to"
" go along with it)."
msgstr ""

#: ../../pep-0413.txt:132
msgid ""
"Language releases will continue as they are now, as new versions of the "
"Python language definition, along with a new version of the CPython "
"interpreter and the Python standard library. Accordingly, a language "
"release may contain any and all of the following changes:"
msgstr ""

#: ../../pep-0413.txt:137 ../../pep-0413.txt:871
msgid "new language syntax"
msgstr ""

#: ../../pep-0413.txt:138
msgid "new standard library changes (see below)"
msgstr ""

#: ../../pep-0413.txt:139 ../../pep-0413.txt:873
msgid "new deprecation warnings"
msgstr ""

#: ../../pep-0413.txt:140 ../../pep-0413.txt:874
msgid "removal of previously deprecated features"
msgstr ""

#: ../../pep-0413.txt:141
msgid "changes to the emitted bytecode"
msgstr ""

#: ../../pep-0413.txt:142 ../../pep-0413.txt:875
msgid "changes to the AST"
msgstr ""

#: ../../pep-0413.txt:143
msgid "any other significant changes to the compilation toolchain"
msgstr ""

#: ../../pep-0413.txt:144 ../../pep-0413.txt:865
msgid "changes to the core interpreter eval loop"
msgstr ""

#: ../../pep-0413.txt:145 ../../pep-0413.txt:877
msgid ""
"binary incompatible changes to the C ABI (although the PEP 384 stable ABI"
" must still be preserved)"
msgstr ""

#: ../../pep-0413.txt:147
msgid "bug fixes"
msgstr ""

#: ../../pep-0413.txt:149
msgid ""
"Maintenance releases will also continue as they do today, being strictly "
"limited to bug fixes for the corresponding language release. No new "
"features or radical internal changes are permitted."
msgstr ""

#: ../../pep-0413.txt:153
msgid ""
"The new standard library releases will occur in parallel with each "
"maintenance release and will be qualified with a new version identifier "
"documenting the standard library version. Standard library releases may "
"include the following changes:"
msgstr ""

#: ../../pep-0413.txt:158 ../../pep-0413.txt:855
msgid "new features in pure Python modules"
msgstr ""

#: ../../pep-0413.txt:159 ../../pep-0413.txt:856
msgid ""
"new features in C extension modules (subject to PEP 399 compatibility "
"requirements)"
msgstr ""

#: ../../pep-0413.txt:161
msgid "new features in language builtins (provided the C ABI remains unaffected)"
msgstr ""

#: ../../pep-0413.txt:162 ../../pep-0413.txt:867
msgid "bug fixes from the corresponding maintenance release"
msgstr ""

#: ../../pep-0413.txt:164
msgid ""
"Standard library version identifiers are constructed by combining the "
"major and minor version numbers for the Python language release into a "
"single two digit number and then appending a sequential standard library "
"version identifier."
msgstr ""

#: ../../pep-0413.txt:171
msgid "Release Cycle"
msgstr ""

#: ../../pep-0413.txt:173
msgid ""
"When maintenance releases are created, *two* new versions of Python would"
" actually be published on python.org (using the first 3.3 maintenance "
"release, planned for February 2013 as an example)::"
msgstr ""

#: ../../pep-0413.txt:180
msgid ""
"A further 6 months later, the next 3.3 maintenance release would again be"
" accompanied by a new standard library release::"
msgstr ""

#: ../../pep-0413.txt:186
msgid ""
"Again, the standard library release would be binary compatible with the "
"previous language release, merely offering additional features at the "
"Python level."
msgstr ""

#: ../../pep-0413.txt:190
msgid ""
"Finally, 18 months after the release of 3.3, a new language release would"
" be made around the same time as the final 3.3 maintenance and standard "
"library releases::"
msgstr ""

#: ../../pep-0413.txt:198
msgid ""
"The 3.4 release cycle would then follow a similar pattern to that for "
"3.3::"
msgstr ""

#: ../../pep-0413.txt:212
msgid "Programmatic Version Identification"
msgstr ""

#: ../../pep-0413.txt:214
msgid ""
"To expose the new version details programmatically, this PEP proposes the"
" addition of a new ``sys.stdlib_info`` attribute that records the new "
"standard library version above and beyond the underlying interpreter "
"version. Using the initial Python 3.3 release as an example::"
msgstr ""

#: ../../pep-0413.txt:221
msgid "This information would also be included in the ``sys.version`` string::"
msgstr ""

#: ../../pep-0413.txt:228
msgid "Security Fixes and Other \"Out of Cycle\" Releases"
msgstr ""

#: ../../pep-0413.txt:230
msgid ""
"For maintenance releases the process of handling out-of-cycle releases "
"(for example, to fix a security issue or resolve a critical bug in a new "
"release), remains the same as it is now: the minor version number is "
"incremented and a new release is made incorporating the required bug "
"fixes, as well as any other bug fixes that have been committed since the "
"previous release."
msgstr ""

#: ../../pep-0413.txt:236
msgid ""
"For standard library releases, the process is essentially the same, but "
"the corresponding \"What's New?\" document may require some tidying up "
"for the release (as the standard library release may incorporate new "
"features, not just bug fixes)."
msgstr ""

#: ../../pep-0413.txt:243
msgid "User Scenarios"
msgstr ""

#: ../../pep-0413.txt:245
msgid ""
"The versioning scheme proposed above is based on a number of user "
"scenarios that are likely to be encountered if this scheme is adopted. In"
" each case, the scenario is described for both the status quo (i.e. slow "
"release cycle) the versioning scheme in this PEP and the free wheeling "
"minor version number scheme proposed in PEP 407."
msgstr ""

#: ../../pep-0413.txt:251
msgid ""
"To give away the ending, the point of using a separate version number is "
"that for almost all scenarios, the important number is the *language* "
"version, not the standard library version. Most users won't even need to "
"care that the standard library version number exists. In the two "
"identified cases where it matters, providing it as a separate number is "
"actually clearer and more explicit than embedding the two different kinds"
" of number into a single sequence and then tagging some of the numbers in"
" the unified sequence as special."
msgstr ""

#: ../../pep-0413.txt:262
msgid "Novice user, downloading Python from python.org in March 2013"
msgstr ""

#: ../../pep-0413.txt:264
msgid "**Status quo:** must choose between 3.3 and 2.7"
msgstr ""

#: ../../pep-0413.txt:266
msgid "**This PEP:** must choose between 3.3 (33.1), 3.3 and 2.7."
msgstr ""

#: ../../pep-0413.txt:268
msgid "**PEP 407:** must choose between 3.4, 3.3 (LTS) and 2.7."
msgstr ""

#: ../../pep-0413.txt:270
msgid ""
"**Verdict:** explaining the meaning of a Long Term Support release is "
"about as complicated as explaining the meaning of the proposed standard "
"library release version numbers. I call this a tie."
msgstr ""

#: ../../pep-0413.txt:276
msgid "Novice user, attempting to judge currency of third party documentation"
msgstr ""

#: ../../pep-0413.txt:278
msgid ""
"**Status quo:** minor version differences indicate 18-24 months of "
"language evolution"
msgstr ""

#: ../../pep-0413.txt:281
msgid ""
"**This PEP:** same as status quo for language core, standard library "
"version numbers indicate 6 months of standard library evolution."
msgstr ""

#: ../../pep-0413.txt:284
msgid ""
"**PEP 407:** minor version differences indicate 18-24 months of language "
"evolution up to 3.3, then 6 months of language evolution thereafter."
msgstr ""

#: ../../pep-0413.txt:287
msgid ""
"**Verdict:** Since language changes and deprecations can have a much "
"bigger effect on the accuracy of third party documentation than the "
"addition of new features to the standard library, I'm calling this a win "
"for the scheme in this PEP."
msgstr ""

#: ../../pep-0413.txt:294
msgid "Novice user, looking for an extension module binary release"
msgstr ""

#: ../../pep-0413.txt:296
msgid ""
"**Status quo:** look for the binary corresponding to the Python version "
"you are running."
msgstr ""

#: ../../pep-0413.txt:299 ../../pep-0413.txt:320
msgid "**This PEP:** same as status quo."
msgstr ""

#: ../../pep-0413.txt:301
msgid ""
"**PEP 407 (full releases):** same as status quo, but corresponding binary"
" version is more likely to be missing (or, if it does exist, has to be "
"found amongst a much larger list of alternatives)."
msgstr ""

#: ../../pep-0413.txt:305
msgid ""
"**PEP 407 (ABI updates limited to LTS releases):** all binary release "
"pages will need to tell users that Python 3.3, 3.4 and 3.5 all need the "
"3.3 binary."
msgstr ""

#: ../../pep-0413.txt:308
msgid ""
"**Verdict:** I call this a clear win for the scheme in this PEP. "
"Absolutely nothing changes from the current situation, since the standard"
" library version is actually irrelevant in this case (only binary "
"extension compatibility is important)."
msgstr ""

#: ../../pep-0413.txt:315
msgid "Extension module author, deciding whether or not to make a binary release"
msgstr ""

#: ../../pep-0413.txt:317
msgid ""
"**Status quo:** unless using the PEP 384 stable ABI, a new binary release"
" is needed every time the minor version number changes."
msgstr ""

#: ../../pep-0413.txt:322 ../../pep-0413.txt:368
msgid ""
"**PEP 407 (full releases):** same as status quo, but becomes a far more "
"frequent occurrence."
msgstr ""

#: ../../pep-0413.txt:325
msgid ""
"**PEP 407 (ABI updates limited to LTS releases):** before deciding, must "
"first look up whether the new release is an LTS release or an interim "
"release. If it is an LTS release, then a new build is necessary."
msgstr ""

#: ../../pep-0413.txt:329
msgid ""
"**Verdict:** I call this another clear win for the scheme in this PEP. As"
" with the end user facing side of this problem, the standard library "
"version is actually irrelevant in this case. Moving that information out "
"to a separate number avoids creating unnecessary confusion."
msgstr ""

#: ../../pep-0413.txt:336
msgid "Python developer, deciding priority of eliminating a Deprecation Warning"
msgstr ""

#: ../../pep-0413.txt:338
msgid ""
"**Status quo:** code that triggers deprecation warnings is not guaranteed"
" to run on a version of Python with a higher minor version number."
msgstr ""

#: ../../pep-0413.txt:341
msgid "**This PEP:** same as status quo"
msgstr ""

#: ../../pep-0413.txt:343
msgid ""
"**PEP 407:** unclear, as the PEP doesn't currently spell this out. "
"Assuming the deprecation cycle is linked to LTS releases, then upgrading "
"to a non-LTS release is safe but upgrading to the next LTS release may "
"require avoiding the deprecated construct."
msgstr ""

#: ../../pep-0413.txt:348
msgid ""
"**Verdict:** another clear win for the scheme in this PEP since, once "
"again, the standard library version is irrelevant in this scenario."
msgstr ""

#: ../../pep-0413.txt:353
msgid "Alternative interpreter implementor, updating with new features"
msgstr ""

#: ../../pep-0413.txt:355
msgid ""
"**Status quo:** new Python versions arrive infrequently, but are a mish-"
"mash of standard library updates and core language definition and "
"interpreter changes."
msgstr ""

#: ../../pep-0413.txt:359
msgid ""
"**This PEP:** standard library updates, which are easier to integrate, "
"are made available more frequently in a form that is clearly and "
"explicitly compatible with the previous version of the language "
"definition. This means that, once an alternative implementation catches "
"up to Python 3.3, they should have a much easier time incorporating "
"standard library features as they happen (especially pure Python "
"changes), leaving minor version number updates as the only task that "
"requires updates to their core compilation and execution components."
msgstr ""

#: ../../pep-0413.txt:371
msgid ""
"**PEP 407 (language updates limited to LTS releases):** unclear, as the "
"PEP doesn't currently spell out a specific development strategy. Assuming"
" a 3.3 compatibility branch is adopted (as proposed in this PEP), then "
"the outcome would be much the same, but the version number signalling "
"would be slightly less clear (since you would have to check to see if a "
"particular release was an LTS release or not)."
msgstr ""

#: ../../pep-0413.txt:378
msgid ""
"**Verdict:** while not as clear cut as some previous scenarios, I'm still"
" calling this one in favour of the scheme in this PEP. Explicit is better"
" than implicit, and the scheme in this PEP makes a clear split between "
"the two different kinds of update rather than adding a separate \"LTS\" "
"tag to an otherwise ordinary release number. Tagging a particular version"
" as being special is great for communicating with version control systems"
" and associated automated tools, but it's a lousy way to communicate "
"information to other humans."
msgstr ""

#: ../../pep-0413.txt:388
msgid "Python developer, deciding their minimum version dependency"
msgstr ""

#: ../../pep-0413.txt:390
msgid ""
"**Status quo:** look for \"version added\" or \"version changed\" markers"
" in the documentation, check against ``sys.version_info``"
msgstr ""

#: ../../pep-0413.txt:393
msgid ""
"**This PEP:** look for \"version added\" or \"version changed\" markers "
"in the documentation. If written as a bare Python version, such as "
"\"3.3\", check against ``sys.version_info``. If qualified with a standard"
" library version, such as \"3.3 (33.1)\", check against "
"``sys.stdlib_info``."
msgstr ""

#: ../../pep-0413.txt:398
msgid "**PEP 407:** same as status quo"
msgstr ""

#: ../../pep-0413.txt:400
msgid ""
"**Verdict:** the scheme in this PEP actually allows third party libraries"
" to be more explicit about their rate of adoption of standard library "
"features. More conservative projects will likely pin their dependency to "
"the language version and avoid features added in the standard library "
"releases. Faster moving projects could instead declare their dependency "
"on a particular standard library version. However, since PEP 407 does "
"have the advantage of preserving the status quo, I'm calling this one for"
" PEP 407 (albeit with a slim margin)."
msgstr ""

#: ../../pep-0413.txt:411
msgid "Python developers, attempting to reproduce a tracker issue"
msgstr ""

#: ../../pep-0413.txt:413
msgid ""
"**Status quo:** if not already provided, ask the reporter which version "
"of Python they're using. This is often done by asking for the first two "
"lines displayed by the interactive prompt or the value of "
"``sys.version``."
msgstr ""

#: ../../pep-0413.txt:417
msgid ""
"**This PEP:** same as the status quo (as ``sys.version`` will be updated "
"to also include the standard library version), but may be needed on "
"additional occasions (where the user knew enough to state their Python "
"version, but that proved to be insufficient to reproduce the fault)."
msgstr ""

#: ../../pep-0413.txt:422
msgid "**PEP 407:** same as the status quo"
msgstr ""

#: ../../pep-0413.txt:424
msgid ""
"**Verdict:** another marginal win for PEP 407. The new standard library "
"version *is* an extra piece of information that users may need to pass "
"back to developers when reporting issues with Python libraries (or Python"
" itself, on our own tracker). However, by including it in "
"``sys.version``, many fault reports will already include it, and it is "
"easy to request if needed."
msgstr ""

#: ../../pep-0413.txt:432
msgid "CPython release managers, handling a security fix"
msgstr ""

#: ../../pep-0413.txt:434
msgid ""
"**Status quo:** create a new maintenance release incorporating the "
"security fix and any other bug fixes under source control. Also create "
"source releases for any branches open solely for security fixes."
msgstr ""

#: ../../pep-0413.txt:438
msgid ""
"**This PEP:** same as the status quo for maintenance branches. Also "
"create a new standard library release (potentially incorporating new "
"features along with the security fix). For security branches, create "
"source releases for both the former maintenance branch and the standard "
"library update branch."
msgstr ""

#: ../../pep-0413.txt:443
msgid ""
"**PEP 407:** same as the status quo for maintenance and security "
"branches, but handling security fixes for non-LTS releases is currently "
"an open question."
msgstr ""

#: ../../pep-0413.txt:447
msgid ""
"**Verdict:** until PEP 407 is updated to actually address this scenario, "
"a clear win for this PEP."
msgstr ""

#: ../../pep-0413.txt:452
msgid "Effects"
msgstr ""

#: ../../pep-0413.txt:455
msgid "Effect on development cycle"
msgstr ""

#: ../../pep-0413.txt:457
msgid ""
"Similar to PEP 407, this PEP will break up the delivery of new features "
"into more discrete chunks. Instead of a whole raft of changes landing all"
" at once in a language release, each language release will be limited to "
"6 months worth of standard library changes, as well as any changes "
"associated with new syntax."
msgstr ""

#: ../../pep-0413.txt:465
msgid "Effect on workflow"
msgstr ""

#: ../../pep-0413.txt:467
msgid ""
"This PEP proposes the creation of a single additional branch for use in "
"the normal workflow. After the release of 3.3, the following branches "
"would be in use::"
msgstr ""

#: ../../pep-0413.txt:476
msgid ""
"When working on a new feature, developers will need to decide whether or "
"not it is an acceptable change for a standard library release. If so, "
"then it should be checked in on ``3.3-compat`` and then merged to "
"``default``. Otherwise it should be checked in directly to ``default``."
msgstr ""

#: ../../pep-0413.txt:481
msgid ""
"The \"version added\" and \"version changed\" markers for any changes "
"made on the ``3.3-compat`` branch would need to be flagged with both the "
"language version and the standard library version. For example: \"3.3 "
"(33.1)\"."
msgstr ""

#: ../../pep-0413.txt:485
msgid ""
"Any changes made directly on the ``default`` branch would just be flagged"
" with \"3.4\" as usual."
msgstr ""

#: ../../pep-0413.txt:488
msgid ""
"The ``3.3-compat`` branch would be closed to normal development at the "
"same time as the ``3.3`` maintenance branch. The ``3.3-compat`` branch "
"would remain open for security fixes for the same period of time as the "
"``3.3`` maintenance branch."
msgstr ""

#: ../../pep-0413.txt:495
msgid "Effect on bugfix cycle"
msgstr ""

#: ../../pep-0413.txt:497
msgid ""
"The effect on the bug fix workflow is essentially the same as that on the"
" workflow for new features - there is one additional branch to pass "
"through before the change reaches the ``default`` branch."
msgstr ""

#: ../../pep-0413.txt:501
msgid ""
"If critical bugs are found in a maintenance release, then new maintenance"
" and standard library releases will be created to resolve the problem. "
"The final part of the version number will be incremented for both the "
"language version and the standard library version."
msgstr ""

#: ../../pep-0413.txt:506
msgid ""
"If critical bugs are found in a standard library release that do not "
"affect the associated maintenance release, then only a new standard "
"library release will be created and only the standard library's version "
"number will be incremented."
msgstr ""

#: ../../pep-0413.txt:511
msgid ""
"Note that in these circumstances, the standard library release *may* "
"include additional features, rather than just containing the bug fix. It "
"is assumed that anyone that cares about receiving *only* bug fixes "
"without any new features mixed in will already be relying strictly on the"
" maintenance releases rather than using the new standard library "
"releases."
msgstr ""

#: ../../pep-0413.txt:519
msgid "Effect on the community"
msgstr ""

#: ../../pep-0413.txt:521
msgid "PEP 407 has this to say about the effects on the community:"
msgstr ""

#: ../../pep-0413.txt:523
msgid ""
"People who value stability can just synchronize on the LTS releases "
"which, with the proposed figures, would give a similar support cycle "
"(both in duration and in stability)."
msgstr ""

#: ../../pep-0413.txt:527
msgid ""
"I believe this statement is just plain wrong. Life isn't that simple. "
"Instead, developers of third party modules and frameworks will come under"
" pressure to support the full pace of the new release cycle with binary "
"updates, teachers and book authors will receive complaints that they're "
"only covering an \"old\" version of Python (\"You're only using 3.3, the "
"latest is 3.5!\"), etc."
msgstr ""

#: ../../pep-0413.txt:533
msgid ""
"As the minor version number starts climbing 3 times faster than it has in"
" the past, I believe perceptions of language stability would also fall "
"(whether such opinions were justified or not)."
msgstr ""

#: ../../pep-0413.txt:537
msgid ""
"I believe isolating the increased pace of change to the standard library,"
" and clearly delineating it with a separate version number will greatly "
"reassure the rest of the community that no, we're not suddenly asking "
"them to triple their own rate of development. Instead, we're merely going"
" to ship standard library updates for the next language release in "
"6-monthly installments rather than delaying them all until the next "
"language definition update, even those changes that are backwards "
"compatible with the previously released version of Python."
msgstr ""

#: ../../pep-0413.txt:546
msgid ""
"The community benefits listed in PEP 407 are equally applicable to this "
"PEP, at least as far as the standard library is concerned:"
msgstr ""

#: ../../pep-0413.txt:549
msgid ""
"People who value reactivity and access to new features (without taking "
"the risk to install alpha versions or Mercurial snapshots) would get much"
" more value from the new release cycle than currently."
msgstr ""

#: ../../pep-0413.txt:553
msgid ""
"People who want to contribute new features or improvements would be more "
"motivated to do so, knowing that their contributions will be more quickly"
" available to normal users."
msgstr ""

#: ../../pep-0413.txt:557
msgid ""
"If the faster release cycle encourages more people to focus on "
"contributing to the standard library rather than proposing changes to the"
" language definition, I don't see that as a bad thing."
msgstr ""

#: ../../pep-0413.txt:563
msgid "Handling News Updates"
msgstr ""

#: ../../pep-0413.txt:567
msgid "What's New?"
msgstr ""

#: ../../pep-0413.txt:569
msgid ""
"The \"What's New\" documents would be split out into separate documents "
"for standard library releases and language releases. So, during the 3.3 "
"release cycle, we would see:"
msgstr ""

#: ../../pep-0413.txt:573
msgid "What's New in Python 3.3?"
msgstr ""

#: ../../pep-0413.txt:574
msgid "What's New in the Python Standard Library 33.1?"
msgstr ""

#: ../../pep-0413.txt:575
msgid "What's New in the Python Standard Library 33.2?"
msgstr ""

#: ../../pep-0413.txt:576
msgid "What's New in the Python Standard Library 33.3?"
msgstr ""

#: ../../pep-0413.txt:578
msgid "And then finally, we would see the next language release:"
msgstr ""

#: ../../pep-0413.txt:580
msgid "What's New in Python 3.4?"
msgstr ""

#: ../../pep-0413.txt:582
msgid ""
"For the benefit of users that ignore standard library releases, the 3.4 "
"What's New would link back to the What's New documents for each of the "
"standard library releases in the 3.3 series."
msgstr ""

#: ../../pep-0413.txt:588
msgid "NEWS"
msgstr ""

#: ../../pep-0413.txt:590
msgid ""
"Merge conflicts on the NEWS file are already a hassle. Since this PEP "
"proposes introduction of an additional branch into the normal workflow, "
"resolving this becomes even more critical. While Mercurial phases may "
"help to some degree, it would be good to eliminate the problem entirely."
msgstr ""

#: ../../pep-0413.txt:595
msgid ""
"One suggestion from Barry Warsaw is to adopt a non-conflicting separate-"
"files-per-change approach, similar to that used by Twisted [2_]."
msgstr ""

#: ../../pep-0413.txt:598
msgid ""
"Given that the current manually updated NEWS file will be used for the "
"3.3.0 release, one possible layout for such an approach might look like::"
msgstr ""

#: ../../pep-0413.txt:646
msgid ""
"Putting the version information in the directory hierarchy isn't strictly"
" necessary (since the NEWS file generator could figure out from the "
"version history), but does make it easier for *humans* to keep the "
"different versions in order."
msgstr ""

#: ../../pep-0413.txt:653
msgid "Other benefits of reduced version coupling"
msgstr ""

#: ../../pep-0413.txt:656
msgid "Slowing down the language release cycle"
msgstr ""

#: ../../pep-0413.txt:658
msgid ""
"The current release cycle is a compromise between the desire for "
"stability in the core language definition and C extension ABI, and the "
"desire to get new features (most notably standard library updates) into "
"user's hands more quickly."
msgstr ""

#: ../../pep-0413.txt:663
msgid ""
"With the standard library release cycle decoupled (to some degree) from "
"that of the core language definition, it provides an opportunity to "
"actually *slow down* the rate of change in the language definition. The "
"language moratorium for Python 3.2 effectively slowed that cycle down to "
"*more than 3 years* (3.1: June 2009, 3.3: August 2012) without causing "
"any major problems or complaints."
msgstr ""

#: ../../pep-0413.txt:670
msgid ""
"The NEWS file management scheme described above is actually designed to "
"allow us the flexibility to slow down language releases at the same time "
"as standard library releases become more frequent."
msgstr ""

#: ../../pep-0413.txt:674
msgid ""
"As a simple example, if a full two years was allowed between 3.3 and 3.4,"
" the 3.3 release cycle would end up looking like::"
msgstr ""

#: ../../pep-0413.txt:693
msgid ""
"The elegance of the proposed branch structure and NEWS entry layout is "
"that this decision wouldn't really need to be made until shortly before "
"the planned 3.4 release date. At that point, the decision could be made "
"to postpone the 3.4 release and keep the ``3.3`` and ``3.3-compat`` "
"branches open after the 3.3.3 maintenance release and the 3.3 (33.3) "
"standard library release, thus adding another standard library release to"
" the cycle. The choice between another standard library release or a full"
" language release would then be available every 6 months after that."
msgstr ""

#: ../../pep-0413.txt:704
msgid "Further increasing the pace of standard library development"
msgstr ""

#: ../../pep-0413.txt:706
msgid ""
"As noted in the previous section, one benefit of the scheme proposed in "
"this PEP is that it largely decouples the language release cycle from the"
" standard library release cycle. The standard library could be updated "
"every 3 months, or even once a month, without having any flow on effects "
"on the language version numbering or the perceived stability of the core "
"language."
msgstr ""

#: ../../pep-0413.txt:712
msgid ""
"While that pace of development isn't practical as long as the binary "
"installer creation for Windows and Mac OS X involves several manual steps"
" (including manual testing) and for as long as we don't have separate "
"\"<branch>-release\" trees that only receive versions that have been "
"marked as good by the stable buildbots, it's still a useful criterion to "
"keep in mind when considering proposed new versioning schemes: what if we"
" eventually want to make standard library releases even *faster* than "
"every 6 months?"
msgstr ""

#: ../../pep-0413.txt:720
msgid ""
"If the practical issues were ever resolved, then the separate standard "
"library versioning scheme in this PEP could handle it. The tagged version"
" number approach proposed in PEP 407 could not (at least, not without a "
"lot of user confusion and uncertainty)."
msgstr ""

#: ../../pep-0413.txt:727
msgid "Other Questions"
msgstr ""

#: ../../pep-0413.txt:730
msgid "Why not use the major version number?"
msgstr ""

#: ../../pep-0413.txt:732
msgid ""
"The simplest and most logical solution would actually be to map the "
"major.minor.micro version numbers to the language version, stdlib version"
" and maintenance release version respectively."
msgstr ""

#: ../../pep-0413.txt:736
msgid ""
"Instead of releasing Python 3.3.0, we would instead release Python 4.0.0 "
"and the release cycle would look like::"
msgstr ""

#: ../../pep-0413.txt:751
msgid ""
"However, the ongoing pain of the Python 2 -> Python 3 transition (and "
"associated workarounds like the ``python3`` and ``python2`` symlinks to "
"refer directly to the desired release series) means that this simple "
"option isn't viable for historical reasons."
msgstr ""

#: ../../pep-0413.txt:756
msgid ""
"One way that this simple approach *could* be made to work is to merge the"
" current major and minor version numbers directly into a 2-digit major "
"version number::"
msgstr ""

#: ../../pep-0413.txt:774
msgid "Why not use a four part version number?"
msgstr ""

#: ../../pep-0413.txt:776
msgid ""
"Another simple versioning scheme would just add a \"standard library\" "
"version into the existing versioning scheme::"
msgstr ""

#: ../../pep-0413.txt:791
msgid ""
"However, this scheme isn't viable due to backwards compatibility "
"constraints on the ``sys.version_info`` structure."
msgstr ""

#: ../../pep-0413.txt:796
msgid "Why not use a date-based versioning scheme?"
msgstr ""

#: ../../pep-0413.txt:798
msgid ""
"Earlier versions of this PEP proposed a date-based versioning scheme for "
"the standard library. However, such a scheme made it very difficult to "
"handle out-of-cycle releases to fix security issues and other critical "
"bugs in standard library releases, as it required the following steps:"
msgstr ""

#: ../../pep-0413.txt:803
msgid "Change the release version number to the date of the current month."
msgstr ""

#: ../../pep-0413.txt:804
msgid ""
"Update the What's New, NEWS and documentation to refer to the new release"
" number."
msgstr ""

#: ../../pep-0413.txt:806
msgid "Make the new release."
msgstr ""

#: ../../pep-0413.txt:808
msgid ""
"With the sequential scheme now proposed, such releases should at most "
"require a little tidying up of the What's New document before making the "
"release."
msgstr ""

#: ../../pep-0413.txt:813
msgid "Why isn't PEP 384 enough?"
msgstr ""

#: ../../pep-0413.txt:815
msgid ""
"PEP 384 introduced the notion of a \"Stable ABI\" for CPython, a limited "
"subset of the full C ABI that is guaranteed to remain stable. Extensions "
"built against the stable ABI should be able to support all subsequent "
"Python versions with the same binary."
msgstr ""

#: ../../pep-0413.txt:820
msgid ""
"This will help new projects to avoid coupling their C extension modules "
"too closely to a specific version of CPython. For existing modules, "
"however, migrating to the stable ABI can involve quite a lot of work "
"(especially for extension modules that define a lot of classes). With "
"limited development resources available, any time spent on such a change "
"is time that could otherwise have been spent working on features that "
"offer more direct benefits to end users."
msgstr ""

#: ../../pep-0413.txt:828
msgid ""
"There are also other benefits to separate versioning (as described above)"
" that are not directly related to the question of binary compatibility "
"with third party C extensions."
msgstr ""

#: ../../pep-0413.txt:834
msgid ""
"Why no binary compatible additions to the C ABI in standard library "
"releases?"
msgstr ""

#: ../../pep-0413.txt:836
msgid ""
"There's a case to be made that *additions* to the CPython C ABI could "
"reasonably be permitted in standard library releases. This would give C "
"extension authors the same freedom as any other package or module author "
"to depend either on a particular language version or on a standard "
"library version."
msgstr ""

#: ../../pep-0413.txt:842
msgid ""
"The PEP currently associates the interpreter version with the language "
"version, and therefore limits major interpreter changes (including C ABI "
"additions) to the language releases."
msgstr ""

#: ../../pep-0413.txt:846
msgid ""
"An alternative, internally consistent, approach would be to link the "
"interpreter version with the standard library version, with only changes "
"that may affect backwards compatibility limited to language releases."
msgstr ""

#: ../../pep-0413.txt:850
msgid ""
"Under such a scheme, the following changes would be acceptable in "
"standard library releases:"
msgstr ""

#: ../../pep-0413.txt:853
msgid "Standard library updates"
msgstr ""

#: ../../pep-0413.txt:858
msgid "new features in language builtins"
msgstr ""

#: ../../pep-0413.txt:860
msgid "Interpreter implementation updates"
msgstr ""

#: ../../pep-0413.txt:862
msgid "binary compatible additions to the C ABI"
msgstr ""

#: ../../pep-0413.txt:863
msgid ""
"changes to the compilation toolchain that do not affect the AST or alter "
"the bytecode magic number"
msgstr ""

#: ../../pep-0413.txt:869
msgid "And the following changes would be acceptable in language releases:"
msgstr ""

#: ../../pep-0413.txt:872
msgid "any updates acceptable in a standard library release"
msgstr ""

#: ../../pep-0413.txt:876
msgid "changes to the emitted bytecode that require altering the magic number"
msgstr ""

#: ../../pep-0413.txt:880
msgid ""
"While such an approach could probably be made to work, there does not "
"appear to be a compelling justification for it, and the approach "
"currently described in the PEP is simpler and easier to explain."
msgstr ""

#: ../../pep-0413.txt:886
msgid "Why not separate out the standard library entirely?"
msgstr ""

#: ../../pep-0413.txt:888
msgid ""
"A concept that is occasionally discussed is the idea of making the "
"standard library truly independent from the CPython reference "
"implementation."
msgstr ""

#: ../../pep-0413.txt:891
msgid ""
"My personal opinion is that actually making such a change would involve a"
" lot of work for next to no pay-off. CPython without the standard library"
" is useless (the build chain won't even run, let alone the test suite). "
"You also can't create a standalone pure Python standard library either, "
"because too many \"standard library modules\" are actually tightly linked"
" in to the internal details of their respective interpreters (for "
"example, the builtins, ``weakref``, ``gc``, ``sys``, ``inspect``, "
"``ast``)."
msgstr ""

#: ../../pep-0413.txt:899
msgid ""
"Creating a separate CPython development branch that is kept compatible "
"with the previous language release, and making releases from that branch "
"that are identified with a separate standard library version number "
"should provide most of the benefits of a separate standard library "
"repository with only a fraction of the pain."
msgstr ""

#: ../../pep-0413.txt:907
msgid "Acknowledgements"
msgstr ""

#: ../../pep-0413.txt:909
msgid ""
"Thanks go to the PEP 407 authors for starting this discussion, as well as"
" to those authors and Larry Hastings for initial discussions of the "
"proposal made in this PEP."
msgstr ""

#: ../../pep-0413.txt:914
msgid "References"
msgstr ""

#: ../../pep-0413.txt:916
msgid ""
"PEP 407: New release cycle and introducing long-term support versions "
"http://www.python.org/dev/peps/pep-0407/"
msgstr ""

#: ../../pep-0413.txt:919
msgid ""
"Twisted's \"topfiles\" approach to NEWS generation "
"http://twistedmatrix.com/trac/wiki/ReviewProcess#Newsfiles"
msgstr ""

#: ../../pep-0413.txt:923
msgid "Copyright"
msgstr ""

#: ../../pep-0413.txt:925
msgid "This document has been placed in the public domain."
msgstr ""

