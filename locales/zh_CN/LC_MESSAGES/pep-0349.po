# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0349.txt
msgid "PEP"
msgstr ""

#: ../../pep-0349.txt:1
msgid "349"
msgstr ""

#: ../../pep-0349.txt
msgid "Title"
msgstr ""

#: ../../pep-0349.txt:2
msgid "Allow str() to return unicode strings"
msgstr ""

#: ../../pep-0349.txt
msgid "Author"
msgstr ""

#: ../../pep-0349.txt:5
msgid "Neil Schemenauer <nas@arctrix.com>"
msgstr ""

#: ../../pep-0349.txt
msgid "Status"
msgstr ""

#: ../../pep-0349.txt:6
msgid "Rejected"
msgstr ""

#: ../../pep-0349.txt
msgid "Type"
msgstr ""

#: ../../pep-0349.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0349.txt
msgid "Created"
msgstr ""

#: ../../pep-0349.txt:9
msgid "02-Aug-2005"
msgstr ""

#: ../../pep-0349.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0349.txt:10
msgid "2.5"
msgstr ""

#: ../../pep-0349.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0349.txt:11
msgid "06-Aug-2005"
msgstr ""

#: ../../pep-0349.txt
msgid "Resolution"
msgstr ""

#: ../../pep-0349.txt:12
msgid ""
"https://mail.python.org/archives/list/python-"
"dev@python.org/message/M2Y3PUFLAE23NPRJPVBYF6P5LW5LVN6F/"
msgstr ""

#: ../../pep-0349.txt:16
msgid "Abstract"
msgstr ""

#: ../../pep-0349.txt:18
msgid ""
"This PEP proposes to change the ``str()`` built-in function so that it "
"can return unicode strings.  This change would make it easier to write "
"code that works with either string type and would also make some existing"
" code handle unicode strings.  The C function ``PyObject_Str()`` would "
"remain unchanged and the function ``PyString_New()`` would be added "
"instead."
msgstr ""

#: ../../pep-0349.txt:27
msgid "Rationale"
msgstr ""

#: ../../pep-0349.txt:29
msgid ""
"Python has had a Unicode string type for some time now but use of it is "
"not yet widespread.  There is a large amount of Python code that assumes "
"that string data is represented as str instances. The long-term plan for "
"Python is to phase out the str type and use unicode for all string data."
"  Clearly, a smooth migration path must be provided."
msgstr ""

#: ../../pep-0349.txt:36
msgid ""
"We need to upgrade existing libraries, written for str instances, to be "
"made capable of operating in an all-unicode string world. We can't change"
" to an all-unicode world until all essential libraries are made capable "
"for it.  Upgrading the libraries in one shot does not seem feasible.  A "
"more realistic strategy is to individually make the libraries capable of "
"operating on unicode strings while preserving their current all-str "
"environment behaviour."
msgstr ""

#: ../../pep-0349.txt:45
msgid ""
"First, we need to be able to write code that can accept unicode instances"
" without attempting to coerce them to str instances.  Let us label such "
"code as Unicode-safe.  Unicode-safe libraries can be used in an all-"
"unicode world."
msgstr ""

#: ../../pep-0349.txt:50
msgid ""
"Second, we need to be able to write code that, when provided only str "
"instances, will not create unicode results.  Let us label such code as "
"str-stable.  Libraries that are str-stable can be used by libraries and "
"applications that are not yet Unicode-safe."
msgstr ""

#: ../../pep-0349.txt:55
msgid ""
"Sometimes it is simple to write code that is both str-stable and Unicode-"
"safe.  For example, the following function just works::"
msgstr ""

#: ../../pep-0349.txt:61
msgid ""
"That's not too surprising since the unicode type is designed to make the "
"task easier.  The principle is that when str and unicode instances meet, "
"the result is a unicode instance.  One notable difficulty arises when "
"code requires a string representation of an object; an operation "
"traditionally accomplished by using the ``str()`` built-in function."
msgstr ""

#: ../../pep-0349.txt:68
msgid ""
"Using the current ``str()`` function makes the code not Unicode-safe. "
"Replacing a ``str()`` call with a ``unicode()`` call makes the code not "
"str-stable.  Changing ``str()`` so that it could return unicode instances"
" would solve this problem.  As a further benefit, some code that is "
"currently not Unicode-safe because it uses ``str()`` would become "
"Unicode-safe."
msgstr ""

#: ../../pep-0349.txt:77
msgid "Specification"
msgstr ""

#: ../../pep-0349.txt:79
msgid "A Python implementation of the ``str()`` built-in follows::"
msgstr ""

#: ../../pep-0349.txt:92
msgid ""
"The following function would be added to the C API and would be the "
"equivalent to the ``str()`` built-in (ideally it be called "
"``PyObject_Str``, but changing that function could cause a massive number"
" of compatibility problems)::"
msgstr ""

#: ../../pep-0349.txt:99
msgid "A reference implementation is available on Sourceforge [1]_ as a patch."
msgstr ""

#: ../../pep-0349.txt:104
msgid "Backwards Compatibility"
msgstr ""

#: ../../pep-0349.txt:106
msgid ""
"Some code may require that ``str()`` returns a str instance.  In the "
"standard library, only one such case has been found so far.  The function"
" ``email.header_decode()`` requires a str instance and the "
"``email.Header.decode_header()`` function tries to ensure this by calling"
" ``str()`` on its argument.  The code was fixed by changing the line "
"\"header = str(header)\" to::"
msgstr ""

#: ../../pep-0349.txt:116
msgid ""
"Whether this is truly a bug is questionable since ``decode_header()`` "
"really operates on byte strings, not character strings.  Code that passes"
" it a unicode instance could itself be considered buggy."
msgstr ""

#: ../../pep-0349.txt:122
msgid "Alternative Solutions"
msgstr ""

#: ../../pep-0349.txt:124
msgid ""
"A new built-in function could be added instead of changing ``str()``. "
"Doing so would introduce virtually no backwards compatibility problems.  "
"However, since the compatibility problems are expected to rare, changing "
"``str()`` seems preferable to adding a new built-in."
msgstr ""

#: ../../pep-0349.txt:129
msgid ""
"The basestring type could be changed to have the proposed behaviour, "
"rather than changing ``str()``.  However, that would be confusing "
"behaviour for an abstract base type."
msgstr ""

#: ../../pep-0349.txt:135
msgid "References"
msgstr ""

#: ../../pep-0349.txt:137
msgid "https://bugs.python.org/issue1266570"
msgstr ""

#: ../../pep-0349.txt:141
msgid "Copyright"
msgstr ""

#: ../../pep-0349.txt:143
msgid "This document has been placed in the public domain."
msgstr ""

