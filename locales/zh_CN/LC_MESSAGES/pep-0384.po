# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0384.txt
msgid "PEP"
msgstr ""

#: ../../pep-0384.txt:1
msgid "384"
msgstr ""

#: ../../pep-0384.txt
msgid "Title"
msgstr ""

#: ../../pep-0384.txt:2
msgid "Defining a Stable ABI"
msgstr ""

#: ../../pep-0384.txt
msgid "Author"
msgstr ""

#: ../../pep-0384.txt:5
msgid "Martin v. LÃ¶wis <martin@v.loewis.de>"
msgstr ""

#: ../../pep-0384.txt
msgid "Status"
msgstr ""

#: ../../pep-0384.txt:6
msgid "Final"
msgstr ""

#: ../../pep-0384.txt
msgid "Type"
msgstr ""

#: ../../pep-0384.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0384.txt
msgid "Created"
msgstr ""

#: ../../pep-0384.txt:9
msgid "17-May-2009"
msgstr ""

#: ../../pep-0384.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0384.txt:10
msgid "3.2"
msgstr ""

#: ../../pep-0384.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0384.txt:14
msgid "Abstract"
msgstr ""

#: ../../pep-0384.txt:16
msgid ""
"Currently, each feature release introduces a new name for the Python DLL "
"on Windows, and may cause incompatibilities for extension modules on "
"Unix. This PEP proposes to define a stable set of API functions which are"
" guaranteed to be available for the lifetime of Python 3, and which will "
"also remain binary-compatible across versions. Extension modules and "
"applications embedding Python can work with different feature releases as"
" long as they restrict themselves to this stable ABI."
msgstr ""

#: ../../pep-0384.txt:26
msgid "Rationale"
msgstr ""

#: ../../pep-0384.txt:28
msgid ""
"The primary source of ABI incompatibility are changes to the lay-out of "
"in-memory structures. For example, the way in which string interning "
"works, or the data type used to represent the size of an object, have "
"changed during the life of Python 2.x. As a consequence, extension "
"modules making direct access to fields of strings, lists, or tuples, "
"would break if their code is loaded into a newer version of the "
"interpreter without recompilation: offsets of other fields may have "
"changed, making the extension modules access the wrong data."
msgstr ""

#: ../../pep-0384.txt:37
msgid ""
"In some cases, the incompatibilities only affect internal objects of the "
"interpreter, such as frame or code objects. For example, the way line "
"numbers are represented has changed in the 2.x lifetime, as has the way "
"in which local variables are stored (due to the introduction of "
"closures). Even though most applications probably never used these "
"objects, changing them had required to change the PYTHON_API_VERSION."
msgstr ""

#: ../../pep-0384.txt:44
msgid ""
"On Linux, changes to the ABI are often not much of a problem: the system "
"will provide a default Python installation, and many extension modules "
"are already provided pre-compiled for that version. If additional modules"
" are needed, or additional Python versions, users can typically compile "
"them themselves on the system, resulting in modules that use the right "
"ABI."
msgstr ""

#: ../../pep-0384.txt:51
msgid ""
"On Windows, multiple simultaneous installations of different Python "
"versions are common, and extension modules are compiled by their authors,"
" not by end users. To reduce the risk of ABI incompatibilities, Python "
"currently introduces a new DLL name pythonXY.dll for each feature "
"release, whether or not ABI incompatibilities actually exist."
msgstr ""

#: ../../pep-0384.txt:57
msgid ""
"With this PEP, it will be possible to reduce the dependency of binary "
"extension modules on a specific Python feature release, and applications "
"embedding Python can be made work with different releases."
msgstr ""

#: ../../pep-0384.txt:62
msgid "Specification"
msgstr ""

#: ../../pep-0384.txt:64
msgid ""
"The ABI specification falls into two parts: an API specification, "
"specifying what function (groups) are available for use with the ABI, and"
" a linkage specification specifying what libraries to link with. The "
"actual ABI (layout of structures in memory, function calling conventions)"
" is not specified, but implied by the compiler. As a recommendation, a "
"specific ABI is recommended for selected platforms."
msgstr ""

#: ../../pep-0384.txt:72
msgid ""
"During evolution of Python, new ABI functions will be added. Applications"
" using them will then have a requirement on a minimum version of Python; "
"this PEP provides no mechanism for such applications to fall back when "
"the Python library is too old."
msgstr ""

#: ../../pep-0384.txt:78
msgid "Terminology"
msgstr ""

#: ../../pep-0384.txt:80
msgid ""
"Applications and extension modules that want to use this ABI are "
"collectively referred to as \"applications\" from here on."
msgstr ""

#: ../../pep-0384.txt:84
msgid "Header Files and Preprocessor Definitions"
msgstr ""

#: ../../pep-0384.txt:86
msgid ""
"Applications shall only include the header file Python.h (before "
"including any system headers), or, optionally, include pyconfig.h, and "
"then Python.h."
msgstr ""

#: ../../pep-0384.txt:90
msgid ""
"During the compilation of applications, the preprocessor macro "
"Py_LIMITED_API must be defined. Doing so will hide all definitions that "
"are not part of the ABI."
msgstr ""

#: ../../pep-0384.txt:95
msgid "Structures"
msgstr ""

#: ../../pep-0384.txt:97
msgid ""
"Only the following structures and structure fields are accessible to "
"applications:"
msgstr ""

#: ../../pep-0384.txt:100
msgid "PyObject (ob_refcnt, ob_type)"
msgstr ""

#: ../../pep-0384.txt:101
msgid "PyVarObject (ob_base, ob_size)"
msgstr ""

#: ../../pep-0384.txt:102
msgid "PyMethodDef (ml_name, ml_meth, ml_flags, ml_doc)"
msgstr ""

#: ../../pep-0384.txt:103
msgid "PyMemberDef (name, type, offset, flags, doc)"
msgstr ""

#: ../../pep-0384.txt:104
msgid "PyGetSetDef (name, get, set, doc, closure)"
msgstr ""

#: ../../pep-0384.txt:105
msgid "PyModuleDefBase (ob_base, m_init, m_index, m_copy)"
msgstr ""

#: ../../pep-0384.txt:106
msgid ""
"PyModuleDef (m_base, m_name, m_doc, m_size, m_methods, m_traverse, "
"m_clear, m_free)"
msgstr ""

#: ../../pep-0384.txt:108
msgid "PyStructSequence_Field (name, doc)"
msgstr ""

#: ../../pep-0384.txt:109
msgid "PyStructSequence_Desc (name, doc, fields, sequence)"
msgstr ""

#: ../../pep-0384.txt:110
msgid "PyType_Slot (see below)"
msgstr ""

#: ../../pep-0384.txt:111
msgid "PyType_Spec (see below)"
msgstr ""

#: ../../pep-0384.txt:113
msgid ""
"The accessor macros to these fields (Py_REFCNT, Py_TYPE, Py_SIZE) are "
"also available to applications."
msgstr ""

#: ../../pep-0384.txt:116
msgid "The following types are available, but opaque (i.e. incomplete):"
msgstr ""

#: ../../pep-0384.txt:118
msgid "PyThreadState"
msgstr ""

#: ../../pep-0384.txt:119
msgid "PyInterpreterState"
msgstr ""

#: ../../pep-0384.txt:120
msgid "struct _frame"
msgstr ""

#: ../../pep-0384.txt:121
msgid "struct symtable"
msgstr ""

#: ../../pep-0384.txt:122
msgid "struct _node"
msgstr ""

#: ../../pep-0384.txt:123
msgid "PyWeakReference"
msgstr ""

#: ../../pep-0384.txt:124
msgid "PyLongObject"
msgstr ""

#: ../../pep-0384.txt:125
msgid "PyTypeObject"
msgstr ""

#: ../../pep-0384.txt:128
msgid "Type Objects"
msgstr ""

#: ../../pep-0384.txt:130
msgid ""
"The structure of type objects is not available to applications; "
"declaration of \"static\" type objects is not possible anymore (for "
"applications using this ABI). Instead, type objects get created "
"dynamically. To allow an easy creation of types (in particular, to be "
"able to fill out function pointers easily), the following structures and "
"functions are available::"
msgstr ""

#: ../../pep-0384.txt:153
msgid ""
"To specify a slot, a unique slot id must be provided. New Python versions"
" may introduce new slot ids, but slot ids will never be recycled. Slots "
"may get deprecated, but continue to be supported throughout Python 3.x."
msgstr ""

#: ../../pep-0384.txt:158
msgid ""
"The slot ids are named like the field names of the structures that hold "
"the pointers in Python 3.1, with an added ``Py_`` prefix (i.e. "
"Py_tp_dealloc instead of just tp_dealloc):"
msgstr ""

#: ../../pep-0384.txt:162
msgid ""
"tp_dealloc, tp_getattr, tp_setattr, tp_repr, tp_hash, tp_call, tp_str, "
"tp_getattro, tp_setattro, tp_doc, tp_traverse, tp_clear, tp_richcompare, "
"tp_iter, tp_iternext, tp_methods, tp_base, tp_descr_get, tp_descr_set, "
"tp_init, tp_alloc, tp_new, tp_is_gc, tp_bases, tp_del"
msgstr ""

#: ../../pep-0384.txt:167
msgid ""
"nb_add nb_subtract nb_multiply nb_remainder nb_divmod nb_power "
"nb_negative nb_positive nb_absolute nb_bool nb_invert nb_lshift nb_rshift"
" nb_and nb_xor nb_or nb_int nb_float nb_inplace_add nb_inplace_subtract "
"nb_inplace_multiply nb_inplace_remainder nb_inplace_power "
"nb_inplace_lshift nb_inplace_rshift nb_inplace_and nb_inplace_xor "
"nb_inplace_or nb_floor_divide nb_true_divide nb_inplace_floor_divide "
"nb_inplace_true_divide nb_index"
msgstr ""

#: ../../pep-0384.txt:174
msgid ""
"sq_length sq_concat sq_repeat sq_item sq_ass_item sq_contains "
"sq_inplace_concat sq_inplace_repeat"
msgstr ""

#: ../../pep-0384.txt:176
msgid "mp_length mp_subscript mp_ass_subscript"
msgstr ""

#: ../../pep-0384.txt:178
msgid ""
"The following fields cannot be set during type definition: - tp_dict "
"tp_mro tp_cache tp_subclasses tp_weaklist tp_print - tp_weaklistoffset "
"tp_dictoffset"
msgstr ""

#: ../../pep-0384.txt:183
msgid "typedefs"
msgstr ""

#: ../../pep-0384.txt:185
msgid ""
"In addition to the typedefs for structs listed above, the following "
"typedefs are available. Their inclusion in the ABI means that the "
"underlying type must not change on a platform (even though it may differ "
"across platforms)."
msgstr ""

#: ../../pep-0384.txt:190
msgid "Py_uintptr_t Py_intptr_t Py_ssize_t"
msgstr ""

#: ../../pep-0384.txt:191
msgid ""
"unaryfunc binaryfunc ternaryfunc inquiry lenfunc ssizeargfunc "
"ssizessizeargfunc ssizeobjargproc ssizessizeobjargproc objobjargproc "
"objobjproc visitproc traverseproc destructor getattrfunc getattrofunc "
"setattrfunc setattrofunc reprfunc hashfunc richcmpfunc getiterfunc "
"iternextfunc descrgetfunc descrsetfunc initproc newfunc allocfunc"
msgstr ""

#: ../../pep-0384.txt:197
msgid "PyCFunction PyCFunctionWithKeywords PyNoArgsFunction PyCapsule_Destructor"
msgstr ""

#: ../../pep-0384.txt:199
msgid "getter setter"
msgstr ""

#: ../../pep-0384.txt:200
msgid "PyOS_sighandler_t"
msgstr ""

#: ../../pep-0384.txt:201
msgid "PyGILState_STATE"
msgstr ""

#: ../../pep-0384.txt:202
msgid "Py_UCS4"
msgstr ""

#: ../../pep-0384.txt:204
msgid ""
"Most notably, Py_UNICODE is not available as a typedef, since the same "
"Python version may use different definitions of it on the same platform "
"(depending on whether it uses narrow or wide code units). Applications "
"that need to access the contents of a Unicode string can convert it to "
"wchar_t."
msgstr ""

#: ../../pep-0384.txt:211
msgid "Functions and function-like Macros"
msgstr ""

#: ../../pep-0384.txt:213
msgid ""
"By default, all functions are available, unless they are excluded below. "
"Whether a function is documented or not does not matter."
msgstr ""

#: ../../pep-0384.txt:217
msgid ""
"Function-like macros (in particular, field access macros) remain "
"available to applications, but get replaced by function calls (unless "
"their definition only refers to features of the ABI, such as the various "
"_Check macros)"
msgstr ""

#: ../../pep-0384.txt:222
msgid ""
"ABI function declarations will not change their parameters or return "
"types. If a change to the signature becomes necessary, a new function "
"will be introduced. If the new function is source-compatible (e.g. if "
"just the return type changes), an alias macro may get added to redirect "
"calls to the new function when the applications is recompiled."
msgstr ""

#: ../../pep-0384.txt:229
msgid ""
"If continued provision of the old function is not possible, it may get "
"deprecated, then removed, causing applications that use that function to "
"break."
msgstr ""

#: ../../pep-0384.txt:234
msgid "Excluded Functions"
msgstr ""

#: ../../pep-0384.txt:236
msgid ""
"All functions starting with _Py are not available to applications. Also, "
"all functions that expect parameter types that are unavailable to "
"applications are excluded from the ABI, such as PyAST_FromNode (which "
"expects a ``node*``)."
msgstr ""

#: ../../pep-0384.txt:241
msgid "Functions declared in the following header files are not part of the ABI:"
msgstr ""

#: ../../pep-0384.txt:244
msgid "bytes_methods.h"
msgstr ""

#: ../../pep-0384.txt:245
msgid "cellobject.h"
msgstr ""

#: ../../pep-0384.txt:246
msgid "classobject.h"
msgstr ""

#: ../../pep-0384.txt:247
msgid "code.h"
msgstr ""

#: ../../pep-0384.txt:248
msgid "compile.h"
msgstr ""

#: ../../pep-0384.txt:249
msgid "datetime.h"
msgstr ""

#: ../../pep-0384.txt:250
msgid "dtoa.h"
msgstr ""

#: ../../pep-0384.txt:251
msgid "frameobject.h"
msgstr ""

#: ../../pep-0384.txt:252
msgid "funcobject.h"
msgstr ""

#: ../../pep-0384.txt:253
msgid "genobject.h"
msgstr ""

#: ../../pep-0384.txt:254
msgid "longintrepr.h"
msgstr ""

#: ../../pep-0384.txt:255
msgid "parsetok.h"
msgstr ""

#: ../../pep-0384.txt:256
msgid "pyarena.h"
msgstr ""

#: ../../pep-0384.txt:257
msgid "pyatomic.h"
msgstr ""

#: ../../pep-0384.txt:258
msgid "pyctype.h"
msgstr ""

#: ../../pep-0384.txt:259
msgid "pydebug.h"
msgstr ""

#: ../../pep-0384.txt:260
msgid "pytime.h"
msgstr ""

#: ../../pep-0384.txt:261
msgid "symtable.h"
msgstr ""

#: ../../pep-0384.txt:262
msgid "token.h"
msgstr ""

#: ../../pep-0384.txt:263
msgid "ucnhash.h"
msgstr ""

#: ../../pep-0384.txt:265
msgid ""
"In addition, functions expecting ``FILE*`` are not part of the ABI, to "
"avoid depending on a specific version of the Microsoft C runtime DLL on "
"Windows."
msgstr ""

#: ../../pep-0384.txt:269
msgid ""
"Module and type initializer and finalizer functions are not available "
"(PyByteArray_Init, PyOS_FiniInterrupts and all functions ending in _Fini "
"or _ClearFreeList)."
msgstr ""

#: ../../pep-0384.txt:273
msgid ""
"Several functions dealing with interpreter implementation details are not"
" available:"
msgstr ""

#: ../../pep-0384.txt:276
msgid ""
"PyInterpreterState_Head, PyInterpreterState_Next, "
"PyInterpreterState_ThreadHead, PyThreadState_Next"
msgstr ""

#: ../../pep-0384.txt:278
msgid "Py_SubversionRevision, Py_SubversionShortBranch"
msgstr ""

#: ../../pep-0384.txt:280
msgid ""
"PyStructSequence_InitType is not available, as it requires the caller to "
"provide a static type object."
msgstr ""

#: ../../pep-0384.txt:283
msgid ""
"Py_FatalError will be moved from pydebug.h into some other header file "
"(e.g. pyerrors.h)."
msgstr ""

#: ../../pep-0384.txt:286
msgid ""
"The exact list of functions being available is given in the Windows "
"module definition file for python3.dll [1]_."
msgstr ""

#: ../../pep-0384.txt:290
msgid "Global Variables"
msgstr ""

#: ../../pep-0384.txt:292
msgid ""
"Global variables representing types and exceptions are available to "
"applications. In addition, selected global variables referenced in macros"
" (such as Py_True and Py_False) are available."
msgstr ""

#: ../../pep-0384.txt:296
msgid ""
"A complete list of global variable definitions is given in the "
"python3.def file [1]_; those declared DATA denote variables."
msgstr ""

#: ../../pep-0384.txt:300
msgid "Other Macros"
msgstr ""

#: ../../pep-0384.txt:302
msgid ""
"All macros defining symbolic constants are available to applications; the"
" numeric values will not change."
msgstr ""

#: ../../pep-0384.txt:305
msgid "In addition, the following macros are available:"
msgstr ""

#: ../../pep-0384.txt:307
msgid ""
"Py_BEGIN_ALLOW_THREADS, Py_BLOCK_THREADS, Py_UNBLOCK_THREADS, "
"Py_END_ALLOW_THREADS"
msgstr ""

#: ../../pep-0384.txt:311
msgid "The Buffer Interface"
msgstr ""

#: ../../pep-0384.txt:313
msgid ""
"The buffer interface (type Py_buffer, type slots bf_getbuffer and "
"bf_releasebuffer, etc) has been omitted from the ABI, since the stability"
" of the Py_buffer structure is not clear at this time. Inclusion in the "
"ABI can be considered in future releases."
msgstr ""

#: ../../pep-0384.txt:319
msgid "Signature Changes"
msgstr ""

#: ../../pep-0384.txt:321
msgid ""
"A number of functions currently expect a specific struct, even though "
"callers typically have PyObject* available. These have been changed to "
"expect PyObject* as the parameter; this will cause warnings in "
"applications that currently explicitly cast to the parameter type. These "
"functions are PySlice_GetIndices, PySlice_GetIndicesEx, "
"PyUnicode_AsWideChar, and PyEval_EvalCode."
msgstr ""

#: ../../pep-0384.txt:329
msgid "Linkage"
msgstr ""

#: ../../pep-0384.txt:331
msgid ""
"On Windows, applications shall link with python3.dll; an import library "
"python3.lib will be available. This DLL will redirect all of its API "
"functions through /export linker options to the full interpreter DLL, "
"i.e. python3y.dll."
msgstr ""

#: ../../pep-0384.txt:336
msgid ""
"On Unix systems, the ABI is typically provided by the python executable "
"itself. PyModule_Create is changed to pass ``3`` as the API version if "
"the extension module was compiled with Py_LIMITED_API; the version check "
"for the API version will accept either 3 or the current "
"PYTHON_API_VERSION as conforming. If Python is compiled as a shared "
"library, it is installed as both libpython3.so, and libpython3.y.so; "
"applications conforming to this PEP should then link to the former "
"(extension modules can continue to link with no libpython shared object, "
"but rather rely on runtime linking). The ABI version is symbolically "
"available as ``PYTHON_ABI_VERSION``."
msgstr ""

#: ../../pep-0384.txt:347
msgid ""
"Also on Unix, the PEP 3149 tag abi<PYTHON_ABI_VERSION> is accepted in "
"file names of extension modules. No checking is performed that files "
"named in this way are actually restricted to the limited API, and no "
"support for building such files will be added to distutils due to the "
"distutils code freeze."
msgstr ""

#: ../../pep-0384.txt:354
msgid "Implementation Strategy"
msgstr ""

#: ../../pep-0384.txt:356
msgid ""
"This PEP will be implemented in a branch [2]_, allowing users to check "
"whether their modules conform to the ABI. To avoid users having to "
"rewrite their type definitions, a script to convert C source code "
"containing type definitions will be provided [3]_."
msgstr ""

#: ../../pep-0384.txt:362
msgid "References"
msgstr ""

#: ../../pep-0384.txt:364
msgid ""
"\"python3 module definition file\": "
"http://svn.python.org/projects/python/branches/pep-0384/PC/python3.def"
msgstr ""

#: ../../pep-0384.txt:366
msgid ""
"\"PEP 384 branch\": "
"http://svn.python.org/projects/python/branches/pep-0384/"
msgstr ""

#: ../../pep-0384.txt:368
msgid ""
"\"ABI type conversion script\": "
"http://svn.python.org/projects/python/branches/pep-0384/Tools/scripts/abitype.py"
msgstr ""

#: ../../pep-0384.txt:372
msgid "Copyright"
msgstr ""

#: ../../pep-0384.txt:374
msgid "This document has been placed in the public domain."
msgstr ""

