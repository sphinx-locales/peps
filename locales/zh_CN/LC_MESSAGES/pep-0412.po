# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0412.txt
msgid "PEP"
msgstr ""

#: ../../pep-0412.txt:1
msgid "412"
msgstr ""

#: ../../pep-0412.txt
msgid "Title"
msgstr ""

#: ../../pep-0412.txt:2
msgid "Key-Sharing Dictionary"
msgstr ""

#: ../../pep-0412.txt
msgid "Author"
msgstr ""

#: ../../pep-0412.txt:5
msgid "Mark Shannon <mark@hotpy.org>"
msgstr ""

#: ../../pep-0412.txt
msgid "Status"
msgstr ""

#: ../../pep-0412.txt:6
msgid "Final"
msgstr ""

#: ../../pep-0412.txt
msgid "Type"
msgstr ""

#: ../../pep-0412.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0412.txt
msgid "Created"
msgstr ""

#: ../../pep-0412.txt:9 ../../pep-0412.txt:11
msgid "08-Feb-2012"
msgstr ""

#: ../../pep-0412.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0412.txt:10
msgid "3.3"
msgstr ""

#: ../../pep-0412.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0412.txt:15
msgid "Abstract"
msgstr ""

#: ../../pep-0412.txt:17
msgid ""
"This PEP proposes a change in the implementation of the builtin "
"dictionary type ``dict``.  The new implementation allows dictionaries "
"which are used as attribute dictionaries (the ``__dict__`` attribute of "
"an object) to share keys with other attribute dictionaries of instances "
"of the same class."
msgstr ""

#: ../../pep-0412.txt:24
msgid "Motivation"
msgstr ""

#: ../../pep-0412.txt:26
msgid ""
"The current dictionary implementation uses more memory than is necessary "
"when used as a container for object attributes as the keys are replicated"
" for each instance rather than being shared across many instances of the "
"same class.  Despite this, the current dictionary implementation is "
"finely tuned and performs very well as a general-purpose mapping object."
msgstr ""

#: ../../pep-0412.txt:33
msgid ""
"By separating the keys (and hashes) from the values it is possible to "
"share the keys between multiple dictionaries and improve memory use. By "
"ensuring that keys are separated from the values only when beneficial, it"
" is possible to retain the high-performance of the current dictionary "
"implementation when used as a general-purpose mapping object."
msgstr ""

#: ../../pep-0412.txt:41
msgid "Behaviour"
msgstr ""

#: ../../pep-0412.txt:43
msgid ""
"The new dictionary behaves in the same way as the old implementation. It "
"fully conforms to the Python API, the C API and the ABI."
msgstr ""

#: ../../pep-0412.txt:47
msgid "Performance"
msgstr ""

#: ../../pep-0412.txt:50
msgid "Memory Usage"
msgstr ""

#: ../../pep-0412.txt:52
msgid ""
"Reduction in memory use is directly related to the number of dictionaries"
" with shared keys in existence at any time.  These dictionaries are "
"typically half the size of the current dictionary implementation."
msgstr ""

#: ../../pep-0412.txt:57
#, python-format
msgid ""
"Benchmarking shows that memory use is reduced by 10% to 20% for object-"
"oriented programs with no significant change in memory use for other "
"programs."
msgstr ""

#: ../../pep-0412.txt:62
msgid "Speed"
msgstr ""

#: ../../pep-0412.txt:64
msgid ""
"The performance of the new implementation is dominated by memory locality"
" effects.  When keys are not shared (for example in module dictionaries "
"and dictionary explicitly created by ``dict()`` or ``{}``) then "
"performance is unchanged (within a percent or two) from the current "
"implementation."
msgstr ""

#: ../../pep-0412.txt:70
msgid ""
"For the shared keys case, the new implementation tends to separate keys "
"from values, but reduces total memory usage.  This will improve "
"performance in many cases as the effects of reduced memory usage outweigh"
" the loss of locality, but some programs may show a small slow down."
msgstr ""

#: ../../pep-0412.txt:76
#, python-format
msgid ""
"Benchmarking shows no significant change of speed for most benchmarks. "
"Object-oriented benchmarks show small speed ups when they create large "
"numbers of objects of the same class (the gcbench benchmark shows a 10% "
"speed up; this is likely to be an upper limit)."
msgstr ""

#: ../../pep-0412.txt:82 ../../pep-0412.txt:128
msgid "Implementation"
msgstr ""

#: ../../pep-0412.txt:84
msgid ""
"Both the old and new dictionaries consist of a fixed-sized dict struct "
"and a re-sizeable table.  In the new dictionary the table can be further "
"split into a keys table and values array.  The keys table holds the keys "
"and hashes and (for non-split tables) the values as well.  It differs "
"only from the original implementation in that it contains a number of "
"fields that were previously in the dict struct. If a table is split the "
"values in the keys table are ignored, instead the values are held in a "
"separate array."
msgstr ""

#: ../../pep-0412.txt:94
msgid "Split-Table dictionaries"
msgstr ""

#: ../../pep-0412.txt:96
msgid ""
"When dictionaries are created to fill the __dict__ slot of an object, "
"they are created in split form.  The keys table is cached in the type, "
"potentially allowing all attribute dictionaries of instances of one class"
" to share keys.  In the event of the keys of these dictionaries starting "
"to diverge, individual dictionaries will lazily convert to the combined-"
"table form.  This ensures good memory use in the common case, and "
"correctness in all cases."
msgstr ""

#: ../../pep-0412.txt:104
msgid ""
"When resizing a split dictionary it is converted to a combined table. If "
"resizing is as a result of storing an instance attribute, and there is "
"only instance of a class, then the dictionary will be re-split "
"immediately.  Since most OO code will set attributes in the __init__ "
"method, all attributes will be set before a second instance is created "
"and no more resizing will be necessary as all further instance "
"dictionaries will have the correct size.  For more complex use patterns, "
"it is impossible to know what is the best approach, so the implementation"
" allows extra insertions up to the point of a resize when it reverts to "
"the combined table (non-shared keys)."
msgstr ""

#: ../../pep-0412.txt:115
msgid ""
"A deletion from a split dictionary does not change the keys table, it "
"simply removes the value from the values array."
msgstr ""

#: ../../pep-0412.txt:119
msgid "Combined-Table dictionaries"
msgstr ""

#: ../../pep-0412.txt:121
msgid ""
"Explicit dictionaries (``dict()`` or ``{}``), module dictionaries and "
"most other dictionaries are created as combined-table dictionaries.  A "
"combined-table dictionary never becomes a split-table dictionary. "
"Combined tables are laid out in much the same way as the tables in the "
"old dictionary, resulting in very similar performance."
msgstr ""

#: ../../pep-0412.txt:130
msgid "The new dictionary implementation is available at [1]_."
msgstr ""

#: ../../pep-0412.txt:133
msgid "Pros and Cons"
msgstr ""

#: ../../pep-0412.txt:136
msgid "Pros"
msgstr ""

#: ../../pep-0412.txt:138
msgid ""
"Significant memory savings for object-oriented applications.  Small "
"improvement to speed for programs which create lots of similar objects."
msgstr ""

#: ../../pep-0412.txt:143
msgid "Cons"
msgstr ""

#: ../../pep-0412.txt:145
msgid ""
"Change to data structures: Third party modules which meddle with the "
"internals of the dictionary implementation will break."
msgstr ""

#: ../../pep-0412.txt:148
msgid ""
"Changes to repr() output and iteration order: For most cases, this will "
"be unchanged.  However, for some split-table dictionaries the iteration "
"order will change."
msgstr ""

#: ../../pep-0412.txt:152
msgid ""
"Neither of these cons should be a problem.  Modules which meddle with the"
" internals of the dictionary implementation are already broken and should"
" be fixed to use the API.  The iteration order of dictionaries was never "
"defined and has always been arbitrary; it is different for Jython and "
"PyPy."
msgstr ""

#: ../../pep-0412.txt:159
msgid "Alternative Implementation"
msgstr ""

#: ../../pep-0412.txt:161
msgid ""
"An alternative implementation for split tables, which could save even "
"more memory, is to store an index in the value field of the keys table "
"(instead of ignoring the value field).  This index would explicitly state"
" where in the value array to look.  The value array would then only "
"require 1 field for each usable slot in the key table, rather than each "
"slot in the key table."
msgstr ""

#: ../../pep-0412.txt:168
msgid ""
"This \"indexed\" version would reduce the size of value array by about "
"one third. The keys table would need an extra \"values_size\" field, "
"increasing the size of combined dicts by one word.  The extra indirection"
" adds more complexity to the code, potentially reducing performance a "
"little."
msgstr ""

#: ../../pep-0412.txt:174
msgid ""
"The \"indexed\" version will not be included in this implementation, but "
"should be considered deferred rather than rejected, pending further "
"experimentation."
msgstr ""

#: ../../pep-0412.txt:179
msgid "References"
msgstr ""

#: ../../pep-0412.txt:181
msgid ""
"Reference Implementation: "
"https://bitbucket.org/markshannon/cpython_new_dict"
msgstr ""

#: ../../pep-0412.txt:185
msgid "Copyright"
msgstr ""

#: ../../pep-0412.txt:187
msgid "This document has been placed in the public domain."
msgstr ""

