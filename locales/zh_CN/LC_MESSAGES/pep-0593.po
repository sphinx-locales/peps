# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0593.rst
msgid "PEP"
msgstr ""

#: ../../pep-0593.rst:1
msgid "593"
msgstr ""

#: ../../pep-0593.rst
msgid "Title"
msgstr ""

#: ../../pep-0593.rst:2
msgid "Flexible function and variable annotations"
msgstr ""

#: ../../pep-0593.rst
msgid "Author"
msgstr ""

#: ../../pep-0593.rst:3
msgid "Till Varoquaux <till@fb.com>, Konstantin Kashin <kkashin@fb.com>"
msgstr ""

#: ../../pep-0593.rst
msgid "Sponsor"
msgstr ""

#: ../../pep-0593.rst:4
msgid "Ivan Levkivskyi <levkivskyi@gmail.com>"
msgstr ""

#: ../../pep-0593.rst
msgid "Discussions-To"
msgstr ""

#: ../../pep-0593.rst:5
msgid "typing-sig@python.org"
msgstr ""

#: ../../pep-0593.rst
msgid "Status"
msgstr ""

#: ../../pep-0593.rst:6
msgid "Accepted"
msgstr ""

#: ../../pep-0593.rst
msgid "Type"
msgstr ""

#: ../../pep-0593.rst:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0593.rst
msgid "Created"
msgstr ""

#: ../../pep-0593.rst:9
msgid "26-Apr-2019"
msgstr ""

#: ../../pep-0593.rst
msgid "Python-Version"
msgstr ""

#: ../../pep-0593.rst:10
msgid "3.9"
msgstr ""

#: ../../pep-0593.rst
msgid "Post-History"
msgstr ""

#: ../../pep-0593.rst:11
msgid "20-May-2019"
msgstr ""

#: ../../pep-0593.rst:14
msgid "Abstract"
msgstr ""

#: ../../pep-0593.rst:16
msgid ""
"This PEP introduces a mechanism to extend the type annotations from PEP "
"484 with arbitrary metadata."
msgstr ""

#: ../../pep-0593.rst:20
msgid "Motivation"
msgstr ""

#: ../../pep-0593.rst:22
msgid ""
"PEP 484 provides a standard semantic for the annotations introduced in "
"PEP 3107. PEP 484 is prescriptive but it is the de facto standard for "
"most of the consumers of annotations; in many statically checked code "
"bases, where type annotations are widely used, they have effectively "
"crowded out any other form of annotation. Some of the use cases for "
"annotations described in PEP 3107 (database mapping, foreign languages "
"bridge) are not currently realistic given the prevalence of type "
"annotations. Furthermore, the standardisation of type annotations rules "
"out advanced features only supported by specific type checkers."
msgstr ""

#: ../../pep-0593.rst:34
msgid "Rationale"
msgstr ""

#: ../../pep-0593.rst:36
msgid ""
"This PEP adds an ``Annotated`` type to the typing module to decorate "
"existing types with context-specific metadata. Specifically, a type ``T``"
" can be annotated with metadata ``x`` via the typehint ``Annotated[T, "
"x]``. This metadata can be used for either static analysis or at runtime."
" If a library (or tool) encounters a typehint ``Annotated[T, x]`` and has"
" no special logic for metadata ``x``, it should ignore it and simply "
"treat the type as ``T``. Unlike the ``no_type_check`` functionality that "
"currently exists in the ``typing`` module which completely disables "
"typechecking annotations on a function or a class, the ``Annotated`` type"
" allows for both static typechecking of ``T`` (e.g., via mypy [mypy]_ or "
"Pyre [pyre]_, which can safely ignore ``x``) together with runtime access"
" to ``x`` within a specific application. The introduction of this type "
"would address a diverse set of use cases of interest to the broader "
"Python community."
msgstr ""

#: ../../pep-0593.rst:51
msgid ""
"This was originally brought up as issue 600 [issue-600]_ in the typing "
"github and then discussed in Python ideas [python-ideas]_."
msgstr ""

#: ../../pep-0593.rst:55
msgid "Motivating examples"
msgstr ""

#: ../../pep-0593.rst:58
msgid "Combining runtime and static uses of annotations"
msgstr ""

#: ../../pep-0593.rst:60
msgid ""
"There's an emerging trend of libraries leveraging the typing annotations "
"at runtime (e.g.: dataclasses); having the ability to extend the typing "
"annotations with external data would be a great boon for those libraries."
msgstr ""

#: ../../pep-0593.rst:64
msgid ""
"Here's an example of how a hypothetical module could leverage annotations"
" to read c structs::"
msgstr ""

#: ../../pep-0593.rst:81
msgid "Lowering barriers to developing new typing constructs"
msgstr ""

#: ../../pep-0593.rst:83
msgid ""
"Typically when adding a new type, a developer need to upstream that type "
"to the typing module and change mypy, PyCharm [pycharm]_, Pyre, pytype "
"[pytype]_, etc... This is particularly important when working on open-"
"source code that makes use of these types, seeing as the code would not "
"be immediately transportable to other developers' tools without "
"additional logic. As a result, there is a high cost to developing and "
"trying out new types in a codebase. Ideally, authors should be able to "
"introduce new types in a manner that allows for graceful degradation "
"(e.g.: when clients do not have a custom mypy plugin [mypy-plugin]_), "
"which would lower the barrier to development and ensure some degree of "
"backward compatibility."
msgstr ""

#: ../../pep-0593.rst:95
msgid ""
"For example, suppose that an author wanted to add support for tagged "
"unions [tagged-union]_ to Python. One way to accomplish would be to "
"annotate ``TypedDict`` [typed-dict]_ in Python such that only one field "
"is allowed to be set::"
msgstr ""

#: ../../pep-0593.rst:105
msgid ""
"This is a somewhat cumbersome syntax but it allows us to iterate on this "
"proof-of-concept and have people with type checkers (or other tools) that"
" don't yet support this feature work in a codebase with tagged unions. "
"The author could easily test this proposal and iron out the kinks before "
"trying to upstream tagged union to ``typing``, mypy, etc. Moreover, tools"
" that do not have support for parsing the ``TaggedUnion`` annotation "
"would still be able to treat ``Currency`` as a ``TypedDict``, which is "
"still a close approximation (slightly less strict)."
msgstr ""

#: ../../pep-0593.rst:114
msgid "Specification"
msgstr ""

#: ../../pep-0593.rst:117
msgid "Syntax"
msgstr ""

#: ../../pep-0593.rst:119
msgid ""
"``Annotated`` is parameterized with a type and an arbitrary list of "
"Python values that represent the annotations. Here are the specific "
"details of the syntax:"
msgstr ""

#: ../../pep-0593.rst:123
msgid "The first argument to ``Annotated`` must be a valid type"
msgstr ""

#: ../../pep-0593.rst:125
msgid ""
"Multiple type annotations are supported (``Annotated`` supports variadic "
"arguments)::"
msgstr ""

#: ../../pep-0593.rst:130
msgid ""
"``Annotated`` must be called with at least two arguments ( "
"``Annotated[int]`` is not valid)"
msgstr ""

#: ../../pep-0593.rst:133
msgid ""
"The order of the annotations is preserved and matters for equality "
"checks::"
msgstr ""

#: ../../pep-0593.rst:140
msgid ""
"Nested ``Annotated`` types are flattened, with metadata ordered starting "
"with the innermost annotation::"
msgstr ""

#: ../../pep-0593.rst:147
msgid "Duplicated annotations are not removed::"
msgstr ""

#: ../../pep-0593.rst:153
msgid "``Annotated`` can be used with nested and generic aliases::"
msgstr ""

#: ../../pep-0593.rst:162
msgid "Consuming annotations"
msgstr ""

#: ../../pep-0593.rst:164
msgid ""
"Ultimately, the responsibility of how to interpret the annotations (if at"
" all) is the responsibility of the tool or library encountering the "
"``Annotated`` type. A tool or library encountering an ``Annotated`` type "
"can scan through the annotations to determine if they are of interest "
"(e.g., using ``isinstance()``)."
msgstr ""

#: ../../pep-0593.rst:170
msgid ""
"**Unknown annotations:** When a tool or a library does not support "
"annotations or encounters an unknown annotation it should just ignore it "
"and treat annotated type as the underlying type. For example, when "
"encountering an annotation that is not an instance of ``struct2.ctype`` "
"to the annotations for name (e.g., ``Annotated[str, 'foo', "
"struct2.ctype(\"<10s\")]``), the unpack method should ignore it."
msgstr ""

#: ../../pep-0593.rst:177
msgid ""
"**Namespacing annotations:** Namespaces are not needed for annotations "
"since the class used by the annotations acts as a namespace."
msgstr ""

#: ../../pep-0593.rst:180
msgid ""
"**Multiple annotations:** It's up to the tool consuming the annotations "
"to decide whether the client is allowed to have several annotations on "
"one type and how to merge those annotations."
msgstr ""

#: ../../pep-0593.rst:184
msgid ""
"Since the ``Annotated`` type allows you to put several annotations of the"
" same (or different) type(s) on any node, the tools or libraries "
"consuming those annotations are in charge of dealing with potential "
"duplicates. For example, if you are doing value range analysis you might "
"allow this::"
msgstr ""

#: ../../pep-0593.rst:193
msgid "Flattening nested annotations, this translates to::"
msgstr ""

#: ../../pep-0593.rst:198
msgid "Interaction with ``get_type_hints()``"
msgstr ""

#: ../../pep-0593.rst:200
msgid ""
"``typing.get_type_hints()`` will take a new argument ``include_extras`` "
"that defaults to ``False`` to preserve backward compatibility. When "
"``include_extras`` is ``False``, the extra annotations will be stripped "
"out of the returned value. Otherwise, the annotations will be returned "
"unchanged::"
msgstr ""

#: ../../pep-0593.rst:217
msgid "Aliases & Concerns over verbosity"
msgstr ""

#: ../../pep-0593.rst:219
msgid ""
"Writing ``typing.Annotated`` everywhere can be quite verbose; "
"fortunately, the ability to alias annotations means that in practice we "
"don't expect clients to have to write lots of boilerplate code::"
msgstr ""

#: ../../pep-0593.rst:231
msgid "Rejected ideas"
msgstr ""

#: ../../pep-0593.rst:233
msgid ""
"Some of the proposed ideas were rejected from this PEP because they would"
" cause ``Annotated`` to not integrate cleanly with the other typing "
"annotations:"
msgstr ""

#: ../../pep-0593.rst:236
msgid ""
"``Annotated`` cannot infer the decorated type. You could imagine that "
"``Annotated[..., Immutable]`` could be used to mark a value as immutable "
"while still inferring its type. Typing does not support using the "
"inferred type anywhere else [issue-276]_; it's best to not add this as a "
"special case."
msgstr ""

#: ../../pep-0593.rst:242
msgid ""
"Using ``(Type, Ann1, Ann2, ...)`` instead of ``Annotated[Type, Ann1, "
"Ann2, ...]``. This would cause confusion when annotations appear in "
"nested positions (``Callable[[A, B], C]`` is too similar to "
"``Callable[[(A, B)], C]``) and would make it impossible for constructors "
"to be passthrough (``T(5) == C(5)`` when ``C = Annotation[T, Ann]``)."
msgstr ""

#: ../../pep-0593.rst:248
msgid "This feature was left out to keep the design simple:"
msgstr ""

#: ../../pep-0593.rst:250
msgid ""
"``Annotated`` cannot be called with a single argument. Annotated could "
"support returning the underlying value when called with a single argument"
" (e.g.: ``Annotated[int] == int``). This complicates the specifications "
"and adds little benefit."
msgstr ""

#: ../../pep-0593.rst:257
msgid "References"
msgstr ""

#: ../../pep-0593.rst:260
msgid "https://github.com/python/typing/issues/600"
msgstr ""

#: ../../pep-0593.rst:263
msgid "https://mail.python.org/pipermail/python-ideas/2019-January/054908.html"
msgstr ""

#: ../../pep-0593.rst:266
msgid "https://docs.python.org/3/library/struct.html#examples"
msgstr ""

#: ../../pep-0593.rst:269
msgid "http://www.mypy-lang.org/"
msgstr ""

#: ../../pep-0593.rst:272
msgid "https://pyre-check.org/"
msgstr ""

#: ../../pep-0593.rst:275
msgid "https://www.jetbrains.com/pycharm/"
msgstr ""

#: ../../pep-0593.rst:278
msgid "https://github.com/google/pytype"
msgstr ""

#: ../../pep-0593.rst:281
msgid "https://github.com/python/mypy_extensions"
msgstr ""

#: ../../pep-0593.rst:284
msgid "https://en.wikipedia.org/wiki/Tagged_union"
msgstr ""

#: ../../pep-0593.rst:287
msgid "https://mypy.readthedocs.io/en/latest/more_types.html#typeddict"
msgstr ""

#: ../../pep-0593.rst:290
msgid "https://github.com/python/typing/issues/276"
msgstr ""

#: ../../pep-0593.rst:293
msgid "Copyright"
msgstr ""

#: ../../pep-0593.rst:295
msgid "This document has been placed in the public domain."
msgstr ""

