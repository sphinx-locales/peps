# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0298.txt
msgid "PEP"
msgstr ""

#: ../../pep-0298.txt:1
msgid "298"
msgstr ""

#: ../../pep-0298.txt
msgid "Title"
msgstr ""

#: ../../pep-0298.txt:2
msgid "The Locked Buffer Interface"
msgstr ""

#: ../../pep-0298.txt
msgid "Author"
msgstr ""

#: ../../pep-0298.txt:5
msgid "Thomas Heller <theller@python.net>"
msgstr ""

#: ../../pep-0298.txt
msgid "Status"
msgstr ""

#: ../../pep-0298.txt:6
msgid "Withdrawn"
msgstr ""

#: ../../pep-0298.txt
msgid "Type"
msgstr ""

#: ../../pep-0298.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0298.txt
msgid "Created"
msgstr ""

#: ../../pep-0298.txt:9
msgid "26-Jul-2002"
msgstr ""

#: ../../pep-0298.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0298.txt:10
msgid "2.3"
msgstr ""

#: ../../pep-0298.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0298.txt:11
msgid "30-Jul-2002, 1-Aug-2002"
msgstr ""

#: ../../pep-0298.txt:15
msgid "Abstract"
msgstr ""

#: ../../pep-0298.txt:17
msgid ""
"This PEP proposes an extension to the buffer interface called the 'locked"
" buffer interface'."
msgstr ""

#: ../../pep-0298.txt:20
msgid ""
"The locked buffer interface avoids the flaws of the 'old' buffer "
"interface [1]_ as defined in Python versions up to and including 2.2, and"
" has the following semantics:"
msgstr ""

#: ../../pep-0298.txt:24
msgid ""
"The lifetime of the retrieved pointer is clearly defined and controlled "
"by the client."
msgstr ""

#: ../../pep-0298.txt:27
msgid ""
"The buffer size is returned as a 'size_t' data type, which allows access "
"to large buffers on platforms where ``sizeof(int) != sizeof(void *)``."
msgstr ""

#: ../../pep-0298.txt:31
msgid ""
"(Guido comments: This second sounds like a change we could also make to "
"the \"old\" buffer interface, if we introduce another flag bit that's "
"*not* part of the default flags.)"
msgstr ""

#: ../../pep-0298.txt:37
msgid "Specification"
msgstr ""

#: ../../pep-0298.txt:39
msgid ""
"The locked buffer interface exposes new functions which return the size "
"and the pointer to the internal memory block of any python object which "
"chooses to implement this interface."
msgstr ""

#: ../../pep-0298.txt:43
msgid ""
"Retrieving a buffer from an object puts this object in a locked state "
"during which the buffer may not be freed, resized, or reallocated."
msgstr ""

#: ../../pep-0298.txt:47
msgid ""
"The object must be unlocked again by releasing the buffer if it's no "
"longer used by calling another function in the locked buffer interface.  "
"If the object never resizes or reallocates the buffer during its "
"lifetime, this function may be NULL.  Failure to call this function (if "
"it is != NULL) is a programming error and may have unexpected results."
msgstr ""

#: ../../pep-0298.txt:54
msgid ""
"The locked buffer interface omits the memory segment model which is "
"present in the old buffer interface - only a single memory block can be "
"exposed."
msgstr ""

#: ../../pep-0298.txt:58
msgid ""
"The memory blocks can be accessed without holding the global interpreter "
"lock."
msgstr ""

#: ../../pep-0298.txt:63
msgid "Implementation"
msgstr ""

#: ../../pep-0298.txt:65
msgid "Define a new flag in Include/object.h::"
msgstr ""

#: ../../pep-0298.txt:72
msgid "This flag would be included in ``Py_TPFLAGS_DEFAULT``::"
msgstr ""

#: ../../pep-0298.txt:81
msgid "Extend the ``PyBufferProcs`` structure by new fields in Include/object.h::"
msgstr ""

#: ../../pep-0298.txt:102
msgid ""
"The new fields are present if the ``Py_TPFLAGS_HAVE_LOCKEDBUFFER`` flag "
"is set in the object's type."
msgstr ""

#: ../../pep-0298.txt:105
msgid ""
"The ``Py_TPFLAGS_HAVE_LOCKEDBUFFER`` flag implies the "
"``Py_TPFLAGS_HAVE_GETCHARBUFFER`` flag."
msgstr ""

#: ../../pep-0298.txt:108
msgid ""
"The ``acquirelockedreadbufferproc`` and ``acquirelockedwritebufferproc`` "
"functions return the size in bytes of the memory block on success, and "
"fill in the passed void \\* pointer on success.  If these functions fail "
"- either because an error occurs or no memory block is exposed - they "
"must set the void \\* pointer to NULL and raise an exception.  The return"
" value is undefined in these cases and should not be used."
msgstr ""

#: ../../pep-0298.txt:116
msgid ""
"If calls to these functions succeed, eventually the buffer must be "
"released by a call to the ``releaselockedbufferproc``, supplying the "
"original object as argument.  The ``releaselockedbufferproc`` cannot "
"fail.  For objects that actually maintain an internal lock count it would"
" be a fatal error if the ``releaselockedbufferproc`` function would be "
"called too often, leading to a negative lock count."
msgstr ""

#: ../../pep-0298.txt:123
msgid ""
"Similar to the 'old' buffer interface, any of these functions may be set "
"to NULL, but it is strongly recommended to implement the "
"``releaselockedbufferproc`` function (even if it does nothing) if any of "
"the ``acquireread``/``writelockedbufferproc`` functions are implemented, "
"to discourage extension writers from checking for a NULL value and not "
"calling it."
msgstr ""

#: ../../pep-0298.txt:130
msgid ""
"These functions aren't supposed to be called directly, they are called "
"through convenience functions declared in Include/abstract.h::"
msgstr ""

#: ../../pep-0298.txt:144
msgid ""
"The former two functions return 0 on success, set buffer to the memory "
"location and buffer_len to the length of the memory block in bytes. On "
"failure, or if the locked buffer interface is not implemented by obj, "
"they return -1 and set an exception."
msgstr ""

#: ../../pep-0298.txt:149
msgid "The latter function doesn't return anything, and cannot fail."
msgstr ""

#: ../../pep-0298.txt:153
msgid "Backward Compatibility"
msgstr ""

#: ../../pep-0298.txt:155
msgid ""
"The size of the ``PyBufferProcs`` structure changes if this proposal is "
"implemented, but the type's ``tp_flags`` slot can be used to determine if"
" the additional fields are present."
msgstr ""

#: ../../pep-0298.txt:161
msgid "Reference Implementation"
msgstr ""

#: ../../pep-0298.txt:163
msgid ""
"An implementation has been uploaded to the SourceForge patch manager as "
"https://bugs.python.org/issue652857."
msgstr ""

#: ../../pep-0298.txt:168
msgid "Additional Notes/Comments"
msgstr ""

#: ../../pep-0298.txt:170
msgid ""
"Python strings, unicode strings, mmap objects, and array objects would "
"expose the locked buffer interface."
msgstr ""

#: ../../pep-0298.txt:173
msgid ""
"mmap and array objects would actually enter a locked state while the "
"buffer is active, this is not needed for strings and unicode objects.  "
"Resizing locked array objects is not allowed and will raise an exception."
" Whether closing a locked mmap object is an error or will only be "
"deferred until the lock count reaches zero is an implementation detail."
msgstr ""

#: ../../pep-0298.txt:180
msgid "Guido recommends"
msgstr ""

#: ../../pep-0298.txt:182
msgid ""
"But I'm still very concerned that if most built-in types (e.g. strings, "
"bytes) don't implement the release functionality, it's too easy for an "
"extension to seem to work while forgetting to release the buffer."
msgstr ""

#: ../../pep-0298.txt:187
msgid ""
"I recommend that at least some built-in types implement the "
"acquire/release functionality with a counter, and assert that the counter"
" is zero when the object is deleted -- if the assert fails, someone "
"DECREF'ed their reference to the object without releasing it.  (The rule "
"should be that you must own a reference to the object while you've "
"acquired the object.)"
msgstr ""

#: ../../pep-0298.txt:194
msgid ""
"For strings that might be impractical because the string object would "
"have to grow 4 bytes to hold the counter; but the new bytes object (PEP "
"296) could easily implement the counter, and the array object too -- that"
" way there will be plenty of opportunity to test proper use of the "
"protocol."
msgstr ""

#: ../../pep-0298.txt:202
msgid "Community Feedback"
msgstr ""

#: ../../pep-0298.txt:204
msgid ""
"Greg Ewing doubts the locked buffer interface is needed at all, he thinks"
" the normal buffer interface could be used if the pointer is (re)fetched "
"each time it's used.  This seems to be dangerous, because even innocent "
"looking calls to the Python API like ``Py_DECREF()`` may trigger "
"execution of arbitrary Python code."
msgstr ""

#: ../../pep-0298.txt:210
msgid ""
"The first version of this proposal didn't have the release function, but "
"it turned out that this would have been too restrictive: mmap and array "
"objects wouldn't have been able to implement it, because mmap objects can"
" be closed anytime if not locked, and array objects could resize or "
"reallocate the buffer."
msgstr ""

#: ../../pep-0298.txt:216
msgid ""
"This PEP will probably be rejected because nobody except the author needs"
" it."
msgstr ""

#: ../../pep-0298.txt:222
msgid "References"
msgstr ""

#: ../../pep-0298.txt:224
msgid ""
"The buffer interface https://mail.python.org/pipermail/python-"
"dev/2000-October/009974.html"
msgstr ""

#: ../../pep-0298.txt:227
msgid "The Buffer Problem http://www.python.org/dev/peps/pep-0296/"
msgstr ""

#: ../../pep-0298.txt:232
msgid "Copyright"
msgstr ""

#: ../../pep-0298.txt:234
msgid "This document has been placed in the public domain."
msgstr ""

