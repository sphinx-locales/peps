# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0495.txt
msgid "PEP"
msgstr ""

#: ../../pep-0495.txt:1
msgid "495"
msgstr ""

#: ../../pep-0495.txt
msgid "Title"
msgstr ""

#: ../../pep-0495.txt:2
msgid "Local Time Disambiguation"
msgstr ""

#: ../../pep-0495.txt
msgid "Author"
msgstr ""

#: ../../pep-0495.txt:5
msgid ""
"Alexander Belopolsky <alexander.belopolsky@gmail.com>, Tim Peters "
"<tim.peters@gmail.com>"
msgstr ""

#: ../../pep-0495.txt
msgid "Discussions-To"
msgstr ""

#: ../../pep-0495.txt:6
msgid "Datetime-SIG <datetime-sig@python.org>"
msgstr ""

#: ../../pep-0495.txt
msgid "Status"
msgstr ""

#: ../../pep-0495.txt:7
msgid "Final"
msgstr ""

#: ../../pep-0495.txt
msgid "Type"
msgstr ""

#: ../../pep-0495.txt:8
msgid "Standards Track"
msgstr ""

#: ../../pep-0495.txt
msgid "Created"
msgstr ""

#: ../../pep-0495.txt:10
msgid "02-Aug-2015"
msgstr ""

#: ../../pep-0495.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0495.txt:11
msgid "3.6"
msgstr ""

#: ../../pep-0495.txt
msgid "Resolution"
msgstr ""

#: ../../pep-0495.txt:12
msgid "https://mail.python.org/pipermail/datetime-sig/2015-September/000900.html"
msgstr ""

#: ../../pep-0495.txt:16
msgid "Abstract"
msgstr ""

#: ../../pep-0495.txt:18
msgid ""
"This PEP adds a new attribute ``fold`` to instances of the "
"``datetime.time`` and ``datetime.datetime`` classes that can be used to "
"differentiate between two moments in time for which local times are the "
"same.  The allowed values for the ``fold`` attribute will be 0 and 1 with"
" 0 corresponding to the earlier and 1 to the later of the two possible "
"readings of an ambiguous local time."
msgstr ""

#: ../../pep-0495.txt:27
msgid "Rationale"
msgstr ""

#: ../../pep-0495.txt:29
msgid ""
"In most world locations, there have been and will be times when local "
"clocks are moved back. [#]_ In those times, intervals are introduced in "
"which local clocks show the same time twice in the same day.  In these "
"situations, the information displayed on a local clock (or stored in a "
"Python datetime instance) is insufficient to identify a particular moment"
" in time.  The proposed solution is to add an attribute to the "
"``datetime`` instances taking values of 0 and 1 that will enumerate the "
"two ambiguous times."
msgstr ""

#: ../../pep-0495.txt:43
msgid ""
"People who live in locations observing the Daylight Saving Time (DST) "
"move their clocks back (usually one hour) every Fall."
msgstr ""

#: ../../pep-0495.txt:46
msgid ""
"It is less common, but occasionally clocks can be moved back for other "
"reasons.  For example, Ukraine skipped the spring-forward transition in "
"March 1990 and instead, moved their clocks back on July 1, 1990, "
"switching from Moscow Time to Eastern European Time. In that case, "
"standard (winter) time was in effect before and after the transition."
msgstr ""

#: ../../pep-0495.txt:53
msgid ""
"Both DST and standard time changes may result in time shifts other than "
"an hour."
msgstr ""

#: ../../pep-0495.txt:58
msgid "Terminology"
msgstr ""

#: ../../pep-0495.txt:60
msgid ""
"When clocks are moved back, we say that a *fold* [#]_ is created in time."
" When the clocks are moved forward, a *gap* is created.  A local time "
"that falls in the fold is called *ambiguous*.  A local time that falls in"
" the gap is called *missing*."
msgstr ""

#: ../../pep-0495.txt:65
msgid ""
"The term \"fall-backward fold\" was invented in 1990s by Paul Eggert of "
"UCLA who used it in various Internet discussions related to the C "
"language standard that culminated in a `Defect Report #139`_."
msgstr ""

#: ../../pep-0495.txt:74
msgid "Proposal"
msgstr ""

#: ../../pep-0495.txt:77
msgid "The \"fold\" attribute"
msgstr ""

#: ../../pep-0495.txt:79
msgid ""
"We propose adding an attribute called ``fold`` to instances of the "
"``datetime.time`` and ``datetime.datetime`` classes.  This attribute "
"should have the value 0 for all instances except those that represent the"
" second (chronologically) moment in time in an ambiguous case. For those "
"instances, the value will be 1. [#]_"
msgstr ""

#: ../../pep-0495.txt:85
msgid ""
"An instance that has ``fold=1`` in a non-ambiguous case is said to "
"represent an invalid time (or is invalid for short), but users are not "
"prevented from creating invalid instances by passing ``fold=1`` to a "
"constructor or to a ``replace()`` method.  This is similar to the current"
" situation with the instances that fall in the spring-forward gap.  Such "
"instances don't represent any valid time, but neither the constructors "
"nor the ``replace()`` methods check whether the instances that they "
"produce are valid.  Moreover, this PEP specifies how various functions "
"should behave when given an invalid instance."
msgstr ""

#: ../../pep-0495.txt:98
msgid "Affected APIs"
msgstr ""

#: ../../pep-0495.txt:101
msgid "Attributes"
msgstr ""

#: ../../pep-0495.txt:103
msgid ""
"Instances of ``datetime.time`` and ``datetime.datetime`` classes will get"
" a new attribute ``fold`` with two possible values: 0 and 1."
msgstr ""

#: ../../pep-0495.txt:107
msgid "Constructors"
msgstr ""

#: ../../pep-0495.txt:109
msgid ""
"The ``__new__`` methods of the ``datetime.time`` and "
"``datetime.datetime`` classes will get a new keyword-only argument called"
" ``fold`` with the default value 0.  The value of the ``fold`` argument "
"will be used to initialize the value of the ``fold`` attribute in the "
"returned instance."
msgstr ""

#: ../../pep-0495.txt:116
msgid "Methods"
msgstr ""

#: ../../pep-0495.txt:118
msgid ""
"The ``replace()`` methods of the ``datetime.time`` and "
"``datetime.datetime`` classes will get a new keyword-only argument called"
" ``fold``.  It will behave similarly to the other ``replace()`` "
"arguments: if the ``fold`` argument is specified and given a value 0 or "
"1, the new instance returned by ``replace()`` will have its ``fold`` "
"attribute set to that value.  In CPython, any non-integer value of "
"``fold`` will raise a ``TypeError``, but other implementations may allow "
"the value ``None`` to behave the same as when ``fold`` is not given. [#]_"
"  (This is a nod to the existing difference in treatment of ``None`` "
"arguments in other positions of this method across Python "
"implementations; it is not intended to leave the door open for future "
"alternative interpretation of ``fold=None``.)  If the ``fold`` argument "
"is not specified, the original value of the ``fold`` attribute is copied "
"to the result."
msgstr ""

#: ../../pep-0495.txt:134
msgid ""
"PyPy and pure Python implementation distributed with CPython already "
"allow ``None`` to mean \"no change to existing attribute\" for all other "
"attributes in ``replace()``."
msgstr ""

#: ../../pep-0495.txt:139
msgid "C-API"
msgstr ""

#: ../../pep-0495.txt:141
msgid ""
"Access macros will be defined to extract the value of ``fold`` from "
"``PyDateTime_DateTime`` and ``PyDateTime_Time`` objects."
msgstr ""

#: ../../pep-0495.txt:148 ../../pep-0495.txt:154
msgid "Return the value of ``fold`` as a C ``int``."
msgstr ""

#: ../../pep-0495.txt:156
msgid ""
"New constructors will be defined that will take an additional argument to"
" specify the value of ``fold`` in the created instance:"
msgstr ""

#: ../../pep-0495.txt:166
msgid ""
"Return a ``datetime.datetime`` object with the specified year, month, "
"day, hour, minute, second, microsecond and fold."
msgstr ""

#: ../../pep-0495.txt:174
msgid ""
"Return a ``datetime.time`` object with the specified hour, minute, "
"second, microsecond and fold."
msgstr ""

#: ../../pep-0495.txt:179
msgid "Affected Behaviors"
msgstr ""

#: ../../pep-0495.txt:182
msgid "What time is it?"
msgstr ""

#: ../../pep-0495.txt:184
msgid ""
"The ``datetime.now()`` method called without arguments will set "
"``fold=1`` when returning the second of the two ambiguous times in a "
"system local time fold.  When called with a ``tzinfo`` argument, the "
"value of the ``fold`` will be determined by the ``tzinfo.fromutc()`` "
"implementation.  When an instance of the ``datetime.timezone`` class (the"
" stdlib's fixed-offset ``tzinfo`` subclass, *e.g.* "
"``datetime.timezone.utc``) is passed as ``tzinfo``, the returned datetime"
" instance will always have ``fold=0``. The ``datetime.utcnow()`` method "
"is unaffected."
msgstr ""

#: ../../pep-0495.txt:196
msgid "Conversion from naive to aware"
msgstr ""

#: ../../pep-0495.txt:198
msgid ""
"A new feature is proposed to facilitate conversion from naive datetime "
"instances to aware."
msgstr ""

#: ../../pep-0495.txt:201
msgid ""
"The ``astimezone()`` method will now work for naive ``self``.  The system"
" local timezone will be assumed in this case and the ``fold`` flag will "
"be used to determine which local timezone is in effect in the ambiguous "
"case."
msgstr ""

#: ../../pep-0495.txt:206 ../../pep-0495.txt:226 ../../pep-0495.txt:253
#: ../../pep-0495.txt:278
msgid "For example, on a system set to US/Eastern timezone::"
msgstr ""

#: ../../pep-0495.txt:214
msgid ""
"An implication is that ``datetime.now(tz)`` is fully equivalent to "
"``datetime.now().astimezone(tz)`` (assuming ``tz`` is an instance of a "
"post-PEP ``tzinfo`` implementation, i.e. one that correctly handles and "
"sets ``fold``)."
msgstr ""

#: ../../pep-0495.txt:221
msgid "Conversion from POSIX seconds from EPOCH"
msgstr ""

#: ../../pep-0495.txt:223
msgid ""
"The ``fromtimestamp()`` static method of ``datetime.datetime`` will set "
"the ``fold`` attribute appropriately in the returned object."
msgstr ""

#: ../../pep-0495.txt:235
msgid "Conversion to POSIX seconds from EPOCH"
msgstr ""

#: ../../pep-0495.txt:237
msgid ""
"The ``timestamp()`` method of ``datetime.datetime`` will return different"
" values for ``datetime.datetime`` instances that differ only by the value"
" of their ``fold`` attribute if and only if these instances represent an "
"ambiguous or a missing time."
msgstr ""

#: ../../pep-0495.txt:242
msgid ""
"When a ``datetime.datetime`` instance ``dt`` represents an ambiguous "
"time, there are two values ``s0`` and ``s1`` such that::"
msgstr ""

#: ../../pep-0495.txt:247
msgid "(This is because ``==`` disregards the value of fold -- see below.)"
msgstr ""

#: ../../pep-0495.txt:249
msgid ""
"In this case, ``dt.timestamp()`` will return the smaller of ``s0`` and "
"``s1`` values if ``dt.fold == 0`` and the larger otherwise."
msgstr ""

#: ../../pep-0495.txt:260
msgid ""
"When a ``datetime.datetime`` instance ``dt`` represents a missing time, "
"there is no value ``s`` for which::"
msgstr ""

#: ../../pep-0495.txt:265
msgid ""
"but we can form two \"nice to know\" values of ``s`` that differ by the "
"size of the gap in seconds.  One is the value of ``s`` that would "
"correspond to ``dt`` in a timezone where the UTC offset is always the "
"same as the offset right before the gap and the other is the similar "
"value but in a timezone the  UTC offset is always the same as the offset "
"right after the gap."
msgstr ""

#: ../../pep-0495.txt:272
msgid ""
"The value returned by ``dt.timestamp()`` given a missing ``dt`` will be "
"the greater of the two \"nice to know\" values if ``dt.fold == 0`` and "
"the smaller otherwise. (This is not a typo -- it's intentionally "
"backwards from the rule for ambiguous times.)"
msgstr ""

#: ../../pep-0495.txt:287
msgid "Aware datetime instances"
msgstr ""

#: ../../pep-0495.txt:289
msgid ""
"Users of pre-PEP implementations of ``tzinfo`` will not see any changes "
"in the behavior of their aware datetime instances.  Two such instances "
"that differ only by the value of the ``fold`` attribute will not be "
"distinguishable by any means other than an explicit access to the "
"``fold`` value.  (This is because these pre-PEP implementations are not "
"using the ``fold`` attribute.)"
msgstr ""

#: ../../pep-0495.txt:296
msgid ""
"On the other hand, if an object's ``tzinfo`` is set to a fold-aware "
"implementation, then in a fold or gap the value of ``fold`` will affect "
"the result of several methods: ``utcoffset()``, ``dst()``, ``tzname()``, "
"``astimezone()``, ``strftime()`` (if the \"%Z\" or \"%z\" directive is "
"used in the format specification), ``isoformat()``, and ``timetuple()``."
msgstr ""

#: ../../pep-0495.txt:305
msgid "Combining and splitting date and time"
msgstr ""

#: ../../pep-0495.txt:307
msgid ""
"The ``datetime.datetime.combine()`` method will copy the value of the "
"``fold`` attribute to the resulting ``datetime.datetime`` instance."
msgstr ""

#: ../../pep-0495.txt:310
msgid ""
"The ``datetime.datetime.time()`` method will copy the value of the "
"``fold`` attribute to the resulting ``datetime.time`` instance."
msgstr ""

#: ../../pep-0495.txt:315
msgid "Pickles"
msgstr ""

#: ../../pep-0495.txt:317
msgid ""
"The value of the fold attribute will only be saved in pickles created "
"with protocol version 4 (introduced in Python 3.4) or greater."
msgstr ""

#: ../../pep-0495.txt:320
msgid ""
"Pickle sizes for the ``datetime.datetime`` and ``datetime.time`` objects "
"will not change.  The ``fold`` value will be encoded in the first bit of "
"the 3rd byte of the ``datetime.datetime`` pickle payload; and in the "
"first bit of the 1st byte of the ``datetime.time`` payload.  In the "
"`current implementation`_ these bytes are used to store the month (1-12) "
"and hour (0-23) values and the first bit is always 0.  We picked these "
"bytes because they are the only bytes that are checked by the current "
"unpickle code.  Thus loading post-PEP ``fold=1`` pickles in a pre-PEP "
"Python will result in an exception rather than an instance with out of "
"range components."
msgstr ""

#: ../../pep-0495.txt:335
msgid "Implementations of tzinfo in the Standard Library"
msgstr ""

#: ../../pep-0495.txt:337
msgid ""
"No new implementations of ``datetime.tzinfo`` abstract class are proposed"
" in this PEP.  The existing (fixed offset) timezones do not introduce "
"ambiguous local times and their ``utcoffset()`` implementation will "
"return the same constant value as they do now regardless of the value of "
"``fold``."
msgstr ""

#: ../../pep-0495.txt:343
msgid ""
"The basic implementation of ``fromutc()`` in the abstract "
"``datetime.tzinfo`` class will not change.  It is currently not used "
"anywhere in the stdlib because the only included ``tzinfo`` "
"implementation (the ``datetime.timezone`` class implementing fixed offset"
" timezones) overrides ``fromutc()``.  Keeping the default implementation "
"unchanged has the benefit that pre-PEP 3rd party implementations that "
"inherit the default ``fromutc()`` are not accidentally affected."
msgstr ""

#: ../../pep-0495.txt:354
msgid "Guidelines for New tzinfo Implementations"
msgstr ""

#: ../../pep-0495.txt:356
msgid ""
"Implementors of concrete ``datetime.tzinfo`` subclasses who want to "
"support variable UTC offsets (due to DST and other causes) should follow "
"these guidelines."
msgstr ""

#: ../../pep-0495.txt:362
msgid "Ignorance is Bliss"
msgstr ""

#: ../../pep-0495.txt:364
msgid ""
"New implementations of ``utcoffset()``, ``tzname()`` and ``dst()`` "
"methods should ignore the value of ``fold`` unless they are called on the"
" ambiguous or missing times."
msgstr ""

#: ../../pep-0495.txt:370
msgid "In the Fold"
msgstr ""

#: ../../pep-0495.txt:372
msgid ""
"New subclasses should override the base-class ``fromutc()`` method and "
"implement it so that in all cases where two different UTC times ``u0`` "
"and ``u1`` (``u0`` <``u1``) correspond to the same local time ``t``, "
"``fromutc(u0)`` will return an instance with ``fold=0`` and "
"``fromutc(u1)`` will return an instance with ``fold=1``.  In all other "
"cases the returned instance should have ``fold=0``."
msgstr ""

#: ../../pep-0495.txt:379
msgid ""
"The ``utcoffset()``, ``tzname()`` and ``dst()`` methods should use the "
"value of the fold attribute to determine whether an otherwise ambiguous "
"time ``t`` corresponds to the time before or after the transition.  By "
"definition, ``utcoffset()`` is greater before and smaller after any "
"transition that creates a fold.  The values returned by ``tzname()`` and "
"``dst()`` may or may not depend on the value of the ``fold`` attribute "
"depending on the kind of the transition."
msgstr ""

#: ../../pep-0495.txt:391
msgid ""
"The sketch above illustrates the relationship between the UTC and local "
"time around a fall-back transition.  The zig-zag line is a graph of the "
"function implemented by ``fromutc()``.  Two intervals on the UTC axis "
"adjacent to the transition point and having the size of the time shift at"
" the transition are mapped to the same interval on the local axis.  New "
"implementations of ``fromutc()`` method should set the fold attribute to "
"1 when ``self`` is in the region marked in yellow on the UTC axis.  (All "
"intervals should be treated as closed on the left and open on the right.)"
msgstr ""

#: ../../pep-0495.txt:403
msgid "Mind the Gap"
msgstr ""

#: ../../pep-0495.txt:405
msgid "The ``fromutc()`` method should never produce a time in the gap."
msgstr ""

#: ../../pep-0495.txt:407
msgid ""
"If the ``utcoffset()``, ``tzname()`` or ``dst()`` method is called on a "
"local time that falls in a gap, the rules in effect before the transition"
" should be used if ``fold=0``.  Otherwise, the rules in effect after the "
"transition should be used."
msgstr ""

#: ../../pep-0495.txt:416
msgid ""
"The sketch above illustrates the relationship between the UTC and local "
"time around a spring-forward transition.  At the transition, the local "
"clock is advanced skipping the times in the gap.  For the purposes of "
"determining the values of ``utcoffset()``, ``tzname()`` and ``dst()``, "
"the line before the transition is extended forward to find the UTC time "
"corresponding to the time in the gap with ``fold=0`` and for instances "
"with ``fold=1``, the line after the transition is extended back."
msgstr ""

#: ../../pep-0495.txt:426
msgid "Summary of Rules at a Transition"
msgstr ""

#: ../../pep-0495.txt:428
msgid ""
"On ambiguous/missing times ``utcoffset()`` should return values according"
" to the following table:"
msgstr ""

#: ../../pep-0495.txt:432 ../../pep-0495.txt:457 ../../pep-0495.txt:469
msgid "fold=0"
msgstr ""

#: ../../pep-0495.txt:432 ../../pep-0495.txt:457 ../../pep-0495.txt:469
msgid "fold=1"
msgstr ""

#: ../../pep-0495.txt:434
msgid "Fold"
msgstr ""

#: ../../pep-0495.txt:434 ../../pep-0495.txt:436
msgid "oldoff"
msgstr ""

#: ../../pep-0495.txt:434
msgid "newoff = oldoff - delta"
msgstr ""

#: ../../pep-0495.txt:436
msgid "Gap"
msgstr ""

#: ../../pep-0495.txt:436
msgid "newoff = oldoff + delta"
msgstr ""

#: ../../pep-0495.txt:439
msgid ""
"where ``oldoff`` (``newoff``) is the UTC offset before (after) the "
"transition and ``delta`` is the absolute size of the fold or the gap."
msgstr ""

#: ../../pep-0495.txt:442
msgid ""
"Note that the interpretation of the fold attribute is consistent in the "
"fold and gap cases.  In both cases, ``fold=0`` (``fold=1``) means use "
"``fromutc()`` line before (after) the transition to find the UTC time.  "
"Only in the \"Fold\" case, the UTC times ``u0`` and ``u1`` are \"real\" "
"solutions for the equation ``fromutc(u) == t``, while in the \"Gap\" case"
" they are \"imaginary\" solutions."
msgstr ""

#: ../../pep-0495.txt:451
msgid "The DST Transitions"
msgstr ""

#: ../../pep-0495.txt:453
msgid ""
"On a missing time introduced at the start of DST, the values returned by "
"``utcoffset()`` and ``dst()`` methods should be as follows"
msgstr ""

#: ../../pep-0495.txt:459 ../../pep-0495.txt:471
msgid "utcoffset()"
msgstr ""

#: ../../pep-0495.txt:459 ../../pep-0495.txt:471
msgid "stdoff"
msgstr ""

#: ../../pep-0495.txt:459 ../../pep-0495.txt:471
msgid "stdoff + dstoff"
msgstr ""

#: ../../pep-0495.txt:461 ../../pep-0495.txt:473
msgid "dst()"
msgstr ""

#: ../../pep-0495.txt:461 ../../pep-0495.txt:473
msgid "zero"
msgstr ""

#: ../../pep-0495.txt:461 ../../pep-0495.txt:473
msgid "dstoff"
msgstr ""

#: ../../pep-0495.txt:465
msgid ""
"On an ambiguous time introduced at the end of DST, the values returned by"
" ``utcoffset()`` and ``dst()`` methods should be as follows"
msgstr ""

#: ../../pep-0495.txt:476
msgid ""
"where ``stdoff`` is the standard (non-DST) offset, ``dstoff`` is the DST "
"correction (typically ``dstoff = timedelta(hours=1)``) and ``zero = "
"timedelta(0)``."
msgstr ""

#: ../../pep-0495.txt:482
msgid "Temporal Arithmetic and Comparison Operators"
msgstr ""

#: ../../pep-0495.txt
msgid "In *mathematicks* he was greater"
msgstr ""

#: ../../pep-0495.txt
msgid "Than Tycho Brahe, or Erra Pater:"
msgstr ""

#: ../../pep-0495.txt
msgid "For he, by geometric scale,"
msgstr ""

#: ../../pep-0495.txt
msgid "Could take the size of pots of ale;"
msgstr ""

#: ../../pep-0495.txt
msgid "Resolve, by sines and tangents straight,"
msgstr ""

#: ../../pep-0495.txt
msgid "If bread or butter wanted weight,"
msgstr ""

#: ../../pep-0495.txt
msgid "And wisely tell what hour o' th' day"
msgstr ""

#: ../../pep-0495.txt
msgid "The clock does strike by algebra."
msgstr ""

#: ../../pep-0495.txt:495
msgid "-- \"Hudibras\" by Samuel Butler"
msgstr ""

#: ../../pep-0495.txt:497
msgid ""
"The value of the ``fold`` attribute will be ignored in all operations "
"with naive datetime instances.  As a consequence, naive "
"``datetime.datetime`` or ``datetime.time`` instances that differ only by "
"the value of ``fold`` will compare as equal.  Applications that need to "
"differentiate between such instances should check the value of ``fold`` "
"explicitly or convert those instances to a timezone that does not have "
"ambiguous times (such as UTC)."
msgstr ""

#: ../../pep-0495.txt:505
msgid ""
"The value of ``fold`` will also be ignored whenever a timedelta is added "
"to or subtracted from a datetime instance which may be either aware or "
"naive.  The result of addition (subtraction) of a timedelta to (from) a "
"datetime will always have ``fold`` set to 0 even if the original datetime"
" instance had ``fold=1``."
msgstr ""

#: ../../pep-0495.txt:511
msgid ""
"No changes are proposed to the way the difference ``t - s`` is computed "
"for datetime instances ``t`` and ``s``.  If both instances are naive or "
"``t.tzinfo`` is the same instance as ``s.tzinfo`` (``t.tzinfo is "
"s.tzinfo`` evaluates to ``True``) then ``t - s`` is a timedelta ``d`` "
"such that ``s + d == t``.  As explained in the previous paragraph, "
"timedelta addition ignores both ``fold`` and ``tzinfo`` attributes and so"
" does intra-zone or naive datetime subtraction."
msgstr ""

#: ../../pep-0495.txt:520
msgid ""
"Naive and intra-zone comparisons will ignore the value of ``fold`` and "
"return the same results as they do now.  (This is the only way to "
"preserve backward compatibility.  If you need an aware intra-zone "
"comparison that uses the fold, convert both sides to UTC first.)"
msgstr ""

#: ../../pep-0495.txt:525
msgid ""
"The inter-zone subtraction will be defined as it is now: ``t - s`` is "
"computed as ``(t - t.utcoffset()) - (s - "
"s.utcoffset()).replace(tzinfo=t.tzinfo)``, but the result will depend on "
"the values of ``t.fold`` and ``s.fold`` when either ``t.tzinfo`` or "
"``s.tzinfo`` is post-PEP. [#]_"
msgstr ""

#: ../../pep-0495.txt:531
msgid ""
"Note that the new rules may result in a paradoxical situation when ``s =="
" t`` but ``s - u != t - u``.  Such paradoxes are not really new and are "
"inherent in the overloading of the minus operator differently for intra- "
"and inter-zone operations.  For example, one can easily construct "
"datetime instances ``t`` and ``s`` with some variable offset ``tzinfo`` "
"and a datetime ``u`` with ``tzinfo=timezone.utc`` such that ``(t - u) - "
"(s - u) != t - s``. The explanation for this paradox is that the minuses "
"inside the parentheses and the two other minuses are really three "
"different operations: inter-zone datetime subtraction, timedelta "
"subtraction, and intra-zone datetime subtraction, which each have the "
"mathematical properties of subtraction separately, but not when combined "
"in a single expression."
msgstr ""

#: ../../pep-0495.txt:547
msgid "Aware datetime Equality Comparison"
msgstr ""

#: ../../pep-0495.txt:549
msgid ""
"The aware datetime comparison operators will work the same as they do "
"now, with results indirectly affected by the value of ``fold`` whenever "
"the ``utcoffset()`` value of one of the operands depends on it, with one "
"exception.  Whenever one or both of the operands in inter-zone comparison"
" is such that its ``utcoffset()`` depends on the value of its ``fold`` "
"fold attribute, the result is ``False``. [#]_"
msgstr ""

#: ../../pep-0495.txt:556
msgid ""
"This exception is designed to preserve the hash and equivalence "
"invariants in the face of paradoxes of inter-zone arithmetic."
msgstr ""

#: ../../pep-0495.txt:559
msgid ""
"Formally, ``t == s`` when ``t.tzinfo is s.tzinfo`` evaluates to ``False``"
" can be defined as follows.  Let ``toutc(t, fold)`` be a function that "
"takes an aware datetime instance ``t`` and returns a naive instance "
"representing the same time in UTC assuming a given value of ``fold``:"
msgstr ""

#: ../../pep-0495.txt:571
msgid "Then ``t == s`` is equivalent to"
msgstr ""

#: ../../pep-0495.txt:579
msgid "Backward and Forward Compatibility"
msgstr ""

#: ../../pep-0495.txt:581
msgid ""
"This proposal will have little effect on the programs that do not read "
"the ``fold`` flag explicitly or use tzinfo implementations that do. The "
"only visible change for such programs will be that conversions to and "
"from POSIX timestamps will now round-trip correctly (up to floating point"
" rounding).  Programs that implemented a work-around to the old incorrect"
" behavior may need to be modified."
msgstr ""

#: ../../pep-0495.txt:588
msgid ""
"Pickles produced by older programs will remain fully forward compatible."
"  Only datetime/time instances with ``fold=1`` pickled in the new "
"versions will become unreadable by the older Python versions.  Pickles of"
" instances with ``fold=0`` (which is the default) will remain unchanged."
msgstr ""

#: ../../pep-0495.txt:596
msgid "Questions and Answers"
msgstr ""

#: ../../pep-0495.txt:599
msgid "Why not call the new flag \"isdst\"?"
msgstr ""

#: ../../pep-0495.txt:602
msgid "A non-technical answer"
msgstr ""

#: ../../pep-0495.txt:604
msgid "Alice: Bob - let's have a stargazing party at 01:30 AM tomorrow!"
msgstr ""

#: ../../pep-0495.txt:605
msgid ""
"Bob: Should I presume initially that Daylight Saving Time is or is not in"
" effect for the specified time?"
msgstr ""

#: ../../pep-0495.txt:607
msgid "Alice: Huh?"
msgstr ""

#: ../../pep-0495.txt:611
msgid "Bob: Alice - let's have a stargazing party at 01:30 AM tomorrow!"
msgstr ""

#: ../../pep-0495.txt:612
msgid ""
"Alice: You know, Bob, 01:30 AM will happen twice tomorrow. Which time do "
"you have in mind?"
msgstr ""

#: ../../pep-0495.txt:613
msgid "Bob:  I did not think about it, but let's pick the first."
msgstr ""

#: ../../pep-0495.txt:617
msgid "(same characters, an hour later)"
msgstr ""

#: ../../pep-0495.txt:621
msgid ""
"Bob: Alice - this Py-O-Clock gadget of mine asks me to choose between "
"fold=0 and fold=1 when I set it for tomorrow 01:30 AM. What should I do?"
msgstr ""

#: ../../pep-0495.txt:624
msgid ""
"Alice: I've never hear of a Py-O-Clock, but I guess fold=0 is the first "
"01:30 AM and fold=1 is the second."
msgstr ""

#: ../../pep-0495.txt:629
msgid "A technical reason"
msgstr ""

#: ../../pep-0495.txt:631
msgid ""
"While the ``tm_isdst`` field of the ``time.struct_time`` object can be "
"used to disambiguate local times in the fold, the semantics of such "
"disambiguation are completely different from the proposal in this PEP."
msgstr ""

#: ../../pep-0495.txt:635
msgid ""
"The main problem with the ``tm_isdst`` field is that it is impossible to "
"know what value is appropriate for ``tm_isdst`` without knowing the "
"details about the time zone that are only available to the ``tzinfo`` "
"implementation.  Thus while ``tm_isdst`` is useful in the *output* of "
"methods such as ``time.localtime``, it is cumbersome as an *input* of "
"methods such as ``time.mktime``."
msgstr ""

#: ../../pep-0495.txt:642
msgid ""
"If the programmer misspecified a non-negative value of ``tm_isdst`` to "
"``time.mktime``, the result will be time that is 1 hour off and since "
"there is rarely a way to know anything about DST *before* a call to "
"``time.mktime`` is made, the only sane choice is usually ``tm_isdst=-1``."
msgstr ""

#: ../../pep-0495.txt:648
msgid ""
"Unlike ``tm_isdst``, the proposed ``fold`` attribute has no effect on the"
" interpretation of the datetime instance unless without that attribute "
"two (or no) interpretations are possible."
msgstr ""

#: ../../pep-0495.txt:652
msgid ""
"Since it would be very confusing to have something called ``isdst`` that "
"does not have the same semantics as ``tm_isdst``, we need a different "
"name.  Moreover, the ``datetime.datetime`` class already has a method "
"called ``dst()`` and if we called ``fold`` \"isdst\", we would "
"necessarily have situations when \"isdst\" is zero but ``dst()`` is not "
"or the other way around."
msgstr ""

#: ../../pep-0495.txt:660
msgid "Why \"fold\"?"
msgstr ""

#: ../../pep-0495.txt:662
msgid ""
"Suggested by Guido van Rossum and favored by one (but initially "
"disfavored by another) author.  A consensus was reached after the allowed"
" values for the attribute were changed from False/True to 0/1. The noun "
"\"fold\" has correct connotations and easy mnemonic rules, but at the "
"same time does not invite unbased assumptions."
msgstr ""

#: ../../pep-0495.txt:670
msgid "What is \"first\"?"
msgstr ""

#: ../../pep-0495.txt:672
msgid ""
"This was a working name of the attribute chosen initially because the "
"obvious alternative (\"second\") conflicts with the existing attribute. "
"It was rejected mostly on the grounds that it would make True a default "
"value."
msgstr ""

#: ../../pep-0495.txt:677
msgid "The following alternative names have also been considered:"
msgstr ""

#: ../../pep-0495.txt:687
msgid "**later**"
msgstr ""

#: ../../pep-0495.txt:680
msgid ""
"A close contender to \"fold\".  One author dislikes it because it is "
"confusable with equally fitting \"latter,\" but in the age of auto-"
"completion everywhere this is a small consideration.  A stronger "
"objection may be that in the case of missing time, we will have "
"``later=True`` instance converted to an earlier time by "
"``.astimezone(timezone.utc)`` that that with ``later=False``. Yet again, "
"this can be interpreted as a desirable indication that the original time "
"is invalid."
msgstr ""

#: ../../pep-0495.txt:692
msgid "**which**"
msgstr ""

#: ../../pep-0495.txt:690
msgid ""
"The `original`_ placeholder name for the `localtime` function branch "
"index was `independently proposed`_ for the name of the disambiguation "
"attribute and received `some support`_."
msgstr ""

#: ../../pep-0495.txt:695
msgid "**repeated**"
msgstr ""

#: ../../pep-0495.txt:695
msgid "Did not receive any support on the mailing list."
msgstr ""

#: ../../pep-0495.txt:701
msgid "**ltdf**"
msgstr ""

#: ../../pep-0495.txt:698
msgid ""
"(Local Time Disambiguation Flag) - short and no-one will attempt to guess"
" what it means without reading the docs.  (This abbreviation was used in "
"PEP discussions with the meaning ``ltdf=False`` is the earlier by those "
"who didn't want to endorse any of the alternatives.)"
msgstr ""

#: ../../pep-0495.txt:708
msgid "Are two values enough?"
msgstr ""

#: ../../pep-0495.txt:710
msgid ""
"Several reasons have been raised to allow a ``None`` or -1 value for the "
"``fold`` attribute: backward compatibility, analogy with ``tm_isdst`` and"
" strict checking for invalid times."
msgstr ""

#: ../../pep-0495.txt:716
msgid "Backward Compatibility"
msgstr ""

#: ../../pep-0495.txt:718
msgid ""
"It has been suggested that backward compatibility can be improved if the "
"default value of the ``fold`` flag was ``None`` which would signal that "
"pre-PEP behavior is requested.  Based on the analysis below, we believe "
"that the proposed changes with the ``fold=0`` default are sufficiently "
"backward compatible."
msgstr ""

#: ../../pep-0495.txt:724
msgid ""
"This PEP provides only three ways for a program to discover that two "
"otherwise identical datetime instances have different values of ``fold``:"
" (1) an explicit check of the ``fold`` attribute; (2) if the instances "
"are naive - conversion to another timezone using the ``astimezone()`` "
"method; and (3) conversion to ``float`` using the ``timestamp()`` method."
msgstr ""

#: ../../pep-0495.txt:731
msgid ""
"Since ``fold`` is a new attribute, the first option is not available to "
"the existing programs.  Note that option (2) only works for naive "
"datetimes that happen to be in a fold or a gap in the system time zone.  "
"In all other cases, the value of ``fold`` will be ignored in the "
"conversion unless the instances use a ``fold``-aware ``tzinfo`` which "
"would not be available in a pre-PEP program.  Similarly, the "
"``astimezone()`` called on a naive instance will not be available in such"
" program because ``astimezone()`` does not currently work with naive "
"datetimes."
msgstr ""

#: ../../pep-0495.txt:741
msgid ""
"This leaves us with only one situation where an existing program can "
"start producing different results after the implementation of this PEP: "
"when a ``datetime.timestamp()`` method is called on a naive datetime "
"instance that happen to be in the fold or the gap.  In the current "
"implementation, the result is undefined.  Depending on the system "
"``mktime`` implementation, the programs can see different results or "
"errors in those cases.  With this PEP in place, the value of timestamp "
"will be well-defined in those cases but will depend on the value of the "
"``fold`` flag.  We consider the change in ``datetime.timestamp()`` method"
" behavior a bug fix enabled by this PEP.  The old behavior can still be "
"emulated by the users who depend on it by writing "
"``time.mktime(dt.timetuple()) + 1e-6*dt.microsecond`` instead of "
"``dt.timestamp()``."
msgstr ""

#: ../../pep-0495.txt:757
msgid "Analogy with tm_isdst"
msgstr ""

#: ../../pep-0495.txt:759
msgid ""
"The ``time.mktime`` interface allows three values for the ``tm_isdst`` "
"flag: -1, 0, and 1.  As we explained above, -1 (asking ``mktime`` to "
"determine whether DST is in effect for the given time from the rest of "
"the fields) is the only choice that is useful in practice."
msgstr ""

#: ../../pep-0495.txt:764
#, python-format
msgid ""
"With the ``fold`` flag, however, ``datetime.timestamp()`` will return the"
" same value as ``mktime`` with ``tm_isdst=-1`` in 99.98% of the time for "
"most time zones with DST transitions.  Moreover, ``tm_isdst=-1``-like "
"behavior is specified *regardless* of the value of ``fold``."
msgstr ""

#: ../../pep-0495.txt:770
#, python-format
msgid ""
"It is only in the 0.02% cases (2 hours per year) that the "
"``datetime.timestamp()`` and ``mktime`` with ``tm_isdst=-1`` may "
"disagree.  However, even in this case, most of the ``mktime`` "
"implementations will return the ``fold=0`` or the ``fold=1`` value even "
"though relevant standards allow ``mktime`` to return -1 and set an error "
"code in those cases."
msgstr ""

#: ../../pep-0495.txt:777
msgid ""
"In other words, ``tm_isdst=-1`` behavior is not missing from this PEP. To"
" the contrary, it is the only behavior provided in two different well-"
"defined flavors.  The behavior that is missing is when a given local hour"
" is interpreted as a different local hour because of the misspecified "
"``tm_isdst``."
msgstr ""

#: ../../pep-0495.txt:783
msgid ""
"For example, in the DST-observing time zones in the Northern hemisphere "
"(where DST is in effect in June) one can get"
msgstr ""

#: ../../pep-0495.txt:793
msgid ""
"Note that 12:00 was interpreted as 13:00 by ``mktime``.  With the "
"``datetime.timestamp``, ``datetime.fromtimestamp``, it is currently "
"guaranteed that"
msgstr ""

#: ../../pep-0495.txt:803
msgid "This PEP extends the same guarantee to both values of ``fold``:"
msgstr ""

#: ../../pep-0495.txt:817
msgid ""
"Thus one of the suggested uses for ``fold=-1`` -- to match the legacy "
"behavior -- is not needed.  Either choice of ``fold`` will match the old "
"behavior except in the few cases where the old behavior was undefined."
msgstr ""

#: ../../pep-0495.txt:824
msgid "Strict Invalid Time Checking"
msgstr ""

#: ../../pep-0495.txt:826
msgid ""
"Another suggestion was to use ``fold=-1`` or ``fold=None`` to indicate "
"that the program truly has no means to deal with the folds and gaps and "
"``dt.utcoffset()`` should raise an error whenever ``dt`` represents an "
"ambiguous or missing local time."
msgstr ""

#: ../../pep-0495.txt:831
msgid ""
"The main problem with this proposal, is that ``dt.utcoffset()`` is used "
"internally in situations where raising an error is not an option: for "
"example, in dictionary lookups or list/set membership checks.  So strict "
"gap/fold checking behavior would need to be controlled by a separate "
"flag, say ``dt.utcoffset(raise_on_gap=True, raise_on_fold=False)``.  "
"However, this functionality can be easily implemented in user code:"
msgstr ""

#: ../../pep-0495.txt:854
msgid ""
"Moreover, raising an error in the problem cases is only one of many "
"possible solutions.  An interactive program can ask the user for "
"additional input, while a server process may log a warning and take an "
"appropriate default action.  We cannot possibly provide functions for all"
" possible user requirements, but this PEP provides the means to implement"
" any desired behavior in a few lines of code."
msgstr ""

#: ../../pep-0495.txt:863
msgid "Implementation"
msgstr ""

#: ../../pep-0495.txt:865
msgid "Github fork: https://github.com/abalkin/cpython/tree/issue24773-s3"
msgstr ""

#: ../../pep-0495.txt:866
msgid "Tracker issue: http://bugs.python.org/issue24773"
msgstr ""

#: ../../pep-0495.txt:870
msgid "Copyright"
msgstr ""

#: ../../pep-0495.txt:872
msgid "This document has been placed in the public domain."
msgstr ""

#: ../../pep-0495.txt:876
msgid "Picture Credit"
msgstr ""

#: ../../pep-0495.txt:878
msgid ""
"This image is a work of a U.S. military or Department of Defense "
"employee, taken or made as part of that person's official duties. As a "
"work of the U.S. federal government, the image is in the public domain."
msgstr ""

