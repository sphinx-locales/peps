# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0626.rst
msgid "PEP"
msgstr ""

#: ../../pep-0626.rst:1
msgid "626"
msgstr ""

#: ../../pep-0626.rst
msgid "Title"
msgstr ""

#: ../../pep-0626.rst:2
msgid "Precise line numbers for debugging and other tools."
msgstr ""

#: ../../pep-0626.rst
msgid "Author"
msgstr ""

#: ../../pep-0626.rst:3
msgid "Mark Shannon <mark@hotpy.org>"
msgstr ""

#: ../../pep-0626.rst
msgid "BDFL-Delegate"
msgstr ""

#: ../../pep-0626.rst:4
msgid "Pablo Galindo <pablogsal@python.org>"
msgstr ""

#: ../../pep-0626.rst
msgid "Status"
msgstr ""

#: ../../pep-0626.rst:5
msgid "Final"
msgstr ""

#: ../../pep-0626.rst
msgid "Type"
msgstr ""

#: ../../pep-0626.rst:6
msgid "Standards Track"
msgstr ""

#: ../../pep-0626.rst
msgid "Created"
msgstr ""

#: ../../pep-0626.rst:8
msgid "15-Jul-2020"
msgstr ""

#: ../../pep-0626.rst
msgid "Python-Version"
msgstr ""

#: ../../pep-0626.rst:9
msgid "3.10"
msgstr ""

#: ../../pep-0626.rst
msgid "Post-History"
msgstr ""

#: ../../pep-0626.rst:10
msgid "17-Jul-2020"
msgstr ""

#: ../../pep-0626.rst:13
msgid "Abstract"
msgstr ""

#: ../../pep-0626.rst:15
msgid ""
"Python should guarantee that when tracing is turned on, \"line\" tracing "
"events are generated for *all* lines of code executed and *only* for "
"lines of code that are executed."
msgstr ""

#: ../../pep-0626.rst:18
msgid ""
"The ``f_lineno`` attribute of frame objects should always contain the "
"expected line number. During frame execution, the expected line number is"
" the line number of source code currently being executed. After a frame "
"has completed, either by returning or by raising an exception, the "
"expected line number is the line number of the last line of source that "
"was executed."
msgstr ""

#: ../../pep-0626.rst:23
msgid ""
"A side effect of ensuring correct line numbers, is that some bytecodes "
"will need to be marked as artificial, and not have a meaningful line "
"number. To assist tools, a new ``co_lines`` attribute will be added that "
"describes the mapping from bytecode to source."
msgstr ""

#: ../../pep-0626.rst:27
msgid "Motivation"
msgstr ""

#: ../../pep-0626.rst:29
msgid ""
"Users of ``sys.settrace`` and associated tools should be able to rely on "
"tracing events being generated for all lines of code, and only for actual"
" code. They should also be able to assume that the line number in "
"``f_lineno`` is correct."
msgstr ""

#: ../../pep-0626.rst:33
msgid ""
"The current implementation mostly does this, but fails in a few cases. "
"This requires workarounds in tooling and is a nuisance for alternative "
"Python implementions."
msgstr ""

#: ../../pep-0626.rst:36
msgid ""
"Having this guarantee also benefits implementers of CPython in the long "
"term, as the current behaviour is not obvious and has some odd corner "
"cases."
msgstr ""

#: ../../pep-0626.rst:39
msgid "Rationale"
msgstr ""

#: ../../pep-0626.rst:41
msgid ""
"In order to guarantee that line events are generated when expected, the "
"``co_lnotab`` attribute, in its current form, can no longer be the source"
" of truth for line number information."
msgstr ""

#: ../../pep-0626.rst:44
msgid ""
"Rather than attempt to fix the ``co_lnotab`` attribute, a new method "
"``co_lines()`` will be added, which returns an iterator over bytecode "
"offsets and source code lines."
msgstr ""

#: ../../pep-0626.rst:47
msgid ""
"Ensuring that the bytecode is annotated correctly to enable accurate line"
" number information means that some bytecodes must be marked as "
"artificial, and not have a line number."
msgstr ""

#: ../../pep-0626.rst:50
msgid ""
"Some care must be taken not to break existing tooling. To minimize "
"breakage, the ``co_lnotab`` attribute will be retained, but lazily "
"generated on demand."
msgstr ""

#: ../../pep-0626.rst:54
msgid "Specification"
msgstr ""

#: ../../pep-0626.rst:56
msgid ""
"Line events and the ``f_lineno`` attribute should act as an experienced "
"Python user would expect in *all* cases."
msgstr ""

#: ../../pep-0626.rst:59
msgid "Tracing"
msgstr ""

#: ../../pep-0626.rst:61
msgid ""
"Tracing generates events for calls, returns, exceptions, lines of source "
"code executed, and, under some circumstances, instructions executed."
msgstr ""

#: ../../pep-0626.rst:63
msgid "Only line events are covered by this PEP."
msgstr ""

#: ../../pep-0626.rst:65
msgid "When tracing is turned on, line events will be generated when:"
msgstr ""

#: ../../pep-0626.rst:67
msgid "A new line of source code is reached."
msgstr ""

#: ../../pep-0626.rst:68
msgid ""
"A backwards jump occurs, even if it jumps to the same line, as may happen"
" in list comprehensions."
msgstr ""

#: ../../pep-0626.rst:70
msgid ""
"Additionally, line events will *never* be generated for source code lines"
" that are not executed."
msgstr ""

#: ../../pep-0626.rst:73
msgid "What is considered to be code for the purposes of tracing"
msgstr ""

#: ../../pep-0626.rst:75
msgid ""
"All expressions and parts of expressions are considered to be executable "
"code."
msgstr ""

#: ../../pep-0626.rst:77
msgid ""
"In general, all statements are also considered to be executable code. "
"However, when a statement is spread over several lines, we must consider "
"which parts of a statement are considered to be executable code."
msgstr ""

#: ../../pep-0626.rst:80
msgid ""
"Statements are made up of keywords and expressions. Not all keywords have"
" a direct runtime effect, so not all keywords are considered to be "
"executable code. For example, ``else``, is a necessary part of an ``if`` "
"statement, but there is no runtime effect associated with an ``else``."
msgstr ""

#: ../../pep-0626.rst:83
msgid ""
"For the purposes of tracing, the following keywords will *not* be "
"considered to be executable code:"
msgstr ""

#: ../../pep-0626.rst:85
msgid "``del`` -- The expression to be deleted is treated as the executable code."
msgstr ""

#: ../../pep-0626.rst:86
msgid "``else`` -- No runtime effect"
msgstr ""

#: ../../pep-0626.rst:87
msgid "``finally`` -- No runtime effect"
msgstr ""

#: ../../pep-0626.rst:88
msgid "``global`` -- Purely declarative"
msgstr ""

#: ../../pep-0626.rst:89
msgid "``nonlocal`` -- Purely declarative"
msgstr ""

#: ../../pep-0626.rst:91
msgid "All other keywords are considered to be executable code."
msgstr ""

#: ../../pep-0626.rst:94
msgid "Example event sequences"
msgstr ""

#: ../../pep-0626.rst:96 ../../pep-0626.rst:212
msgid ""
"In the following examples, events are listed as \"name\", ``f_lineno`` "
"pairs."
msgstr ""

#: ../../pep-0626.rst:98 ../../pep-0626.rst:110 ../../pep-0626.rst:126
msgid "The code"
msgstr ""

#: ../../pep-0626.rst:105
msgid "generates the following event::"
msgstr ""

#: ../../pep-0626.rst:119 ../../pep-0626.rst:135
msgid "generates the following events::"
msgstr ""

#: ../../pep-0626.rst:148
msgid "The f_lineno attribute"
msgstr ""

#: ../../pep-0626.rst:150
msgid ""
"When a frame object is created, the ``f_lineno`` attribute will be set to"
" the line at which the function or class is defined; that is the line on "
"which the ``def`` or ``class`` keyword appears. For modules it will be "
"set to zero."
msgstr ""

#: ../../pep-0626.rst:153
msgid ""
"The ``f_lineno`` attribute will be updated to match the line number about"
" to be executed, even if tracing is turned off and no event is generated."
msgstr ""

#: ../../pep-0626.rst:157
msgid "The new co_lines() method of code objects"
msgstr ""

#: ../../pep-0626.rst:159
msgid ""
"The ``co_lines()`` method will return an iterator which yields tuples of "
"values, each representing the line number of a range of bytecodes. Each "
"tuple will consist of three values:"
msgstr ""

#: ../../pep-0626.rst:162
msgid "``start`` -- The offset (inclusive) of the start of the bytecode range"
msgstr ""

#: ../../pep-0626.rst:163
msgid "``end`` -- The offset (exclusive) of the end of the bytecode range"
msgstr ""

#: ../../pep-0626.rst:164
msgid ""
"``line`` -- The line number, or ``None`` if the bytecodes in the given "
"range do not have a line number."
msgstr ""

#: ../../pep-0626.rst:166
msgid "The sequence generated will have the following properties:"
msgstr ""

#: ../../pep-0626.rst:168
msgid "The first range in the sequence with have a ``start`` of ``0``"
msgstr ""

#: ../../pep-0626.rst:169
msgid ""
"The ``(start, end)`` ranges will be non-decreasing and consecutive. That "
"is, for any pair of tuples the ``start`` of the second will equal to the "
"``end`` of the first."
msgstr ""

#: ../../pep-0626.rst:172
msgid "No range will be backwards, that is ``end >= start`` for all triples."
msgstr ""

#: ../../pep-0626.rst:173
msgid ""
"The final range in the sequence with have ``end`` equal to the size of "
"the bytecode."
msgstr ""

#: ../../pep-0626.rst:174
msgid "``line`` will either be a positive integer, or ``None``"
msgstr ""

#: ../../pep-0626.rst:177
msgid "Zero width ranges"
msgstr ""

#: ../../pep-0626.rst:179
msgid ""
"Zero width range, that is ranges where ``start == end`` are allowed. Zero"
" width ranges are used for lines that are present in the source code, but"
" have been eliminated by the bytecode compiler."
msgstr ""

#: ../../pep-0626.rst:184
msgid "The co_linetable attribute"
msgstr ""

#: ../../pep-0626.rst:186
msgid ""
"The co_linetable attribute will hold the line number information. The "
"format is opaque, unspecified and may be changed without notice. The "
"attribute is public only to support creation of new code objects."
msgstr ""

#: ../../pep-0626.rst:191
msgid "The co_lnotab attribute"
msgstr ""

#: ../../pep-0626.rst:193
msgid ""
"Historically the ``co_lnotab`` attribute held a mapping from bytecode "
"offset to line number, but does not support bytecodes without a line "
"number. For backward compatibility, the ``co_lnotab`` bytes object will "
"be lazily created when needed. For ranges of bytecodes without a line "
"number, the line number of the previous bytecode range will be used."
msgstr ""

#: ../../pep-0626.rst:197
msgid ""
"Tools that parse the ``co_lnotab`` table should move to using the new "
"``co_lines()`` method as soon as is practical."
msgstr ""

#: ../../pep-0626.rst:201
msgid "Backwards Compatibility"
msgstr ""

#: ../../pep-0626.rst:203
msgid ""
"The ``co_lnotab`` attribute will be deprecated in 3.10 and removed in "
"3.12."
msgstr ""

#: ../../pep-0626.rst:205
msgid ""
"Any tools that parse the ``co_lnotab`` attribute of code objects will "
"need to move to using ``co_lines()`` before 3.12 is released. Tools that "
"use ``sys.settrace`` will be unaffected, except in cases where the "
"\"line\" events they receive are more accurate."
msgstr ""

#: ../../pep-0626.rst:210
msgid "Examples of code for which the sequence of trace events will change"
msgstr ""

#: ../../pep-0626.rst:216
msgid "``pass`` statement in an ``if`` statement."
msgstr ""

#: ../../pep-0626.rst:226
msgid ""
"If ``a`` is ``True``, then the sequence of events generated by Python 3.9"
" is::"
msgstr ""

#: ../../pep-0626.rst:233 ../../pep-0626.rst:254
msgid "From 3.10 the sequence will be::"
msgstr ""

#: ../../pep-0626.rst:240
msgid "Multiple ``pass`` statements."
msgstr ""

#: ../../pep-0626.rst:249
msgid "The sequence of events generated by Python 3.9 is::"
msgstr ""

#: ../../pep-0626.rst:262
msgid "C API"
msgstr ""

#: ../../pep-0626.rst:264
msgid ""
"Access to the ``f_lineno`` attribute of frame objects through C API "
"functions is unchanged. ``f_lineno`` can be read by "
"``PyFrame_GetLineNumber``. ``f_lineno`` can only be set via "
"``PyObject_SetAttr`` and similar functions."
msgstr ""

#: ../../pep-0626.rst:267
msgid ""
"Accessing ``f_lineno`` directly through the underlying data structure is "
"forbidden."
msgstr ""

#: ../../pep-0626.rst:270
msgid "Out of process debuggers and profilers"
msgstr ""

#: ../../pep-0626.rst:272
msgid ""
"Out of process tools, such as py-spy [1]_, cannot use the C-API, and must"
" parse the line number table themselves. Although the line number table "
"format may change without warning, it will not change during a release "
"unless absolutely necessary for a bug fix."
msgstr ""

#: ../../pep-0626.rst:276
msgid ""
"To reduce the work required to implement these tools, the following C "
"struct and utility functions are provided. Note that these functions are "
"not part of the C-API, so will be need to be linked into any code that "
"needs to use them."
msgstr ""

#: ../../pep-0626.rst:292
msgid ""
"``PyLineTable_InitAddressRange`` initializes the ``PyCodeAddressRange`` "
"struct from the line number table and first line number."
msgstr ""

#: ../../pep-0626.rst:294
msgid ""
"``PyLineTable_NextAddressRange`` advances the range to the next entry, "
"returning non-zero if valid."
msgstr ""

#: ../../pep-0626.rst:296
msgid ""
"``PyLineTable_PreviousAddressRange`` retreats the range to the previous "
"entry, returning non-zero if valid."
msgstr ""

#: ../../pep-0626.rst:299
msgid ""
"The data in ``linetable`` is immutable, but its lifetime depends on its "
"code object. For reliable operation, ``linetable`` should be copied into "
"a local buffer before calling ``PyLineTable_InitAddressRange``."
msgstr ""

#: ../../pep-0626.rst:302
msgid ""
"Although these functions are not part of C-API, they will provided by all"
" future versions of CPython. The ``PyLineTable_`` functions do not call "
"into the C-API, so can be safely copied into any tool that needs to use "
"them. The ``PyCodeAddressRange`` struct will not be changed, but the "
"``_opaque`` struct is not part of the specification and may change."
msgstr ""

#: ../../pep-0626.rst:307
msgid ""
"The ``PyCodeAddressRange`` struct has changed from the original version "
"of this PEP, where the addition fields were defined, but were liable to "
"change."
msgstr ""

#: ../../pep-0626.rst:310
msgid "For example, the following code prints out all the address ranges:"
msgstr ""

#: ../../pep-0626.rst:333
msgid "Performance Implications"
msgstr ""

#: ../../pep-0626.rst:335
msgid ""
"In general, there should be no change in performance. When tracing, "
"programs should run a little faster as the new table format can be "
"designed with line number calculation speed in mind. Code with long "
"sequences of ``pass`` statements will probably become a bit slower."
msgstr ""

#: ../../pep-0626.rst:340
msgid "Reference Implementation"
msgstr ""

#: ../../pep-0626.rst:342
msgid "https://github.com/markshannon/cpython/tree/new-linetable-format-version-2"
msgstr ""

#: ../../pep-0626.rst:345
msgid "Copyright"
msgstr ""

#: ../../pep-0626.rst:347
msgid ""
"This document is placed in the public domain or under the "
"CC0-1.0-Universal license, whichever is more permissive."
msgstr ""

#: ../../pep-0626.rst:351
msgid "References"
msgstr ""

#: ../../pep-0626.rst:353
msgid ""
"py-spy: Sampling profiler for Python programs (https://github.com/benfred"
"/py-spy)"
msgstr ""

