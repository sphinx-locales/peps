# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0239.txt
msgid "PEP"
msgstr ""

#: ../../pep-0239.txt:1
msgid "239"
msgstr ""

#: ../../pep-0239.txt
msgid "Title"
msgstr ""

#: ../../pep-0239.txt:2
msgid "Adding a Rational Type to Python"
msgstr ""

#: ../../pep-0239.txt
msgid "Author"
msgstr ""

#: ../../pep-0239.txt:5
msgid ""
"Christopher A. Craig <python-pep@ccraig.org>, Moshe Zadka "
"<moshez@zadka.site.co.il>"
msgstr ""

#: ../../pep-0239.txt
msgid "Status"
msgstr ""

#: ../../pep-0239.txt:6
msgid "Rejected"
msgstr ""

#: ../../pep-0239.txt
msgid "Type"
msgstr ""

#: ../../pep-0239.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0239.txt
msgid "Created"
msgstr ""

#: ../../pep-0239.txt:9
msgid "11-Mar-2001"
msgstr ""

#: ../../pep-0239.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0239.txt:10
msgid "2.2"
msgstr ""

#: ../../pep-0239.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0239.txt:11
msgid "16-Mar-2001"
msgstr ""

#: ../../pep-0239.txt:15
msgid "Abstract"
msgstr ""

#: ../../pep-0239.txt:17
msgid ""
"Python has no numeric type with the semantics of an unboundedly precise "
"rational number.  This proposal explains the semantics of such a type, "
"and suggests builtin functions and literals to support such a type.  This"
" PEP suggests no literals for rational numbers; that is left for another "
"PEP [1]_."
msgstr ""

#: ../../pep-0239.txt:25
msgid "BDFL Pronouncement"
msgstr ""

#: ../../pep-0239.txt:27
msgid ""
"This PEP is rejected.  The needs outlined in the rationale section have "
"been addressed to some extent by the acceptance of PEP 327 for decimal "
"arithmetic.  Guido also noted, \"Rational arithmetic was the default "
"'exact' arithmetic in ABC and it did not work out as expected\".  See the"
" python-dev discussion on 17 June 2005 [2]_."
msgstr ""

#: ../../pep-0239.txt:33
msgid ""
"*Postscript:* With the acceptance of PEP 3141, \"A Type Hierarchy for "
"Numbers\", a 'Rational' numeric abstract base class was added with a "
"concrete implementation in the 'fractions' module."
msgstr ""

#: ../../pep-0239.txt:39
msgid "Rationale"
msgstr ""

#: ../../pep-0239.txt:41
msgid ""
"While sometimes slower and more memory intensive (in general, unboundedly"
" so) rational arithmetic captures more closely the mathematical ideal of "
"numbers, and tends to have behavior which is less surprising to newbies."
"  Though many Python implementations of rational numbers have been "
"written, none of these exist in the core, or are documented in any way.  "
"This has made them much less accessible to people who are less Python-"
"savvy."
msgstr ""

#: ../../pep-0239.txt:51
msgid "RationalType"
msgstr ""

#: ../../pep-0239.txt:53
msgid ""
"There will be a new numeric type added called ``RationalType``.  Its "
"unary operators will do the obvious thing.  Binary operators will coerce "
"integers and long integers to rationals, and rationals to floats and "
"complexes."
msgstr ""

#: ../../pep-0239.txt:58
msgid ""
"The following attributes will be supported: ``.numerator`` and "
"``.denominator``.  The language definition will promise that::"
msgstr ""

#: ../../pep-0239.txt:63
msgid ""
"that the GCD of the numerator and the denominator is 1 and that the "
"denominator is positive."
msgstr ""

#: ../../pep-0239.txt:66
msgid ""
"The method ``r.trim(max_denominator)`` will return the closest rational "
"``s`` to ``r`` such that ``abs(s.denominator) <= max_denominator``."
msgstr ""

#: ../../pep-0239.txt:71
msgid "The rational() Builtin"
msgstr ""

#: ../../pep-0239.txt:73
msgid ""
"This function will have the signature ``rational(n, d=1)``.  ``n`` and "
"``d`` must both be integers, long integers or rationals.  A guarantee is "
"made that::"
msgstr ""

#: ../../pep-0239.txt:81
msgid "Open Issues"
msgstr ""

#: ../../pep-0239.txt:83
msgid ""
"Maybe the type should be called rat instead of rational. Somebody "
"proposed that we have \"abstract\" pure mathematical types named complex,"
" real, rational, integer, and \"concrete\" representation types with "
"names like float, rat, long, int."
msgstr ""

#: ../../pep-0239.txt:88
msgid ""
"Should a rational number with an integer value be allowed as a sequence "
"index?  For example, should ``s[5/3 - 2/3]`` be equivalent to ``s[1]``?"
msgstr ""

#: ../../pep-0239.txt:92
msgid ""
"Should ``shift`` and ``mask`` operators be allowed for rational numbers? "
"For rational numbers with integer values?"
msgstr ""

#: ../../pep-0239.txt:95
msgid ""
"Marcin 'Qrczak' Kowalczyk summarized the arguments for and against "
"unifying ints with rationals nicely on c.l.py"
msgstr ""

#: ../../pep-0239.txt:98
msgid "Arguments for unifying ints with rationals:"
msgstr ""

#: ../../pep-0239.txt:100
msgid ""
"Since ``2 == 2/1`` and maybe ``str(2/1) == '2'``, it reduces surprises "
"where objects seem equal but behave differently."
msgstr ""

#: ../../pep-0239.txt:103
msgid ""
"``/`` can be freely used for integer division when I *know* that there is"
" no remainder (if I am wrong and there is a remainder, there will "
"probably be some exception later)."
msgstr ""

#: ../../pep-0239.txt:107
msgid "Arguments against:"
msgstr ""

#: ../../pep-0239.txt:109
msgid ""
"When I use the result of ``/`` as a sequence index, it's usually an error"
" which should not be hidden by making the program working for some data, "
"since it will break for other data."
msgstr ""

#: ../../pep-0239.txt:113
msgid ""
"(this assumes that after unification int and rational would be different "
"types:) Types should rarely depend on values. It's easier to reason when "
"the type of a variable is known: I know how I can use it. I can determine"
" that something is an int and expect that other objects used in this "
"place will be ints too."
msgstr ""

#: ../../pep-0239.txt:119
msgid ""
"(this assumes the same type for them:) Int is a good type in itself, not "
"to be mixed with rationals.  The fact that something is an integer should"
" be expressible as a statement about its type. Many operations require "
"ints and don't accept rationals. It's natural to think about them as "
"about different types."
msgstr ""

#: ../../pep-0239.txt:128
msgid "References"
msgstr ""

#: ../../pep-0239.txt:130
msgid ""
"PEP 240, Adding a Rational Literal to Python, Zadka, "
"http://www.python.org/dev/peps/pep-0240/"
msgstr ""

#: ../../pep-0239.txt:133
msgid ""
"Raymond Hettinger, Propose rejection of PEPs 239 and 240 -- a builtin "
"rational type and rational literals https://mail.python.org/pipermail"
"/python-dev/2005-June/054281.html"
msgstr ""

#: ../../pep-0239.txt:138
msgid "Copyright"
msgstr ""

#: ../../pep-0239.txt:140
msgid "This document has been placed in the public domain."
msgstr ""

