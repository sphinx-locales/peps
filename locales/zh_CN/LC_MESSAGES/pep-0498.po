# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0498.txt
msgid "PEP"
msgstr ""

#: ../../pep-0498.txt:1
msgid "498"
msgstr ""

#: ../../pep-0498.txt
msgid "Title"
msgstr ""

#: ../../pep-0498.txt:2
msgid "Literal String Interpolation"
msgstr ""

#: ../../pep-0498.txt
msgid "Author"
msgstr ""

#: ../../pep-0498.txt:5
msgid "Eric V. Smith <eric@trueblade.com>"
msgstr ""

#: ../../pep-0498.txt
msgid "Status"
msgstr ""

#: ../../pep-0498.txt:6
msgid "Final"
msgstr ""

#: ../../pep-0498.txt
msgid "Type"
msgstr ""

#: ../../pep-0498.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0498.txt
msgid "Created"
msgstr ""

#: ../../pep-0498.txt:9
msgid "01-Aug-2015"
msgstr ""

#: ../../pep-0498.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0498.txt:10
msgid "3.6"
msgstr ""

#: ../../pep-0498.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0498.txt:11
msgid "07-Aug-2015, 30-Aug-2015, 04-Sep-2015, 19-Sep-2015, 06-Nov-2016"
msgstr ""

#: ../../pep-0498.txt
msgid "Resolution"
msgstr ""

#: ../../pep-0498.txt:12
msgid "https://mail.python.org/pipermail/python-dev/2015-September/141526.html"
msgstr ""

#: ../../pep-0498.txt:15
msgid "Abstract"
msgstr ""

#: ../../pep-0498.txt:17
#, python-format
msgid ""
"Python supports multiple ways to format text strings. These include "
"%-formatting [#]_, ``str.format()`` [#]_, and ``string.Template`` [#]_. "
"Each of these methods have their advantages, but in addition have "
"disadvantages that make them cumbersome to use in practice. This PEP "
"proposed to add a new string formatting mechanism: Literal String "
"Interpolation. In this PEP, such strings will be referred to as "
"\"f-strings\", taken from the leading character used to denote such "
"strings, and standing for \"formatted strings\"."
msgstr ""

#: ../../pep-0498.txt:26
msgid ""
"This PEP does not propose to remove or deprecate any of the existing "
"string formatting mechanisms."
msgstr ""

#: ../../pep-0498.txt:29
msgid ""
"F-strings provide a way to embed expressions inside string literals, "
"using a minimal syntax. It should be noted that an f-string is really an "
"expression evaluated at run time, not a constant value. In Python source "
"code, an f-string is a literal string, prefixed with 'f', which contains "
"expressions inside braces. The expressions are replaced with their "
"values. Some examples are::"
msgstr ""

#: ../../pep-0498.txt:45
msgid ""
"A similar feature was proposed in PEP 215. PEP 215 proposed to support a "
"subset of Python expressions, and did not support the type-specific "
"string formatting (the ``__format__()`` method) which was introduced with"
" PEP 3101."
msgstr ""

#: ../../pep-0498.txt:51
msgid "Rationale"
msgstr ""

#: ../../pep-0498.txt:53
msgid ""
"This PEP is driven by the desire to have a simpler way to format strings "
"in Python. The existing ways of formatting are either error prone, "
"inflexible, or cumbersome."
msgstr ""

#: ../../pep-0498.txt:57
#, python-format
msgid ""
"%-formatting is limited as to the types it supports. Only ints, strs, and"
" doubles can be formatted. All other types are either not supported, or "
"converted to one of these types before formatting. In addition, there's a"
" well-known trap where a single value is passed::"
msgstr ""

#: ../../pep-0498.txt:66
msgid "But if msg were ever to be a tuple, the same code would fail::"
msgstr ""

#: ../../pep-0498.txt:74
msgid "To be defensive, the following code should be used::"
msgstr ""

#: ../../pep-0498.txt:79
#, python-format
msgid ""
"``str.format()`` was added to address some of these problems with "
"%-formatting. In particular, it uses normal function call syntax (and "
"therefor supports multiple parameters) and it is extensible through the "
"``__format__()`` method on the object being converted to a string. See "
"PEP 3101 for a detailed rationale. This PEP reuses much of the "
"``str.format()`` syntax and machinery, in order to provide continuity "
"with an existing Python string formatting mechanism."
msgstr ""

#: ../../pep-0498.txt:87
msgid ""
"However, ``str.format()`` is not without its issues. Chief among them is "
"its verbosity. For example, the text ``value`` is repeated here::"
msgstr ""

#: ../../pep-0498.txt:94
msgid ""
"Even in its simplest form there is a bit of boilerplate, and the value "
"that's inserted into the placeholder is sometimes far removed from where "
"the placeholder is situated::"
msgstr ""

#: ../../pep-0498.txt:101
msgid "With an f-string, this becomes::"
msgstr ""

#: ../../pep-0498.txt:106
msgid ""
"F-strings provide a concise, readable way to include the value of Python "
"expressions inside strings."
msgstr ""

#: ../../pep-0498.txt:109
#, python-format
msgid ""
"In this sense, ``string.Template`` and %-formatting have similar "
"shortcomings to ``str.format()``, but also support fewer formatting "
"options. In particular, they do not support the ``__format__`` protocol, "
"so that there is no way to control how a specific object is converted to "
"a string, nor can it be extended to additional types that want to control"
" how they are converted to strings (such as ``Decimal`` and "
"``datetime``). This example is not possible with ``string.Template``::"
msgstr ""

#: ../../pep-0498.txt:122
#, python-format
msgid ""
"And neither %-formatting nor ``string.Template`` can control formatting "
"such as::"
msgstr ""

#: ../../pep-0498.txt:130
msgid "No use of globals() or locals()"
msgstr ""

#: ../../pep-0498.txt:132
msgid ""
"In the discussions on python-dev [#]_, a number of solutions where "
"presented that used locals() and globals() or their equivalents. All of "
"these have various problems. Among these are referencing variables that "
"are not otherwise used in a closure. Consider::"
msgstr ""

#: ../../pep-0498.txt:148
msgid ""
"This returns an error because the compiler has not added a reference to x"
" inside the closure. You need to manually add a reference to x in order "
"for this to work::"
msgstr ""

#: ../../pep-0498.txt:161
msgid ""
"In addition, using locals() or globals() introduces an information leak. "
"A called routine that has access to the callers locals() or globals() has"
" access to far more information than needed to do the string "
"interpolation."
msgstr ""

#: ../../pep-0498.txt:166
msgid ""
"Guido stated [#]_ that any solution to better string interpolation would "
"not use locals() or globals() in its implementation.  (This does not "
"forbid users from passing locals() or globals() in, it just doesn't "
"require it, nor does it allow using these functions under the hood.)"
msgstr ""

#: ../../pep-0498.txt:173
msgid "Specification"
msgstr ""

#: ../../pep-0498.txt:175
msgid ""
"In source code, f-strings are string literals that are prefixed by the "
"letter 'f' or 'F'. Everywhere this PEP uses 'f', 'F' may also be used. "
"'f' may be combined with 'r' or 'R', in either order, to produce raw "
"f-string literals. 'f' may not be combined with 'b': this PEP does not "
"propose to add binary f-strings. 'f' may not be combined with 'u'."
msgstr ""

#: ../../pep-0498.txt:181
msgid ""
"When tokenizing source files, f-strings use the same rules as normal "
"strings, raw strings, binary strings, and triple quoted strings. That is,"
" the string must end with the same character that it started with: if it "
"starts with a single quote it must end with a single quote, etc. This "
"implies that any code that currently scans Python code looking for "
"strings should be trivially modifiable to recognize f-strings (parsing "
"within an f-string is another matter, of course)."
msgstr ""

#: ../../pep-0498.txt:189
msgid ""
"Once tokenized, f-strings are parsed in to literal strings and "
"expressions.  Expressions appear within curly braces ``'{'`` and ``'}'``."
"  While scanning the string for expressions, any doubled braces ``'{{'`` "
"or ``'}}'`` inside literal portions of an f-string are replaced by the "
"corresponding single brace.  Doubled literal opening braces do not "
"signify the start of an expression.  A single closing curly brace ``'}'``"
" in the literal portion of a string is an error: literal closing curly "
"braces must be doubled ``'}}'`` in order to represent a single closing "
"brace."
msgstr ""

#: ../../pep-0498.txt:199
msgid ""
"The parts of the f-string outside of braces are literal strings.  These "
"literal portions are then decoded.  For non-raw f-strings, this includes "
"converting backslash escapes such as ``'\\n'``, ``'\\\"'``, ``\"\\'\"``, "
"``'\\xhh'``, ``'\\uxxxx'``, ``'\\Uxxxxxxxx'``, and named unicode "
"characters ``'\\N{name}'`` into their associated Unicode characters [#]_."
msgstr ""

#: ../../pep-0498.txt:206
msgid ""
"Backslashes may not appear anywhere within expressions.  Comments, using "
"the ``'#'`` character, are not allowed inside an expression."
msgstr ""

#: ../../pep-0498.txt:209
msgid ""
"Following each expression, an optional type conversion may be specified."
"  The allowed conversions are ``'!s'``, ``'!r'``, or ``'!a'``. These are "
"treated the same as in ``str.format()``: ``'!s'`` calls ``str()`` on the "
"expression, ``'!r'`` calls ``repr()`` on the expression, and ``'!a'`` "
"calls ``ascii()`` on the expression. These conversions are applied before"
" the call to ``format()``. The only reason to use ``'!s'`` is if you want"
" to specify a format specifier that applies to ``str``, not to the type "
"of the expression."
msgstr ""

#: ../../pep-0498.txt:218
msgid ""
"F-strings use the same format specifier mini-language as ``str.format``. "
"Similar to ``str.format()``, optional format specifiers maybe be included"
" inside the f-string, separated from the expression (or the type "
"conversion, if specified) by a colon. If a format specifier is not "
"provided, an empty string is used."
msgstr ""

#: ../../pep-0498.txt:224
msgid "So, an f-string looks like::"
msgstr ""

#: ../../pep-0498.txt:228
msgid ""
"The expression is then formatted using the ``__format__`` protocol, using"
" the format specifier as an argument. The resulting value is used when "
"building the value of the f-string."
msgstr ""

#: ../../pep-0498.txt:232
msgid ""
"Note that ``__format__()`` is not called directly on each value. The "
"actual code uses the equivalent of ``type(value).__format__(value, "
"format_spec)``, or ``format(value, format_spec)``. See the documentation "
"of the builtin ``format()`` function for more details."
msgstr ""

#: ../../pep-0498.txt:237
msgid ""
"Expressions cannot contain ``':'`` or ``'!'`` outside of strings or "
"parentheses, brackets, or braces. The exception is that the ``'!='`` "
"operator is allowed as a special case."
msgstr ""

#: ../../pep-0498.txt:242
msgid "Escape sequences"
msgstr ""

#: ../../pep-0498.txt:244
msgid ""
"Backslashes may not appear inside the expression portions of f-strings, "
"so you cannot use them, for example, to escape quotes inside f-strings::"
msgstr ""

#: ../../pep-0498.txt:252
msgid "You can use a different type of quote inside the expression::"
msgstr ""

#: ../../pep-0498.txt:257
msgid "Backslash escapes may appear inside the string portions of an f-string."
msgstr ""

#: ../../pep-0498.txt:260
msgid ""
"Note that the correct way to have a literal brace appear in the resulting"
" string value is to double the brace::"
msgstr ""

#: ../../pep-0498.txt:268
msgid ""
"Like all raw strings in Python, no escape processing is done for raw "
"f-strings::"
msgstr ""

#: ../../pep-0498.txt:274
msgid ""
"Due to Python's string tokenizing rules, the f-string ``f'abc {a['x']} "
"def'`` is invalid. The tokenizer parses this as 3 tokens: ``f'abc {a['``,"
" ``x``, and ``']} def'``. Just like regular strings, this cannot be fixed"
" by using raw strings. There are a number of correct ways to write this "
"f-string: with a different quote character::"
msgstr ""

#: ../../pep-0498.txt:283
msgid "Or with triple quotes::"
msgstr ""

#: ../../pep-0498.txt:288
msgid "Code equivalence"
msgstr ""

#: ../../pep-0498.txt:290
msgid ""
"The exact code used to implement f-strings is not specified. However, it "
"is guaranteed that any embedded value that is converted to a string will "
"use that value's ``__format__`` method. This is the same mechanism that "
"``str.format()`` uses to convert values to strings."
msgstr ""

#: ../../pep-0498.txt:295
msgid "For example, this code::"
msgstr ""

#: ../../pep-0498.txt:299
msgid "Might be evaluated as::"
msgstr ""

#: ../../pep-0498.txt:304
msgid "Expression evaluation"
msgstr ""

#: ../../pep-0498.txt:306
msgid ""
"The expressions that are extracted from the string are evaluated in the "
"context where the f-string appeared. This means the expression has full "
"access to local and global variables. Any valid Python expression can be "
"used, including function and method calls."
msgstr ""

#: ../../pep-0498.txt:311
msgid ""
"Because the f-strings are evaluated where the string appears in the "
"source code, there is no additional expressiveness available with "
"f-strings. There are also no additional security concerns: you could have"
" also just written the same expression, not inside of an f-string::"
msgstr ""

#: ../../pep-0498.txt:323
msgid "Is equivalent to::"
msgstr ""

#: ../../pep-0498.txt:328
msgid ""
"Expressions are parsed with the equivalent of ``ast.parse('(' + "
"expression + ')', '<fstring>', 'eval')`` [#]_."
msgstr ""

#: ../../pep-0498.txt:331
msgid ""
"Note that since the expression is enclosed by implicit parentheses before"
" evaluation, expressions can contain newlines. For example::"
msgstr ""

#: ../../pep-0498.txt:345
msgid "Format specifiers"
msgstr ""

#: ../../pep-0498.txt:347
msgid ""
"Format specifiers may also contain evaluated expressions. This allows "
"code such as::"
msgstr ""

#: ../../pep-0498.txt:356
msgid ""
"Once expressions in a format specifier are evaluated (if necessary), "
"format specifiers are not interpreted by the f-string evaluator. Just as "
"in ``str.format()``, they are merely passed in to the ``__format__()`` "
"method of the object being formatted."
msgstr ""

#: ../../pep-0498.txt:362
msgid "Concatenating strings"
msgstr ""

#: ../../pep-0498.txt:364
msgid ""
"Adjacent f-strings and regular strings are concatenated. Regular strings "
"are concatenated at compile time, and f-strings are concatenated at run "
"time. For example, the expression::"
msgstr ""

#: ../../pep-0498.txt:372
msgid "yields the value::"
msgstr ""

#: ../../pep-0498.txt:376
msgid ""
"While the exact method of this run time concatenation is unspecified, the"
" above code might evaluate to::"
msgstr ""

#: ../../pep-0498.txt:381
msgid ""
"Each f-string is entirely evaluated before being concatenated to adjacent"
" f-strings. That means that this::"
msgstr ""

#: ../../pep-0498.txt:386
msgid ""
"Is a syntax error, because the first f-string does not contain a closing "
"brace."
msgstr ""

#: ../../pep-0498.txt:390
msgid "Error handling"
msgstr ""

#: ../../pep-0498.txt:392
msgid ""
"Either compile time or run time errors can occur when processing "
"f-strings. Compile time errors are limited to those errors that can be "
"detected when scanning an f-string. These errors all raise "
"``SyntaxError``."
msgstr ""

#: ../../pep-0498.txt:397
msgid "Unmatched braces::"
msgstr ""

#: ../../pep-0498.txt:403
msgid "Invalid expressions::"
msgstr ""

#: ../../pep-0498.txt:409
msgid ""
"Run time errors occur when evaluating the expressions inside an f-string."
" Note that an f-string can be evaluated multiple times, and work "
"sometimes and raise an error at other times::"
msgstr ""

#: ../../pep-0498.txt:423
msgid "or::"
msgstr ""

#: ../../pep-0498.txt:435
msgid "Leading and trailing whitespace in expressions is ignored"
msgstr ""

#: ../../pep-0498.txt:437
msgid ""
"For ease of readability, leading and trailing whitespace in expressions "
"is ignored. This is a by-product of enclosing the expression in "
"parentheses before evaluation."
msgstr ""

#: ../../pep-0498.txt:442
msgid "Evaluation order of expressions"
msgstr ""

#: ../../pep-0498.txt:444
msgid ""
"The expressions in an f-string are evaluated in left-to-right order. This"
" is detectable only if the expressions have side effects::"
msgstr ""

#: ../../pep-0498.txt:461
msgid "Discussion"
msgstr ""

#: ../../pep-0498.txt:464
msgid "python-ideas discussion"
msgstr ""

#: ../../pep-0498.txt:466
msgid "Most of the discussions on python-ideas [#]_ focused on three issues:"
msgstr ""

#: ../../pep-0498.txt:468
msgid "How to denote f-strings,"
msgstr ""

#: ../../pep-0498.txt:469
msgid "How to specify the location of expressions in f-strings, and"
msgstr ""

#: ../../pep-0498.txt:470
msgid "Whether to allow full Python expressions."
msgstr ""

#: ../../pep-0498.txt:473
msgid "How to denote f-strings"
msgstr ""

#: ../../pep-0498.txt:475
msgid ""
"Because the compiler must be involved in evaluating the expressions "
"contained in the interpolated strings, there must be some way to denote "
"to the compiler which strings should be evaluated. This PEP chose a "
"leading ``'f'`` character preceding the string literal. This is similar "
"to how ``'b'`` and ``'r'`` prefixes change the meaning of the string "
"itself, at compile time. Other prefixes were suggested, such as ``'i'``. "
"No option seemed better than the other, so ``'f'`` was chosen."
msgstr ""

#: ../../pep-0498.txt:484
msgid ""
"Another option was to support special functions, known to the compiler, "
"such as ``Format()``. This seems like too much magic for Python: not only"
" is there a chance for collision with existing identifiers, the PEP "
"author feels that it's better to signify the magic with a string prefix "
"character."
msgstr ""

#: ../../pep-0498.txt:491
msgid "How to specify the location of expressions in f-strings"
msgstr ""

#: ../../pep-0498.txt:493
msgid ""
"This PEP supports the same syntax as ``str.format()`` for distinguishing "
"replacement text inside strings: expressions are contained inside braces."
" There were other options suggested, such as ``string.Template``'s "
"``$identifier`` or ``${expression}``."
msgstr ""

#: ../../pep-0498.txt:498
msgid ""
"While ``$identifier`` is no doubt more familiar to shell scripters and "
"users of some other languages, in Python ``str.format()`` is heavily "
"used. A quick search of Python's standard library shows only a handful of"
" uses of ``string.Template``, but hundreds of uses of ``str.format()``."
msgstr ""

#: ../../pep-0498.txt:504
msgid ""
"Another proposed alternative was to have the substituted text between "
"``\\{`` and ``}`` or between ``\\{`` and ``\\}``. While this syntax would"
" probably be desirable if all string literals were to support "
"interpolation, this PEP only supports strings that are already marked "
"with the leading ``'f'``. As such, the PEP is using unadorned braces to "
"denoted substituted text, in order to leverage end user familiarity with "
"``str.format()``."
msgstr ""

#: ../../pep-0498.txt:513
msgid "Supporting full Python expressions"
msgstr ""

#: ../../pep-0498.txt:515
msgid ""
"Many people on the python-ideas discussion wanted support for either only"
" single identifiers, or a limited subset of Python expressions (such as "
"the subset supported by ``str.format()``). This PEP supports full Python "
"expressions inside the braces. Without full expressions, some desirable "
"usage would be cumbersome. For example::"
msgstr ""

#: ../../pep-0498.txt:524
msgid "would become::"
msgstr ""

#: ../../pep-0498.txt:531
msgid ""
"While it's true that very ugly expressions could be included in the "
"f-strings, this PEP takes the position that such uses should be addressed"
" in a linter or code review::"
msgstr ""

#: ../../pep-0498.txt:539
msgid "Similar support in other languages"
msgstr ""

#: ../../pep-0498.txt:541
msgid ""
"Wikipedia has a good discussion of string interpolation in other "
"programming languages [#]_. This feature is implemented in many "
"languages, with a variety of syntaxes and restrictions."
msgstr ""

#: ../../pep-0498.txt:546
msgid "Differences between f-string and str.format expressions"
msgstr ""

#: ../../pep-0498.txt:548
msgid ""
"There is one small difference between the limited expressions allowed in "
"``str.format()`` and the full expressions allowed inside f-strings. The "
"difference is in how index lookups are performed. In ``str.format()``, "
"index values that do not look like numbers are converted to strings::"
msgstr ""

#: ../../pep-0498.txt:558
msgid ""
"Notice that the index value is converted to the string ``'a'`` when it is"
" looked up in the dict."
msgstr ""

#: ../../pep-0498.txt:561
msgid ""
"However, in f-strings, you would need to use a literal for the value of "
"``'a'``::"
msgstr ""

#: ../../pep-0498.txt:567
msgid ""
"This difference is required because otherwise you would not be able to "
"use variables as index values::"
msgstr ""

#: ../../pep-0498.txt:574
msgid ""
"See [#]_ for a further discussion. It was this observation that led to "
"full Python expressions being supported in f-strings."
msgstr ""

#: ../../pep-0498.txt:577
msgid ""
"Furthermore, the limited expressions that ``str.format()`` understands "
"need not be valid Python expressions. For example::"
msgstr ""

#: ../../pep-0498.txt:583
msgid ""
"For this reason, the str.format() \"expression parser\" is not suitable "
"for use when implementing f-strings."
msgstr ""

#: ../../pep-0498.txt:587
msgid "Triple-quoted f-strings"
msgstr ""

#: ../../pep-0498.txt:589
msgid ""
"Triple quoted f-strings are allowed. These strings are parsed just as "
"normal triple-quoted strings are. After parsing and decoding, the normal "
"f-string logic is applied, and ``__format__()`` is called on each value."
msgstr ""

#: ../../pep-0498.txt:595
msgid "Raw f-strings"
msgstr ""

#: ../../pep-0498.txt:597
msgid ""
"Raw and f-strings may be combined. For example, they could be used to "
"build up regular expressions::"
msgstr ""

#: ../../pep-0498.txt:604
msgid "In addition, raw f-strings may be combined with triple-quoted strings."
msgstr ""

#: ../../pep-0498.txt:607
msgid "No binary f-strings"
msgstr ""

#: ../../pep-0498.txt:609
msgid ""
"For the same reason that we don't support ``bytes.format()``, you may not"
" combine ``'f'`` with ``'b'`` string literals. The primary problem is "
"that an object's ``__format__()`` method may return Unicode data that is "
"not compatible with a bytes string."
msgstr ""

#: ../../pep-0498.txt:614
msgid ""
"Binary f-strings would first require a solution for ``bytes.format()``. "
"This idea has been proposed in the past, most recently in PEP 461 [#]_. "
"The discussions of such a feature usually suggest either"
msgstr ""

#: ../../pep-0498.txt:619
msgid ""
"adding a method such as ``__bformat__()`` so an object can control how it"
" is converted to bytes, or"
msgstr ""

#: ../../pep-0498.txt:622
msgid ""
"having ``bytes.format()`` not be as general purpose or extensible as "
"``str.format()``."
msgstr ""

#: ../../pep-0498.txt:625
msgid ""
"Both of these remain as options in the future, if such functionality is "
"desired."
msgstr ""

#: ../../pep-0498.txt:629
msgid "``!s``, ``!r``, and ``!a`` are redundant"
msgstr ""

#: ../../pep-0498.txt:631
msgid ""
"The ``!s``, ``!r``, and ``!a`` conversions are not strictly required. "
"Because arbitrary expressions are allowed inside the f-strings, this "
"code::"
msgstr ""

#: ../../pep-0498.txt:639
msgid "Is identical to::"
msgstr ""

#: ../../pep-0498.txt:644
msgid ""
"Similarly, ``!s`` can be replaced by calls to ``str()`` and ``!a`` by "
"calls to ``ascii()``."
msgstr ""

#: ../../pep-0498.txt:647
msgid ""
"However, ``!s``, ``!r``, and ``!a`` are supported by this PEP in order to"
" minimize the differences with ``str.format()``. ``!s``, ``!r``, and "
"``!a`` are required in ``str.format()`` because it does not allow the "
"execution of arbitrary expressions."
msgstr ""

#: ../../pep-0498.txt:653
msgid "Lambdas inside expressions"
msgstr ""

#: ../../pep-0498.txt:655
msgid ""
"Because lambdas use the ``':'`` character, they cannot appear outside of "
"parentheses in an expression. The colon is interpreted as the start of "
"the format specifier, which means the start of the lambda expression is "
"seen and is syntactically invalid. As there's no practical use for a "
"plain lambda in an f-string expression, this is not seen as much of a "
"limitation."
msgstr ""

#: ../../pep-0498.txt:662
msgid "If you feel you must use lambdas, they may be used inside of parentheses::"
msgstr ""

#: ../../pep-0498.txt:668
msgid "Can't combine with 'u'"
msgstr ""

#: ../../pep-0498.txt:670
msgid ""
"The 'u' prefix was added to Python 3.3 in PEP 414 as a means to ease "
"source compatibility with Python 2.7. Because Python 2.7 will never "
"support f-strings, there is nothing to be gained by being able to combine"
" the 'f' prefix with 'u'."
msgstr ""

#: ../../pep-0498.txt:676
msgid "Examples from Python's source code"
msgstr ""

#: ../../pep-0498.txt:678
msgid ""
"Here are some examples from Python source code that currently use "
"``str.format()``, and how they would look with f-strings. This PEP does "
"not recommend wholesale converting to f-strings, these are just examples "
"of real-world usages of ``str.format()`` and how they'd look if written "
"from scratch using f-strings."
msgstr ""

#: ../../pep-0498.txt:684
msgid "``Lib/asyncio/locks.py``::"
msgstr ""

#: ../../pep-0498.txt:689
msgid "``Lib/configparser.py``::"
msgstr ""

#: ../../pep-0498.txt:694
msgid "``Tools/clinic/clinic.py``::"
msgstr ""

#: ../../pep-0498.txt:699
msgid "``python-config.py``::"
msgstr ""

#: ../../pep-0498.txt:705
msgid "References"
msgstr ""

#: ../../pep-0498.txt:707
#, python-format
msgid ""
"%-formatting (https://docs.python.org/3/library/stdtypes.html#printf-"
"style-string-formatting)"
msgstr ""

#: ../../pep-0498.txt:710
msgid "str.format (https://docs.python.org/3/library/string.html#formatstrings)"
msgstr ""

#: ../../pep-0498.txt:713
msgid ""
"string.Template documentation "
"(https://docs.python.org/3/library/string.html#template-strings)"
msgstr ""

#: ../../pep-0498.txt:716
msgid ""
"Formatting using locals() and globals() "
"(https://mail.python.org/pipermail/python-ideas/2015-July/034671.html)"
msgstr ""

#: ../../pep-0498.txt:719
msgid ""
"Avoid locals() and globals() (https://mail.python.org/pipermail/python-"
"ideas/2015-July/034701.html)"
msgstr ""

#: ../../pep-0498.txt:722
msgid ""
"String literal description "
"(https://docs.python.org/3/reference/lexical_analysis.html#string-and-"
"bytes-literals)"
msgstr ""

#: ../../pep-0498.txt:725
msgid ""
"ast.parse() documentation "
"(https://docs.python.org/3/library/ast.html#ast.parse)"
msgstr ""

#: ../../pep-0498.txt:728
msgid ""
"Start of python-ideas discussion (https://mail.python.org/pipermail"
"/python-ideas/2015-July/034657.html)"
msgstr ""

#: ../../pep-0498.txt:731
msgid ""
"Wikipedia article on string interpolation "
"(https://en.wikipedia.org/wiki/String_interpolation)"
msgstr ""

#: ../../pep-0498.txt:734
msgid ""
"Differences in str.format() and f-string expressions "
"(https://mail.python.org/pipermail/python-ideas/2015-July/034726.html)"
msgstr ""

#: ../../pep-0498.txt:737
msgid ""
"PEP 461 rejects bytes.format() (https://www.python.org/dev/peps/pep-0461"
"/#proposed-variations)"
msgstr ""

#: ../../pep-0498.txt:741
msgid "Copyright"
msgstr ""

#: ../../pep-0498.txt:743
msgid "This document has been placed in the public domain."
msgstr ""

