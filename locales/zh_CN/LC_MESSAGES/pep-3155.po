# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-3155.txt
msgid "PEP"
msgstr ""

#: ../../pep-3155.txt:1
msgid "3155"
msgstr ""

#: ../../pep-3155.txt
msgid "Title"
msgstr ""

#: ../../pep-3155.txt:2
msgid "Qualified name for classes and functions"
msgstr ""

#: ../../pep-3155.txt
msgid "Author"
msgstr ""

#: ../../pep-3155.txt:5
msgid "Antoine Pitrou <solipsis@pitrou.net>"
msgstr ""

#: ../../pep-3155.txt
msgid "Status"
msgstr ""

#: ../../pep-3155.txt:6
msgid "Final"
msgstr ""

#: ../../pep-3155.txt
msgid "Type"
msgstr ""

#: ../../pep-3155.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-3155.txt
msgid "Created"
msgstr ""

#: ../../pep-3155.txt:9
msgid "29-Oct-2011"
msgstr ""

#: ../../pep-3155.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-3155.txt:10
msgid "3.3"
msgstr ""

#: ../../pep-3155.txt
msgid "Post-History"
msgstr ""

#: ../../pep-3155.txt
msgid "Resolution"
msgstr ""

#: ../../pep-3155.txt:12
msgid "https://mail.python.org/pipermail/python-dev/2011-November/114545.html"
msgstr ""

#: ../../pep-3155.txt:16
msgid "Rationale"
msgstr ""

#: ../../pep-3155.txt:18
msgid ""
"Python's introspection facilities have long had poor support for nested "
"classes.  Given a class object, it is impossible to know whether it was "
"defined inside another class or at module top-level; and, if the former, "
"it is also impossible to know in which class it was defined.  While use "
"of nested classes is often considered poor style, the only reason for "
"them to have second class introspection support is a lousy pun."
msgstr ""

#: ../../pep-3155.txt:26
msgid ""
"Python 3 adds insult to injury by dropping what was formerly known as "
"unbound methods.  In Python 2, given the following definition::"
msgstr ""

#: ../../pep-3155.txt:33
msgid "you can then walk up from the ``C.f`` object to its defining class::"
msgstr ""

#: ../../pep-3155.txt:38
msgid "This possibility is gone in Python 3::"
msgstr ""

#: ../../pep-3155.txt:53
msgid ""
"This limits again the introspection capabilities available to the user.  "
"It can produce actual issues when porting software to Python 3, for "
"example Twisted Core where the issue of introspecting method objects came"
" up several times.  It also limits pickling support [1]_."
msgstr ""

#: ../../pep-3155.txt:60
msgid "Proposal"
msgstr ""

#: ../../pep-3155.txt:62
msgid ""
"This PEP proposes the addition of a ``__qualname__`` attribute to "
"functions and classes.  For top-level functions and classes, the "
"``__qualname__`` attribute is equal to the ``__name__`` attribute.  For "
"nested classes, methods, and nested functions, the ``__qualname__`` "
"attribute contains a dotted path leading to the object from the module "
"top-level.  A function's local namespace is represented in that dotted "
"path by a component named ``<locals>``."
msgstr ""

#: ../../pep-3155.txt:70
msgid ""
"The repr() and str() of functions and classes is modified to use "
"``__qualname__`` rather than ``__name__``."
msgstr ""

#: ../../pep-3155.txt:74
msgid "Example with nested classes"
msgstr ""

#: ../../pep-3155.txt:91
msgid "Example with nested functions"
msgstr ""

#: ../../pep-3155.txt:104
msgid "Limitations"
msgstr ""

#: ../../pep-3155.txt:106
msgid ""
"With nested functions (and classes defined inside functions), the dotted "
"path will not be walkable programmatically as a function's namespace is "
"not available from the outside.  It will still be more helpful to the "
"human reader than the bare ``__name__``."
msgstr ""

#: ../../pep-3155.txt:111
msgid ""
"As the ``__name__`` attribute, the ``__qualname__`` attribute is computed"
" statically and it will not automatically follow rebinding."
msgstr ""

#: ../../pep-3155.txt:116
msgid "Discussion"
msgstr ""

#: ../../pep-3155.txt:119
msgid "Excluding the module name"
msgstr ""

#: ../../pep-3155.txt:121
msgid ""
"As ``__name__``, ``__qualname__`` doesn't include the module name.  This "
"makes it independent of module aliasing and rebinding, and also allows to"
" compute it at compile time."
msgstr ""

#: ../../pep-3155.txt:126
msgid "Reviving unbound methods"
msgstr ""

#: ../../pep-3155.txt:128
msgid ""
"Reviving unbound methods would only solve a fraction of the problems this"
" PEP solves, at a higher price (an additional object type and an "
"additional indirection, rather than an additional attribute)."
msgstr ""

#: ../../pep-3155.txt:134
msgid "Naming choice"
msgstr ""

#: ../../pep-3155.txt:136
msgid ""
"\"Qualified name\" is the best approximation, as a short phrase, of what "
"the additional attribute is about.  It is not a \"full name\" or \"fully "
"qualified name\" since it (deliberately) does not include the module "
"name.  Calling it a \"path\" would risk confusion with filesystem paths "
"and the ``__file__`` attribute."
msgstr ""

#: ../../pep-3155.txt:142
msgid ""
"The first proposal for the attribute name was to call it ``__qname__`` "
"but many people (who are not aware of previous use of such jargon in e.g."
" the XML specification [2]_) found it obscure and non-obvious, which is "
"why the slightly less short and more explicit ``__qualname__`` was "
"finally chosen."
msgstr ""

#: ../../pep-3155.txt:149
msgid "References"
msgstr ""

#: ../../pep-3155.txt:151
msgid "\"pickle should support methods\": http://bugs.python.org/issue9276"
msgstr ""

#: ../../pep-3155.txt:154
msgid "\"QName\" entry in Wikipedia: http://en.wikipedia.org/wiki/QName"
msgstr ""

#: ../../pep-3155.txt:159
msgid "Copyright"
msgstr ""

#: ../../pep-3155.txt:161
msgid "This document has been placed in the public domain."
msgstr ""

