# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0425.txt
msgid "PEP"
msgstr ""

#: ../../pep-0425.txt:1
msgid "425"
msgstr ""

#: ../../pep-0425.txt
msgid "Title"
msgstr ""

#: ../../pep-0425.txt:2
msgid "Compatibility Tags for Built Distributions"
msgstr ""

#: ../../pep-0425.txt
msgid "Author"
msgstr ""

#: ../../pep-0425.txt:5
msgid "Daniel Holth <dholth@gmail.com>"
msgstr ""

#: ../../pep-0425.txt
msgid "BDFL-Delegate"
msgstr ""

#: ../../pep-0425.txt:6
msgid "Nick Coghlan <ncoghlan@gmail.com>"
msgstr ""

#: ../../pep-0425.txt
msgid "Status"
msgstr ""

#: ../../pep-0425.txt:7
msgid "Final"
msgstr ""

#: ../../pep-0425.txt
msgid "Type"
msgstr ""

#: ../../pep-0425.txt:8
msgid "Standards Track"
msgstr ""

#: ../../pep-0425.txt
msgid "Created"
msgstr ""

#: ../../pep-0425.txt:10
msgid "27-Jul-2012"
msgstr ""

#: ../../pep-0425.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0425.txt:11
msgid "3.4"
msgstr ""

#: ../../pep-0425.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0425.txt:12
msgid "8-Aug-2012, 18-Oct-2012, 15-Feb-2013"
msgstr ""

#: ../../pep-0425.txt
msgid "Resolution"
msgstr ""

#: ../../pep-0425.txt:13
msgid "https://mail.python.org/pipermail/python-dev/2013-February/124116.html"
msgstr ""

#: ../../pep-0425.txt:17
msgid "Abstract"
msgstr ""

#: ../../pep-0425.txt:19
msgid ""
"This PEP specifies a tagging system to indicate with which versions of "
"Python a built or binary distribution is compatible.  A set of three tags"
" indicate which Python implementation and language version, ABI, and "
"platform a built distribution requires.  The tags are terse because they "
"will be included in filenames."
msgstr ""

#: ../../pep-0425.txt:27
msgid "PEP Acceptance"
msgstr ""

#: ../../pep-0425.txt:29
msgid "This PEP was accepted by Nick Coghlan on 17th February, 2013."
msgstr ""

#: ../../pep-0425.txt:33
msgid "Rationale"
msgstr ""

#: ../../pep-0425.txt:35
msgid ""
"Today \"python setup.py bdist\" generates the same filename on PyPy and "
"CPython, but an incompatible archive, making it inconvenient to share "
"built distributions in the same folder or index.  Instead, built "
"distributions should have a file naming convention that includes enough "
"information to decide whether or not a particular archive is compatible "
"with a particular implementation."
msgstr ""

#: ../../pep-0425.txt:42
msgid ""
"Previous efforts come from a time where CPython was the only important "
"implementation and the ABI was the same as the Python language release. "
"This specification improves upon the older schemes by including the "
"Python implementation, language version, ABI, and platform as a set of "
"tags."
msgstr ""

#: ../../pep-0425.txt:47
msgid ""
"By comparing the tags it supports with the tags listed by the "
"distribution, an installer can make an educated decision about whether to"
" download a particular built distribution without having to read its full"
" metadata."
msgstr ""

#: ../../pep-0425.txt:53
msgid "Overview"
msgstr ""

#: ../../pep-0425.txt:55
msgid "The tag format is {python tag}-{abi tag}-{platform tag}"
msgstr ""

#: ../../pep-0425.txt:57
msgid "python tag"
msgstr ""

#: ../../pep-0425.txt:58
msgid "‘py27’, ‘cp33’"
msgstr ""

#: ../../pep-0425.txt:59
msgid "abi tag"
msgstr ""

#: ../../pep-0425.txt:60
msgid "‘cp32dmu’, ‘none’"
msgstr ""

#: ../../pep-0425.txt:62
msgid "platform tag"
msgstr ""

#: ../../pep-0425.txt:62
msgid "‘linux_x86_64’, ‘any’"
msgstr ""

#: ../../pep-0425.txt:64
msgid ""
"For example, the tag py27-none-any indicates compatible with Python 2.7 "
"(any Python 2.7 implementation) with no abi requirement, on any platform."
msgstr ""

#: ../../pep-0425.txt:68 ../../pep-0425.txt:133
msgid "Use"
msgstr ""

#: ../../pep-0425.txt:70
msgid ""
"The `wheel` built package format includes these tags in its filenames, of"
" the form ``{distribution}-{version}(-{build tag})?-{python tag}-{abi "
"tag}-{platform tag}.whl``.  Other package formats may have their own "
"conventions."
msgstr ""

#: ../../pep-0425.txt:76
msgid "Details"
msgstr ""

#: ../../pep-0425.txt:79
msgid "Python Tag"
msgstr ""

#: ../../pep-0425.txt:81
msgid ""
"The Python tag indicates the implementation and version required by a "
"distribution.  Major implementations have abbreviated codes, initially:"
msgstr ""

#: ../../pep-0425.txt:84
msgid "py: Generic Python (does not require implementation-specific features)"
msgstr ""

#: ../../pep-0425.txt:85
msgid "cp: CPython"
msgstr ""

#: ../../pep-0425.txt:86
msgid "ip: IronPython"
msgstr ""

#: ../../pep-0425.txt:87
msgid "pp: PyPy"
msgstr ""

#: ../../pep-0425.txt:88
msgid "jy: Jython"
msgstr ""

#: ../../pep-0425.txt:90
msgid "Other Python implementations should use `sys.implementation.name`."
msgstr ""

#: ../../pep-0425.txt:92
msgid ""
"The version is `py_version_nodot`.  CPython gets away with no dot, but if"
" one is needed the underscore `_` is used instead.  PyPy should probably "
"use its own versions here `pp18`, `pp19`."
msgstr ""

#: ../../pep-0425.txt:96
msgid ""
"The version can be just the major version `2` or `3` `py2`, `py3` for "
"many pure-Python distributions."
msgstr ""

#: ../../pep-0425.txt:99
msgid ""
"Importantly, major-version-only tags like `py2` and `py3` are not "
"shorthand for `py20` and `py30`.  Instead, these tags mean the packager "
"intentionally released a cross-version-compatible distribution."
msgstr ""

#: ../../pep-0425.txt:103
msgid ""
"A single-source Python 2/3 compatible distribution can use the compound "
"tag `py2.py3`.  See `Compressed Tag Sets`, below."
msgstr ""

#: ../../pep-0425.txt:107
msgid "ABI Tag"
msgstr ""

#: ../../pep-0425.txt:109
msgid ""
"The ABI tag indicates which Python ABI is required by any included "
"extension modules.  For implementation-specific ABIs, the implementation "
"is abbreviated in the same way as the Python Tag, e.g. `cp33d` would be "
"the CPython 3.3 ABI with debugging."
msgstr ""

#: ../../pep-0425.txt:114
msgid "The CPython stable ABI is `abi3` as in the shared library suffix."
msgstr ""

#: ../../pep-0425.txt:116
msgid ""
"Implementations with a very unstable ABI may use the first 6 bytes (as 8 "
"base64-encoded characters) of the SHA-256 hash of their source code "
"revision and compiler flags, etc, but will probably not have a great need"
" to distribute binary distributions. Each implementation's community may "
"decide how to best use the ABI tag."
msgstr ""

#: ../../pep-0425.txt:123
msgid "Platform Tag"
msgstr ""

#: ../../pep-0425.txt:125
msgid ""
"The platform tag is simply `distutils.util.get_platform()` with all "
"hyphens `-` and periods `.` replaced with underscore `_`."
msgstr ""

#: ../../pep-0425.txt:128
msgid "win32"
msgstr ""

#: ../../pep-0425.txt:129
msgid "linux_i386"
msgstr ""

#: ../../pep-0425.txt:130
msgid "linux_x86_64"
msgstr ""

#: ../../pep-0425.txt:135
msgid ""
"The tags are used by installers to decide which built distribution (if "
"any) to download from a list of potential built distributions. The "
"installer maintains a list of (pyver, abi, arch) tuples that it will "
"support.  If the built distribution's tag is `in` the list, then it can "
"be installed."
msgstr ""

#: ../../pep-0425.txt:141
msgid ""
"It is recommended that installers try to choose the most feature complete"
" built distribution available (the one most specific to the installation "
"environment) by default before falling back to pure Python versions "
"published for older Python releases. Installers are also recommended to "
"provide a way to configure and re-order the list of allowed compatibility"
" tags; for example, a user might accept only the `*-none-any` tags to "
"only download built packages that advertise themselves as being pure "
"Python."
msgstr ""

#: ../../pep-0425.txt:149
msgid ""
"Another desirable installer feature might be to include \"re-compile from"
" source if possible\" as more preferable than some of the compatible but "
"legacy pre-built options."
msgstr ""

#: ../../pep-0425.txt:153
msgid ""
"This example list is for an installer running under CPython 3.3 on a "
"linux_x86_64 system. It is in order from most-preferred (a distribution "
"with a compiled extension module, built for the current version of "
"Python) to least-preferred (a pure-Python distribution built with an "
"older version of Python):"
msgstr ""

#: ../../pep-0425.txt:159
msgid "cp33-cp33m-linux_x86_64"
msgstr ""

#: ../../pep-0425.txt:160
msgid "cp33-abi3-linux_x86_64"
msgstr ""

#: ../../pep-0425.txt:161
msgid "cp3-abi3-linux_x86_64"
msgstr ""

#: ../../pep-0425.txt:162
msgid "cp33-none-linux_x86_64*"
msgstr ""

#: ../../pep-0425.txt:163
msgid "cp3-none-linux_x86_64*"
msgstr ""

#: ../../pep-0425.txt:164
msgid "py33-none-linux_x86_64*"
msgstr ""

#: ../../pep-0425.txt:165
msgid "py3-none-linux_x86_64*"
msgstr ""

#: ../../pep-0425.txt:166
msgid "cp33-none-any"
msgstr ""

#: ../../pep-0425.txt:167
msgid "cp3-none-any"
msgstr ""

#: ../../pep-0425.txt:168
msgid "py33-none-any"
msgstr ""

#: ../../pep-0425.txt:169
msgid "py3-none-any"
msgstr ""

#: ../../pep-0425.txt:170
msgid "py32-none-any"
msgstr ""

#: ../../pep-0425.txt:171
msgid "py31-none-any"
msgstr ""

#: ../../pep-0425.txt:172
msgid "py30-none-any"
msgstr ""

#: ../../pep-0425.txt:174
msgid ""
"Built distributions may be platform specific for reasons other than C "
"extensions, such as by including a native executable invoked as a "
"subprocess."
msgstr ""

#: ../../pep-0425.txt:178
msgid ""
"Sometimes there will be more than one supported built distribution for a "
"particular version of a package.  For example, a packager could release a"
" package tagged `cp33-abi3-linux_x86_64` that contains an optional C "
"extension and the same distribution tagged `py3-none-any` that does not. "
"The index of the tag in the supported tags list breaks the tie, and the "
"package with the C extension is installed in preference to the package "
"without because that tag appears first in the list."
msgstr ""

#: ../../pep-0425.txt:187
msgid "Compressed Tag Sets"
msgstr ""

#: ../../pep-0425.txt:189
msgid ""
"To allow for compact filenames of bdists that work with more than one "
"compatibility tag triple, each tag in a filename can instead be a "
"'.'-separated, sorted, set of tags.  For example, pip, a pure-Python "
"package that is written to run under Python 2 and 3 with the same source "
"code, could distribute a bdist with the tag `py2.py3-none-any`. The full "
"list of simple tags is::"
msgstr ""

#: ../../pep-0425.txt:201
msgid ""
"A bdist format that implements this scheme should include the expanded "
"tags in bdist-specific metadata.  This compression scheme can generate "
"large numbers of unsupported tags and \"impossible\" tags that are "
"supported by no Python implementation e.g. \"cp33-cp31u-win64\", so use "
"it sparingly."
msgstr ""

#: ../../pep-0425.txt:207
msgid "FAQ"
msgstr ""

#: ../../pep-0425.txt:214
msgid "What tags are used by default?"
msgstr ""

#: ../../pep-0425.txt:210
msgid ""
"Tools should use the most-preferred architecture dependent tag e.g. `cp33"
"-cp33m-win32` or the most-preferred pure python tag e.g. `py33-none-any` "
"by default.  If the packager overrides the default it indicates that they"
" intended to provide cross-Python compatibility."
msgstr ""

#: ../../pep-0425.txt:224
msgid ""
"What tag do I use if my distribution uses a feature exclusive to the "
"newest version of Python?"
msgstr ""

#: ../../pep-0425.txt:217
msgid ""
"Compatibility tags aid installers in selecting the *most compatible* "
"build of a *single version* of a distribution. For example, when there is"
" no Python 3.3 compatible build of ``beaglevote-1.2.0`` (it uses a Python"
" 3.4 exclusive feature) it may still use the ``py3-none-any`` tag instead"
" of the ``py34-none-any`` tag. A Python 3.3 user must combine other "
"qualifiers, such as a requirement for the older release "
"``beaglevote-1.1.0`` that does not use the new feature, to get a "
"compatible build."
msgstr ""

#: ../../pep-0425.txt:229
msgid "Why isn't there a `.` in the Python version number?"
msgstr ""

#: ../../pep-0425.txt:227
msgid ""
"CPython has lasted 20+ years without a 3-digit major release. This should"
" continue for some time.  Other implementations may use _ as a delimiter,"
" since both - and . delimit the surrounding filename."
msgstr ""

#: ../../pep-0425.txt:235
msgid ""
"Why normalise hyphens and other non-alphanumeric characters to "
"underscores?"
msgstr ""

#: ../../pep-0425.txt:232
msgid ""
"To avoid conflicting with the \".\" and \"-\" characters that separate "
"components of the filename, and for better compatibility with the widest "
"range of filesystem limitations for filenames (including being usable in "
"URL paths without quoting)."
msgstr ""

#: ../../pep-0425.txt:244
msgid "Why not use special character <X> rather than \".\" or \"-\"?"
msgstr ""

#: ../../pep-0425.txt:238
msgid ""
"Either because that character is inconvenient or potentially confusing in"
" some contexts (for example, \"+\" must be quoted in URLs, \"~\" is used "
"to denote the user's home directory in POSIX), or because the advantages "
"weren't sufficiently compelling to justify changing the existing "
"reference implementation for the wheel format defined in PEP 427 (for "
"example, using \",\" rather than \".\" to separate components in a "
"compressed tag)."
msgstr ""

#: ../../pep-0425.txt:249
msgid "Who will maintain the registry of abbreviated implementations?"
msgstr ""

#: ../../pep-0425.txt:247
msgid ""
"New two-letter abbreviations can be requested on the python-dev mailing "
"list.  As a rule of thumb, abbreviations are reserved for the current 4 "
"most prominent implementations."
msgstr ""

#: ../../pep-0425.txt:254
msgid "Does the compatibility tag go into METADATA or PKG-INFO?"
msgstr ""

#: ../../pep-0425.txt:252
msgid ""
"No.  The compatibility tag is part of the built distribution's metadata."
"  METADATA / PKG-INFO should be valid for an entire distribution, not a "
"single build of that distribution."
msgstr ""

#: ../../pep-0425.txt:260
msgid "Why didn't you mention my favorite Python implementation?"
msgstr ""

#: ../../pep-0425.txt:257
msgid ""
"The abbreviated tags facilitate sharing compiled Python code in a public "
"index.  Your Python implementation can use this specification too, but "
"with longer tags. Recall that all \"pure Python\" built distributions "
"just use 'py'."
msgstr ""

#: ../../pep-0425.txt:268
msgid ""
"Why is the ABI tag (the second tag) sometimes \"none\" in the reference "
"implementation?"
msgstr ""

#: ../../pep-0425.txt:263
msgid ""
"Since Python 2 does not have an easy way to get to the SOABI (the concept"
" comes from newer versions of Python 3) the reference implementation at "
"the time of writing guesses \"none\".  Ideally it would detect "
"\"py27(d|m|u)\" analogous to newer versions of Python, but in the "
"meantime \"none\" is a good enough way to say \"don't know\"."
msgstr ""

#: ../../pep-0425.txt:271
msgid "References"
msgstr ""

#: ../../pep-0425.txt:273
msgid ""
"Egg Filename-Embedded Metadata "
"(http://peak.telecommunity.com/DevCenter/EggFormats#filename-embedded-"
"metadata)"
msgstr ""

#: ../../pep-0425.txt:276
msgid ""
"Creating Built Distributions "
"(http://docs.python.org/distutils/builtdist.html)"
msgstr ""

#: ../../pep-0425.txt:279
msgid ""
"PEP 3147 -- PYC Repository Directories "
"(http://www.python.org/dev/peps/pep-3147/)"
msgstr ""

#: ../../pep-0425.txt:283
msgid "Acknowledgements"
msgstr ""

#: ../../pep-0425.txt:285
msgid ""
"The author thanks Paul Moore, Nick Coghlan, Marc Abramowitz, and Mr. "
"Michele Lacchia for their valuable help and advice."
msgstr ""

#: ../../pep-0425.txt:289
msgid "Copyright"
msgstr ""

#: ../../pep-0425.txt:291
msgid "This document has been placed in the public domain."
msgstr ""

