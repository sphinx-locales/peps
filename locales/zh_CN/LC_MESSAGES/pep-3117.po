# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-3117.txt
msgid "PEP"
msgstr ""

#: ../../pep-3117.txt:1
msgid "3117"
msgstr ""

#: ../../pep-3117.txt
msgid "Title"
msgstr ""

#: ../../pep-3117.txt:2
msgid "Postfix type declarations"
msgstr ""

#: ../../pep-3117.txt
msgid "Author"
msgstr ""

#: ../../pep-3117.txt:5
msgid "Georg Brandl <georg@python.org>"
msgstr ""

#: ../../pep-3117.txt
msgid "Status"
msgstr ""

#: ../../pep-3117.txt:6
msgid "Rejected"
msgstr ""

#: ../../pep-3117.txt ../../pep-3117.txt:78
msgid "Type"
msgstr ""

#: ../../pep-3117.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-3117.txt
msgid "Created"
msgstr ""

#: ../../pep-3117.txt:9
msgid "01-Apr-2007"
msgstr ""

#: ../../pep-3117.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-3117.txt:10
msgid "3.0"
msgstr ""

#: ../../pep-3117.txt
msgid "Post-History"
msgstr ""

#: ../../pep-3117.txt:15
msgid "Abstract"
msgstr ""

#: ../../pep-3117.txt:17
msgid ""
"This PEP proposes the addition of a postfix type declaration syntax to "
"Python. It also specifies a new ``typedef`` statement which is used to "
"create new mappings between types and declarators."
msgstr ""

#: ../../pep-3117.txt:21
msgid ""
"Its acceptance will greatly enhance the Python user experience as well as"
" eliminate one of the warts that deter users of other programming "
"languages from switching to Python."
msgstr ""

#: ../../pep-3117.txt:27
msgid "Rationale"
msgstr ""

#: ../../pep-3117.txt:29
msgid ""
"Python has long suffered from the lack of explicit type declarations.  "
"Being one of the few aspects in which the language deviates from its Zen,"
" this wart has sparked many a discussion between Python heretics and "
"members of the PSU (for a few examples, see [EX1]_, [EX2]_ or [EX3]_), "
"and it also made it a large-scale enterprise success unlikely."
msgstr ""

#: ../../pep-3117.txt:35
msgid ""
"However, if one wants to put an end to this misery, a decent Pythonic "
"syntax must be found. In almost all languages that have them, type "
"declarations lack this quality: they are verbose, often needing *multiple"
" words* for a single type, or they are hard to comprehend (e.g., a "
"certain language uses completely unrelated [#]_ adjectives like ``dim`` "
"for type declaration)."
msgstr ""

#: ../../pep-3117.txt:41
msgid ""
"Therefore, this PEP combines the move to type declarations with another "
"bold move that will once again prove that Python is not only future-proof"
" but future-embracing: the introduction of Unicode characters as an "
"integral constituent of source code."
msgstr ""

#: ../../pep-3117.txt:46
msgid ""
"Unicode makes it possible to express much more with much less characters,"
" which is in accordance with the Zen (\"Readability counts.\") [ZEN]_. "
"Additionally, it eliminates the need for a separate type declaration "
"statement, and last but not least, it makes Python measure up to Perl 6, "
"which already uses Unicode for its operators. [#]_"
msgstr ""

#: ../../pep-3117.txt:54
msgid "Specification"
msgstr ""

#: ../../pep-3117.txt:56
msgid ""
"When the type declaration mode is in operation, the grammar is changed so"
" that each ``NAME`` must consist of two parts: a name and a type "
"declarator, which is exactly one Unicode character."
msgstr ""

#: ../../pep-3117.txt:60
msgid ""
"The declarator uniquely specifies the type of the name, and if it occurs "
"on the left hand side of an expression, this type is enforced: an "
"``InquisitionError`` exception is raised if the returned type doesn't "
"match the declared type. [#]_"
msgstr ""

#: ../../pep-3117.txt:64
msgid ""
"Also, function call result types have to be specified. If the result of "
"the call does not have the declared type, an ``InquisitionError`` is "
"raised.  Caution: the declarator for the result should not be confused "
"with the declarator for the function object (see the example below)."
msgstr ""

#: ../../pep-3117.txt:69
msgid ""
"Type declarators after names that are only read, not assigned to, are not"
" strictly necessary but enforced anyway (see the Python Zen: \"Explicit "
"is better than implicit.\")."
msgstr ""

#: ../../pep-3117.txt:73
msgid ""
"The mapping between types and declarators is not static. It can be "
"completely customized by the programmer, but for convenience there are "
"some predefined mappings for some built-in types:"
msgstr ""

#: ../../pep-3117.txt:78
msgid "Declarator"
msgstr ""

#: ../../pep-3117.txt:80
msgid "``object``"
msgstr ""

#: ../../pep-3117.txt:80
msgid "� (REPLACEMENT CHARACTER)"
msgstr ""

#: ../../pep-3117.txt:81
msgid "``int``"
msgstr ""

#: ../../pep-3117.txt:81
msgid "ℕ (DOUBLE-STRUCK CAPITAL N)"
msgstr ""

#: ../../pep-3117.txt:82
msgid "``float``"
msgstr ""

#: ../../pep-3117.txt:82
msgid "℮ (ESTIMATED SYMBOL)"
msgstr ""

#: ../../pep-3117.txt:83
msgid "``bool``"
msgstr ""

#: ../../pep-3117.txt:83
msgid "✓ (CHECK MARK)"
msgstr ""

#: ../../pep-3117.txt:84
msgid "``complex``"
msgstr ""

#: ../../pep-3117.txt:84
msgid "ℂ (DOUBLE-STRUCK CAPITAL C)"
msgstr ""

#: ../../pep-3117.txt:85
msgid "``str``"
msgstr ""

#: ../../pep-3117.txt:85
msgid "✎ (LOWER RIGHT PENCIL)"
msgstr ""

#: ../../pep-3117.txt:86
msgid "``unicode``"
msgstr ""

#: ../../pep-3117.txt:86
msgid "✒ (BLACK NIB)"
msgstr ""

#: ../../pep-3117.txt:87
msgid "``tuple``"
msgstr ""

#: ../../pep-3117.txt:87
msgid "⒯ (PARENTHESIZED LATIN SMALL LETTER T)"
msgstr ""

#: ../../pep-3117.txt:88
msgid "``list``"
msgstr ""

#: ../../pep-3117.txt:88
msgid "♨ (HOT SPRINGS)"
msgstr ""

#: ../../pep-3117.txt:89
msgid "``dict``"
msgstr ""

#: ../../pep-3117.txt:89
msgid "⧟ (DOUBLE-ENDED MULTIMAP)"
msgstr ""

#: ../../pep-3117.txt:90
msgid "``set``"
msgstr ""

#: ../../pep-3117.txt:90
msgid "∅ (EMPTY SET) (*Note:* this is also for full sets)"
msgstr ""

#: ../../pep-3117.txt:91
msgid "``frozenset``"
msgstr ""

#: ../../pep-3117.txt:91
msgid "☃ (SNOWMAN)"
msgstr ""

#: ../../pep-3117.txt:92
msgid "``datetime``"
msgstr ""

#: ../../pep-3117.txt:92
msgid "⌚ (WATCH)"
msgstr ""

#: ../../pep-3117.txt:93
msgid "``function``"
msgstr ""

#: ../../pep-3117.txt:93
msgid "ƛ (LATIN SMALL LETTER LAMBDA WITH STROKE)"
msgstr ""

#: ../../pep-3117.txt:94
msgid "``generator``"
msgstr ""

#: ../../pep-3117.txt:94
msgid "⚛ (ATOM SYMBOL)"
msgstr ""

#: ../../pep-3117.txt:95
msgid "``Exception``"
msgstr ""

#: ../../pep-3117.txt:95
msgid "⌁ (ELECTRIC ARROW)"
msgstr ""

#: ../../pep-3117.txt:98
msgid "The declarator for the ``None`` type is a zero-width space."
msgstr ""

#: ../../pep-3117.txt:100
msgid ""
"These characters should be obvious and easy to remember and type for "
"every programmer."
msgstr ""

#: ../../pep-3117.txt:105
msgid "Unicode replacement units"
msgstr ""

#: ../../pep-3117.txt:107
msgid ""
"Since even in our modern, globalized world there are still some old-"
"fashioned rebels who can't or don't want to use Unicode in their source "
"code, and since Python is a forgiving language, a fallback is provided "
"for those:"
msgstr ""

#: ../../pep-3117.txt:111
msgid ""
"Instead of the single Unicode character, they can type ``name${UNICODE "
"NAME OF THE DECLARATOR}$``. For example, these two function definitions "
"are equivalent::"
msgstr ""

#: ../../pep-3117.txt:117
msgid "and ::"
msgstr ""

#: ../../pep-3117.txt:122
msgid ""
"This is still easy to read and makes the full power of type-annotated "
"Python available to ASCII believers."
msgstr ""

#: ../../pep-3117.txt:127
msgid "The ``typedef`` statement"
msgstr ""

#: ../../pep-3117.txt:129
msgid ""
"The mapping between types and declarators can be extended with this new "
"statement."
msgstr ""

#: ../../pep-3117.txt:131
msgid "The syntax is as follows::"
msgstr ""

#: ../../pep-3117.txt:135
msgid ""
"where ``expr`` resolves to a type object. For convenience, the "
"``typedef`` statement can also be mixed with the ``class`` statement for "
"new classes, like so::"
msgstr ""

#: ../../pep-3117.txt:143
msgid "Example"
msgstr ""

#: ../../pep-3117.txt:145
msgid ""
"This is the standard ``os.path.normpath`` function, converted to type "
"declaration syntax::"
msgstr ""

#: ../../pep-3117.txt:174
msgid ""
"As you can clearly see, the type declarations add expressiveness, while "
"at the same time they make the code look much more professional."
msgstr ""

#: ../../pep-3117.txt:179
msgid "Compatibility issues"
msgstr ""

#: ../../pep-3117.txt:181
msgid "To enable type declaration mode, one has to write::"
msgstr ""

#: ../../pep-3117.txt:185
msgid ""
"which enables Unicode parsing of the source [#]_, makes ``typedef`` a "
"keyword and enforces correct types for all assignments and function "
"calls."
msgstr ""

#: ../../pep-3117.txt:190
msgid "Rejection"
msgstr ""

#: ../../pep-3117.txt:192
msgid ""
"After careful considering, much soul-searching, gnashing of teeth and "
"rending of garments, it has been decided to reject this PEP."
msgstr ""

#: ../../pep-3117.txt:197
msgid "References"
msgstr ""

#: ../../pep-3117.txt:200
msgid "https://mail.python.org/pipermail/python-list/2003-June/210588.html"
msgstr ""

#: ../../pep-3117.txt:202
msgid "https://mail.python.org/pipermail/python-list/2000-May/034685.html"
msgstr ""

#: ../../pep-3117.txt:204
msgid "http://groups.google.com/group/comp.lang.python/browse_frm/thread/6ae8c6add913635a/de40d4ffe9bd4304?lnk=gst&q=type+declarations&rnum=6"
msgstr ""

#: ../../pep-3117.txt:206
msgid ""
"Though, if you know the language in question, it may not be *that* "
"unrelated."
msgstr ""

#: ../../pep-3117.txt:208
msgid "http://www.python.org/dev/peps/pep-0020/"
msgstr ""

#: ../../pep-3117.txt:210
msgid "Well, it would, if there was a Perl 6."
msgstr ""

#: ../../pep-3117.txt:212
msgid ""
"Since the name ``TypeError`` is already in use, this name has been chosen"
" for obvious reasons."
msgstr ""

#: ../../pep-3117.txt:215
msgid ""
"The encoding in which the code is written is read from a standard coding "
"cookie. There will also be an autodetection mechanism, invoked by ``from "
"__future__ import encoding_hell``."
msgstr ""

#: ../../pep-3117.txt:221
msgid "Acknowledgements"
msgstr ""

#: ../../pep-3117.txt:223
msgid ""
"Many thanks go to Armin Ronacher, Alexander Schremmer and Marek Kubica "
"who helped find the most suitable and mnemonic declarator for built-in "
"types."
msgstr ""

#: ../../pep-3117.txt:226
msgid ""
"Thanks also to the Unicode Consortium for including all those useful "
"characters in the Unicode standard."
msgstr ""

#: ../../pep-3117.txt:231
msgid "Copyright"
msgstr ""

#: ../../pep-3117.txt:233
msgid "This document has been placed in the public domain."
msgstr ""

