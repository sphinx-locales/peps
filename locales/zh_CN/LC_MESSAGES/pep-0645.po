# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0645.rst
msgid "PEP"
msgstr ""

#: ../../pep-0645.rst:1
msgid "645"
msgstr ""

#: ../../pep-0645.rst
msgid "Title"
msgstr ""

#: ../../pep-0645.rst:2
msgid "Allow writing optional types as ``x?``"
msgstr ""

#: ../../pep-0645.rst
msgid "Author"
msgstr ""

#: ../../pep-0645.rst:3
msgid "Maggie Moss <maggiebmoss@gmail.com>"
msgstr ""

#: ../../pep-0645.rst
msgid "Sponsor"
msgstr ""

#: ../../pep-0645.rst:4
msgid "Guido van Rossum <guido@python.org>"
msgstr ""

#: ../../pep-0645.rst
msgid "Status"
msgstr ""

#: ../../pep-0645.rst:5
msgid "Draft"
msgstr ""

#: ../../pep-0645.rst
msgid "Type"
msgstr ""

#: ../../pep-0645.rst:6
msgid "Process"
msgstr ""

#: ../../pep-0645.rst
msgid "Created"
msgstr ""

#: ../../pep-0645.rst:8
msgid "25-Aug-2020"
msgstr ""

#: ../../pep-0645.rst:12
msgid "Abstract"
msgstr ""

#: ../../pep-0645.rst:13
msgid ""
"This PEP proposes adding a ``?`` operator for types to allow writing "
"``int?`` in place of ``Optional[int]``."
msgstr ""

#: ../../pep-0645.rst:17
msgid "Motivation"
msgstr ""

#: ../../pep-0645.rst:18
msgid ""
"Types have become a valuable and powerful part of the Python language. "
"However, many type annotations are verbose and add considerable friction "
"to using type annotations. By improving the typing syntax, adding types "
"to Python code becomes simpler and improves the development experience "
"for Python users."
msgstr ""

#: ../../pep-0645.rst:22
msgid ""
"In a similar vein, a PEP to introduce short hand syntax for `Union types "
"<https://www.python.org/dev/peps/pep-0604/>`_ [1]_ has been approved and "
"implemented."
msgstr ""

#: ../../pep-0645.rst:27
msgid "Rationale"
msgstr ""

#: ../../pep-0645.rst:29
#, python-format
msgid ""
"Types in Python can be quite verbose, this can be a hindrance when "
"working towards type adoption. Making types more ergonomic, as was done "
"with the Union type in PEP 604 (e.g., int | str), would reduce the effort"
" needed to add types to new and existing Python code. The Optional "
"annotation is used frequently in both partially and fully typed Python "
"code bases. In a small sampling of `5 well-typed open source projects, on"
" average 7% of annotations "
"<https://gist.github.com/MaggieMoss/fd8dfe002b2702fae243dbf81a62624e>`_ "
"[2] included at least one optional type. This indicates that updating the"
" syntax has the potential to make types more concise, reduce code length "
"and improve readability."
msgstr ""

#: ../../pep-0645.rst:36
msgid ""
"Simplifying the syntax for optionals has been `discussed previously "
"<https://github.com/python/typing/issues/429>`_ [3] within the typing "
"community. The consensus during these conversations has been that ``?`` "
"is the preferred operator. There is no native support for unary ``?`` in "
"Python and this will need to be added to the runtime."
msgstr ""

#: ../../pep-0645.rst:40
msgid ""
"Adding the ? sigil to the Python grammar has been proposed previously in "
"`PEP 505 <https://www.python.org/dev/peps/pep-0505/>`_ [4], which is "
"currently in a deferred state. PEP 505 proposes a:"
msgstr ""

#: ../../pep-0645.rst:43
msgid "\"None coalescing\" binary operator ``??``"
msgstr ""

#: ../../pep-0645.rst:45
msgid "\"None-aware attribute access\" operator ``?.`` (\"maybe dot\")"
msgstr ""

#: ../../pep-0645.rst:47
msgid "\"None-aware indexing\" operator ``?[]`` (\"maybe subscript\")"
msgstr ""

#: ../../pep-0645.rst:50
msgid ""
"Should PEP 505 be approved in the future, it would not interfere with the"
" typing specific ``?`` proposed in this PEP. As well, since all uses of "
"the ``?`` would be conceptually related, it would not be confusing in "
"terms of learning Python or a hindrance to quick visual comprehension."
msgstr ""

#: ../../pep-0645.rst:53
msgid ""
"The proposed syntax, with the postfix operator, mimics the optional "
"syntax found in other typed languages, like C#, TypeScript and Swift. The"
" widespread adoption and popularity of these languages means that Python "
"developers are likely already familiar with this syntax.::"
msgstr ""

#: ../../pep-0645.rst:62
msgid ""
"Adding this syntax would also follow the often used pattern of using "
"builtin types as annotations. For example, ``list``, ``dict`` and "
"``None``. This would allow more annotations to be added to Python code "
"without importing from ``typing``."
msgstr ""

#: ../../pep-0645.rst:67
msgid "Specification"
msgstr ""

#: ../../pep-0645.rst:69
msgid ""
"The new optional syntax should be accepted for function, variable, "
"attribute and parameter annotations."
msgstr ""

#: ../../pep-0645.rst:80
msgid ""
"The new optional syntax should be equivalent to the existing "
"typing.Optional syntax"
msgstr ""

#: ../../pep-0645.rst:86
msgid ""
"The new optional syntax should have the same identity as the existing "
"typing.Optional syntax."
msgstr ""

#: ../../pep-0645.rst:93
msgid "It should also be equivalent to a Union with None."
msgstr ""

#: ../../pep-0645.rst:103
msgid ""
"Since the new Union syntax specified in PEP 604 is supported in "
"``isinstance`` and ``issubclass``, the new optional syntax should be "
"supported in both ``isinstance`` and ``issubclass``,"
msgstr ""

#: ../../pep-0645.rst:110
msgid ""
"A new dunder method will need to be implemented to allow the ``?`` "
"operator to be overloaded for other functionality."
msgstr ""

#: ../../pep-0645.rst:114
msgid "Backwards Compatibility"
msgstr ""

#: ../../pep-0645.rst:116
msgid ""
"``?`` is currently unused in Python syntax, therefore this PEP is fully "
"backwards compatible."
msgstr ""

#: ../../pep-0645.rst:119
msgid "Reference Implementation"
msgstr ""

#: ../../pep-0645.rst:121
msgid ""
"A reference implementation can be found `here "
"<https://github.com/python/cpython/compare/master...MaggieMoss:new-"
"optional-syntax-postfix>`_ [5]."
msgstr ""

#: ../../pep-0645.rst:124
msgid "Rejected Ideas"
msgstr ""

#: ../../pep-0645.rst:126
msgid "Discussed alternatives were"
msgstr ""

#: ../../pep-0645.rst:128
msgid "The ``~`` operator was considered in place of ``?``."
msgstr ""

#: ../../pep-0645.rst:129
msgid "A prefix operator (``?int``)."
msgstr ""

#: ../../pep-0645.rst:133
msgid "References"
msgstr ""

#: ../../pep-0645.rst:135
msgid "PEP 604 (https://www.python.org/dev/peps/pep-0604/)"
msgstr ""

#: ../../pep-0645.rst:137
msgid ""
"Use of Optional Annotations in Open Source Python projects "
"(https://gist.github.com/MaggieMoss/fd8dfe002b2702fae243dbf81a62624e)"
msgstr ""

#: ../../pep-0645.rst:139
msgid ""
"Github Issue Discussion of Optional syntax "
"(https://github.com/python/typing/issues/429)"
msgstr ""

#: ../../pep-0645.rst:141
msgid "PEP 505 (https://www.python.org/dev/peps/pep-0505/)"
msgstr ""

#: ../../pep-0645.rst:143
msgid ""
"Reference Implementation "
"(https://github.com/python/cpython/compare/master...MaggieMoss:new-"
"optional-syntax-postfix)"
msgstr ""

#: ../../pep-0645.rst:147
msgid "Copyright"
msgstr ""

#: ../../pep-0645.rst:149
msgid ""
"This document is placed in the public domain or under the "
"CC0-1.0-Universal license, whichever is more permissive."
msgstr ""

