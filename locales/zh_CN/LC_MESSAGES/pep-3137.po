# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-3137.txt
msgid "PEP"
msgstr ""

#: ../../pep-3137.txt:1
msgid "3137"
msgstr ""

#: ../../pep-3137.txt
msgid "Title"
msgstr ""

#: ../../pep-3137.txt:2
msgid "Immutable Bytes and Mutable Buffer"
msgstr ""

#: ../../pep-3137.txt
msgid "Author"
msgstr ""

#: ../../pep-3137.txt:5
msgid "Guido van Rossum <guido@python.org>"
msgstr ""

#: ../../pep-3137.txt
msgid "Status"
msgstr ""

#: ../../pep-3137.txt:6
msgid "Final"
msgstr ""

#: ../../pep-3137.txt
msgid "Type"
msgstr ""

#: ../../pep-3137.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-3137.txt
msgid "Created"
msgstr ""

#: ../../pep-3137.txt:9
msgid "26-Sep-2007"
msgstr ""

#: ../../pep-3137.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-3137.txt:10
msgid "3.0"
msgstr ""

#: ../../pep-3137.txt
msgid "Post-History"
msgstr ""

#: ../../pep-3137.txt:11
msgid "26-Sep-2007, 30-Sep-2007"
msgstr ""

#: ../../pep-3137.txt:14
msgid "Introduction"
msgstr ""

#: ../../pep-3137.txt:16
msgid ""
"After releasing Python 3.0a1 with a mutable bytes type, pressure mounted "
"to add a way to represent immutable bytes.  Gregory P. Smith proposed a "
"patch that would allow making a bytes object temporarily immutable by "
"requesting that the data be locked using the new buffer API from PEP "
"3118.  This did not seem the right approach to me."
msgstr ""

#: ../../pep-3137.txt:22
msgid ""
"Jeffrey Yasskin, with the help of Adam Hupp, then prepared a patch to "
"make the bytes type immutable (by crudely removing all mutating APIs) and"
" fix the fall-out in the test suite.  This showed that there aren't all "
"that many places that depend on the mutability of bytes, with the "
"exception of code that builds up a return value from small pieces."
msgstr ""

#: ../../pep-3137.txt:28
msgid ""
"Thinking through the consequences, and noticing that using the array "
"module as an ersatz mutable bytes type is far from ideal, and recalling a"
" proposal put forward earlier by Talin, I floated the suggestion to have "
"both a mutable and an immutable bytes type.  (This had been brought up "
"before, but until seeing the evidence of Jeffrey's patch I wasn't open to"
" the suggestion.)"
msgstr ""

#: ../../pep-3137.txt:35
msgid ""
"Moreover, a possible implementation strategy became clear: use the old "
"PyString implementation, stripped down to remove locale support and "
"implicit conversions to/from Unicode, for the immutable bytes type, and "
"keep the new PyBytes implementation as the mutable bytes type."
msgstr ""

#: ../../pep-3137.txt:40
msgid ""
"The ensuing discussion made it clear that the idea is welcome but needs "
"to be specified more precisely.  Hence this PEP."
msgstr ""

#: ../../pep-3137.txt:44
msgid "Advantages"
msgstr ""

#: ../../pep-3137.txt:46
msgid ""
"One advantage of having an immutable bytes type is that code objects can "
"use these.  It also makes it possible to efficiently create hash tables "
"using bytes for keys; this may be useful when parsing protocols like HTTP"
" or SMTP which are based on bytes representing text."
msgstr ""

#: ../../pep-3137.txt:51
msgid ""
"Porting code that manipulates binary data (or encoded text) in Python 2.x"
" will be easier using the new design than using the original 3.0 design "
"with mutable bytes; simply replace ``str`` with ``bytes`` and change "
"'...' literals into b'...' literals."
msgstr ""

#: ../../pep-3137.txt:57
msgid "Naming"
msgstr ""

#: ../../pep-3137.txt:59
msgid "I propose the following type names at the Python level:"
msgstr ""

#: ../../pep-3137.txt:61
msgid "``bytes`` is an immutable array of bytes (PyString)"
msgstr ""

#: ../../pep-3137.txt:63
msgid "``bytearray`` is a mutable array of bytes (PyBytes)"
msgstr ""

#: ../../pep-3137.txt:65
msgid "``memoryview`` is a bytes view on another object (PyMemory)"
msgstr ""

#: ../../pep-3137.txt:67
msgid ""
"The old type named ``buffer`` is so similar to the new type "
"``memoryview``, introduce by PEP 3118, that it is redundant.  The rest of"
" this PEP doesn't discuss the functionality of ``memoryview``; it is just"
" mentioned here to justify getting rid of the old ``buffer`` type. (An "
"earlier version of this PEP proposed ``buffer`` as the new name for "
"PyBytes; in the end this name was deemed to confusing given the many "
"other uses of the word buffer.)"
msgstr ""

#: ../../pep-3137.txt:75
msgid ""
"While eventually it makes sense to change the C API names, this PEP "
"maintains the old C API names, which should be familiar to all."
msgstr ""

#: ../../pep-3137.txt:79
msgid "Summary"
msgstr ""

#: ../../pep-3137.txt:81
msgid ""
"Here's a simple ASCII-art table summarizing the type names in various "
"Python versions::"
msgstr ""

#: ../../pep-3137.txt:95
msgid "Literal Notations"
msgstr ""

#: ../../pep-3137.txt:97
msgid ""
"The b'...' notation introduced in Python 3.0a1 returns an immutable bytes"
" object, whatever variation is used.  To create a mutable array of bytes,"
" use bytearray(b'...') or bytearray([...]).  The latter form takes a list"
" of integers in range(256)."
msgstr ""

#: ../../pep-3137.txt:103
msgid "Functionality"
msgstr ""

#: ../../pep-3137.txt:106
msgid "PEP 3118 Buffer API"
msgstr ""

#: ../../pep-3137.txt:108
msgid ""
"Both bytes and bytearray implement the PEP 3118 buffer API.  The bytes "
"type only implements read-only requests; the bytearray type allows "
"writable and data-locked requests as well.  The element data type is "
"always 'B' (i.e. unsigned byte)."
msgstr ""

#: ../../pep-3137.txt:114
msgid "Constructors"
msgstr ""

#: ../../pep-3137.txt:116
msgid ""
"There are four forms of constructors, applicable to both bytes and "
"bytearray:"
msgstr ""

#: ../../pep-3137.txt:119
msgid ""
"``bytes(<bytes>)``, ``bytes(<bytearray>)``, ``bytearray(<bytes>)``, "
"``bytearray(<bytearray>)``: simple copying constructors, with the note "
"that ``bytes(<bytes>)`` might return its (immutable) argument, but "
"``bytearray(<bytearray>)`` always makes a copy."
msgstr ""

#: ../../pep-3137.txt:124
msgid ""
"``bytes(<str>, <encoding>[, <errors>])``, ``bytearray(<str>, <encoding>[,"
" <errors>])``: encode a text string.  Note that the ``str.encode()`` "
"method returns an *immutable* bytes object.  The <encoding> argument is "
"mandatory; <errors> is optional. <encoding> and <errors>, if given, must "
"be ``str`` instances."
msgstr ""

#: ../../pep-3137.txt:130
msgid ""
"``bytes(<memory view>)``, ``bytearray(<memory view>)``: construct a bytes"
" or bytearray object from anything that implements the PEP 3118 buffer "
"API."
msgstr ""

#: ../../pep-3137.txt:134
msgid ""
"``bytes(<iterable of ints>)``, ``bytearray(<iterable of ints>)``: "
"construct a bytes or bytearray object from a stream of integers in "
"range(256)."
msgstr ""

#: ../../pep-3137.txt:138
msgid ""
"``bytes(<int>)``, ``bytearray(<int>)``: construct a zero-initialized "
"bytes or bytearray object of a given length."
msgstr ""

#: ../../pep-3137.txt:142
msgid "Comparisons"
msgstr ""

#: ../../pep-3137.txt:144
msgid ""
"The bytes and bytearray types are comparable with each other and "
"orderable, so that e.g. b'abc' == bytearray(b'abc') < b'abd'."
msgstr ""

#: ../../pep-3137.txt:147
msgid ""
"Comparing either type to a str object for equality returns False "
"regardless of the contents of either operand.  Ordering comparisons with "
"str raise TypeError.  This is all conformant to the standard rules for "
"comparison and ordering between objects of incompatible types."
msgstr ""

#: ../../pep-3137.txt:153
msgid ""
"(**Note:** in Python 3.0a1, comparing a bytes instance with a str "
"instance would raise TypeError, on the premise that this would catch the "
"occasional mistake quicker, especially in code ported from Python 2.x.  "
"However, a long discussion on the python-3000 list pointed out so many "
"problems with this that it is clearly a bad idea, to be rolled back in "
"3.0a2 regardless of the fate of the rest of this PEP.)"
msgstr ""

#: ../../pep-3137.txt:161
msgid "Slicing"
msgstr ""

#: ../../pep-3137.txt:163
msgid ""
"Slicing a bytes object returns a bytes object.  Slicing a bytearray "
"object returns a bytearray object."
msgstr ""

#: ../../pep-3137.txt:166
msgid ""
"Slice assignment to a bytearray object accepts anything that implements "
"the PEP 3118 buffer API, or an iterable of integers in range(256)."
msgstr ""

#: ../../pep-3137.txt:171
msgid "Indexing"
msgstr ""

#: ../../pep-3137.txt:173
msgid ""
"Indexing bytes and bytearray returns small ints (like the bytes type in "
"3.0a1, and like lists or array.array('B'))."
msgstr ""

#: ../../pep-3137.txt:176
msgid ""
"Assignment to an item of a bytearray object accepts an int in range(256)."
"  (To assign from a bytes sequence, use a slice assignment.)"
msgstr ""

#: ../../pep-3137.txt:181
msgid "Str() and Repr()"
msgstr ""

#: ../../pep-3137.txt:183
msgid ""
"The str() and repr() functions return the same thing for these objects.  "
"The repr() of a bytes object returns a b'...' style literal. The repr() "
"of a bytearray returns a string of the form \"bytearray(b'...')\"."
msgstr ""

#: ../../pep-3137.txt:188
msgid "Operators"
msgstr ""

#: ../../pep-3137.txt:190
msgid ""
"The following operators are implemented by the bytes and bytearray types,"
" except where mentioned:"
msgstr ""

#: ../../pep-3137.txt:193
msgid ""
"``b1 + b2``: concatenation.  With mixed bytes/bytearray operands, the "
"return type is that of the first argument (this seems arbitrary until you"
" consider how ``+=`` works)."
msgstr ""

#: ../../pep-3137.txt:197
msgid "``b1 += b2``: mutates b1 if it is a bytearray object."
msgstr ""

#: ../../pep-3137.txt:199
msgid "``b * n``, ``n * b``: repetition; n must be an integer."
msgstr ""

#: ../../pep-3137.txt:201
msgid "``b *= n``: mutates b if it is a bytearray object."
msgstr ""

#: ../../pep-3137.txt:203
msgid ""
"``b1 in b2``, ``b1 not in b2``: substring test; b1 can be any object "
"implementing the PEP 3118 buffer API."
msgstr ""

#: ../../pep-3137.txt:206
msgid ""
"``i in b``, ``i not in b``: single-byte membership test; i must be an "
"integer (if it is a length-1 bytes array, it is considered to be a "
"substring test, with the same outcome)."
msgstr ""

#: ../../pep-3137.txt:210
msgid "``len(b)``: the number of bytes."
msgstr ""

#: ../../pep-3137.txt:212
msgid "``hash(b)``: the hash value; only implemented by the bytes type."
msgstr ""

#: ../../pep-3137.txt:214
#, python-format
msgid ""
"Note that the % operator is *not* implemented.  It does not appear worth "
"the complexity."
msgstr ""

#: ../../pep-3137.txt:218
msgid "Methods"
msgstr ""

#: ../../pep-3137.txt:220
msgid ""
"The following methods are implemented by bytes as well as bytearray, with"
" similar semantics.  They accept anything that implements the PEP 3118 "
"buffer API for bytes arguments, and return the same type as the object "
"whose method is called (\"self\")::"
msgstr ""

#: ../../pep-3137.txt:233
msgid ""
"This is exactly the set of methods present on the str type in Python 2.x,"
" with the exclusion of .encode().  The signatures and semantics are the "
"same too.  However, whenever character classes like letter, whitespace, "
"lower case are used, the ASCII definitions of these classes are used.  "
"(The Python 2.x str type uses the definitions from the current locale, "
"settable through the locale module.)  The .encode() method is left out "
"because of the more strict definitions of encoding and decoding in Python"
" 3000: encoding always takes a Unicode string and returns a bytes "
"sequence, and decoding always takes a bytes sequence and returns a "
"Unicode string."
msgstr ""

#: ../../pep-3137.txt:244
msgid ""
"In addition, both types implement the class method ``.fromhex()``, which "
"constructs an object from a string containing hexadecimal values (with or"
" without spaces between the bytes)."
msgstr ""

#: ../../pep-3137.txt:248
msgid ""
"The bytearray type implements these additional methods from the "
"MutableSequence ABC (see PEP 3119):"
msgstr ""

#: ../../pep-3137.txt:251
msgid ".extend(), .insert(), .append(), .reverse(), .pop(), .remove()."
msgstr ""

#: ../../pep-3137.txt:254
msgid "Bytes and the Str Type"
msgstr ""

#: ../../pep-3137.txt:256
msgid ""
"Like the bytes type in Python 3.0a1, and unlike the relationship between "
"str and unicode in Python 2.x, attempts to mix bytes (or bytearray) "
"objects and str objects without specifying an encoding will raise a "
"TypeError exception.  (However, comparing bytes/bytearray and str objects"
" for equality will simply return False; see the section on Comparisons "
"above.)"
msgstr ""

#: ../../pep-3137.txt:263
msgid ""
"Conversions between bytes or bytearray objects and str objects must "
"always be explicit, using an encoding.  There are two equivalent APIs: "
"``str(b, <encoding>[, <errors>])`` is equivalent to "
"``b.decode(<encoding>[, <errors>])``, and ``bytes(s, <encoding>[, "
"<errors>])`` is equivalent to ``s.encode(<encoding>[, <errors>])``."
msgstr ""

#: ../../pep-3137.txt:270
msgid ""
"There is one exception: we can convert from bytes (or bytearray) to str "
"without specifying an encoding by writing ``str(b)``.  This produces the "
"same result as ``repr(b)``.  This exception is necessary because of the "
"general promise that *any* object can be printed, and printing is just a "
"special case of conversion to str.  There is however no promise that "
"printing a bytes object interprets the individual bytes as characters "
"(unlike in Python 2.x)."
msgstr ""

#: ../../pep-3137.txt:278
msgid ""
"The str type currently implements the PEP 3118 buffer API.  While this is"
" perhaps occasionally convenient, it is also potentially confusing, "
"because the bytes accessed via the buffer API represent a platform-"
"depending encoding: depending on the platform byte order and a compile-"
"time configuration option, the encoding could be UTF-16-BE, UTF-16-LE, "
"UTF-32-BE, or UTF-32-LE.  Worse, a different implementation of the str "
"type might completely change the bytes representation, e.g. to UTF-8, or "
"even make it impossible to access the data as a contiguous array of bytes"
" at all.  Therefore, the PEP 3118 buffer API will be removed from the str"
" type."
msgstr ""

#: ../../pep-3137.txt:290
msgid "The ``basestring`` Type"
msgstr ""

#: ../../pep-3137.txt:292
msgid ""
"The ``basestring`` type will be removed from the language.  Code that "
"used to say ``isinstance(x, basestring)`` should be changed to use "
"``isinstance(x, str)`` instead."
msgstr ""

#: ../../pep-3137.txt:297
msgid "Pickling"
msgstr ""

#: ../../pep-3137.txt:299
msgid "Left as an exercise for the reader."
msgstr ""

#: ../../pep-3137.txt:302
msgid "Copyright"
msgstr ""

#: ../../pep-3137.txt:304
msgid "This document has been placed in the public domain."
msgstr ""

