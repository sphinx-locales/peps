# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0322.txt
msgid "PEP"
msgstr ""

#: ../../pep-0322.txt:1
msgid "322"
msgstr ""

#: ../../pep-0322.txt
msgid "Title"
msgstr ""

#: ../../pep-0322.txt:2
msgid "Reverse Iteration"
msgstr ""

#: ../../pep-0322.txt
msgid "Author"
msgstr ""

#: ../../pep-0322.txt:5
msgid "Raymond Hettinger <python@rcn.com>"
msgstr ""

#: ../../pep-0322.txt
msgid "Status"
msgstr ""

#: ../../pep-0322.txt:6
msgid "Final"
msgstr ""

#: ../../pep-0322.txt
msgid "Type"
msgstr ""

#: ../../pep-0322.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0322.txt
msgid "Created"
msgstr ""

#: ../../pep-0322.txt:9 ../../pep-0322.txt:11
msgid "24-Sep-2003"
msgstr ""

#: ../../pep-0322.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0322.txt:10
msgid "2.4"
msgstr ""

#: ../../pep-0322.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0322.txt:15
msgid "Abstract"
msgstr ""

#: ../../pep-0322.txt:17
msgid ""
"This proposal is to add a builtin function to support reverse iteration "
"over sequences."
msgstr ""

#: ../../pep-0322.txt:22
msgid "Motivation"
msgstr ""

#: ../../pep-0322.txt:24
msgid ""
"For indexable objects, current approaches for reverse iteration are error"
" prone, unnatural, and not especially readable::"
msgstr ""

#: ../../pep-0322.txt:30
msgid ""
"One other current approach involves reversing a list before iterating "
"over it.  That technique wastes computer cycles, memory, and lines of "
"code::"
msgstr ""

#: ../../pep-0322.txt:39
msgid ""
"Extended slicing is a third approach that minimizes the code overhead but"
" does nothing for memory efficiency, beauty, or clarity."
msgstr ""

#: ../../pep-0322.txt:42
msgid ""
"Reverse iteration is much less common than forward iteration, but it does"
" arise regularly in practice.  See `Real World Use Cases`_ below."
msgstr ""

#: ../../pep-0322.txt:47
msgid "Proposal"
msgstr ""

#: ../../pep-0322.txt:49
msgid ""
"Add a builtin function called *reversed()* that makes a reverse iterator "
"over sequence objects that support __getitem__() and __len__()."
msgstr ""

#: ../../pep-0322.txt:53
msgid "The above examples then simplify to::"
msgstr ""

#: ../../pep-0322.txt:63
msgid ""
"The core idea is that the clearest, least error-prone way of specifying "
"reverse iteration is to specify it in a forward direction and then say "
"*reversed*."
msgstr ""

#: ../../pep-0322.txt:67
msgid "The implementation could be as simple as::"
msgstr ""

#: ../../pep-0322.txt:77
msgid ""
"No language syntax changes are needed.  The proposal is fully backwards "
"compatible."
msgstr ""

#: ../../pep-0322.txt:80
msgid ""
"A C implementation and unit tests are at:  "
"https://bugs.python.org/issue834422"
msgstr ""

#: ../../pep-0322.txt:83
msgid "BDFL Pronouncement"
msgstr ""

#: ../../pep-0322.txt:85
msgid ""
"This PEP has been conditionally accepted for Py2.4.  The condition means "
"that if the function is found to be useless, it can be removed before "
"Py2.4b1."
msgstr ""

#: ../../pep-0322.txt:91
msgid "Alternative Method Names"
msgstr ""

#: ../../pep-0322.txt:93
msgid "*reviter*  -- Jeremy Fincher's suggestion matches use of iter()"
msgstr ""

#: ../../pep-0322.txt:94
msgid "*ireverse* -- uses the itertools naming convention"
msgstr ""

#: ../../pep-0322.txt:95
msgid "*inreverse* -- no one seems to like this one except me"
msgstr ""

#: ../../pep-0322.txt:97
msgid ""
"The name *reverse* is not a candidate because it duplicates the name of "
"the list.reverse() which mutates the underlying list."
msgstr ""

#: ../../pep-0322.txt:102
msgid "Discussion"
msgstr ""

#: ../../pep-0322.txt:104
msgid ""
"The case against adoption of the PEP is a desire to keep the number of "
"builtin functions small.  This needs to weighed against the simplicity "
"and convenience of having it as builtin instead of being tucked away in "
"some other namespace."
msgstr ""

#: ../../pep-0322.txt:111
msgid "Real World Use Cases"
msgstr ""

#: ../../pep-0322.txt:113
msgid ""
"Here are some instances of reverse iteration taken from the standard "
"library and comments on why reverse iteration was necessary:"
msgstr ""

#: ../../pep-0322.txt:116
msgid "atexit.exit_handlers() uses::"
msgstr ""

#: ../../pep-0322.txt:122
msgid ""
"In this application popping is required, so the new function would not "
"help."
msgstr ""

#: ../../pep-0322.txt:125
msgid ""
"heapq.heapify() uses ``for i in xrange(n//2 - 1, -1, -1)`` because "
"higher-level orderings are more easily formed from pairs of lower-level "
"orderings.  A forward version of this algorithm is possible; however, "
"that would complicate the rest of the heap code which iterates over the "
"underlying list in the opposite direction. The replacement code ``for i "
"in reversed(xrange(n//2))`` makes clear the range covered and how many "
"iterations it takes."
msgstr ""

#: ../../pep-0322.txt:133
msgid "mhlib.test() uses::"
msgstr ""

#: ../../pep-0322.txt:139 ../../pep-0322.txt:161
msgid ""
"The need for reverse iteration arises because the tail of the underlying "
"list is altered during iteration."
msgstr ""

#: ../../pep-0322.txt:142
msgid ""
"platform._dist_try_harder() uses ``for n in "
"range(len(verfiles)-1,-1,-1)`` because the loop deletes selected elements"
" from *verfiles* but needs to leave the rest of the list intact for "
"further iteration."
msgstr ""

#: ../../pep-0322.txt:147
msgid ""
"random.shuffle() uses ``for i in xrange(len(x)-1, 0, -1)`` because the "
"algorithm is most easily understood as randomly selecting elements from "
"an ever diminishing pool.  In fact, the algorithm can be run in a forward"
" direction but is less intuitive and rarely presented that way in "
"literature.  The replacement code ``for i in reversed(xrange(1, "
"len(x)))`` is much easier to verify visually."
msgstr ""

#: ../../pep-0322.txt:155
msgid "rfc822.Message.__delitem__() uses::"
msgstr ""

#: ../../pep-0322.txt:166
msgid "Rejected Alternatives"
msgstr ""

#: ../../pep-0322.txt:168
msgid ""
"Several variants were submitted that attempted to apply *reversed()* to "
"all iterables by running the iterable to completion, saving the results, "
"and then returning a reverse iterator over the results. While satisfying "
"some notions of full generality, running the input to the end is contrary"
" to the purpose of using iterators in the first place.  Also, a small "
"disaster ensues if the underlying iterator is infinite."
msgstr ""

#: ../../pep-0322.txt:176
msgid ""
"Putting the function in another module or attaching it to a type object "
"is not being considered.  Like its cousins, *zip()* and *enumerate()*, "
"the function needs to be directly accessible in daily programming.  Each "
"solves a basic looping problem:  lock-step iteration, loop counting, and "
"reverse iteration.  Requiring some form of dotted access would interfere "
"with their simplicity, daily utility, and accessibility.  They are core "
"looping constructs, independent of any one application domain."
msgstr ""

#: ../../pep-0322.txt:186
msgid "Copyright"
msgstr ""

#: ../../pep-0322.txt:188
msgid "This document has been placed in the public domain."
msgstr ""

