# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0489.txt
msgid "PEP"
msgstr ""

#: ../../pep-0489.txt:1
msgid "489"
msgstr ""

#: ../../pep-0489.txt
msgid "Title"
msgstr ""

#: ../../pep-0489.txt:2
msgid "Multi-phase extension module initialization"
msgstr ""

#: ../../pep-0489.txt
msgid "Author"
msgstr ""

#: ../../pep-0489.txt:5
msgid ""
"Petr Viktorin <encukou@gmail.com>, Stefan Behnel <stefan_ml@behnel.de>, "
"Nick Coghlan <ncoghlan@gmail.com>"
msgstr ""

#: ../../pep-0489.txt
msgid "BDFL-Delegate"
msgstr ""

#: ../../pep-0489.txt:8
msgid "Eric Snow <ericsnowcurrently@gmail.com>"
msgstr ""

#: ../../pep-0489.txt
msgid "Discussions-To"
msgstr ""

#: ../../pep-0489.txt:9
msgid "import-sig@python.org"
msgstr ""

#: ../../pep-0489.txt
msgid "Status"
msgstr ""

#: ../../pep-0489.txt:10
msgid "Final"
msgstr ""

#: ../../pep-0489.txt
msgid "Type"
msgstr ""

#: ../../pep-0489.txt:11
msgid "Standards Track"
msgstr ""

#: ../../pep-0489.txt
msgid "Created"
msgstr ""

#: ../../pep-0489.txt:13
msgid "11-Aug-2013"
msgstr ""

#: ../../pep-0489.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0489.txt:14
msgid "3.5"
msgstr ""

#: ../../pep-0489.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0489.txt:15
msgid "23-Aug-2013, 20-Feb-2015, 16-Apr-2015, 7-May-2015, 18-May-2015"
msgstr ""

#: ../../pep-0489.txt
msgid "Resolution"
msgstr ""

#: ../../pep-0489.txt:16
msgid "https://mail.python.org/pipermail/python-dev/2015-May/140108.html"
msgstr ""

#: ../../pep-0489.txt:20
msgid "Abstract"
msgstr ""

#: ../../pep-0489.txt:22
msgid ""
"This PEP proposes a redesign of the way in which built-in and extension "
"modules interact with the import machinery. This was last revised for "
"Python 3.0 in PEP 3121, but did not solve all problems at the time. The "
"goal is to solve import-related problems by bringing extension modules "
"closer to the way Python modules behave; specifically to hook into the "
"ModuleSpec-based loading mechanism introduced in PEP 451."
msgstr ""

#: ../../pep-0489.txt:29
msgid ""
"This proposal draws inspiration from PyType_Spec of PEP 384 to allow "
"extension authors to only define features they need, and to allow future "
"additions to extension module declarations."
msgstr ""

#: ../../pep-0489.txt:33
msgid ""
"Extensions modules are created in a two-step process, fitting better into"
" the ModuleSpec architecture, with parallels to __new__ and __init__ of "
"classes."
msgstr ""

#: ../../pep-0489.txt:36
msgid ""
"Extension modules can safely store arbitrary C-level per-module state in "
"the module that is covered by normal garbage collection and supports "
"reloading and sub-interpreters. Extension authors are encouraged to take "
"these issues into account when using the new API."
msgstr ""

#: ../../pep-0489.txt:42
msgid "The proposal also allows extension modules with non-ASCII names."
msgstr ""

#: ../../pep-0489.txt:44
msgid ""
"Not all problems tackled in PEP 3121 are solved in this proposal. In "
"particular, problems with run-time module lookup (PyState_FindModule) are"
" left to a future PEP."
msgstr ""

#: ../../pep-0489.txt:50
msgid "Motivation"
msgstr ""

#: ../../pep-0489.txt:52
msgid ""
"Python modules and extension modules are not being set up in the same "
"way. For Python modules, the module object is created and set up first, "
"then the module code is being executed (PEP 302). A ModuleSpec object "
"(PEP 451) is used to hold information about the module, and passed to the"
" relevant hooks."
msgstr ""

#: ../../pep-0489.txt:58
msgid ""
"For extensions (i.e. shared libraries) and built-in modules, the module "
"init function is executed straight away and does both the creation and "
"initialization. The initialization function is not passed the ModuleSpec,"
" or any information it contains, such as the __file__ or fully-qualified "
"name. This hinders relative imports and resource loading."
msgstr ""

#: ../../pep-0489.txt:64
msgid ""
"In Py3, modules are also not being added to sys.modules, which means that"
" a (potentially transitive) re-import of the module will really try to "
"re-import it and thus run into an infinite loop when it executes the "
"module init function again. Without access to the fully-qualified module "
"name, it is not trivial to correctly add the module to sys.modules "
"either. This is specifically a problem for Cython generated modules, for "
"which it's not uncommon that the module init code has the same level of "
"complexity as that of any 'regular' Python module. Also, the lack of "
"__file__ and __name__ information hinders the compilation of "
"\"__init__.py\" modules, i.e. packages, especially when relative imports "
"are being used at module init time."
msgstr ""

#: ../../pep-0489.txt:75
msgid ""
"Furthermore, the majority of currently existing extension modules has "
"problems with sub-interpreter support and/or interpreter reloading, and, "
"while it is possible with the current infrastructure to support these "
"features, it is neither easy nor efficient. Addressing these issues was "
"the goal of PEP 3121, but many extensions, including some in the standard"
" library, took the least-effort approach to porting to Python 3, leaving "
"these issues unresolved. This PEP keeps backwards compatibility, which "
"should reduce pressure and give extension authors adequate time to "
"consider these issues when porting."
msgstr ""

#: ../../pep-0489.txt:87
msgid "The current process"
msgstr ""

#: ../../pep-0489.txt:89
msgid ""
"Currently, extension and built-in modules export an initialization "
"function named \"PyInit_modulename\", named after the file name of the "
"shared library. This function is executed by the import machinery and "
"must return a fully initialized module object. The function receives no "
"arguments, so it has no way of knowing about its import context."
msgstr ""

#: ../../pep-0489.txt:96
msgid ""
"During its execution, the module init function creates a module object "
"based on a PyModuleDef object. It then continues to initialize it by "
"adding attributes to the module dict, creating types, etc."
msgstr ""

#: ../../pep-0489.txt:100
msgid ""
"In the back, the shared library loader keeps a note of the fully "
"qualified module name of the last module that it loaded, and when a "
"module gets created that has a matching name, this global variable is "
"used to determine the fully qualified name of the module object. This is "
"not entirely safe as it relies on the module init function creating its "
"own module object first, but this assumption usually holds in practice."
msgstr ""

#: ../../pep-0489.txt:109
msgid "The proposal"
msgstr ""

#: ../../pep-0489.txt:111
msgid ""
"The initialization function (PyInit_modulename) will be allowed to return"
" a pointer to a PyModuleDef object. The import machinery will be in "
"charge of constructing the module object, calling hooks provided in the "
"PyModuleDef in the relevant phases of initialization (as described "
"below)."
msgstr ""

#: ../../pep-0489.txt:116
msgid ""
"This multi-phase initialization is an additional possibility. Single-"
"phase initialization, the current practice of returning a fully "
"initialized module object, will still be accepted, so existing code will "
"work unchanged, including binary compatibility."
msgstr ""

#: ../../pep-0489.txt:121
msgid ""
"The PyModuleDef structure will be changed to contain a list of slots, "
"similarly to PEP 384's PyType_Spec for types. To keep binary "
"compatibility, and avoid needing to introduce a new structure (which "
"would introduce additional supporting functions and per-module storage), "
"the currently unused m_reload pointer of PyModuleDef will be changed to "
"hold the slots. The structures are defined as::"
msgstr ""

#: ../../pep-0489.txt:145
msgid ""
"The *m_slots* member must be either NULL, or point to an array of "
"PyModuleDef_Slot structures, terminated by a slot with id set to 0 (i.e. "
"``{0, NULL}``)."
msgstr ""

#: ../../pep-0489.txt:149
msgid ""
"To specify a slot, a unique slot ID must be provided. New Python versions"
" may introduce new slot IDs, but slot IDs will never be recycled. Slots "
"may get deprecated, but will continue to be supported throughout Python "
"3.x."
msgstr ""

#: ../../pep-0489.txt:154
msgid ""
"A slot's value pointer may not be NULL, unless specified otherwise in the"
" slot's documentation."
msgstr ""

#: ../../pep-0489.txt:157
msgid "The following slots are currently available, and described later:"
msgstr ""

#: ../../pep-0489.txt:159 ../../pep-0489.txt:722
msgid "Py_mod_create"
msgstr ""

#: ../../pep-0489.txt:160 ../../pep-0489.txt:723
msgid "Py_mod_exec"
msgstr ""

#: ../../pep-0489.txt:162
msgid "Unknown slot IDs will cause the import to fail with SystemError."
msgstr ""

#: ../../pep-0489.txt:164
msgid ""
"When using multi-phase initialization, the *m_name* field of PyModuleDef "
"will not be used during importing; the module name will be taken from the"
" ModuleSpec."
msgstr ""

#: ../../pep-0489.txt:167
msgid ""
"Before it is returned from PyInit_*, the PyModuleDef object must be "
"initialized using the newly added PyModuleDef_Init function. This sets "
"the object type (which cannot be done statically on certain compilers), "
"refcount, and internal bookkeeping data (m_index). For example, an "
"extension module \"example\" would be exported as::"
msgstr ""

#: ../../pep-0489.txt:181
msgid ""
"The PyModuleDef object must be available for the lifetime of the module "
"created from it – usually, it will be declared statically."
msgstr ""

#: ../../pep-0489.txt:185
msgid "Pseudo-code Overview"
msgstr ""

#: ../../pep-0489.txt:187
msgid ""
"Here is an overview of how the modified importers will operate. Details "
"such as logging or handling of errors and invalid states are left out, "
"and C code is presented with a concise Python-like syntax."
msgstr ""

#: ../../pep-0489.txt:191
msgid ""
"The framework that calls the importers is explained in PEP 451 "
"[#pep-0451-loading]_."
msgstr ""

#: ../../pep-0489.txt:194
msgid "importlib/_bootstrap.py:"
msgstr ""

#: ../../pep-0489.txt:209
msgid "importlib/_bootstrap_external.py:"
msgstr ""

#: ../../pep-0489.txt:224
msgid "Python/import.c (the _imp module):"
msgstr ""

#: ../../pep-0489.txt:273
msgid "Python/importdl.c:"
msgstr ""

#: ../../pep-0489.txt:298
msgid "Objects/moduleobject.c:"
msgstr ""

#: ../../pep-0489.txt:337
msgid "Module Creation Phase"
msgstr ""

#: ../../pep-0489.txt:339
msgid ""
"Creation of the module object – that is, the implementation of "
"ExecutionLoader.create_module – is governed by the Py_mod_create slot."
msgstr ""

#: ../../pep-0489.txt:343
msgid "The Py_mod_create slot"
msgstr ""

#: ../../pep-0489.txt:345
msgid ""
"The Py_mod_create slot is used to support custom module subclasses. The "
"value pointer must point to a function with the following signature::"
msgstr ""

#: ../../pep-0489.txt:350
msgid ""
"The function receives a ModuleSpec instance, as defined in PEP 451, and "
"the PyModuleDef structure. It should return a new module object, or set "
"an error and return NULL."
msgstr ""

#: ../../pep-0489.txt:355
msgid ""
"This function is not responsible for setting import-related attributes "
"specified in PEP 451 [#pep-0451-attributes]_ (such as ``__name__`` or "
"``__loader__``) on the new module."
msgstr ""

#: ../../pep-0489.txt:359
msgid ""
"There is no requirement for the returned object to be an instance of "
"types.ModuleType. Any type can be used, as long as it supports setting "
"and getting attributes, including at least the import-related attributes."
" However, only ModuleType instances support module-specific functionality"
" such as per-module state and processing of execution slots. If something"
" other than a ModuleType subclass is returned, no execution slots may be "
"defined; if any are, a SystemError is raised."
msgstr ""

#: ../../pep-0489.txt:367
msgid ""
"Note that when this function is called, the module's entry in sys.modules"
" is not populated yet. Attempting to import the same module again "
"(possibly transitively), may lead to an infinite loop. Extension authors "
"are advised to keep Py_mod_create minimal, an in particular to not call "
"user code from it."
msgstr ""

#: ../../pep-0489.txt:373
msgid ""
"Multiple Py_mod_create slots may not be specified. If they are, import "
"will fail with SystemError."
msgstr ""

#: ../../pep-0489.txt:376
msgid ""
"If Py_mod_create is not specified, the import machinery will create a "
"normal module object using PyModule_New. The name is taken from *spec*."
msgstr ""

#: ../../pep-0489.txt:381
msgid "Post-creation steps"
msgstr ""

#: ../../pep-0489.txt:383
msgid ""
"If the Py_mod_create function returns an instance of types.ModuleType or "
"a subclass (or if a Py_mod_create slot is not present), the import "
"machinery will associate the PyModuleDef with the module. This also makes"
" the PyModuleDef accessible to execution phase, the PyModule_GetDef "
"function, and garbage collection routines (traverse, clear, free)."
msgstr ""

#: ../../pep-0489.txt:390
msgid ""
"If the Py_mod_create function does not return a module subclass, then "
"m_size must be 0, and m_traverse, m_clear and m_free must all be NULL. "
"Otherwise, SystemError is raised."
msgstr ""

#: ../../pep-0489.txt:394
msgid ""
"Additionally, initial attributes specified in the PyModuleDef are set on "
"the module object, regardless of its type:"
msgstr ""

#: ../../pep-0489.txt:397
msgid "The docstring is set from m_doc, if non-NULL."
msgstr ""

#: ../../pep-0489.txt:398
msgid "The module's functions are initialized from m_methods, if any."
msgstr ""

#: ../../pep-0489.txt:402
msgid "Module Execution Phase"
msgstr ""

#: ../../pep-0489.txt:404
msgid ""
"Module execution -- that is, the implementation of "
"ExecutionLoader.exec_module -- is governed by \"execution slots\". This "
"PEP only adds one, Py_mod_exec, but others may be added in the future."
msgstr ""

#: ../../pep-0489.txt:408
msgid ""
"The execution phase is done on the PyModuleDef associated with the module"
" object. For objects that are not a subclass of PyModule_Type (for which "
"PyModule_GetDef would fail), the execution phase is skipped."
msgstr ""

#: ../../pep-0489.txt:412
msgid ""
"Execution slots may be specified multiple times, and are processed in the"
" order they appear in the slots array. When using the default import "
"machinery, they are processed after import-related attributes specified "
"in PEP 451 [#pep-0451-attributes]_ (such as ``__name__`` or "
"``__loader__``) are set and the module is added to sys.modules."
msgstr ""

#: ../../pep-0489.txt:421
msgid "Pre-Execution steps"
msgstr ""

#: ../../pep-0489.txt:423
msgid ""
"Before processing the execution slots, per-module state is allocated for "
"the module. From this point on, per-module state is accessible through "
"PyModule_GetState."
msgstr ""

#: ../../pep-0489.txt:429
msgid "The Py_mod_exec slot"
msgstr ""

#: ../../pep-0489.txt:431
msgid ""
"The entry in this slot must point to a function with the following "
"signature::"
msgstr ""

#: ../../pep-0489.txt:435
msgid ""
"It will be called to initialize a module. Usually, this amounts to "
"setting the module's initial attributes. The \"module\" argument receives"
" the module object to initialize."
msgstr ""

#: ../../pep-0489.txt:439
msgid ""
"The function must return ``0`` on success, or, on error, set an exception"
" and return ``-1``."
msgstr ""

#: ../../pep-0489.txt:442
msgid ""
"If PyModuleExec replaces the module's entry in sys.modules, the new "
"object will be used and returned by importlib machinery after all "
"execution slots are processed. This is a feature of the import machinery "
"itself. The slots themselves are all processed using the module returned "
"from the creation phase; sys.modules is not consulted during the "
"execution phase. (Note that for extension modules, implementing "
"Py_mod_create is usually a better solution for using custom module "
"objects.)"
msgstr ""

#: ../../pep-0489.txt:452
msgid "Legacy Init"
msgstr ""

#: ../../pep-0489.txt:454
msgid ""
"The backwards-compatible single-phase initialization continues to be "
"supported. In this scheme, the PyInit function returns a fully "
"initialized module rather than a PyModuleDef object. In this case, the "
"PyInit hook implements the creation phase, and the execution phase is a "
"no-op."
msgstr ""

#: ../../pep-0489.txt:460
msgid ""
"Modules that need to work unchanged on older versions of Python should "
"stick to single-phase initialization, because the benefits it brings "
"can't be back-ported. Here is an example of a module that supports multi-"
"phase initialization, and falls back to single-phase when compiled for an"
" older version of CPython. It is included mainly as an illustration of "
"the changes needed to enable multi-phase init::"
msgstr ""

#: ../../pep-0489.txt:516
msgid "Built-In modules"
msgstr ""

#: ../../pep-0489.txt:518
msgid ""
"Any extension module can be used as a built-in module by linking it into "
"the executable, and including it in the inittab (either at runtime with "
"PyImport_AppendInittab, or at configuration time, using tools like "
"*freeze*)."
msgstr ""

#: ../../pep-0489.txt:522
msgid ""
"To keep this possibility, all changes to extension module loading "
"introduced in this PEP will also apply to built-in modules. The only "
"exception is non-ASCII module names, explained below."
msgstr ""

#: ../../pep-0489.txt:528
msgid "Subinterpreters and Interpreter Reloading"
msgstr ""

#: ../../pep-0489.txt:530
msgid ""
"Extensions using the new initialization scheme are expected to support "
"subinterpreters and multiple Py_Initialize/Py_Finalize cycles correctly, "
"avoiding the issues mentioned in Python documentation [#subinterpreter-"
"docs]_. The mechanism is designed to make this easy, but care is still "
"required on the part of the extension author. No user-defined functions, "
"methods, or instances may leak to different interpreters. To achieve "
"this, all module-level state should be kept in either the module dict, or"
" in the module object's storage reachable by PyModule_GetState. A simple "
"rule of thumb is: Do not define any static data, except built-in types "
"with no mutable or user-settable class attributes."
msgstr ""

#: ../../pep-0489.txt:544
msgid "Functions incompatible with multi-phase initialization"
msgstr ""

#: ../../pep-0489.txt:546
msgid ""
"The PyModule_Create function will fail when used on a PyModuleDef "
"structure with a non-NULL *m_slots* pointer. The function doesn't have "
"access to the ModuleSpec object necessary for multi-phase initialization."
msgstr ""

#: ../../pep-0489.txt:551
msgid ""
"The PyState_FindModule function will return NULL, and PyState_AddModule "
"and PyState_RemoveModule will also fail on modules with non-NULL "
"*m_slots*. PyState registration is disabled because multiple module "
"objects may be created from the same PyModuleDef."
msgstr ""

#: ../../pep-0489.txt:558
msgid "Module state and C-level callbacks"
msgstr ""

#: ../../pep-0489.txt:560
msgid ""
"Due to the unavailability of PyState_FindModule, any function that needs "
"access to module-level state (including functions, classes or exceptions "
"defined at the module level) must receive a reference to the module "
"object (or the particular object it needs), either directly or "
"indirectly. This is currently difficult in two situations:"
msgstr ""

#: ../../pep-0489.txt:566
msgid ""
"Methods of classes, which receive a reference to the class, but not to "
"the class's module"
msgstr ""

#: ../../pep-0489.txt:568
msgid ""
"Libraries with C-level callbacks, unless the callbacks can receive custom"
" data set at callback registration"
msgstr ""

#: ../../pep-0489.txt:571
msgid ""
"Fixing these cases is outside of the scope of this PEP, but will be "
"needed for the new mechanism to be useful to all modules. Proper fixes "
"have been discussed on the import-sig mailing list [#findmodule-"
"discussion]_."
msgstr ""

#: ../../pep-0489.txt:575
msgid ""
"As a rule of thumb, modules that rely on PyState_FindModule are, at the "
"moment, not good candidates for porting to the new mechanism."
msgstr ""

#: ../../pep-0489.txt:580
msgid "New Functions"
msgstr ""

#: ../../pep-0489.txt:582
msgid ""
"A new function and macro implementing the module creation phase will be "
"added. These are similar to PyModule_Create and PyModule_Create2, except "
"they take an additional ModuleSpec argument, and handle module "
"definitions with non-NULL slots::"
msgstr ""

#: ../../pep-0489.txt:591
msgid ""
"A new function implementing the module execution phase will be added. "
"This allocates per-module state (if not allocated already), and *always* "
"processes execution slots. The import machinery calls this method when a "
"module is executed, unless the module is being reloaded::"
msgstr ""

#: ../../pep-0489.txt:598
msgid ""
"Another function will be introduced to initialize a PyModuleDef object. "
"This idempotent function fills in the type, refcount, and module index. "
"It returns its argument cast to PyObject*, so it can be returned directly"
" from a PyInit function::"
msgstr ""

#: ../../pep-0489.txt:605
msgid ""
"Additionally, two helpers will be added for setting the docstring and "
"methods on a module::"
msgstr ""

#: ../../pep-0489.txt:613
msgid "Export Hook Name"
msgstr ""

#: ../../pep-0489.txt:615
msgid ""
"As portable C identifiers are limited to ASCII, module names must be "
"encoded to form the PyInit hook name."
msgstr ""

#: ../../pep-0489.txt:618
msgid ""
"For ASCII module names, the import hook is named PyInit_<modulename>, "
"where <modulename> is the name of the module."
msgstr ""

#: ../../pep-0489.txt:621
msgid ""
"For module names containing non-ASCII characters, the import hook is "
"named PyInitU_<encodedname>, where the name is encoded using CPython's "
"\"punycode\" encoding (Punycode [#rfc-3492]_ with a lowercase suffix), "
"with hyphens (\"-\") replaced by underscores (\"_\")."
msgstr ""

#: ../../pep-0489.txt:627
msgid "In Python::"
msgstr ""

#: ../../pep-0489.txt:636
msgid "Examples:"
msgstr ""

#: ../../pep-0489.txt:639
msgid "Module name"
msgstr ""

#: ../../pep-0489.txt:639
msgid "Init hook name"
msgstr ""

#: ../../pep-0489.txt:641
msgid "spam"
msgstr ""

#: ../../pep-0489.txt:641
msgid "PyInit_spam"
msgstr ""

#: ../../pep-0489.txt:642
msgid "lančmít"
msgstr ""

#: ../../pep-0489.txt:642
msgid "PyInitU_lanmt_2sa6t"
msgstr ""

#: ../../pep-0489.txt:643
msgid "スパム"
msgstr ""

#: ../../pep-0489.txt:643
msgid "PyInitU_zck5b2b"
msgstr ""

#: ../../pep-0489.txt:646
msgid ""
"For modules with non-ASCII names, single-phase initialization is not "
"supported."
msgstr ""

#: ../../pep-0489.txt:648
msgid ""
"In the initial implementation of this PEP, built-in modules with non-"
"ASCII names will not be supported."
msgstr ""

#: ../../pep-0489.txt:653
msgid "Module Reloading"
msgstr ""

#: ../../pep-0489.txt:655
msgid ""
"Reloading an extension module using importlib.reload() will continue to "
"have no effect, except re-setting import-related attributes."
msgstr ""

#: ../../pep-0489.txt:658
msgid ""
"Due to limitations in shared library loading (both dlopen on POSIX and "
"LoadModuleEx on Windows), it is not generally possible to load a modified"
" library after it has changed on disk."
msgstr ""

#: ../../pep-0489.txt:662
msgid ""
"Use cases for reloading other than trying out a new version of the module"
" are too rare to require all module authors to keep reloading in mind. If"
" reload-like functionality is needed, authors can export a dedicated "
"function for it."
msgstr ""

#: ../../pep-0489.txt:669
msgid "Multiple modules in one library"
msgstr ""

#: ../../pep-0489.txt:671
msgid ""
"To support multiple Python modules in one shared library, the library can"
" export additional PyInit* symbols besides the one that corresponds to "
"the library's filename."
msgstr ""

#: ../../pep-0489.txt:675
msgid ""
"Note that this mechanism can currently only be used to *load* extra "
"modules, but not to *find* them. (This is a limitation of the loader "
"mechanism, which this PEP does not try to modify.) To work around the "
"lack of a suitable finder, code like the following can be used::"
msgstr ""

#: ../../pep-0489.txt:689
msgid ""
"On platforms that support symbolic links, these may be used to install "
"one library under multiple names, exposing all exported modules to normal"
" import machinery."
msgstr ""

#: ../../pep-0489.txt:695
msgid "Testing and initial implementations"
msgstr ""

#: ../../pep-0489.txt:697
msgid ""
"For testing, a new built-in module ``_testmultiphase`` will be created. "
"The library will export several additional modules using the mechanism "
"described in \"Multiple modules in one library\"."
msgstr ""

#: ../../pep-0489.txt:701
msgid ""
"The ``_testcapi`` module will be unchanged, and will use single-phase "
"initialization indefinitely (or until it is no longer supported)."
msgstr ""

#: ../../pep-0489.txt:704
msgid ""
"The ``array`` and ``xx*`` modules will be converted to use multi-phase "
"initialization as part of the initial implementation."
msgstr ""

#: ../../pep-0489.txt:709
msgid "Summary of API Changes and Additions"
msgstr ""

#: ../../pep-0489.txt:711
msgid "New functions:"
msgstr ""

#: ../../pep-0489.txt:713
msgid "PyModule_FromDefAndSpec (macro)"
msgstr ""

#: ../../pep-0489.txt:714
msgid "PyModule_FromDefAndSpec2"
msgstr ""

#: ../../pep-0489.txt:715
msgid "PyModule_ExecDef"
msgstr ""

#: ../../pep-0489.txt:716
msgid "PyModule_SetDocString"
msgstr ""

#: ../../pep-0489.txt:717
msgid "PyModule_AddFunctions"
msgstr ""

#: ../../pep-0489.txt:718
msgid "PyModuleDef_Init"
msgstr ""

#: ../../pep-0489.txt:720
msgid "New macros:"
msgstr ""

#: ../../pep-0489.txt:725
msgid "New types:"
msgstr ""

#: ../../pep-0489.txt:727
msgid "PyModuleDef_Type will be exposed"
msgstr ""

#: ../../pep-0489.txt:729
msgid "New structures:"
msgstr ""

#: ../../pep-0489.txt:731
msgid "PyModuleDef_Slot"
msgstr ""

#: ../../pep-0489.txt:733
msgid "Other changes:"
msgstr ""

#: ../../pep-0489.txt:735
msgid "PyModuleDef.m_reload changes to PyModuleDef.m_slots."
msgstr ""

#: ../../pep-0489.txt:737
msgid ""
"``BuiltinImporter`` and ``ExtensionFileLoader`` will now implement "
"``create_module`` and ``exec_module``."
msgstr ""

#: ../../pep-0489.txt:740
msgid ""
"The internal ``_imp`` module will have backwards incompatible changes: "
"``create_builtin``, ``create_dynamic``, and ``exec_dynamic`` will be "
"added; ``init_builtin``, ``load_dynamic`` will be removed."
msgstr ""

#: ../../pep-0489.txt:744
msgid ""
"The undocumented functions ``imp.load_dynamic`` and ``imp.init_builtin`` "
"will be replaced by backwards-compatible shims."
msgstr ""

#: ../../pep-0489.txt:749
msgid "Backwards Compatibility"
msgstr ""

#: ../../pep-0489.txt:751
msgid ""
"Existing modules will continue to be source- and binary-compatible with "
"new versions of Python. Modules that use multi-phase initialization will "
"not be compatible with versions of Python that do not implement this PEP."
msgstr ""

#: ../../pep-0489.txt:756
msgid ""
"The functions ``init_builtin`` and ``load_dynamic`` will be removed from "
"the ``_imp`` module (but not from the ``imp`` module)."
msgstr ""

#: ../../pep-0489.txt:759
msgid ""
"All changed loaders (``BuiltinImporter`` and ``ExtensionFileLoader``) "
"will remain backwards-compatible; the ``load_module`` method will be "
"replaced by a shim."
msgstr ""

#: ../../pep-0489.txt:763
msgid ""
"Internal functions of Python/import.c and Python/importdl.c will be "
"removed. (Specifically, these are ``_PyImport_GetDynLoadFunc``, "
"``_PyImport_GetDynLoadWindows``, and ``_PyImport_LoadDynamicModule``.)"
msgstr ""

#: ../../pep-0489.txt:769
msgid "Possible Future Extensions"
msgstr ""

#: ../../pep-0489.txt:771
msgid ""
"The slots mechanism, inspired by PyType_Slot from PEP 384, allows later "
"extensions."
msgstr ""

#: ../../pep-0489.txt:774
msgid ""
"Some extension modules exports many constants; for example _ssl has a "
"long list of calls in the form::"
msgstr ""

#: ../../pep-0489.txt:780
msgid ""
"Converting this to a declarative list, similar to PyMethodDef, would "
"reduce boilerplate, and provide free error-checking which is often "
"missing."
msgstr ""

#: ../../pep-0489.txt:784
msgid ""
"String constants and types can be handled similarly. (Note that non-"
"default bases for types cannot be portably specified statically; this "
"case would need a Py_mod_exec function that runs before the slots are "
"added. The free error-checking would still be beneficial, though.)"
msgstr ""

#: ../../pep-0489.txt:790
msgid ""
"Another possibility is providing a \"main\" function that would be run "
"when the module is given to Python's -m switch. For this to work, the "
"runpy module will need to be modified to take advantage of ModuleSpec-"
"based loading introduced in PEP 451. Also, it will be necessary to add a "
"mechanism for setting up a module according to slots it wasn't originally"
" defined with."
msgstr ""

#: ../../pep-0489.txt:799
msgid "Implementation"
msgstr ""

#: ../../pep-0489.txt:801
msgid ""
"Work-in-progress implementation is available in a Github repository [#gh-"
"repo]_; a patchset is at [#gh-patch]_."
msgstr ""

#: ../../pep-0489.txt:806
msgid "Previous Approaches"
msgstr ""

#: ../../pep-0489.txt:808
msgid ""
"Stefan Behnel's initial proto-PEP [#stefans_protopep]_ had a "
"\"PyInit_modulename\" hook that would create a module class, whose "
"``__init__`` would be then called to create the module. This proposal did"
" not correspond to the (then nonexistent) PEP 451, where module creation "
"and initialization is broken into distinct steps. It also did not support"
" loading an extension into pre-existing module objects."
msgstr ""

#: ../../pep-0489.txt:815
msgid ""
"Nick Coghlan proposed \"Create\" and \"Exec\" hooks, and wrote a "
"prototype implementation [#nicks-prototype]_. At this time PEP 451 was "
"still not implemented, so the prototype does not use ModuleSpec."
msgstr ""

#: ../../pep-0489.txt:820
msgid ""
"The original version of this PEP used Create and Exec hooks, and allowed "
"loading into arbitrary pre-constructed objects with Exec hook. The "
"proposal made extension module initialization closer to how Python "
"modules are initialized, but it was later recognized that this isn't an "
"important goal. The current PEP describes a simpler solution."
msgstr ""

#: ../../pep-0489.txt:826
msgid ""
"A further iteration used a \"PyModuleExport\" hook as an alternative to "
"PyInit, where PyInit was used for existing scheme, and PyModuleExport for"
" multi-phase. However, not being able to determine the hook name based on"
" module name complicated automatic generation of PyImport_Inittab by "
"tools like freeze. Keeping only the PyInit hook name, even if it's not "
"entirely appropriate for exporting a definition, yielded a much simpler "
"solution."
msgstr ""

#: ../../pep-0489.txt:835
msgid "References"
msgstr ""

#: ../../pep-0489.txt:838
msgid "https://www.python.org/dev/peps/pep-0451/#attributes"
msgstr ""

#: ../../pep-0489.txt:841
msgid "https://mail.python.org/pipermail/python-dev/2013-August/128087.html"
msgstr ""

#: ../../pep-0489.txt:844
msgid "https://mail.python.org/pipermail/python-dev/2013-August/128101.html"
msgstr ""

#: ../../pep-0489.txt:847
msgid "http://tools.ietf.org/html/rfc3492"
msgstr ""

#: ../../pep-0489.txt:850
msgid "https://github.com/encukou/cpython/commits/pep489"
msgstr ""

#: ../../pep-0489.txt:853
msgid "https://github.com/encukou/cpython/compare/master...encukou:pep489.patch"
msgstr ""

#: ../../pep-0489.txt:856
msgid "https://mail.python.org/pipermail/import-sig/2015-April/000959.html"
msgstr ""

#: ../../pep-0489.txt:859
msgid "https://www.python.org/dev/peps/pep-0451/#how-loading-will-work]"
msgstr ""

#: ../../pep-0489.txt:862
msgid "https://docs.python.org/3/c-api/init.html#sub-interpreter-support"
msgstr ""

#: ../../pep-0489.txt:866
msgid "Copyright"
msgstr ""

#: ../../pep-0489.txt:868
msgid "This document has been placed in the public domain."
msgstr ""

