# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0005.txt
msgid "PEP"
msgstr ""

#: ../../pep-0005.txt:1
msgid "5"
msgstr ""

#: ../../pep-0005.txt
msgid "Title"
msgstr ""

#: ../../pep-0005.txt:2
msgid "Guidelines for Language Evolution"
msgstr "语言演变指南"

#: ../../pep-0005.txt
msgid "Author"
msgstr ""

#: ../../pep-0005.txt:5
msgid "paul@prescod.net (Paul Prescod)"
msgstr ""

#: ../../pep-0005.txt
msgid "Status"
msgstr ""

#: ../../pep-0005.txt:6
msgid "Active"
msgstr ""

#: ../../pep-0005.txt
msgid "Type"
msgstr ""

#: ../../pep-0005.txt:7
msgid "Process"
msgstr ""

#: ../../pep-0005.txt
msgid "Created"
msgstr ""

#: ../../pep-0005.txt:9
msgid "26-Oct-2000"
msgstr ""

#: ../../pep-0005.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0005.txt:14
msgid "Abstract"
msgstr "摘要"

#: ../../pep-0005.txt:16
msgid ""
"In the natural evolution of programming languages it is sometimes "
"necessary to make changes that modify the behavior of older programs. "
"This PEP proposes a policy for implementing these changes in a manner "
"respectful of the installed base of Python users."
msgstr ""
"在编程语言的自然演进中，有时有必要进行修改，以改变旧程序的行为。"
"这个 PEP 提出了一个政策，以尊重 Python 用户的安装基础的方式来实现这些改变。"

#: ../../pep-0005.txt:23
msgid "Implementation Details"
msgstr "实现细节"

#: ../../pep-0005.txt:25
msgid ""
"Implementation of this PEP requires the addition of a formal warning and "
"deprecation facility that will be described in another proposal."
msgstr ""
"实现此 PEP 需要增加一个正式的警告和废止设施，这将在另一个提案中描述。"

#: ../../pep-0005.txt:30
msgid "Scope"
msgstr "范围"

#: ../../pep-0005.txt:32
msgid ""
"These guidelines apply to future versions of Python that introduce "
"backward-incompatible behavior.  Backward incompatible behavior is a "
"major deviation in Python interpretation from an earlier behavior "
"described in the standard Python documentation.  Removal of a feature "
"also constitutes a change of behavior."
msgstr ""
"这些指南适用于引入向后不兼容行为的 Python 的未来版本。"
"向后不兼容的行为是指 Python 的解释与标准 Python 文档中描述的早期行为的重大偏差。"
"移除一个特性也构成了行为的改变"。

#: ../../pep-0005.txt:38
msgid ""
"This PEP does not replace or preclude other compatibility strategies such"
" as dynamic loading of backwards-compatible parsers.  On the other hand, "
"if execution of \"old code\" requires a special switch or pragma then "
"that is indeed a change of behavior from the point of view of the user "
"and that change should be implemented according to these guidelines."
msgstr ""
"本 PEP 并不取代或排除其他兼容性策略，例如动态加载向后兼容的解析器。"
"另一方面，如果执行 “旧代码” 需要一个特殊的开关或 pragma，那么从用户的角度来看，这确实是一种行为的改变，这种改变应该根据这些指南来实现。"

#: ../../pep-0005.txt:45
msgid ""
"In general, common sense must prevail in the implementation of these "
"guidelines.  For instance changing \"sys.copyright\" does not constitute "
"a backwards-incompatible change of behavior!"
msgstr ""
"一般来说，在执行这些准则时必须以常识为准。"
"例如，改变 \"sys.copyright\" 并不构成向后兼容的行为改变！"

#: ../../pep-0005.txt:51
msgid "Steps For Introducing Backwards-Incompatible Features"
msgstr "引入向后不兼容的功能的步骤"

#: ../../pep-0005.txt:53
msgid ""
"Propose backwards-incompatible behavior in a PEP.  The PEP must include a"
" section on backwards compatibility that describes in detail a plan to "
"complete the remainder of these steps."
msgstr ""
"在 PEP 中提出向后兼容的行为。"
"PEP 必须包括一个关于向后兼容的部分，详细描述完成这些步骤的剩余部分的计划。"

#: ../../pep-0005.txt:57
msgid ""
"Once the PEP is accepted as a productive direction, implement an "
"alternate way to accomplish the task previously provided by the feature "
"that is being removed or changed.  For instance if the addition operator "
"were scheduled for removal, a new version of Python could implement an "
"\"add()\" built-in function."
msgstr ""
"一旦 PEP 被接受为一个富有成效的方向，就实施另一种方法来完成以前由被删除或改变的功能所提供的任务。"
"例如，如果加法运算符被计划删除，新版本的 Python 可以实现一个 \"add()\" 内置函数。

#: ../../pep-0005.txt:63
msgid "Formally deprecate the obsolete construct in the Python documentation."
msgstr "在 Python 文档中正式废除这个过时的结构。"

#: ../../pep-0005.txt:66
msgid ""
"Add an optional warning mode to the parser that will inform users when "
"the deprecated construct is used.  In other words, all programs that will"
" behave differently in the future must trigger warnings in this mode.  "
"Compile-time warnings are preferable to runtime warnings.  The warning "
"messages should steer people from the deprecated construct to the "
"alternative construct."
msgstr ""
"在解析器中增加一个可选的警告模式，当使用废弃的结构时，会通知用户。"
"换句话说，所有在未来会有不同行为的程序都必须在这种模式下触发警告。"
"编译时警告比运行时警告更可取。警告信息应该引导人们从被废弃的结构转向替代的结构。"

#: ../../pep-0005.txt:73
msgid ""
"There must be at least a one-year transition period between the release "
"of the transitional version of Python and the release of the backwards "
"incompatible version.  Users will have at least a year to test their "
"programs and migrate them from use of the deprecated construct to the "
"alternative one."
msgstr ""
"在 Python 的过渡版本发布和向后不兼容的版本发布之间必须有至少一年的过渡期。"
"用户将有至少一年的时间来测试他们的程序，并将它们从使用被废弃的结构迁移到替代的结构。"
