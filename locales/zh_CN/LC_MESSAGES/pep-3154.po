# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-3154.txt
msgid "PEP"
msgstr ""

#: ../../pep-3154.txt:1
msgid "3154"
msgstr ""

#: ../../pep-3154.txt
msgid "Title"
msgstr ""

#: ../../pep-3154.txt:2
msgid "Pickle protocol version 4"
msgstr ""

#: ../../pep-3154.txt
msgid "Author"
msgstr ""

#: ../../pep-3154.txt:5
msgid "Antoine Pitrou <solipsis@pitrou.net>"
msgstr ""

#: ../../pep-3154.txt
msgid "Status"
msgstr ""

#: ../../pep-3154.txt:6
msgid "Final"
msgstr ""

#: ../../pep-3154.txt
msgid "Type"
msgstr ""

#: ../../pep-3154.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-3154.txt
msgid "Created"
msgstr ""

#: ../../pep-3154.txt:9
msgid "11-Aug-2011"
msgstr ""

#: ../../pep-3154.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-3154.txt:10
msgid "3.4"
msgstr ""

#: ../../pep-3154.txt
msgid "Post-History"
msgstr ""

#: ../../pep-3154.txt:12
msgid "https://mail.python.org/pipermail/python-dev/2011-August/112821.html"
msgstr ""

#: ../../pep-3154.txt
msgid "Resolution"
msgstr ""

#: ../../pep-3154.txt:13
msgid "https://mail.python.org/pipermail/python-dev/2013-November/130439.html"
msgstr ""

#: ../../pep-3154.txt:17
msgid "Abstract"
msgstr ""

#: ../../pep-3154.txt:19
msgid ""
"Data serialized using the pickle module must be portable across Python "
"versions.  It should also support the latest language features as well as"
" implementation-specific features.  For this reason, the pickle module "
"knows about several protocols (currently numbered from 0 to 3), each of "
"which appeared in a different Python version.  Using a low-numbered "
"protocol version allows to exchange data with old Python versions, while "
"using a high-numbered protocol allows access to newer features and "
"sometimes more efficient resource use (both CPU time required for "
"(de)serializing, and disk size / network bandwidth required for data "
"transfer)."
msgstr ""

#: ../../pep-3154.txt:32
msgid "Rationale"
msgstr ""

#: ../../pep-3154.txt:34
msgid ""
"The latest current protocol, coincidentally named protocol 3, appeared "
"with Python 3.0 and supports the new incompatible features in the "
"language (mainly, unicode strings by default and the new bytes object).  "
"The opportunity was not taken at the time to improve the protocol in "
"other ways."
msgstr ""

#: ../../pep-3154.txt:40
msgid ""
"This PEP is an attempt to foster a number of incremental improvements in "
"a new pickle protocol version.  The PEP process is used in order to "
"gather as many improvements as possible, because the introduction of a "
"new pickle protocol should be a rare occurrence."
msgstr ""

#: ../../pep-3154.txt:47
msgid "Proposed changes"
msgstr ""

#: ../../pep-3154.txt:50
msgid "Framing"
msgstr ""

#: ../../pep-3154.txt:52
msgid ""
"Traditionally, when unpickling an object from a stream (by calling "
"``load()`` rather than ``loads()``), many small ``read()`` calls can be "
"issued on the file-like object, with a potentially huge performance "
"impact."
msgstr ""

#: ../../pep-3154.txt:57
msgid ""
"Protocol 4, by contrast, features binary framing.  The general structure "
"of a pickle is thus the following::"
msgstr ""

#: ../../pep-3154.txt:77
msgid ""
"To keep the implementation simple, it is forbidden for a pickle opcode to"
" straddle frame boundaries.  The pickler takes care not to produce such "
"pickles, and the unpickler refuses them.  Also, there is no \"last "
"frame\" marker.  The last frame is simply the one which ends with a STOP "
"opcode."
msgstr ""

#: ../../pep-3154.txt:82
msgid ""
"A well-written C implementation doesn't need additional memory copies for"
" the framing layer, preserving general (un)pickling efficiency."
msgstr ""

#: ../../pep-3154.txt:87
msgid ""
"How the pickler decides to partition the pickle stream into frames is an "
"implementation detail.  For example, \"closing\" a frame as soon as it "
"reaches ~64 KiB is a reasonable choice for both performance and pickle "
"size overhead."
msgstr ""

#: ../../pep-3154.txt:93
msgid "Binary encoding for all opcodes"
msgstr ""

#: ../../pep-3154.txt:95
msgid ""
"The GLOBAL opcode, which is still used in protocol 3, uses the so-called "
"\"text\" mode of the pickle protocol, which involves looking for newlines"
" in the pickle stream.  It also complicates the implementation of binary "
"framing."
msgstr ""

#: ../../pep-3154.txt:100
msgid ""
"Protocol 4 forbids use of the GLOBAL opcode and replaces it with "
"STACK_GLOBAL, a new opcode which takes its operand from the stack."
msgstr ""

#: ../../pep-3154.txt:104
msgid "Serializing more \"lookupable\" objects"
msgstr ""

#: ../../pep-3154.txt:106
msgid ""
"By default, pickle is only able to serialize module-global functions and "
"classes.  Supporting other kinds of objects, such as unbound methods "
"[4]_, is a common request. Actually, third-party support for some of "
"them, such as bound methods, is implemented in the multiprocessing module"
" [5]_."
msgstr ""

#: ../../pep-3154.txt:111
msgid ""
"The ``__qualname__`` attribute from :pep:`3155` makes it possible to "
"lookup many more objects by name.  Making the STACK_GLOBAL opcode accept "
"dot-separated names would allow the standard pickle implementation to "
"support all those kinds of objects."
msgstr ""

#: ../../pep-3154.txt:117
msgid "64-bit opcodes for large objects"
msgstr ""

#: ../../pep-3154.txt:119
msgid ""
"Current protocol versions export object sizes for various built-in types "
"(str, bytes) as 32-bit ints.  This forbids serialization of large data "
"[1]_.  New opcodes are required to support very large bytes and str "
"objects."
msgstr ""

#: ../../pep-3154.txt:125
msgid "Native opcodes for sets and frozensets"
msgstr ""

#: ../../pep-3154.txt:127
msgid ""
"Many common built-in types (such as str, bytes, dict, list, tuple) have "
"dedicated opcodes to improve resource consumption when serializing and "
"deserializing them; however, sets and frozensets don't.  Adding such "
"opcodes would be an obvious improvement.  Also, dedicated set support "
"could help remove the current impossibility of pickling self-referential "
"sets [2]_."
msgstr ""

#: ../../pep-3154.txt:135
msgid "Calling __new__ with keyword arguments"
msgstr ""

#: ../../pep-3154.txt:137
msgid ""
"Currently, classes whose ``__new__`` mandates the use of keyword-only "
"arguments can not be pickled (or, rather, unpickled) [3]_.  Both a new "
"special method (``__getnewargs_ex__``) and a new opcode (NEWOBJ_EX) are "
"needed.  The ``__getnewargs_ex__`` method, if it exists, must return a "
"two-tuple ``(args, kwargs)`` where the first item is the tuple of "
"positional arguments and the second item is the dict of keyword arguments"
" for the class's ``__new__`` method."
msgstr ""

#: ../../pep-3154.txt:146
msgid "Better string encoding"
msgstr ""

#: ../../pep-3154.txt:148
msgid ""
"Short str objects currently have their length coded as a 4-bytes integer,"
" which is wasteful.  A specific opcode with a 1-byte length would make "
"many pickles smaller."
msgstr ""

#: ../../pep-3154.txt:153
msgid "Smaller memoization"
msgstr ""

#: ../../pep-3154.txt:155
msgid ""
"The PUT opcodes all require an explicit index to select in which entry of"
" the memo dictionary the top-of-stack is memoized.  However, in practice "
"those numbers are allocated in sequential order.  A new opcode, MEMOIZE, "
"will instead store the top-of-stack in at the index equal to the current "
"size of the memo dictionary.  This allows for shorter pickles, since PUT "
"opcodes are emitted for all non-atomic datatypes."
msgstr ""

#: ../../pep-3154.txt:164
msgid "Summary of new opcodes"
msgstr ""

#: ../../pep-3154.txt:166
msgid ""
"These reflect the state of the proposed implementation (thanks mostly to "
"Alexandre Vassalotti's work):"
msgstr ""

#: ../../pep-3154.txt:169
msgid ""
"``FRAME``: introduce a new frame (followed by the 8-byte frame size and "
"the frame contents)."
msgstr ""

#: ../../pep-3154.txt:172
msgid ""
"``SHORT_BINUNICODE``: push a utf8-encoded str object with a one-byte size"
" prefix (therefore less than 256 bytes long)."
msgstr ""

#: ../../pep-3154.txt:175
msgid ""
"``BINUNICODE8``: push a utf8-encoded str object with an eight-byte size "
"prefix (for strings longer than 2**32 bytes, which therefore cannot be "
"serialized using ``BINUNICODE``)."
msgstr ""

#: ../../pep-3154.txt:179
msgid ""
"``BINBYTES8``: push a bytes object with an eight-byte size prefix (for "
"bytes objects longer than 2**32 bytes, which therefore cannot be "
"serialized using ``BINBYTES``)."
msgstr ""

#: ../../pep-3154.txt:183
msgid "``EMPTY_SET``: push a new empty set object on the stack."
msgstr ""

#: ../../pep-3154.txt:185
msgid ""
"``ADDITEMS``: add the topmost stack items to the set (to be used with "
"``EMPTY_SET``)."
msgstr ""

#: ../../pep-3154.txt:188
msgid ""
"``FROZENSET``: create a frozenset object from the topmost stack items, "
"and push it on the stack."
msgstr ""

#: ../../pep-3154.txt:191
msgid ""
"``NEWOBJ_EX``: take the three topmost stack items ``cls``, ``args`` and "
"``kwargs``, and push the result of calling ``cls.__new__(*args, "
"**kwargs)``."
msgstr ""

#: ../../pep-3154.txt:195
msgid ""
"``STACK_GLOBAL``: take the two topmost stack items ``module_name`` and "
"``qualname``, and push the result of looking up the dotted ``qualname`` "
"in the module named ``module_name``."
msgstr ""

#: ../../pep-3154.txt:199
msgid ""
"``MEMOIZE``: store the top-of-stack object in the memo dictionary with an"
" index equal to the current size of the memo dictionary."
msgstr ""

#: ../../pep-3154.txt:204
msgid "Alternative ideas"
msgstr ""

#: ../../pep-3154.txt:207
msgid "Prefetching"
msgstr ""

#: ../../pep-3154.txt:209
msgid ""
"Serhiy Storchaka suggested to replace framing with a special PREFETCH "
"opcode (with a 2- or 4-bytes argument) to declare known pickle chunks "
"explicitly. Large data may be pickled outside such chunks.  A naïve "
"unpickler should be able to skip the PREFETCH opcode and still decode "
"pickles properly, but good error handling would require checking that the"
" PREFETCH length falls on an opcode boundary."
msgstr ""

#: ../../pep-3154.txt:218
msgid "Acknowledgments"
msgstr ""

#: ../../pep-3154.txt:220
msgid "In alphabetic order:"
msgstr ""

#: ../../pep-3154.txt:222
msgid "Alexandre Vassalotti, for starting the second PEP 3154 implementation [6]_"
msgstr ""

#: ../../pep-3154.txt:224
msgid "Serhiy Storchaka, for discussing the framing proposal [6]_"
msgstr ""

#: ../../pep-3154.txt:226
msgid ""
"Stefan Mihaila, for starting the first PEP 3154 implementation as a "
"Google Summer of Code project mentored by Alexandre Vassalotti [7]_."
msgstr ""

#: ../../pep-3154.txt:231
msgid "References"
msgstr ""

#: ../../pep-3154.txt:233
msgid "\"pickle not 64-bit ready\": http://bugs.python.org/issue11564"
msgstr ""

#: ../../pep-3154.txt:236
msgid "\"Cannot pickle self-referencing sets\": http://bugs.python.org/issue9269"
msgstr ""

#: ../../pep-3154.txt:239
msgid ""
"\"pickle/copyreg doesn't support keyword only arguments in __new__\": "
"http://bugs.python.org/issue4727"
msgstr ""

#: ../../pep-3154.txt:242
msgid "\"pickle should support methods\": http://bugs.python.org/issue9276"
msgstr ""

#: ../../pep-3154.txt:245
msgid ""
"Lib/multiprocessing/forking.py: "
"http://hg.python.org/cpython/file/baea9f5f973c/Lib/multiprocessing/forking.py#l54"
msgstr ""

#: ../../pep-3154.txt:248
msgid ""
"Implement PEP 3154, by Alexandre Vassalotti "
"http://bugs.python.org/issue17810"
msgstr ""

#: ../../pep-3154.txt:251
msgid "Implement PEP 3154, by Stefan Mihaila http://bugs.python.org/issue15642"
msgstr ""

#: ../../pep-3154.txt:256
msgid "Copyright"
msgstr ""

#: ../../pep-3154.txt:258
msgid "This document has been placed in the public domain."
msgstr ""

