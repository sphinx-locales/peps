# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0216.txt
msgid "PEP"
msgstr ""

#: ../../pep-0216.txt:1
msgid "216"
msgstr ""

#: ../../pep-0216.txt
msgid "Title"
msgstr ""

#: ../../pep-0216.txt:2
msgid "Docstring Format"
msgstr ""

#: ../../pep-0216.txt
msgid "Author"
msgstr ""

#: ../../pep-0216.txt:5
msgid "moshez@zadka.site.co.il (Moshe Zadka)"
msgstr ""

#: ../../pep-0216.txt
msgid "Status"
msgstr ""

#: ../../pep-0216.txt:6
msgid "Rejected"
msgstr ""

#: ../../pep-0216.txt
msgid "Type"
msgstr ""

#: ../../pep-0216.txt:7
msgid "Informational"
msgstr ""

#: ../../pep-0216.txt
msgid "Created"
msgstr ""

#: ../../pep-0216.txt:9
msgid "31-Jul-2000"
msgstr ""

#: ../../pep-0216.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0216.txt
msgid "Superseded-By"
msgstr ""

#: ../../pep-0216.txt:11
msgid "287"
msgstr ""

#: ../../pep-0216.txt:15
msgid "Notice"
msgstr ""

#: ../../pep-0216.txt:17
msgid "This PEP is rejected by the author.  It has been superseded by PEP 287."
msgstr ""

#: ../../pep-0216.txt:22
msgid "Abstract"
msgstr ""

#: ../../pep-0216.txt:24
msgid ""
"Named Python objects, such as modules, classes and functions, have a "
"string attribute called ``__doc__``. If the first expression inside the "
"definition is a literal string, that string is assigned to the "
"``__doc__`` attribute."
msgstr ""

#: ../../pep-0216.txt:29
msgid ""
"The ``__doc__`` attribute is called a documentation string, or docstring."
" It is often used to summarize the interface of the module, class or "
"function. However, since there is no common format for documentation "
"string, tools for extracting docstrings and transforming those into "
"documentation in a standard format (e.g., DocBook) have not sprang up in "
"abundance, and those that do exist are for the most part unmaintained and"
" unused."
msgstr ""

#: ../../pep-0216.txt:39
msgid "Perl Documentation"
msgstr ""

#: ../../pep-0216.txt:41
msgid ""
"In Perl, most modules are documented in a format called POD -- Plain Old "
"Documentation. This is an easy-to-type, very low level format which "
"integrates well with the Perl parser. Many tools exist to turn POD "
"documentation into other formats: info, HTML and man pages, among others."
" However, in Perl, the information is not available at run-time."
msgstr ""

#: ../../pep-0216.txt:49
msgid "Java Documentation"
msgstr ""

#: ../../pep-0216.txt:51
msgid ""
"In Java, special comments before classes and functions function to "
"document the code. A program to extract these, and turn them into HTML "
"documentation is called javadoc, and is part of the standard Java "
"distribution. However, the only output format that is supported is HTML, "
"and JavaDoc has a very intimate relationship with HTML."
msgstr ""

#: ../../pep-0216.txt:59
msgid "Python Docstring Goals"
msgstr ""

#: ../../pep-0216.txt:61
msgid ""
"Python documentation string are easy to spot during parsing, and are also"
" available to the runtime interpreter. This double purpose is a bit "
"problematic, sometimes: for example, some are reluctant to have too long "
"docstrings, because they do not want to take much space in the runtime. "
"In addition, because of the current lack of tools, people read objects' "
"docstrings by \"print\"ing them, so a tendency to make them brief and "
"free of markups has sprung up. This tendency hinders writing better "
"documentation-extraction tools, since it causes docstrings to contain "
"little information, which is hard to parse."
msgstr ""

#: ../../pep-0216.txt:73
msgid "High Level Solutions"
msgstr ""

#: ../../pep-0216.txt:75
msgid ""
"To counter the objection that the strings take up place in the running "
"program, it is suggested that documentation extraction tools will "
"concatenate a maximum prefix of string literals which appear in the "
"beginning of a definition. The first of these will also be available in "
"the interactive interpreter, so it should contain a few summary lines."
msgstr ""

#: ../../pep-0216.txt:84
msgid "Docstring Format Goals"
msgstr ""

#: ../../pep-0216.txt:86
msgid ""
"These are the goals for the docstring format, as discussed ad nauseam in "
"the doc-sig."
msgstr ""

#: ../../pep-0216.txt:89
msgid "It must be easy to type with any standard text editor."
msgstr ""

#: ../../pep-0216.txt:90
msgid "It must be readable to the casual observer."
msgstr ""

#: ../../pep-0216.txt:91
msgid ""
"It must not contain information which can be deduced from parsing the "
"module."
msgstr ""

#: ../../pep-0216.txt:93
msgid ""
"It must contain sufficient information so it can be converted to any "
"reasonable markup format."
msgstr ""

#: ../../pep-0216.txt:95
msgid ""
"It must be possible to write a module's entire documentation in "
"docstrings, without feeling hampered by the markup language."
msgstr ""

#: ../../pep-0216.txt:100
msgid "Docstring Contents"
msgstr ""

#: ../../pep-0216.txt:102
msgid ""
"For requirement 5. above, it is needed to specify what must be in "
"docstrings."
msgstr ""

#: ../../pep-0216.txt:105
msgid "At least the following must be available:"
msgstr ""

#: ../../pep-0216.txt:107
msgid "A tag that means \"this is a Python *something*, guess what\""
msgstr ""

#: ../../pep-0216.txt:109
msgid ""
"Example: In the sentence \"The POP3 class\", we need to markup \"POP3\" "
"so. The parser will be able to guess it is a class from the contents of "
"the ``poplib`` module, but we need to make it guess."
msgstr ""

#: ../../pep-0216.txt:113
msgid "Tags that mean \"this is a Python class/module/class var/instance var...\""
msgstr ""

#: ../../pep-0216.txt:115
msgid ""
"Example: The usual Python idiom for singleton class ``A`` is to have "
"``_A`` as the class, and ``A`` a function which returns ``_A`` objects. "
"It's usual to document the class, nonetheless, as being ``A``. This "
"requires the strength to say \"The class ``A``\" and have ``A`` "
"hyperlinked and marked-up as a class."
msgstr ""

#: ../../pep-0216.txt:121
msgid "An easy way to include Python source code/Python interactive sessions"
msgstr ""

#: ../../pep-0216.txt:123
msgid "Emphasis/bold"
msgstr ""

#: ../../pep-0216.txt:125
msgid "List/tables"
msgstr ""

#: ../../pep-0216.txt:129
msgid "Docstring Basic Structure"
msgstr ""

#: ../../pep-0216.txt:131
msgid ""
"The documentation strings will be in StructuredTextNG "
"(http://www.zope.org/Members/jim/StructuredTextWiki/StructuredTextNG) "
"Since StructuredText is not yet strong enough to handle (a) and (b) "
"above, we will need to extend it. I suggest using ``[<optional "
"description>:python identifier]``. E.g.: ``[class:POP3]``, "
"``[:POP3.list]``, etc. If the description is missing, a guess will be "
"made from the text."
msgstr ""

#: ../../pep-0216.txt:141
msgid "Unresolved Issues"
msgstr ""

#: ../../pep-0216.txt:143
msgid ""
"Is there a way to escape characters in ST? If so, how? (example: * at the"
" beginning of a line without being bullet symbol)"
msgstr ""

#: ../../pep-0216.txt:146
msgid ""
"Is my suggestion above for Python symbols compatible with ST-NG? How hard"
" would it be to extend ST-NG to support it?"
msgstr ""

#: ../../pep-0216.txt:149
msgid "How do we describe input and output types of functions?"
msgstr ""

#: ../../pep-0216.txt:151
msgid ""
"What additional constraint do we enforce on each docstring? "
"(module/class/function)?"
msgstr ""

#: ../../pep-0216.txt:154
msgid "What are the guesser rules?"
msgstr ""

#: ../../pep-0216.txt:158
msgid "Rejected Suggestions"
msgstr ""

#: ../../pep-0216.txt:160
msgid "XML -- it's very hard to type, and too cluttered to read it comfortably."
msgstr ""

