# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0334.txt
msgid "PEP"
msgstr ""

#: ../../pep-0334.txt:1
msgid "334"
msgstr ""

#: ../../pep-0334.txt
msgid "Title"
msgstr ""

#: ../../pep-0334.txt:2
msgid "Simple Coroutines via SuspendIteration"
msgstr ""

#: ../../pep-0334.txt
msgid "Author"
msgstr ""

#: ../../pep-0334.txt:5
msgid "Clark C. Evans <cce@clarkevans.com>"
msgstr ""

#: ../../pep-0334.txt
msgid "Status"
msgstr ""

#: ../../pep-0334.txt:6
msgid "Withdrawn"
msgstr ""

#: ../../pep-0334.txt
msgid "Type"
msgstr ""

#: ../../pep-0334.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0334.txt
msgid "Created"
msgstr ""

#: ../../pep-0334.txt:9
msgid "26-Aug-2004"
msgstr ""

#: ../../pep-0334.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0334.txt:10
msgid "3.0"
msgstr ""

#: ../../pep-0334.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0334.txt:15
msgid "Abstract"
msgstr ""

#: ../../pep-0334.txt:17
msgid ""
"Asynchronous application frameworks such as Twisted [1]_ and Peak [2]_, "
"are based on a cooperative multitasking via event queues or deferred "
"execution.  While this approach to application development does not "
"involve threads and thus avoids a whole class of problems [3]_, it "
"creates a different sort of programming challenge.  When an I/O operation"
" would block, a user request must suspend so that other requests can "
"proceed.  The concept of a coroutine [4]_ promises to help the "
"application developer grapple with this state management difficulty."
msgstr ""

#: ../../pep-0334.txt:27
msgid ""
"This PEP proposes a limited approach to coroutines based on an extension "
"to the iterator protocol [5]_.  Currently, an iterator may raise a "
"StopIteration exception to indicate that it is done producing values.  "
"This proposal adds another exception to this protocol, SuspendIteration, "
"which indicates that the given iterator may have more values to produce, "
"but is unable to do so at this time."
msgstr ""

#: ../../pep-0334.txt:36
msgid "Rationale"
msgstr ""

#: ../../pep-0334.txt:38
msgid ""
"There are two current approaches to bringing co-routines to Python. "
"Christian Tismer's Stackless [6]_ involves a ground-up restructuring of "
"Python's execution model by hacking the 'C' stack.  While this approach "
"works, its operation is hard to describe and keep portable. A related "
"approach is to compile Python code to Parrot [7]_, a register-based "
"virtual machine, which has coroutines.  Unfortunately, neither of these "
"solutions is portable with IronPython (CLR) or Jython (JavaVM)."
msgstr ""

#: ../../pep-0334.txt:47
msgid ""
"It is thought that a more limited approach, based on iterators, could "
"provide a coroutine facility to application programmers and still be "
"portable across runtimes."
msgstr ""

#: ../../pep-0334.txt:51
msgid ""
"Iterators keep their state in local variables that are not on the \"C\" "
"stack.  Iterators can be viewed as classes, with state stored in member "
"variables that are persistent across calls to its next() method."
msgstr ""

#: ../../pep-0334.txt:56
msgid ""
"While an uncaught exception may terminate a function's execution, an "
"uncaught exception need not invalidate an iterator.  The proposed "
"exception, SuspendIteration, uses this feature.  In other words, just "
"because one call to next() results in an exception does not necessarily "
"need to imply that the iterator itself is no longer capable of producing "
"values."
msgstr ""

#: ../../pep-0334.txt:63
msgid "There are four places where this new exception impacts:"
msgstr ""

#: ../../pep-0334.txt:65
msgid ""
"The simple generator [8]_ mechanism could be extended to safely 'catch' "
"this SuspendIteration exception, stuff away its current state, and pass "
"the exception on to the caller."
msgstr ""

#: ../../pep-0334.txt:69
msgid ""
"Various iterator filters [9]_ in the standard library, such as "
"itertools.izip should be made aware of this exception so that it can "
"transparently propagate SuspendIteration."
msgstr ""

#: ../../pep-0334.txt:73
msgid ""
"Iterators generated from I/O operations, such as a file or socket reader,"
" could be modified to have a non-blocking variety.  This option would "
"raise a subclass of SuspendIteration if the requested operation would "
"block."
msgstr ""

#: ../../pep-0334.txt:78
msgid ""
"The asyncore library could be updated to provide a basic 'runner' that "
"pulls from an iterator; if the SuspendIteration exception is caught, then"
" it moves on to the next iterator in its runlist [10]_. External "
"frameworks like Twisted would provide alternative implementations, "
"perhaps based on FreeBSD's kqueue or Linux's epoll."
msgstr ""

#: ../../pep-0334.txt:84
msgid ""
"While these may seem dramatic changes, it is a very small amount of work "
"compared with the utility provided by continuations."
msgstr ""

#: ../../pep-0334.txt:89
msgid "Semantics"
msgstr ""

#: ../../pep-0334.txt:91
msgid ""
"This section will explain, at a high level, how the introduction of this "
"new SuspendIteration exception would behave."
msgstr ""

#: ../../pep-0334.txt:96
msgid "Simple Iterators"
msgstr ""

#: ../../pep-0334.txt:98
msgid ""
"The current functionality of iterators is best seen with a simple example"
" which produces two values 'one' and 'two'. ::"
msgstr ""

#: ../../pep-0334.txt:123
msgid ""
"An equivalent iteration could, of course, be created by the following "
"generator::"
msgstr ""

#: ../../pep-0334.txt:134
msgid "Introducing SuspendIteration"
msgstr ""

#: ../../pep-0334.txt:136
msgid ""
"Suppose that between producing 'one' and 'two', the generator above could"
" block on a socket read.  In this case, we would want to raise "
"SuspendIteration to signal that the iterator is not done producing, but "
"is unable to provide a value at the current moment. ::"
msgstr ""

#: ../../pep-0334.txt:195
msgid ""
"In a real-world situation, the NonBlockingResource would be a file "
"iterator, socket handle, or other I/O based producer.  The sleeplist "
"would instead be an async reactor, such as those found in asyncore or "
"Twisted.  The non-blocking resource could, of course, be written as a "
"generator::"
msgstr ""

#: ../../pep-0334.txt:210
msgid ""
"It is not necessary to add a keyword, 'suspend', since most real content "
"generators will not be in application code, they will be in low-level I/O"
" based operations.  Since most programmers need not be exposed to the "
"SuspendIteration() mechanism, a keyword is not needed."
msgstr ""

#: ../../pep-0334.txt:217
msgid "Application Iterators"
msgstr ""

#: ../../pep-0334.txt:219
msgid ""
"The previous example is rather contrived, a more 'real-world' example "
"would be a web page generator which yields HTML content, and pulls from a"
" database.  Note that this is an example of neither the 'producer' nor "
"the 'consumer', but rather of a filter. ::"
msgstr ""

#: ../../pep-0334.txt:231
msgid ""
"The problem, of course, is that the database may block for some time "
"before any rows are returned, and that during execution, rows may be "
"returned in blocks of 10 or 100 at a time. Ideally, if the database "
"blocks for the next set of rows, another user connection could be "
"serviced.  Note the complete absence of SuspendIterator in the above "
"code.  If done correctly, application developers would be able to focus "
"on functionality rather than concurrency issues."
msgstr ""

#: ../../pep-0334.txt:239
msgid ""
"The iterator created by the above generator should do the magic necessary"
" to maintain state, yet pass the exception through to a lower-level async"
" framework.  Here is an example of what the corresponding iterator would "
"look like if coded up as a class::"
msgstr ""

#: ../../pep-0334.txt:283
msgid "Complicating Factors"
msgstr ""

#: ../../pep-0334.txt:285
msgid ""
"While the above example is straightforward, things are a bit more "
"complicated if the intermediate generator 'condenses' values, that is, it"
" pulls in two or more values for each value it produces. For example, ::"
msgstr ""

#: ../../pep-0334.txt:296
msgid ""
"In this case, the corresponding iterator behavior has to be a bit more "
"subtle to handle the case of either the right or left iterator raising "
"SuspendIteration.  It seems to be a matter of decomposing the generator "
"to recognize intermediate states where a SuspendIterator exception from "
"the producing context could happen. ::"
msgstr ""

#: ../../pep-0334.txt:333
msgid ""
"This proposal assumes that a corresponding iterator written using this "
"class-based method is possible for existing generators.  The challenge "
"seems to be the identification of distinct states within the generator "
"where suspension could occur."
msgstr ""

#: ../../pep-0334.txt:340
msgid "Resource Cleanup"
msgstr ""

#: ../../pep-0334.txt:342
msgid ""
"The current generator mechanism has a strange interaction with exceptions"
" where a 'yield' statement is not allowed within a try/finally block.  "
"The SuspendIterator exception provides another similar issue.  The "
"impacts of this issue are not clear. However it may be that re-writing "
"the generator into a state machine, as the previous section did, could "
"resolve this issue allowing for the situation to be no-worse than, and "
"perhaps even removing the yield/finally situation.  More investigation is"
" needed in this area."
msgstr ""

#: ../../pep-0334.txt:353
msgid "API and Limitations"
msgstr ""

#: ../../pep-0334.txt:355
msgid ""
"This proposal only covers 'suspending' a chain of iterators, and does not"
" cover (of course) suspending general functions, methods, or \"C\" "
"extension function.  While there could be no direct support for creating "
"generators in \"C\" code, native \"C\" iterators which comply with the "
"SuspendIterator semantics are certainly possible."
msgstr ""

#: ../../pep-0334.txt:363
msgid "Low-Level Implementation"
msgstr ""

#: ../../pep-0334.txt:365
msgid ""
"The author of the PEP is not yet familiar with the Python execution model"
" to comment in this area."
msgstr ""

#: ../../pep-0334.txt:370
msgid "References"
msgstr ""

#: ../../pep-0334.txt:372
msgid "Twisted (http://twistedmatrix.com)"
msgstr ""

#: ../../pep-0334.txt:375
msgid "Peak (http://peak.telecommunity.com)"
msgstr ""

#: ../../pep-0334.txt:378
msgid "C10K (http://www.kegel.com/c10k.html)"
msgstr ""

#: ../../pep-0334.txt:381
msgid "Coroutines (http://c2.com/cgi/wiki?CallWithCurrentContinuation)"
msgstr ""

#: ../../pep-0334.txt:384
msgid "PEP 234, Iterators (http://www.python.org/dev/peps/pep-0234/)"
msgstr ""

#: ../../pep-0334.txt:387
msgid "Stackless Python (http://stackless.com)"
msgstr ""

#: ../../pep-0334.txt:390
msgid "Parrot /w coroutines (http://www.sidhe.org/~dan/blog/archives/000178.html)"
msgstr ""

#: ../../pep-0334.txt:393
msgid "PEP 255, Simple Generators (http://www.python.org/dev/peps/pep-0255/)"
msgstr ""

#: ../../pep-0334.txt:396
msgid ""
"itertools - Functions creating iterators "
"(http://docs.python.org/library/itertools.html)"
msgstr ""

#: ../../pep-0334.txt:399
msgid ""
"Microthreads in Python, David Mertz "
"(http://www-106.ibm.com/developerworks/linux/library/l-pythrd.html)"
msgstr ""

#: ../../pep-0334.txt:404
msgid "Copyright"
msgstr ""

#: ../../pep-0334.txt:406
msgid "This document has been placed in the public domain."
msgstr ""

