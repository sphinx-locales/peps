# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0608.rst
msgid "PEP"
msgstr ""

#: ../../pep-0608.rst:1
msgid "608"
msgstr ""

#: ../../pep-0608.rst
msgid "Title"
msgstr ""

#: ../../pep-0608.rst:2
msgid "Coordinated Python release"
msgstr ""

#: ../../pep-0608.rst
msgid "Author"
msgstr ""

#: ../../pep-0608.rst:3
msgid "Miro Hronƒçok <miro@hroncok.cz>, Victor Stinner <vstinner@python.org>"
msgstr ""

#: ../../pep-0608.rst
msgid "Status"
msgstr ""

#: ../../pep-0608.rst:5
msgid "Rejected"
msgstr ""

#: ../../pep-0608.rst
msgid "Type"
msgstr ""

#: ../../pep-0608.rst:6
msgid "Standards Track"
msgstr ""

#: ../../pep-0608.rst
msgid "Created"
msgstr ""

#: ../../pep-0608.rst:8
msgid "25-Oct-2019"
msgstr ""

#: ../../pep-0608.rst
msgid "Python-Version"
msgstr ""

#: ../../pep-0608.rst:9
msgid "3.9"
msgstr ""

#: ../../pep-0608.rst:12
msgid "Abstract"
msgstr ""

#: ../../pep-0608.rst:14
msgid ""
"Block a Python release until a compatible version of selected projects is"
" available."
msgstr ""

#: ../../pep-0608.rst:17 ../../pep-0608.rst:113
msgid ""
"The Python release manager can decide to release Python even if a project"
" is not compatible, if they decide that the project is going to be fixed "
"soon enough, or if the issue severity is low enough."
msgstr ""

#: ../../pep-0608.rst:23
msgid "Rationale"
msgstr ""

#: ../../pep-0608.rst:25
msgid ""
"The PEP involves maintainers of the selected projects in the Python "
"release cycle. There are multiple benefit:"
msgstr ""

#: ../../pep-0608.rst:28
msgid "Detect more bugs before a Python final release"
msgstr ""

#: ../../pep-0608.rst:29
msgid ""
"Discuss and maybe revert incompatible changes before a Python final "
"release"
msgstr ""

#: ../../pep-0608.rst:31
msgid ""
"Increase the number of compatible projects when the new Python final "
"version is released"
msgstr ""

#: ../../pep-0608.rst:35
msgid "Too few projects are involved in the Python beta phase"
msgstr ""

#: ../../pep-0608.rst:37
msgid ""
"Currently, Python beta versions are available four months before the "
"final 3.x.0 release."
msgstr ""

#: ../../pep-0608.rst:40
msgid ""
"Bugs reported during the beta phase can be easily fixed and can block a "
"release if they are serious enough."
msgstr ""

#: ../../pep-0608.rst:43
msgid ""
"Incompatible changes are discussed during the beta phase: enhance "
"documentation explaining how to update code, or consider to revert these "
"changes."
msgstr ""

#: ../../pep-0608.rst:47
msgid ""
"Even if more and more projects are tested on the master branch of Python "
"in their CI, too many projects of the top 50 PyPI projects are only "
"compatible with the new Python a few weeks, or even months, after the "
"final Python release."
msgstr ""

#: ../../pep-0608.rst:53
msgid "DeprecationWarning is being ignored"
msgstr ""

#: ../../pep-0608.rst:55
msgid ""
"Python has well defined process to deprecate features. A "
"DeprecationWarning must be emitted during at least one Python release, "
"before a feature can be removed."
msgstr ""

#: ../../pep-0608.rst:59
msgid ""
"In practice, DeprecationWarning warnings are ignored for years in major "
"Python projects. Usually, maintainers explain that there are too many "
"warnings and so they simply ignore warnings. Moreover, DeprecationWarning"
" is silent by default (except in the ``__main__`` module: `PEP 565 "
"<https://www.python.org/dev/peps/pep-0565/>`_)."
msgstr ""

#: ../../pep-0608.rst:65
msgid ""
"Even if more and more projects are running their test suite with warnings"
" treated as errors (``-Werror``), Python core developers still have no "
"idea how many projects are broken when a feature is removed."
msgstr ""

#: ../../pep-0608.rst:70
msgid "Need to coordinate"
msgstr ""

#: ../../pep-0608.rst:72
msgid ""
"When issues and incompatible changes are discovered and discussed after "
"the final Python release, it becomes way more complicated and expensive "
"to fix Python.  Once an API is part of an official final release, Python "
"should provide backward compatibility for the whole 3.x release lifetime."
" Some operating systems can be shipped with the buggy final release and "
"can take several months before being updated."
msgstr ""

#: ../../pep-0608.rst:79
msgid ""
"Too many projects are only updated to the new Python after the final "
"Python release, which makes this new Python version barely usable to run "
"large applications when Python is released."
msgstr ""

#: ../../pep-0608.rst:83
msgid ""
"It is proposed to block a Python release until a compatible version of "
"all selected projects is available."
msgstr ""

#: ../../pep-0608.rst:87
msgid "Shorter Python release schedule"
msgstr ""

#: ../../pep-0608.rst:89
msgid ""
"The `PEP 602: Annual Release Cycle for Python "
"<https://www.python.org/dev/peps/pep-0602/>`_ and the `PEP 605: A rolling"
" feature release stream for CPython "
"<https://www.python.org/dev/peps/pep-0605/>`_ would like to release "
"Python more often to ship new features more quickly."
msgstr ""

#: ../../pep-0608.rst:95
msgid "The problem is that each Python ``3.x`` release breaks many projects."
msgstr ""

#: ../../pep-0608.rst:97
msgid ""
"Coordinated Python releases reduces the number of broken projects and "
"makes new Python release more usable."
msgstr ""

#: ../../pep-0608.rst:102
msgid "Specification"
msgstr ""

#: ../../pep-0608.rst:104
msgid ""
"By default, a Python release is blocked until a compatible version of all"
" selected projects is available."
msgstr ""

#: ../../pep-0608.rst:107
msgid ""
"Before releasing the final Python version, the Python release manager is "
"responsible to send a report of the compatibility status of each project "
"of the selected projects. It is recommended to send such report at each "
"beta release to see the evolution and detects issues as soon as possible."
msgstr ""

#: ../../pep-0608.rst:117
msgid ""
"After each Python release, the project list can be updated to remove "
"projects and add new ones. For example, to remove old unused dependencies"
" and add new ones. The list can grow if the whole process doesn't block "
"Python releases for too long."
msgstr ""

#: ../../pep-0608.rst:123
msgid "Limit the delay"
msgstr ""

#: ../../pep-0608.rst:125
msgid ""
"When a build or test issue with the next Python version is reported to a "
"project, maintainers have one month to answer. With no answer, the "
"project can be excluded from the list of projects blocking the Python "
"release."
msgstr ""

#: ../../pep-0608.rst:130
msgid ""
"Multiple projects are already tested on the master branch of Python in a "
"CI. Problems can be detected very early in a Python release which should "
"provide enough time to handle them. More CI can be added for projects "
"which are not tested on the next Python yet."
msgstr ""

#: ../../pep-0608.rst:135
msgid ""
"Once selected projects issues are known, exceptions can be discussed "
"between the Python release manager and involved project maintainers on a "
"case-by-case basis. Not all issues deserve to block a Python release."
msgstr ""

#: ../../pep-0608.rst:140
msgid "Selected projects"
msgstr ""

#: ../../pep-0608.rst:142
msgid "List of projects blocking a Python release (total: 27):"
msgstr ""

#: ../../pep-0608.rst:144
msgid "Projects (13):"
msgstr ""

#: ../../pep-0608.rst:146
msgid "aiohttp"
msgstr ""

#: ../../pep-0608.rst:147
msgid "cryptography"
msgstr ""

#: ../../pep-0608.rst:148
msgid "Cython"
msgstr ""

#: ../../pep-0608.rst:149
msgid "Django"
msgstr ""

#: ../../pep-0608.rst:150
msgid "numpy"
msgstr ""

#: ../../pep-0608.rst:151
msgid "pandas"
msgstr ""

#: ../../pep-0608.rst:152
msgid "pip"
msgstr ""

#: ../../pep-0608.rst:153
msgid "requests"
msgstr ""

#: ../../pep-0608.rst:154
msgid "scipy"
msgstr ""

#: ../../pep-0608.rst:155
msgid "Sphinx (needed to build Python)"
msgstr ""

#: ../../pep-0608.rst:156
msgid "sqlalchemy"
msgstr ""

#: ../../pep-0608.rst:157
msgid "pytest"
msgstr ""

#: ../../pep-0608.rst:158
msgid "tox"
msgstr ""

#: ../../pep-0608.rst:160
msgid "Direct and indirect dependencies (14):"
msgstr ""

#: ../../pep-0608.rst:162
msgid "certifi (needed by urllib3)"
msgstr ""

#: ../../pep-0608.rst:163
msgid "cffi (needed by cryptography)"
msgstr ""

#: ../../pep-0608.rst:164
msgid "chardet (needed by Sphinx)"
msgstr ""

#: ../../pep-0608.rst:165
msgid "colorama (needed by pip)"
msgstr ""

#: ../../pep-0608.rst:166
msgid "docutils (needed by Sphinx)"
msgstr ""

#: ../../pep-0608.rst:167
msgid "idna (needed by Sphinx and requests)"
msgstr ""

#: ../../pep-0608.rst:168
msgid "jinja2 (needed by Sphinx)"
msgstr ""

#: ../../pep-0608.rst:169
msgid "MarkupSafe (needed by Sphinx)"
msgstr ""

#: ../../pep-0608.rst:170
msgid "psycopg2 (needed by Django)"
msgstr ""

#: ../../pep-0608.rst:171
msgid "pycparser (needed by cffi)"
msgstr ""

#: ../../pep-0608.rst:172
msgid "setuptools (needed by pip and tons of Python projects)"
msgstr ""

#: ../../pep-0608.rst:173
msgid "six (needed by tons of Python projects)"
msgstr ""

#: ../../pep-0608.rst:174
msgid "urllib3 (needed by requests)"
msgstr ""

#: ../../pep-0608.rst:175
msgid "wheel (needed by pip)"
msgstr ""

#: ../../pep-0608.rst:178
msgid "How projects are selected"
msgstr ""

#: ../../pep-0608.rst:180
msgid "Projects used by to build Python should be in the list, like Sphinx."
msgstr ""

#: ../../pep-0608.rst:182
msgid "Most popular projects are picked from the most downloaded PyPI projects."
msgstr ""

#: ../../pep-0608.rst:184
msgid ""
"Most of project dependencies are included in the list as well, since a "
"single incompatible dependency can block a whole project. Some "
"dependencies are excluded to reduce the list length."
msgstr ""

#: ../../pep-0608.rst:188
msgid ""
"Test dependencies as pytest and tox should be included as well. If a "
"project cannot be tested, a new version cannot be shipped neither."
msgstr ""

#: ../../pep-0608.rst:191
msgid ""
"The list should be long enough to have a good idea of the cost of porting"
" a project to the next Python, but small enough to not block a Python "
"release for too long."
msgstr ""

#: ../../pep-0608.rst:195
msgid ""
"Obviously, projects which are not part of the list also are encouraged to"
" report issues with the next Python and to have a CI running on the next "
"Python version."
msgstr ""

#: ../../pep-0608.rst:201
msgid "Incompatible changes"
msgstr ""

#: ../../pep-0608.rst:203
msgid ""
"The definition here is large: any Python change which cause an issue when"
" building or testing a project."
msgstr ""

#: ../../pep-0608.rst:206
msgid ""
"See also the `PEP 606: Python Compatibility Version "
"<https://www.python.org/dev/peps/pep-0606/>`_ for more examples of "
"incompatible changes."
msgstr ""

#: ../../pep-0608.rst:211
msgid "Examples"
msgstr ""

#: ../../pep-0608.rst:213
msgid "There are different kinds of incompatible changes:"
msgstr ""

#: ../../pep-0608.rst:215
msgid ""
"Change in the Python build. For example, Python 3.8 removed ``'m'`` "
"(which stands for pymalloc) from ``sys.abiflags`` which impacts Python "
"vendors like Linux distributions."
msgstr ""

#: ../../pep-0608.rst:218
msgid ""
"Change in the C extensions build. For example, Python 3.8 no longer links"
" C extensions to libpython, and Python 3.7 removed ``os.errno`` alias to "
"the ``errno`` module."
msgstr ""

#: ../../pep-0608.rst:221
msgid ""
"Removed function. For example, collections aliases to ABC classes have "
"been removed in Python 3.9."
msgstr ""

#: ../../pep-0608.rst:223
msgid "Changed function signature:"
msgstr ""

#: ../../pep-0608.rst:225
msgid ""
"Reject a type which was previously accepted (ex: only accept ``int``, "
"reject ``float``)."
msgstr ""

#: ../../pep-0608.rst:227
msgid "Add a new mandatory parameter."
msgstr ""

#: ../../pep-0608.rst:228
msgid "Convert a positional-or-keyword parameter to positional-only."
msgstr ""

#: ../../pep-0608.rst:230
msgid ""
"Behavior change. For example, Python 3.8 now serializes XML attributes in"
" their insertion order, rather than sorting them by name."
msgstr ""

#: ../../pep-0608.rst:232
msgid ""
"New warning. Since more and more projects are tested with all warnings "
"treated as errors, any new warning can cause a project test to fail."
msgstr ""

#: ../../pep-0608.rst:234
msgid "Function removed from the C API."
msgstr ""

#: ../../pep-0608.rst:235
msgid ""
"Structure made opaque in the C API. For example, PyInterpreterState "
"became opaque in Python 3.8 which broke projects accessing "
"``interp->modules`` (``PyImport_GetModuleDict()`` should be used "
"instead)."
msgstr ""

#: ../../pep-0608.rst:241
msgid "Cleaning up Python and DeprecationWarning"
msgstr ""

#: ../../pep-0608.rst:243
msgid ""
"One of the `Zen of Python (PEP 20) "
"<https://www.python.org/dev/peps/pep-0020/>`_ motto is:"
msgstr ""

#: ../../pep-0608.rst:246
msgid "There should be one-- and preferably only one --obvious way to do it."
msgstr ""

#: ../../pep-0608.rst:249
msgid ""
"When Python evolves, new ways emerge inevitably. ``DeprecationWarning`` "
"are emitted to suggest to use the new way, but many developers ignore "
"these warnings which are silent by default."
msgstr ""

#: ../../pep-0608.rst:253
msgid ""
"Sometimes, supporting both ways has a minor maintenance cost, but Python "
"core developers prefer to drop the old way to clean up the Python code "
"base and standard library. Such kind of change is backward incompatible."
msgstr ""

#: ../../pep-0608.rst:257
msgid ""
"More incompatible changes than usual should be expected with the end of "
"the Python 2 support which is a good opportunity to cleaning up old "
"Python code."
msgstr ""

#: ../../pep-0608.rst:263
msgid "Distributed CI"
msgstr ""

#: ../../pep-0608.rst:265
msgid ""
"Checking if selected projects are compatible with the master branch of "
"Python can be automated using a distributed CI."
msgstr ""

#: ../../pep-0608.rst:268
msgid "Existing CIs can be reused."
msgstr ""

#: ../../pep-0608.rst:270
msgid ""
"New CIs can be added for projects which are not tested on the next Python"
" yet."
msgstr ""

#: ../../pep-0608.rst:273
msgid ""
"It is recommended to treat DeprecationWarning warnings as errors when "
"testing on the next Python."
msgstr ""

#: ../../pep-0608.rst:276
msgid ""
"A job testing a project on the next Python doesn't have to be "
"\"mandatory\" (block the whole CI). It is fine to have failures during "
"the beta phase of a Python release. The job only has to pass for the "
"final Python release."
msgstr ""

#: ../../pep-0608.rst:283
msgid "Copyright"
msgstr ""

#: ../../pep-0608.rst:285
msgid ""
"This document is placed in the public domain or under the "
"CC0-1.0-Universal license, whichever is more permissive."
msgstr ""

