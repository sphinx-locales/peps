# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0325.txt
msgid "PEP"
msgstr ""

#: ../../pep-0325.txt:1
msgid "325"
msgstr ""

#: ../../pep-0325.txt
msgid "Title"
msgstr ""

#: ../../pep-0325.txt:2
msgid "Resource-Release Support for Generators"
msgstr ""

#: ../../pep-0325.txt
msgid "Author"
msgstr ""

#: ../../pep-0325.txt:5
msgid "Samuele Pedroni <pedronis@python.org>"
msgstr ""

#: ../../pep-0325.txt
msgid "Status"
msgstr ""

#: ../../pep-0325.txt:6
msgid "Rejected"
msgstr ""

#: ../../pep-0325.txt
msgid "Type"
msgstr ""

#: ../../pep-0325.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0325.txt
msgid "Created"
msgstr ""

#: ../../pep-0325.txt:9
msgid "25-Aug-2003"
msgstr ""

#: ../../pep-0325.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0325.txt:10
msgid "2.4"
msgstr ""

#: ../../pep-0325.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0325.txt:15
msgid "Abstract"
msgstr ""

#: ../../pep-0325.txt:17
msgid ""
"Generators allow for natural coding and abstraction of traversal over "
"data.  Currently if external resources needing proper timely release are "
"involved, generators are unfortunately not adequate. The typical idiom "
"for timely release is not supported, a yield statement is not allowed in "
"the try clause of a try-finally statement inside a generator.  The "
"finally clause execution can be neither guaranteed nor enforced."
msgstr ""

#: ../../pep-0325.txt:25
msgid ""
"This PEP proposes that the built-in generator type implement a close "
"method and destruction semantics, such that the restriction on yield "
"placement can be lifted, expanding the applicability of generators."
msgstr ""

#: ../../pep-0325.txt:32
msgid "Pronouncement"
msgstr ""

#: ../../pep-0325.txt:34
msgid ""
"Rejected in favor of PEP 342 which includes substantially all of the "
"requested behavior in a more refined form."
msgstr ""

#: ../../pep-0325.txt:39
msgid "Rationale"
msgstr ""

#: ../../pep-0325.txt:41
msgid ""
"Python generators allow for natural coding of many data traversal "
"scenarios.  Their instantiation produces iterators, i.e. first-class "
"objects abstracting traversal (with all the advantages of first- "
"classness).  In this respect they match in power and offer some "
"advantages over the approach using iterator methods taking a "
"(smalltalkish) block.  On the other hand, given current limitations (no "
"yield allowed in a try clause of a try-finally inside a generator) the "
"latter approach seems better suited to encapsulating not only traversal "
"but also exception handling and proper resource acquisition and release."
msgstr ""

#: ../../pep-0325.txt:52
msgid "Let's consider an example (for simplicity, files in read-mode are used)::"
msgstr ""

#: ../../pep-0325.txt:60
msgid ""
"this is short and to the point, but the try-finally for timely closing of"
" the files cannot be added.  (While instead of a path, a file, whose "
"closing then would be responsibility of the caller, could be passed in as"
" argument, the same is not applicable for the files opened depending on "
"the contents of the index)."
msgstr ""

#: ../../pep-0325.txt:66
msgid ""
"If we want timely release, we have to sacrifice the simplicity and "
"directness of the generator-only approach: (e.g.) ::"
msgstr ""

#: ../../pep-0325.txt:91
msgid "to be used as::"
msgstr ""

#: ../../pep-0325.txt:100
msgid ""
"The more convoluted solution implementing timely release, seems to offer "
"a precious hint.  What we have done is encapsulate our traversal in an "
"object (iterator) with a close method."
msgstr ""

#: ../../pep-0325.txt:104
msgid ""
"This PEP proposes that generators should grow such a close method with "
"such semantics that the example could be rewritten as::"
msgstr ""

#: ../../pep-0325.txt:131
msgid ""
"Currently PEP 255 [1]_ disallows yield inside a try clause of a try-"
"finally statement, because the execution of the finally clause cannot be "
"guaranteed as required by try-finally semantics."
msgstr ""

#: ../../pep-0325.txt:135
msgid ""
"The semantics of the proposed close method should be such that while the "
"finally clause execution still cannot be guaranteed, it can be enforced "
"when required.  Specifically, the close method behavior should trigger "
"the execution of the finally clauses inside the generator, either by "
"forcing a return in the generator frame or by throwing an exception in "
"it.  In situations requiring timely resource release, close could then be"
" explicitly invoked."
msgstr ""

#: ../../pep-0325.txt:143
msgid ""
"The semantics of generator destruction on the other hand should be "
"extended in order to implement a best-effort policy for the general case."
"  Specifically, destruction should invoke ``close()``. The best-effort "
"limitation comes from the fact that the destructor's execution is not "
"guaranteed in the first place."
msgstr ""

#: ../../pep-0325.txt:149
msgid ""
"This seems to be a reasonable compromise, the resulting global behavior "
"being similar to that of files and closing."
msgstr ""

#: ../../pep-0325.txt:154
msgid "Possible Semantics"
msgstr ""

#: ../../pep-0325.txt:156
msgid ""
"The built-in generator type should have a close method implemented, which"
" can then be invoked as::"
msgstr ""

#: ../../pep-0325.txt:161
msgid ""
"where ``gen`` is an instance of the built-in generator type. Generator "
"destruction should also invoke close method behavior."
msgstr ""

#: ../../pep-0325.txt:164
msgid "If a generator is already terminated, close should be a no-op."
msgstr ""

#: ../../pep-0325.txt:166
msgid ""
"Otherwise, there are two alternative solutions, Return or Exception "
"Semantics:"
msgstr ""

#: ../../pep-0325.txt:169
msgid ""
"A - Return Semantics: The generator should be resumed, generator "
"execution should continue as if the instruction at the re-entry point is "
"a return.  Consequently, finally clauses surrounding the re-entry point "
"would be executed, in the case of a then allowed try-yield-finally "
"pattern."
msgstr ""

#: ../../pep-0325.txt:175
msgid ""
"Issues: is it important to be able to distinguish forced termination by "
"close, normal termination, exception propagation from generator or "
"generator-called code?  In the normal case it seems not, finally clauses "
"should be there to work the same in all these cases, still this semantics"
" could make such a distinction hard."
msgstr ""

#: ../../pep-0325.txt:182
msgid ""
"Except-clauses, like by a normal return, are not executed, such clauses "
"in legacy generators expect to be executed for exceptions raised by the "
"generator or by code called from it.  Not executing them in the close "
"case seems correct."
msgstr ""

#: ../../pep-0325.txt:187
msgid ""
"B - Exception Semantics: The generator should be resumed and execution "
"should continue as if a special-purpose exception (e.g. CloseGenerator) "
"has been raised at re-entry point.  Close implementation should consume "
"and not propagate further this exception."
msgstr ""

#: ../../pep-0325.txt:193
msgid ""
"Issues: should ``StopIteration`` be reused for this purpose?  Probably "
"not.  We would like close to be a harmless operation for legacy "
"generators, which could contain code catching ``StopIteration`` to deal "
"with other generators/iterators."
msgstr ""

#: ../../pep-0325.txt:198
msgid ""
"In general, with exception semantics, it is unclear what to do if the "
"generator does not terminate or we do not receive the special exception "
"propagated back.  Other different exceptions should probably be "
"propagated, but consider this possible legacy generator code::"
msgstr ""

#: ../../pep-0325.txt:211
msgid ""
"If close is invoked with the generator suspended after the yield, the "
"except clause would catch our special purpose exception, so we would get "
"a different exception propagated back, which in this case ought to be "
"reasonably consumed and ignored but in general should be propagated, but "
"separating these scenarios seems hard."
msgstr ""

#: ../../pep-0325.txt:217
msgid ""
"The exception approach has the advantage to let the generator distinguish"
" between termination cases and have more control.  On the other hand, "
"clear-cut semantics seem harder to define."
msgstr ""

#: ../../pep-0325.txt:223
msgid "Remarks"
msgstr ""

#: ../../pep-0325.txt:225
msgid ""
"If this proposal is accepted, it should become common practice to "
"document whether a generator acquires resources, so that its close method"
" ought to be called.  If a generator is no longer used, calling close "
"should be harmless."
msgstr ""

#: ../../pep-0325.txt:230
msgid ""
"On the other hand, in the typical scenario the code that instantiated the"
" generator should call close if required by it. Generic code dealing with"
" iterators/generators instantiated elsewhere should typically not be "
"littered with close calls."
msgstr ""

#: ../../pep-0325.txt:235
msgid ""
"The rare case of code that has acquired ownership of and need to properly"
" deal with all of iterators, generators and generators acquiring "
"resources that need timely release, is easily solved::"
msgstr ""

#: ../../pep-0325.txt:244
msgid "Open Issues"
msgstr ""

#: ../../pep-0325.txt:246
msgid ""
"Definitive semantics ought to be chosen.  Currently Guido favors "
"Exception Semantics.  If the generator yields a value instead of "
"terminating, or propagating back the special exception, a special "
"exception should be raised again on the generator side."
msgstr ""

#: ../../pep-0325.txt:251
msgid ""
"It is still unclear whether spuriously converted special exceptions (as "
"discussed in Possible Semantics) are a problem and what to do about them."
msgstr ""

#: ../../pep-0325.txt:255
msgid "Implementation issues should be explored."
msgstr ""

#: ../../pep-0325.txt:259
msgid "Alternative Ideas"
msgstr ""

#: ../../pep-0325.txt:261
msgid ""
"The idea that the yield placement limitation should be removed and that "
"generator destruction should trigger execution of finally clauses has "
"been proposed more than once.  Alone it cannot guarantee that timely "
"release of resources acquired by a generator can be enforced."
msgstr ""

#: ../../pep-0325.txt:267
msgid ""
"PEP 288 [2]_ proposes a more general solution, allowing custom exception "
"passing to generators.  The proposal in this PEP addresses more directly "
"the problem of resource release.  Were PEP 288 implemented, Exceptions "
"Semantics for close could be layered on top of it, on the other hand PEP "
"288 should make a separate case for the more general functionality."
msgstr ""

#: ../../pep-0325.txt:276
msgid "References"
msgstr ""

#: ../../pep-0325.txt:278
msgid "PEP 255 Simple Generators http://www.python.org/dev/peps/pep-0255/"
msgstr ""

#: ../../pep-0325.txt:281
msgid ""
"PEP 288 Generators Attributes and Exceptions "
"http://www.python.org/dev/peps/pep-0288/"
msgstr ""

#: ../../pep-0325.txt:286
msgid "Copyright"
msgstr ""

#: ../../pep-0325.txt:288
msgid "This document has been placed in the public domain."
msgstr ""

