# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0443.txt
msgid "PEP"
msgstr ""

#: ../../pep-0443.txt:1
msgid "443"
msgstr ""

#: ../../pep-0443.txt
msgid "Title"
msgstr ""

#: ../../pep-0443.txt:2
msgid "Single-dispatch generic functions"
msgstr ""

#: ../../pep-0443.txt
msgid "Author"
msgstr ""

#: ../../pep-0443.txt:5
msgid "≈Åukasz Langa <lukasz@python.org>"
msgstr ""

#: ../../pep-0443.txt
msgid "Discussions-To"
msgstr ""

#: ../../pep-0443.txt:6
msgid "Python-Dev <python-dev@python.org>"
msgstr ""

#: ../../pep-0443.txt
msgid "Status"
msgstr ""

#: ../../pep-0443.txt:7
msgid "Final"
msgstr ""

#: ../../pep-0443.txt
msgid "Type"
msgstr ""

#: ../../pep-0443.txt:8
msgid "Standards Track"
msgstr ""

#: ../../pep-0443.txt
msgid "Created"
msgstr ""

#: ../../pep-0443.txt:10
msgid "22-May-2013"
msgstr ""

#: ../../pep-0443.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0443.txt:11
msgid "22-May-2013, 25-May-2013, 31-May-2013"
msgstr ""

#: ../../pep-0443.txt
msgid "Replaces"
msgstr ""

#: ../../pep-0443.txt:12
msgid "245, 246, 3124"
msgstr ""

#: ../../pep-0443.txt:16
msgid "Abstract"
msgstr ""

#: ../../pep-0443.txt:18
msgid ""
"This PEP proposes a new mechanism in the ``functools`` standard library "
"module that provides a simple form of generic programming known as "
"single-dispatch generic functions."
msgstr ""

#: ../../pep-0443.txt:22
msgid ""
"A **generic function** is composed of multiple functions implementing the"
" same operation for different types. Which implementation should be used "
"during a call is determined by the dispatch algorithm. When the "
"implementation is chosen based on the type of a single argument, this is "
"known as **single dispatch**."
msgstr ""

#: ../../pep-0443.txt:30
msgid "Rationale and Goals"
msgstr ""

#: ../../pep-0443.txt:32
msgid ""
"Python has always provided a variety of built-in and standard-library "
"generic functions, such as ``len()``, ``iter()``, ``pprint.pprint()``, "
"``copy.copy()``, and most of the functions in the ``operator`` module. "
"However, it currently:"
msgstr ""

#: ../../pep-0443.txt:37
msgid ""
"does not have a simple or straightforward way for developers to create "
"new generic functions,"
msgstr ""

#: ../../pep-0443.txt:40
msgid ""
"does not have a standard way for methods to be added to existing generic "
"functions (i.e., some are added using registration functions, others "
"require defining ``__special__`` methods, possibly by monkeypatching)."
msgstr ""

#: ../../pep-0443.txt:45
msgid ""
"In addition, it is currently a common anti-pattern for Python code to "
"inspect the types of received arguments, in order to decide what to do "
"with the objects."
msgstr ""

#: ../../pep-0443.txt:49
msgid ""
"For example, code may wish to accept either an object of some type, or a "
"sequence of objects of that type. Currently, the \"obvious way\" to do "
"this is by type inspection, but this is brittle and closed to extension."
msgstr ""

#: ../../pep-0443.txt:54
msgid ""
"Abstract Base Classes make it easier to discover present behaviour, but "
"don't help adding new behaviour. A developer using an already-written "
"library may be unable to change how their objects are treated by such "
"code, especially if the objects they are using were created by a third "
"party."
msgstr ""

#: ../../pep-0443.txt:60
msgid ""
"Therefore, this PEP proposes a uniform API to address dynamic overloading"
" using decorators."
msgstr ""

#: ../../pep-0443.txt:65
msgid "User API"
msgstr ""

#: ../../pep-0443.txt:67
msgid ""
"To define a generic function, decorate it with the ``@singledispatch`` "
"decorator. Note that the dispatch happens on the type of the first "
"argument. Create your function accordingly::"
msgstr ""

#: ../../pep-0443.txt:78
msgid ""
"To add overloaded implementations to the function, use the ``register()``"
" attribute of the generic function. This is a decorator, taking a type "
"parameter and decorating a function implementing the operation for that "
"type::"
msgstr ""

#: ../../pep-0443.txt:96
msgid ""
"To enable registering lambdas and pre-existing functions, the "
"``register()`` attribute can be used in a functional form::"
msgstr ""

#: ../../pep-0443.txt:104
msgid ""
"The ``register()`` attribute returns the undecorated function. This "
"enables decorator stacking, pickling, as well as creating unit tests for "
"each variant independently::"
msgstr ""

#: ../../pep-0443.txt:118
msgid ""
"When called, the generic function dispatches on the type of the first "
"argument::"
msgstr ""

#: ../../pep-0443.txt:138
msgid ""
"Where there is no registered implementation for a specific type, its "
"method resolution order is used to find a more generic implementation. "
"The original function decorated with ``@singledispatch`` is registered "
"for the base ``object`` type, which means it is used if no better "
"implementation is found."
msgstr ""

#: ../../pep-0443.txt:144
msgid ""
"To check which implementation will the generic function choose for a "
"given type, use the ``dispatch()`` attribute::"
msgstr ""

#: ../../pep-0443.txt:152
msgid ""
"To access all registered implementations, use the read-only ``registry`` "
"attribute::"
msgstr ""

#: ../../pep-0443.txt:164
msgid ""
"The proposed API is intentionally limited and opinionated, as to ensure "
"it is easy to explain and use, as well as to maintain consistency with "
"existing members in the ``functools`` module."
msgstr ""

#: ../../pep-0443.txt:170
msgid "Implementation Notes"
msgstr ""

#: ../../pep-0443.txt:172
msgid ""
"The functionality described in this PEP is already implemented in the "
"``pkgutil`` standard library module as ``simplegeneric``. Because this "
"implementation is mature, the goal is to move it largely as-is. The "
"reference implementation is available on hg.python.org [#ref-impl]_."
msgstr ""

#: ../../pep-0443.txt:177
msgid ""
"The dispatch type is specified as a decorator argument. An alternative "
"form using function annotations was considered but its inclusion has been"
" rejected. As of May 2013, this usage pattern is out of scope for the "
"standard library [#pep-0008]_, and the best practices for annotation "
"usage are still debated."
msgstr ""

#: ../../pep-0443.txt:183
msgid ""
"Based on the current ``pkgutil.simplegeneric`` implementation, and "
"following the convention on registering virtual subclasses on Abstract "
"Base Classes, the dispatch registry will not be thread-safe."
msgstr ""

#: ../../pep-0443.txt:188
msgid "Abstract Base Classes"
msgstr ""

#: ../../pep-0443.txt:190
msgid ""
"The ``pkgutil.simplegeneric`` implementation relied on several forms of "
"method resolution order (MRO). ``@singledispatch`` removes special "
"handling of old-style classes and Zope's ExtensionClasses. More "
"importantly, it introduces support for Abstract Base Classes (ABC)."
msgstr ""

#: ../../pep-0443.txt:195
msgid ""
"When a generic function implementation is registered for an ABC, the "
"dispatch algorithm switches to an extended form of C3 linearization, "
"which includes the relevant ABCs in the MRO of the provided argument. The"
" algorithm inserts ABCs where their functionality is introduced, i.e. "
"``issubclass(cls, abc)`` returns ``True`` for the class itself but "
"returns ``False`` for all its direct base classes. Implicit ABCs for a "
"given class (either registered or inferred from the presence of a special"
" method like ``__len__()``) are inserted directly after the last ABC "
"explicitly listed in the MRO of said class."
msgstr ""

#: ../../pep-0443.txt:205
msgid ""
"In its most basic form, this linearization returns the MRO for the given "
"type::"
msgstr ""

#: ../../pep-0443.txt:211
msgid ""
"When the second argument contains ABCs that the specified type is a "
"subclass of, they are inserted in a predictable order::"
msgstr ""

#: ../../pep-0443.txt:221
msgid ""
"While this mode of operation is significantly slower, all dispatch "
"decisions are cached. The cache is invalidated on registering new "
"implementations on the generic function or when user code calls "
"``register()`` on an ABC to implicitly subclass it. In the latter case, "
"it is possible to create a situation with ambiguous dispatch, for "
"instance::"
msgstr ""

#: ../../pep-0443.txt:236
msgid ""
"Faced with ambiguity, ``@singledispatch`` refuses the temptation to "
"guess::"
msgstr ""

#: ../../pep-0443.txt:253
msgid ""
"Note that this exception would not be raised if one or more ABCs had been"
" provided explicitly as base classes during class definition. In this "
"case dispatch happens in the MRO order::"
msgstr ""

#: ../../pep-0443.txt:267
msgid ""
"A similar conflict arises when subclassing an ABC is inferred from the "
"presence of a special method like ``__len__()`` or ``__contains__()``::"
msgstr ""

#: ../../pep-0443.txt:283
msgid ""
"An early version of the PEP contained a custom approach that was simpler "
"but created a number of edge cases with surprising results [#why-c3]_."
msgstr ""

#: ../../pep-0443.txt:287
msgid "Usage Patterns"
msgstr ""

#: ../../pep-0443.txt:289
msgid ""
"This PEP proposes extending behaviour only of functions specifically "
"marked as generic. Just as a base class method may be overridden by a "
"subclass, so too a function may be overloaded to provide custom "
"functionality for a given type."
msgstr ""

#: ../../pep-0443.txt:294
msgid ""
"Universal overloading does not equal *arbitrary* overloading, in the "
"sense that we need not expect people to randomly redefine the behavior of"
" existing functions in unpredictable ways. To the contrary, generic "
"function usage in actual programs tends to follow very predictable "
"patterns and registered implementations are highly-discoverable in the "
"common case."
msgstr ""

#: ../../pep-0443.txt:301
msgid ""
"If a module is defining a new generic operation, it will usually also "
"define any required implementations for existing types in the same place."
"  Likewise, if a module is defining a new type, then it will usually "
"define implementations there for any generic functions that it knows or "
"cares about.  As a result, the vast majority of registered "
"implementations can be found adjacent to either the function being "
"overloaded, or to a newly-defined type for which the implementation is "
"adding support."
msgstr ""

#: ../../pep-0443.txt:310
msgid ""
"It is only in rather infrequent cases that one will have implementations "
"registered in a module that contains neither the function nor the type(s)"
" for which the implementation is added. In the absence of incompetence or"
" deliberate intention to be obscure, the few implementations that are not"
" registered adjacent to the relevant type(s) or function(s), will "
"generally not need to be understood or known about outside the scope "
"where those implementations are defined. (Except in the \"support "
"modules\" case, where best practice suggests naming them accordingly.)"
msgstr ""

#: ../../pep-0443.txt:320
msgid ""
"As mentioned earlier, single-dispatch generics are already prolific "
"throughout the standard library. A clean, standard way of doing them "
"provides a way forward to refactor those custom implementations to use a "
"common one, opening them up for user extensibility at the same time."
msgstr ""

#: ../../pep-0443.txt:327
msgid "Alternative approaches"
msgstr ""

#: ../../pep-0443.txt:329
msgid ""
"In PEP 3124 [#pep-3124]_ Phillip J. Eby proposes a full-grown solution "
"with overloading based on arbitrary rule sets (with the default "
"implementation dispatching on argument types), as well as interfaces, "
"adaptation and method combining. PEAK-Rules [#peak-rules]_ is a reference"
" implementation of the concepts described in PJE's PEP."
msgstr ""

#: ../../pep-0443.txt:335
msgid ""
"Such a broad approach is inherently complex, which makes reaching a "
"consensus hard. In contrast, this PEP focuses on a single piece of "
"functionality that is simple to reason about. It's important to note this"
" does not preclude the use of other approaches now or in the future."
msgstr ""

#: ../../pep-0443.txt:340
msgid ""
"In a 2005 article on Artima [#artima2005]_ Guido van Rossum presents a "
"generic function implementation that dispatches on types of all arguments"
" on a function. The same approach was chosen in Andrey Popp's ``generic``"
" package available on PyPI [#pypi-generic]_, as well as David Mertz's "
"``gnosis.magic.multimethods`` [#gnosis-multimethods]_."
msgstr ""

#: ../../pep-0443.txt:346
msgid ""
"While this seems desirable at first, I agree with Fredrik Lundh's comment"
" that \"if you design APIs with pages of logic just to sort out what code"
" a function should execute, you should probably hand over the API design "
"to someone else\". In other words, the single argument approach proposed "
"in this PEP is not only easier to implement but also clearly communicates"
" that dispatching on a more complex state is an anti-pattern. It also has"
" the virtue of corresponding directly with the familiar method dispatch "
"mechanism in object oriented programming. The only difference is whether "
"the custom implementation is associated more closely with the data "
"(object-oriented methods) or the algorithm (single-dispatch overloading)."
msgstr ""

#: ../../pep-0443.txt:358
msgid ""
"PyPy's RPython offers ``extendabletype`` [#pairtype]_, a metaclass which "
"enables classes to be externally extended. In combination with "
"``pairtype()`` and ``pair()`` factories, this offers a form of single-"
"dispatch generics."
msgstr ""

#: ../../pep-0443.txt:365
msgid "Acknowledgements"
msgstr ""

#: ../../pep-0443.txt:367
msgid ""
"Apart from Phillip J. Eby's work on PEP 3124 [#pep-3124]_ and PEAK-Rules,"
" influences include Paul Moore's original issue [#issue-5135]_ that "
"proposed exposing ``pkgutil.simplegeneric`` as part of the ``functools`` "
"API, Guido van Rossum's article on multimethods [#artima2005]_, and "
"discussions with Raymond Hettinger on a general pprint rewrite. Huge "
"thanks to Nick Coghlan for encouraging me to create this PEP and "
"providing initial feedback."
msgstr ""

#: ../../pep-0443.txt:377
msgid "References"
msgstr ""

#: ../../pep-0443.txt:380
msgid "http://hg.python.org/features/pep-443/file/tip/Lib/functools.py#l359"
msgstr ""

#: ../../pep-0443.txt:382
msgid ""
"PEP 8 states in the \"Programming Recommendations\" section that \"the "
"Python standard library will not use function annotations as that would "
"result in a premature commitment to a particular annotation style\". "
"(http://www.python.org/dev/peps/pep-0008)"
msgstr ""

#: ../../pep-0443.txt:388
msgid "http://bugs.python.org/issue18244"
msgstr ""

#: ../../pep-0443.txt:390
msgid "http://www.python.org/dev/peps/pep-3124/"
msgstr ""

#: ../../pep-0443.txt:392
msgid "http://peak.telecommunity.com/DevCenter/PEAK_2dRules"
msgstr ""

#: ../../pep-0443.txt:395
msgid "http://www.artima.com/weblogs/viewpost.jsp?thread=101605"
msgstr ""

#: ../../pep-0443.txt:397
msgid "http://pypi.python.org/pypi/generic"
msgstr ""

#: ../../pep-0443.txt:400
msgid "http://gnosis.cx/publish/programming/charming_python_b12.html"
msgstr ""

#: ../../pep-0443.txt:403
msgid "https://bitbucket.org/pypy/pypy/raw/default/rpython/tool/pairtype.py"
msgstr ""

#: ../../pep-0443.txt:405
msgid "http://bugs.python.org/issue5135"
msgstr ""

#: ../../pep-0443.txt:409
msgid "Copyright"
msgstr ""

#: ../../pep-0443.txt:411
msgid "This document has been placed in the public domain."
msgstr ""

