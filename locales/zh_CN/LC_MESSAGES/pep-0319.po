# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0319.txt
msgid "PEP"
msgstr ""

#: ../../pep-0319.txt:1
msgid "319"
msgstr ""

#: ../../pep-0319.txt
msgid "Title"
msgstr ""

#: ../../pep-0319.txt:2
msgid "Python Synchronize/Asynchronize Block"
msgstr ""

#: ../../pep-0319.txt
msgid "Author"
msgstr ""

#: ../../pep-0319.txt:5
msgid "Michel Pelletier <michel@users.sourceforge.net>"
msgstr ""

#: ../../pep-0319.txt
msgid "Status"
msgstr ""

#: ../../pep-0319.txt:6
msgid "Rejected"
msgstr ""

#: ../../pep-0319.txt
msgid "Type"
msgstr ""

#: ../../pep-0319.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0319.txt
msgid "Created"
msgstr ""

#: ../../pep-0319.txt:9
msgid "24-Feb-2003"
msgstr ""

#: ../../pep-0319.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0319.txt:10
msgid "2.4?"
msgstr ""

#: ../../pep-0319.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0319.txt:15
msgid "Abstract"
msgstr ""

#: ../../pep-0319.txt:17
msgid ""
"This PEP proposes adding two new keywords to Python, 'synchronize' and "
"'asynchronize'."
msgstr ""

#: ../../pep-0319.txt:21
msgid "Pronouncement"
msgstr ""

#: ../../pep-0319.txt:23
msgid "This PEP is rejected in favor of PEP 343."
msgstr ""

#: ../../pep-0319.txt:52
msgid "The 'synchronize' Keyword"
msgstr ""

#: ../../pep-0319.txt:26
msgid ""
"The concept of code synchronization in Python is too low-level. To "
"synchronize code a programmer must be aware of the details of the "
"following pseudo-code pattern::"
msgstr ""

#: ../../pep-0319.txt:40
msgid ""
"This synchronized block pattern is not the only pattern (more discussed "
"below) but it is very common.  This PEP proposes replacing the above code"
" with the following equivalent::"
msgstr ""

#: ../../pep-0319.txt:47
msgid ""
"The advantages of this scheme are simpler syntax and less room for user "
"error.  Currently users are required to write code about acquiring and "
"releasing thread locks in 'try/finally' blocks; errors in this code can "
"cause notoriously difficult concurrent thread locking issues."
msgstr ""

#: ../../pep-0319.txt:119
msgid "The 'asynchronize' Keyword"
msgstr ""

#: ../../pep-0319.txt:55
msgid ""
"While executing a 'synchronize' block of code a programmer may want to "
"\"drop back\" to running asynchronously momentarily to run blocking "
"input/output routines or something else that might take an indeterminate "
"amount of time and does not require synchronization. This code usually "
"follows the pattern::"
msgstr ""

#: ../../pep-0319.txt:76
msgid ""
"The asynchronous section of the code is not very obvious visually, so it "
"is marked up with comments.  Using the proposed 'asynchronize' keyword "
"this code becomes much cleaner, easier to understand, and less prone to "
"error::"
msgstr ""

#: ../../pep-0319.txt:89
msgid ""
"Encountering an 'asynchronize' keyword inside a non-synchronized block "
"can raise either an error or issue a warning (as all code blocks are "
"implicitly asynchronous anyway).  It is important to note that the above "
"example is **not** the same as::"
msgstr ""

#: ../../pep-0319.txt:102
msgid ""
"Because both synchronized blocks of code may be running inside the same "
"iteration of a loop, Consider::"
msgstr ""

#: ../../pep-0319.txt:114
msgid ""
"Many threads may be looping through this code.  Without the "
"'asynchronize' keyword one thread cannot stay in the loop and release the"
" lock at the same time while blocking IO is going on. This pattern of "
"releasing locks inside a main loop to do blocking IO is used extensively "
"inside the CPython interpreter itself."
msgstr ""

#: ../../pep-0319.txt:122
msgid "Synchronization Targets"
msgstr ""

#: ../../pep-0319.txt:124
msgid ""
"As proposed the 'synchronize' and 'asynchronize' keywords synchronize a "
"block of code.  However programmers may want to specify a target object "
"that threads synchronize on.  Any object can be a synchronization target."
msgstr ""

#: ../../pep-0319.txt:129
msgid ""
"Consider a two-way queue object: two different objects are used by the "
"same 'synchronize' code block to synchronize both queues separately in "
"the 'get' method::"
msgstr ""

#: ../../pep-0319.txt:162
msgid ""
"Here is the equivalent code in Python as it is now without a "
"'synchronize' keyword::"
msgstr ""

#: ../../pep-0319.txt:208
msgid ""
"The last example had to define an extra class to associate a lock with "
"the queue where the first example the 'synchronize' keyword does this "
"association internally and transparently."
msgstr ""

#: ../../pep-0319.txt:214
msgid "Other Patterns that Synchronize"
msgstr ""

#: ../../pep-0319.txt:216
msgid ""
"There are some situations where the 'synchronize' and 'asynchronize' "
"keywords cannot entirely replace the use of lock methods like ``acquire``"
" and ``release``.  Some examples are if the programmer wants to provide "
"arguments for ``acquire`` or if a lock is acquired in one code block but "
"released in another, as shown below."
msgstr ""

#: ../../pep-0319.txt:223
msgid ""
"Here is a class from Zope modified to use both the 'synchronize' and "
"'asynchronize' keywords and also uses a pool of explicit locks that are "
"acquired and released in different code blocks and thus don't use "
"'synchronize'::"
msgstr ""

#: ../../pep-0319.txt:272
msgid ""
"Here is the original class as found in the "
"'Zope/ZServer/PubCore/ZRendevous.py' module.  The \"convenience\" of the "
"'_a' and '_r' shortcut names obscure the code::"
msgstr ""

#: ../../pep-0319.txt:327
msgid ""
"In particular the asynchronize section of the ``accept`` method is not "
"very obvious.  To beginner programmers, 'synchronize' and 'asynchronize' "
"remove many of the problems encountered when juggling multiple "
"``acquire`` and ``release`` methods on different locks in different "
"``try/finally`` blocks."
msgstr ""

#: ../../pep-0319.txt:335
msgid "Formal Syntax"
msgstr ""

#: ../../pep-0319.txt:337
msgid ""
"Python syntax is defined in a modified BNF grammar notation described in "
"the Python Language Reference [1]_.  This section describes the proposed "
"synchronization syntax using this grammar::"
msgstr ""

#: ../../pep-0319.txt:345
msgid "(The '...' indicates other compound statements elided)."
msgstr ""

#: ../../pep-0319.txt:349
msgid "Proposed Implementation"
msgstr ""

#: ../../pep-0319.txt:351
msgid ""
"The author of this PEP has not explored an implementation yet. There are "
"several implementation issues that must be resolved. The main "
"implementation issue is what exactly gets locked and unlocked during a "
"synchronized block."
msgstr ""

#: ../../pep-0319.txt:356
msgid ""
"During an unqualified synchronized block (the use of the 'synchronize' "
"keyword without a target argument) a lock could be created and associated"
" with the synchronized code block object. Any threads that are to execute"
" the block must first acquire the code block lock."
msgstr ""

#: ../../pep-0319.txt:362
msgid ""
"When an 'asynchronize' keyword is encountered in a 'synchronize' block "
"the code block lock is unlocked before the inner block is executed and "
"re-locked when the inner block terminates."
msgstr ""

#: ../../pep-0319.txt:366
msgid ""
"When a synchronized block target is specified the object is associated "
"with a lock.  How this is implemented cleanly is probably the highest "
"risk of this proposal.  Java Virtual Machines typically associate a "
"special hidden lock object with target object and use it to synchronized "
"the block around the target only."
msgstr ""

#: ../../pep-0319.txt:375
msgid "Backward Compatibility"
msgstr ""

#: ../../pep-0319.txt:377
msgid ""
"Backward compatibility is solved with the new ``from __future__`` Python "
"syntax [2]_, and the new warning framework [3]_ to evolve the Python "
"language into phasing out any conflicting names that use the new keywords"
" 'synchronize' and 'asynchronize'.  To use the syntax now, a developer "
"could use the statement::"
msgstr ""

#: ../../pep-0319.txt:385
msgid ""
"In addition, any code that uses the keyword 'synchronize' or "
"'asynchronize' as an identifier will be issued a warning from Python.  "
"After the appropriate period of time, the syntax would become standard, "
"the above import statement would do nothing, and any identifiers named "
"'synchronize' or 'asynchronize' would raise an exception."
msgstr ""

#: ../../pep-0319.txt:394
msgid "PEP 310 Reliable Acquisition/Release Pairs"
msgstr ""

#: ../../pep-0319.txt:396
msgid ""
"PEP 310 [4]_ proposes the 'with' keyword that can serve the same function"
" as 'synchronize' (but no facility for 'asynchronize'). The pattern::"
msgstr ""

#: ../../pep-0319.txt:405
msgid "is equivalent to the proposed::"
msgstr ""

#: ../../pep-0319.txt:410
msgid ""
"PEP 310 must synchronize on an existing lock, while this PEP proposes "
"that unqualified 'synchronize' statements synchronize on a global, "
"internal, transparent lock in addition to qualified 'synchronize' "
"statements.  The 'with' statement also requires lock initialization, "
"while the 'synchronize' statement can synchronize on any target object "
"**including** locks."
msgstr ""

#: ../../pep-0319.txt:417
msgid ""
"While limited in this fashion, the 'with' statement is more abstract and "
"serves more purposes than synchronization.  For example, transactions "
"could be used with the 'with' keyword::"
msgstr ""

#: ../../pep-0319.txt:428
msgid ""
"The 'synchronize' and 'asynchronize' keywords cannot serve this or any "
"other general acquire/release pattern other than thread synchronization."
msgstr ""

#: ../../pep-0319.txt:434
msgid "How Java Does It"
msgstr ""

#: ../../pep-0319.txt:436
msgid ""
"Java defines a 'synchronized' keyword (note the grammatical tense "
"different between the Java keyword and this PEP's 'synchronize') which "
"must be qualified on any object.  The syntax is::"
msgstr ""

#: ../../pep-0319.txt:442
msgid ""
"Expression must yield a valid object (null raises an error and exceptions"
" during 'Expression' terminate the 'synchronized' block for the same "
"reason) upon which 'Block' is synchronized."
msgstr ""

#: ../../pep-0319.txt:448
msgid "How Jython Does It"
msgstr ""

#: ../../pep-0319.txt:450
msgid ""
"Jython uses a 'synchronize' class with the static method "
"'make_synchronized' that accepts one callable argument and returns a "
"newly created, synchronized, callable \"wrapper\" around the argument."
msgstr ""

#: ../../pep-0319.txt:457
msgid "Summary of Proposed Changes to Python"
msgstr ""

#: ../../pep-0319.txt:459
msgid "Adding new 'synchronize' and 'asynchronize' keywords to the language."
msgstr ""

#: ../../pep-0319.txt:464
msgid "Risks"
msgstr ""

#: ../../pep-0319.txt:466
msgid ""
"This PEP proposes adding two keywords to the Python language. This may "
"break code."
msgstr ""

#: ../../pep-0319.txt:469
msgid "There is no implementation to test."
msgstr ""

#: ../../pep-0319.txt:471
msgid ""
"It's not the most important problem facing Python programmers today "
"(although it is a fairly notorious one)."
msgstr ""

#: ../../pep-0319.txt:474
msgid ""
"The equivalent Java keyword is the past participle 'synchronized'. This "
"PEP proposes the present tense, 'synchronize' as being more in spirit "
"with Python (there being less distinction between compile-time and run-"
"time in Python than Java)."
msgstr ""

#: ../../pep-0319.txt:481
msgid "Dissenting Opinion"
msgstr ""

#: ../../pep-0319.txt:483
msgid "This PEP has not been discussed on python-dev."
msgstr ""

#: ../../pep-0319.txt:487
msgid "References"
msgstr ""

#: ../../pep-0319.txt:489
msgid "The Python Language Reference http://docs.python.org/reference/"
msgstr ""

#: ../../pep-0319.txt:492
msgid ""
"PEP 236, Back to the __future__, Peters "
"http://www.python.org/dev/peps/pep-0236/"
msgstr ""

#: ../../pep-0319.txt:495
msgid ""
"PEP 230, Warning Framework, van Rossum "
"http://www.python.org/dev/peps/pep-0230/"
msgstr ""

#: ../../pep-0319.txt:498
msgid ""
"PEP 310, Reliable Acquisition/Release Pairs, Hudson, Moore "
"http://www.python.org/dev/peps/pep-0310/"
msgstr ""

#: ../../pep-0319.txt:503
msgid "Copyright"
msgstr ""

#: ../../pep-0319.txt:505
msgid "This document has been placed in the public domain."
msgstr ""

