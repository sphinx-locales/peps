# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0441.txt
msgid "PEP"
msgstr ""

#: ../../pep-0441.txt:1
msgid "441"
msgstr ""

#: ../../pep-0441.txt
msgid "Title"
msgstr ""

#: ../../pep-0441.txt:2 ../../pep-0441.txt:16
msgid "Improving Python ZIP Application Support"
msgstr ""

#: ../../pep-0441.txt
msgid "Author"
msgstr ""

#: ../../pep-0441.txt:5
msgid "Daniel Holth <dholth@gmail.com>, Paul Moore <p.f.moore@gmail.com>"
msgstr ""

#: ../../pep-0441.txt
msgid "Discussions-To"
msgstr ""

#: ../../pep-0441.txt:7
msgid "https://mail.python.org/pipermail/python-dev/2015-February/138277.html"
msgstr ""

#: ../../pep-0441.txt
msgid "Status"
msgstr ""

#: ../../pep-0441.txt:8
msgid "Final"
msgstr ""

#: ../../pep-0441.txt
msgid "Type"
msgstr ""

#: ../../pep-0441.txt:9
msgid "Standards Track"
msgstr ""

#: ../../pep-0441.txt
msgid "Created"
msgstr ""

#: ../../pep-0441.txt:11
msgid "30-Mar-2013"
msgstr ""

#: ../../pep-0441.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0441.txt:12
msgid "30 March 2013, 1 April 2013, 16 February 2015"
msgstr ""

#: ../../pep-0441.txt
msgid "Resolution"
msgstr ""

#: ../../pep-0441.txt:13
msgid "https://mail.python.org/pipermail/python-dev/2015-February/138578.html"
msgstr ""

#: ../../pep-0441.txt:18
msgid ""
"Python has had the ability to execute directories or ZIP-format archives "
"as scripts since version 2.6 [1]_.  When invoked with a zip file or "
"directory as its first argument the interpreter adds that directory to "
"sys.path and executes the ``__main__`` module.  These archives provide a "
"great way to publish software that needs to be distributed as a single "
"file script but is complex enough to need to be written as a collection "
"of modules."
msgstr ""

#: ../../pep-0441.txt:26
msgid ""
"This feature is not as popular as it should be mainly because it was not "
"promoted as part of Python 2.6 [2]_, so that it is relatively unknown, "
"but also because the Windows installer does not register a file extension"
" (other than ``.py``) for this format of file, to associate with the "
"launcher."
msgstr ""

#: ../../pep-0441.txt:32
msgid ""
"This PEP proposes to fix these problems by re-publicising the feature, "
"defining the ``.pyz`` and ``.pyzw`` extensions as \"Python ZIP "
"Applications\" and \"Windowed Python ZIP Applications\", and providing "
"some simple tooling to manage the format."
msgstr ""

#: ../../pep-0441.txt:38
msgid "A New Python ZIP Application Extension"
msgstr ""

#: ../../pep-0441.txt:40
msgid ""
"The terminology \"Python Zip Application\" will be the formal term used "
"for a zip-format archive that contains Python code in a form that can be "
"directly executed by Python (specifically, it must have a ``__main__.py``"
" file in the root directory of the archive).  The extension ``.pyz`` will"
" be formally associated with such files."
msgstr ""

#: ../../pep-0441.txt:46
msgid ""
"The Python 3.5 installer will associate ``.pyz`` and ``.pyzw`` \"Python "
"Zip Applications\" with the platform launcher so they can be executed. A "
"``.pyz`` archive is a console application and a ``.pyzw`` archive is a "
"windowed application, indicating whether the console should appear when "
"running the app."
msgstr ""

#: ../../pep-0441.txt:52
msgid ""
"On Unix, it would be ideal if the ``.pyz`` extension and the name "
"\"Python Zip Application\" were registered (in the mime types database?)."
" However, such an association is out of scope for this PEP."
msgstr ""

#: ../../pep-0441.txt:56
msgid ""
"Python Zip applications can be prefixed with a ``#!`` line pointing to "
"the correct Python interpreter and an optional explanation::"
msgstr ""

#: ../../pep-0441.txt:64
msgid ""
"On Unix, this allows the OS to run the file with the correct interpreter,"
" via the standard \"shebang\" support.  On Windows, the Python launcher "
"implements shebang support."
msgstr ""

#: ../../pep-0441.txt:68
msgid ""
"However, it is always possible to execute a ``.pyz`` application by "
"supplying the filename to the Python interpreter directly."
msgstr ""

#: ../../pep-0441.txt:71
msgid ""
"As background, ZIP archives are defined with a footer containing relative"
" offsets from the end of the file.  They remain valid when concatenated "
"to the end of any other file.  This feature is completely standard and is"
" how self-extracting ZIP archives and the bdist_wininst installer format "
"work."
msgstr ""

#: ../../pep-0441.txt:79
msgid "Minimal Tooling: The zipapp Module"
msgstr ""

#: ../../pep-0441.txt:81
msgid ""
"This PEP also proposes including a module for working with these "
"archives.  The module will contain functions for working with Python zip "
"application archives, and a command line interface (via ``python -m "
"zipapp``) for their creation and manipulation."
msgstr ""

#: ../../pep-0441.txt:86
msgid ""
"More complete tools for managing Python Zip Applications are encouraged "
"as 3rd party applications on PyPI.  Currently, pyzzer [5]_ and pex [6]_ "
"are two such tools."
msgstr ""

#: ../../pep-0441.txt:91
msgid "Module Interface"
msgstr ""

#: ../../pep-0441.txt:93
msgid "The zipapp module will provide the following functions:"
msgstr ""

#: ../../pep-0441.txt:96
msgid "``create_archive(source, target=None, interpreter=None, main=None)``"
msgstr ""

#: ../../pep-0441.txt:98
msgid ""
"Create an application archive from *source*.  The source can be any of "
"the following:"
msgstr ""

#: ../../pep-0441.txt:101
msgid ""
"The name of a directory, in which case a new application archive will be "
"created from the content of that directory."
msgstr ""

#: ../../pep-0441.txt:103
msgid ""
"The name of an existing application archive file, in which case the file "
"is copied to the target.  The file name should include the ``.pyz`` or "
"``.pyzw`` extension, if required."
msgstr ""

#: ../../pep-0441.txt:106
msgid ""
"A file object open for reading in bytes mode.  The content of the file "
"should be an application archive, and the file object is assumed to be "
"positioned at the start of the archive."
msgstr ""

#: ../../pep-0441.txt:110
msgid ""
"The *target* argument determines where the resulting archive will be "
"written:"
msgstr ""

#: ../../pep-0441.txt:113
msgid "If it is the name of a file, the archive will be written to that file."
msgstr ""

#: ../../pep-0441.txt:115
msgid ""
"If it is an open file object, the archive will be written to that file "
"object, which must be open for writing in bytes mode."
msgstr ""

#: ../../pep-0441.txt:117
msgid ""
"If the target is omitted (or None), the source must be a directory and "
"the target will be a file with the same name as the source, with a "
"``.pyz`` extension added."
msgstr ""

#: ../../pep-0441.txt:121
msgid ""
"The *interpreter* argument specifies the name of the Python interpreter "
"with which the archive will be executed.  It is written as a \"shebang\" "
"line at the start of the archive.  On Unix, this will be interpreted by "
"the OS, and on Windows it will be handled by the Python launcher.  "
"Omitting the *interpreter* results in no shebang line being written.  If "
"an interpreter is specified, and the target is a filename, the executable"
" bit of the target file will be set."
msgstr ""

#: ../../pep-0441.txt:129
msgid ""
"The *main* argument specifies the name of a callable which will be used "
"as the main program for the archive.  It can only be specified if the "
"source is a directory, and the source does not already contain a "
"``__main__.py`` file.  The *main* argument should take the form "
"\"pkg.module:callable\" and the archive will be run by importing "
"\"pkg.module\" and executing the given callable with no arguments.  It is"
" an error to omit *main* if the source is a directory and does not "
"contain a ``__main__.py`` file, as otherwise the resulting archive would "
"not be executable."
msgstr ""

#: ../../pep-0441.txt:139
msgid ""
"If a file object is specified for *source* or *target*, it is the "
"caller's responsibility to close it after calling create_archive."
msgstr ""

#: ../../pep-0441.txt:142
msgid ""
"When copying an existing archive, file objects supplied only need "
"``read`` and ``readline``, or ``write`` methods.  When creating an "
"archive from a directory, if the target is a file object it will be "
"passed to the ``zipfile.ZipFile`` class, and must supply the methods "
"needed by that class."
msgstr ""

#: ../../pep-0441.txt:149
msgid "``get_interpreter(archive)``"
msgstr ""

#: ../../pep-0441.txt:151
msgid ""
"Returns the interpreter specified in the shebang line of the *archive*.  "
"If there is no shebang, the function returns ``None``. The *archive* "
"argument can be a filename or a file-like object open for reading in "
"bytes mode."
msgstr ""

#: ../../pep-0441.txt:158
msgid "Command Line Usage"
msgstr ""

#: ../../pep-0441.txt:160
msgid ""
"The zipapp module can be run with the python ``-m`` flag.  The command "
"line interface is as follows::"
msgstr ""

#: ../../pep-0441.txt:190
msgid ""
"The behaviour of the command line interface matches that of "
"``zipapp.create_archive()``."
msgstr ""

#: ../../pep-0441.txt:193
msgid ""
"In addition, it is possible to use the command line interface to work "
"with an existing archive::"
msgstr ""

#: ../../pep-0441.txt:217
msgid ""
"As noted, the archives are standard zip files, and so can be unpacked "
"using any standard ZIP utility or Python's zipfile module.  For this "
"reason, no interfaces to list the contents of an archive, or unpack them,"
" are provided or needed."
msgstr ""

#: ../../pep-0441.txt:223
msgid "FAQ"
msgstr ""

#: ../../pep-0441.txt:229
msgid "Are you sure a standard ZIP utility can handle ``#!`` at the beginning?"
msgstr ""

#: ../../pep-0441.txt:226
msgid ""
"Absolutely.  The zipfile specification allows for arbitrary data to be "
"prepended to a zipfile.  This feature is commonly used by \"self-"
"extracting zip\" programs.  If your archive program can't handle this, it"
" is a bug in your archive program."
msgstr ""

#: ../../pep-0441.txt:234
msgid "Isn't zipapp just a very thin wrapper over the zipfile module?"
msgstr ""

#: ../../pep-0441.txt:232
msgid ""
"Yes.  If you prefer to build your own Python zip application archives "
"using other tools, they will work just as well.  The zipapp module is a "
"convenience, nothing more."
msgstr ""

#: ../../pep-0441.txt:239
msgid "Why not use just use a ``.zip`` or ``.py`` extension?"
msgstr ""

#: ../../pep-0441.txt:237
msgid ""
"Users expect a ``.zip`` file to be opened with an archive tool, and "
"expect a ``.py`` file to contain readable text.  Both would be confusing "
"for this use case."
msgstr ""

#: ../../pep-0441.txt:247
msgid "How does this compete with existing package formats?"
msgstr ""

#: ../../pep-0441.txt:242
msgid ""
"The sdist, bdist and wheel formats are designed for packaging of modules "
"to be installed into an existing Python installation. They are not "
"intended to be used without installing.  The executable zip format is "
"specifically designed for standalone use, without needing to be "
"installed.  They are in effect a multi-file version of a standalone "
"Python script."
msgstr ""

#: ../../pep-0441.txt:250
msgid "Rejected Proposals"
msgstr ""

#: ../../pep-0441.txt:253
msgid "Convenience Values for Shebang Lines"
msgstr ""

#: ../../pep-0441.txt:255
msgid ""
"Is it worth having \"convenience\" forms for any of the common "
"interpreter values? For example, ``-p 3`` meaning the same as ``-p "
"\"/usr/bin/env python3\"``.  It would save a lot of typing for the common"
" cases, as well as giving cross-platform options for people who don't "
"want or need to understand the intricacies of shebang handling on "
"\"other\" platforms."
msgstr ""

#: ../../pep-0441.txt:262
msgid ""
"Downsides are that it's not obvious how to translate the abbreviations.  "
"For example, should \"3\" mean \"/usr/bin/env python3\", "
"\"/usr/bin/python3\", \"python3\", or something else?  Also, there is no "
"obvious short form for the key case of \"/usr/bin/env python\" (any "
"available version of Python), which could easily result in scripts being "
"written with overly-restrictive shebang lines."
msgstr ""

#: ../../pep-0441.txt:269
msgid ""
"Overall, this seems like there are more problems than benefits, and as a "
"result has been dropped from consideration."
msgstr ""

#: ../../pep-0441.txt:273
msgid "Registering ``.pyz`` as a Media Type"
msgstr ""

#: ../../pep-0441.txt:275
msgid ""
"It was suggested [3]_ that the ``.pyz`` extension should be registered in"
" the Unix database of extensions.  While it makes sense to do this as an "
"equivalent of the Windows installer registering the extension, the "
"``.py`` extension is not listed in the media types database [4]_. It "
"doesn't seem reasonable to register ``.pyz`` without ``.py``, so this "
"idea has been omitted from this PEP.  An interested party could arrange "
"for *both* ``.py`` and ``.pyz`` to be registered at a future date."
msgstr ""

#: ../../pep-0441.txt:285
msgid "Default Interpreter"
msgstr ""

#: ../../pep-0441.txt:287
msgid ""
"The initial draft of this PEP proposed using ``/usr/bin/env python`` as "
"the default interpreter.  Unix users have problems with this behaviour, "
"as the default for the python command on many distributions is Python 2, "
"and it is felt that this PEP should prefer Python 3 by default.  However,"
" using a command of ``python3`` can result in unexpected behaviour for "
"Windows users, where the default behaviour of the launcher for the "
"command ``python`` is commonly customised by users, but the behaviour of "
"``python3`` may not be modified to match."
msgstr ""

#: ../../pep-0441.txt:296
msgid ""
"As a result, the principle \"in the face of ambiguity, refuse to guess\" "
"has been invoked, and archives have no shebang line unless explicitly "
"requested.  On Windows, the archives will still be run (with the default "
"Python) by the launcher, and on Unix, the archives can be run by "
"explicitly invoking the desired Python interpreter."
msgstr ""

#: ../../pep-0441.txt:303
msgid "Command Line Tool to Manage Shebang Lines"
msgstr ""

#: ../../pep-0441.txt:305
msgid ""
"It is conceivable that users would want to modify the shebang line for an"
" existing archive, or even just display the current shebang line. This is"
" tricky to do so with existing tools (zip programs typically ignore "
"prepended data totally, and text editors can have trouble editing files "
"containing binary data)."
msgstr ""

#: ../../pep-0441.txt:311
msgid ""
"The zipapp module provides functions to handle the shebang line, but does"
" not include a command line interface to that functionality.  This is "
"because it is not clear how to provide one without the resulting "
"interface being over-complex and potentially confusing.  Changing the "
"shebang line is expected to be an uncommon requirement."
msgstr ""

#: ../../pep-0441.txt:318
msgid "Reference Implementation"
msgstr ""

#: ../../pep-0441.txt:320
msgid "A reference implementation is at http://bugs.python.org/issue23491."
msgstr ""

#: ../../pep-0441.txt:323
msgid "References"
msgstr ""

#: ../../pep-0441.txt:325
msgid ""
"Allow interpreter to execute a zip file "
"(http://bugs.python.org/issue1739468)"
msgstr ""

#: ../../pep-0441.txt:328
msgid "Feature is not documented (http://bugs.python.org/issue17359)"
msgstr ""

#: ../../pep-0441.txt:331
msgid ""
"Discussion of adding a .pyz mime type on python-dev "
"(https://mail.python.org/pipermail/python-dev/2015-February/138338.html)"
msgstr ""

#: ../../pep-0441.txt:334
msgid ""
"Register of media types (http://www.iana.org/assignments/media-types"
"/media-types.xhtml)"
msgstr ""

#: ../../pep-0441.txt:337
msgid ""
"pyzzer - A tool for creating Python-executable archives "
"(https://pypi.python.org/pypi/pyzzer)"
msgstr ""

#: ../../pep-0441.txt:340
msgid "pex - The PEX packaging toolchain (https://pypi.python.org/pypi/pex)"
msgstr ""

#: ../../pep-0441.txt:343
msgid ""
"The discussion of this PEP took place on the python-dev mailing list, in "
"the thread starting at https://mail.python.org/pipermail/python-"
"dev/2015-February/138277.html"
msgstr ""

#: ../../pep-0441.txt:348
msgid "Copyright"
msgstr ""

#: ../../pep-0441.txt:350
msgid "This document has been placed into the public domain."
msgstr ""

