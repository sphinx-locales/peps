# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0602.rst
msgid "PEP"
msgstr ""

#: ../../pep-0602.rst:1
msgid "602"
msgstr ""

#: ../../pep-0602.rst
msgid "Title"
msgstr ""

#: ../../pep-0602.rst:2
msgid "Annual Release Cycle for Python"
msgstr ""

#: ../../pep-0602.rst
msgid "Author"
msgstr ""

#: ../../pep-0602.rst:5
msgid "Łukasz Langa <lukasz@python.org>"
msgstr ""

#: ../../pep-0602.rst
msgid "BDFL-Delegate"
msgstr ""

#: ../../pep-0602.rst:6
msgid "Brett Cannon (on behalf of the steering council)"
msgstr ""

#: ../../pep-0602.rst
msgid "Discussions-To"
msgstr ""

#: ../../pep-0602.rst:7
msgid "https://discuss.python.org/t/pep-602-annual-release-cycle-for-python/2296/"
msgstr ""

#: ../../pep-0602.rst
msgid "Status"
msgstr ""

#: ../../pep-0602.rst:8
msgid "Accepted"
msgstr ""

#: ../../pep-0602.rst
msgid "Type"
msgstr ""

#: ../../pep-0602.rst:9
msgid "Informational"
msgstr ""

#: ../../pep-0602.rst
msgid "Created"
msgstr ""

#: ../../pep-0602.rst:11
msgid "04-Jun-2019"
msgstr ""

#: ../../pep-0602.rst
msgid "Python-Version"
msgstr ""

#: ../../pep-0602.rst:12
msgid "3.9"
msgstr ""

#: ../../pep-0602.rst:16
msgid "Abstract"
msgstr ""

#: ../../pep-0602.rst:18
msgid ""
"This document describes a change in the release calendar for Python "
"starting with Python 3.9.  This change accelerates the release cadence "
"such that major versions are released predictably every twelve months, in"
" October every year."
msgstr ""

#: ../../pep-0602.rst:25
msgid "Implementation"
msgstr ""

#: ../../pep-0602.rst:28
msgid "Seventeen months to develop a major version"
msgstr ""

#: ../../pep-0602.rst:30
msgid ""
"This PEP proposes that Python 3.X.0 will be developed for around 17 "
"months:"
msgstr ""

#: ../../pep-0602.rst:33
msgid ""
"The first *five months* overlap with Python 3.(X-1).0's beta and release "
"candidate stages and are thus unversioned."
msgstr ""

#: ../../pep-0602.rst:36
msgid ""
"The next *seven months* are spent on versioned alpha releases where both "
"new features are incrementally added and bug fixes are included."
msgstr ""

#: ../../pep-0602.rst:39
msgid ""
"The following *three months* are spent on four versioned beta releases "
"where **no new features** can be added but bug fixes are still included."
msgstr ""

#: ../../pep-0602.rst:43
msgid ""
"The final *two months* are spent on two release candidates (or more, if "
"necessary) and conclude with the release of the final release of Python "
"3.X.0."
msgstr ""

#: ../../pep-0602.rst:48
msgid "1½ year of full support, 3½ more years of security fixes"
msgstr ""

#: ../../pep-0602.rst:50
msgid ""
"After the release of Python 3.X.0, the 3.X series is maintained for five "
"years:"
msgstr ""

#: ../../pep-0602.rst:53
msgid ""
"During the *first eighteen months* (1½ year) it receives bugfix updates "
"and full releases (sources and installers for Windows and macOS) are made"
" approximately every other month."
msgstr ""

#: ../../pep-0602.rst:57
msgid ""
"For the next *forty two months* (3½ years) it receives security updates "
"and source-only releases are made on an as-needed basis (no fixed "
"cadence)."
msgstr ""

#: ../../pep-0602.rst:61
msgid "The final source-only release is made *five years* after 3.X.0."
msgstr ""

#: ../../pep-0602.rst:64
msgid "Annual release cadence"
msgstr ""

#: ../../pep-0602.rst:66
msgid ""
"Feature development of Python 3.(X+1).0 starts as soon as Python 3.X.0 "
"Beta 1 is released.  This creates a twelve-month delta between major "
"Python versions."
msgstr ""

#: ../../pep-0602.rst:72
msgid "Example"
msgstr ""

#: ../../pep-0602.rst:74 ../../pep-0602.rst:101
msgid "3.9 development begins: Tuesday, 2019-06-04"
msgstr ""

#: ../../pep-0602.rst:75
msgid "3.9.0 alpha 1: Monday, 2019-10-14"
msgstr ""

#: ../../pep-0602.rst:76
msgid "3.9.0 alpha 2: Monday, 2019-11-18"
msgstr ""

#: ../../pep-0602.rst:77
msgid "3.9.0 alpha 3: Monday, 2019-12-16"
msgstr ""

#: ../../pep-0602.rst:78
msgid "3.9.0 alpha 4: Monday, 2020-01-13"
msgstr ""

#: ../../pep-0602.rst:79
msgid "3.9.0 alpha 5: Monday, 2020-02-17"
msgstr ""

#: ../../pep-0602.rst:80
msgid "3.9.0 alpha 6: Monday, 2020-03-16"
msgstr ""

#: ../../pep-0602.rst:81
msgid "3.9.0 alpha 7: Monday, 2020-04-13"
msgstr ""

#: ../../pep-0602.rst:82
msgid "3.9.0 beta 1: Monday, 2020-05-18 (No new features beyond this point.)"
msgstr ""

#: ../../pep-0602.rst:85
msgid "3.9.0 beta 2: Monday, 2020-06-08"
msgstr ""

#: ../../pep-0602.rst:86
msgid "3.9.0 beta 3: Monday, 2020-06-29"
msgstr ""

#: ../../pep-0602.rst:87
msgid "3.9.0 beta 4: Monday, 2020-07-20"
msgstr ""

#: ../../pep-0602.rst:88
msgid "3.9.0 candidate 1: Monday, 2020-08-10"
msgstr ""

#: ../../pep-0602.rst:89
msgid "3.9.0 candidate 2: Monday, 2020-09-14"
msgstr ""

#: ../../pep-0602.rst:90
msgid "3.9.0 final: Monday, 2020-10-05"
msgstr ""

#: ../../pep-0602.rst:96
msgid "Figure 1. Consequences of the annual release cycle on the calendar."
msgstr ""

#: ../../pep-0602.rst:98
msgid ""
"In comparison, if this PEP is rejected and Python keeps the current "
"release schedule:"
msgstr ""

#: ../../pep-0602.rst:102
msgid "3.9.0 alpha 1: Monday, 2020-08-03  (10 months later)"
msgstr ""

#: ../../pep-0602.rst:103
msgid "3.9.0 alpha 2: Monday, 2020-09-07"
msgstr ""

#: ../../pep-0602.rst:104
msgid "3.9.0 alpha 3: Monday, 2020-10-05"
msgstr ""

#: ../../pep-0602.rst:105
msgid "3.9.0 alpha 4: Monday, 2020-11-02"
msgstr ""

#: ../../pep-0602.rst:106
msgid "3.9.0 beta 1: Monday, 2020-11-30  (6 months later)"
msgstr ""

#: ../../pep-0602.rst:107
msgid "3.9.0 beta 2: Monday, 2021-01-04"
msgstr ""

#: ../../pep-0602.rst:108
msgid "3.9.0 beta 3: Monday, 2021-02-01"
msgstr ""

#: ../../pep-0602.rst:109
msgid "3.9.0 beta 4: Monday, 2021-03-01"
msgstr ""

#: ../../pep-0602.rst:110
msgid "3.9.0 candidate 1: Monday, 2021-03-29"
msgstr ""

#: ../../pep-0602.rst:111
msgid "3.9.0 candidate 2: Monday, 2021-04-05 (if necessary)"
msgstr ""

#: ../../pep-0602.rst:112
msgid "3.9.0 final: Monday, 2021-04-19  (6 months later)"
msgstr ""

#: ../../pep-0602.rst:116
msgid "Dependent Policies"
msgstr ""

#: ../../pep-0602.rst:119
msgid "Deprecations"
msgstr ""

#: ../../pep-0602.rst:121
msgid ""
"The current policy around breaking changes assumes at least two releases "
"before a deprecated feature is removed from Python or a ``__future__`` "
"behavior is enabled by default.  This is documented in PEP 387."
msgstr ""

#: ../../pep-0602.rst:125
msgid ""
"This PEP proposes to keep this policy of **at least** two releases before"
" making a breaking change."
msgstr ""

#: ../../pep-0602.rst:129
msgid "The term of the Steering Council"
msgstr ""

#: ../../pep-0602.rst:131
msgid ""
"The current wording of PEP 13 states that \"a new council is elected "
"after each feature release\".  This PEP proposes to keep this policy as "
"it will lead to a consistent election schedule."
msgstr ""

#: ../../pep-0602.rst:136
msgid "The term of the Release Manager"
msgstr ""

#: ../../pep-0602.rst:138
msgid ""
"The current undocumented convention is for a single Release Manager to "
"handle two feature releases of Python.  This PEP proposes to keep this "
"policy, allowing for the term to be extended to more releases with "
"approval from the Steering Council and the Cabal of Release Managers."
msgstr ""

#: ../../pep-0602.rst:143
msgid ""
"In particular, since this PEP is authored by the active Release Manager "
"and its effect would shorten the term of the Release Manager, the author "
"is open to managing the release of a third feature release to compensate "
"for the disruption."
msgstr ""

#: ../../pep-0602.rst:150
msgid "Rationale and Goals"
msgstr ""

#: ../../pep-0602.rst:152
msgid "This change provides the following advantages:"
msgstr ""

#: ../../pep-0602.rst:154
msgid ""
"makes releases smaller: since doubling the cadence doesn't double our "
"available development resources, consecutive releases are going to be "
"smaller in terms of features;"
msgstr ""

#: ../../pep-0602.rst:158
msgid "puts features and bug fixes in hands of users sooner;"
msgstr ""

#: ../../pep-0602.rst:160
msgid ""
"creates a more gradual upgrade path for users, by decreasing the surface "
"of change in any single release;"
msgstr ""

#: ../../pep-0602.rst:163
msgid ""
"creates a predictable calendar for releases where the final release is "
"always in October (so after the annual core sprint), and the beta phase "
"starts in late May (so after PyCon US sprints), which is especially "
"important for core developers who need to plan to include Python "
"involvement in their calendar;"
msgstr ""

#: ../../pep-0602.rst:169
msgid ""
"decreases the urge to rush features shortly before \"Beta 1\" due to the "
"risk of them \"slipping for 18 months\";"
msgstr ""

#: ../../pep-0602.rst:172
msgid ""
"allows for synchronizing the schedule of Python release management with "
"external distributors like Fedora who've been historically very helpful "
"in finding regressions early not only in core Python but also in third-"
"party libraries, helping moving the community forward to support the "
"latest version of Python from Day 1;"
msgstr ""

#: ../../pep-0602.rst:178
msgid ""
"increases the explicit alpha release phase, which provides meaningful "
"snapshots of progress on new features;"
msgstr ""

#: ../../pep-0602.rst:181
msgid ""
"significantly cuts the implicit \"alpha 0\" release phase which provides "
"limited use for new development anyway (it overlaps with the beta of the "
"*currently developed*, still unreleased, version)."
msgstr ""

#: ../../pep-0602.rst:186
msgid "Non-goals"
msgstr ""

#: ../../pep-0602.rst:188
msgid ""
"Adopting an annual release calendar allows for natural switching to "
"calendar versioning, for example by calling Python 3.9 \"Python 3.20\" "
"since it's released in October '20 and so on (\"Python 3.23\" would be "
"the one released in October '23)."
msgstr ""

#: ../../pep-0602.rst:193
msgid ""
"While the ease of switching to calendar versioning can be treated as an "
"advantage of an annual release cycle, this PEP does not advocate for or "
"against a change in how Python is versioned.  Should the annual release "
"cycle be adopted, the versioning question will be dealt with in a "
"separate PEP."
msgstr ""

#: ../../pep-0602.rst:200
msgid "Non-risks"
msgstr ""

#: ../../pep-0602.rst:202
msgid ""
"This change does not shorten the currently documented support calendar "
"for a Python release, both in terms of bugfix releases and security "
"fixes."
msgstr ""

#: ../../pep-0602.rst:206
msgid ""
"This change does not accelerate the velocity of development.  Python is "
"not going to become incompatible faster or accrue new features faster. "
"It's just that features are going to be released more gradually as they "
"are developed."
msgstr ""

#: ../../pep-0602.rst:211
msgid ""
"Consequently, while this change introduces the ability for users to "
"upgrade much faster, it does not require them to do so.  Say, if they "
"upgrade every second release, their experience with Python is going to be"
" similar to the current situation."
msgstr ""

#: ../../pep-0602.rst:217
msgid "Risks"
msgstr ""

#: ../../pep-0602.rst:220
msgid "Python redistribution"
msgstr ""

#: ../../pep-0602.rst:222
msgid ""
"This requires changes to how integrators, like Linux distributions, "
"release Python within their systems."
msgstr ""

#: ../../pep-0602.rst:226
msgid "The testing matrix"
msgstr ""

#: ../../pep-0602.rst:228
msgid ""
"This eventually increases the testing matrix for library and application "
"maintainers that want to support all actively supported Python versions "
"by one or two:"
msgstr ""

#: ../../pep-0602.rst:236
msgid "Figure 2. Testing matrix in the 18-month cadence vs. the 12-month"
msgstr ""

#: ../../pep-0602.rst:238
msgid ""
"The \"extended bugfix support at the discretion of the Release Manager\" "
"stage of the current release cycle is not codified.  If fact, PEP 101 "
"currently states that after the release of Python 3.(X+1).0 only one last"
" bugfix release is made for Python 3.X.0.  However, in practice at least "
"the last four versions of Python 3 overlapped with stable releases of the"
" next version for around six months.  Figure 2 is including this "
"information to demonstrate that overlap between stable version releases "
"with the 12-month release cadence will be nothing new."
msgstr ""

#: ../../pep-0602.rst:248
msgid "Other policies may depend on the release cadence"
msgstr ""

#: ../../pep-0602.rst:250
msgid ""
"Although identified dependent policies were addressed in a previous "
"section, it is entirely possible there are some other areas which "
"implicitly rely on the timing of Python releases."
msgstr ""

#: ../../pep-0602.rst:256
msgid "Rejected Ideas"
msgstr ""

#: ../../pep-0602.rst:259
msgid "Keep the current 18 month release cadence"
msgstr ""

#: ../../pep-0602.rst:261
msgid ""
"This is undesirable both for core developers and end users. From the "
"perspective of the core developer:"
msgstr ""

#: ../../pep-0602.rst:264
msgid ""
"it makes contribution scheduling harder due to irregular release dates "
"every year;"
msgstr ""

#: ../../pep-0602.rst:267
msgid ""
"it creates a surge of rushed commits before (and even after!) Beta 1 due "
"to the stress involved with \"missing a release\";"
msgstr ""

#: ../../pep-0602.rst:270
msgid ""
"ironically, after Beta 1 it creates a false sense of having \"plenty of "
"time\" before the next release, time that passes quickly regardless;"
msgstr ""

#: ../../pep-0602.rst:273
msgid ""
"it causes certain elements of the workflow to be executed so rarely that "
"they are not explicitly documented, let alone automated."
msgstr ""

#: ../../pep-0602.rst:276
msgid "More importantly, from the perspective of the user:"
msgstr ""

#: ../../pep-0602.rst:278
msgid ""
"it creates releases with many new features, some being explicitly "
"incompatible and some being accidentally incompatible, which makes the "
"upgrade cost relatively high every time;"
msgstr ""

#: ../../pep-0602.rst:282
msgid ""
"it sits on features and incompatible bug fixes for over a year before "
"becoming available to the user; and more specifically"
msgstr ""

#: ../../pep-0602.rst:285
msgid ""
"it causes every \"point zero\" release to be extra risky for users. While"
" we provide and recommend testing with alphas and betas, \"point zero\" "
"is the first release of a given Python version for many users.  The "
"bigger a release is feature-wise, the more potential problems are hiding "
"in \"point zero releases\"."
msgstr ""

#: ../../pep-0602.rst:292
msgid "Double the release cadence to achieve 9 months between major versions"
msgstr ""

#: ../../pep-0602.rst:294
msgid ""
"This was originally proposed in PEP 596 and rejected as both too "
"irregular and too short.  This would not give any of the benefits of a "
"regular release calendar but it would shorten all development phases, "
"especially the beta + RC phases.  This was considered dangerous."
msgstr ""

#: ../../pep-0602.rst:300
msgid "Keep \"4 betas over 4 months and a final month for the release candidate\""
msgstr ""

#: ../../pep-0602.rst:302
msgid ""
"While this would make the release calendar a bit cleaner, `it would make "
"it very hard for external distributors like Fedora "
"<https://discuss.python.org/t/pep-602-annual-release-cycle-for-"
"python/2296/79?u=ambv>`_ to release the newest version of Python as soon "
"as possible.  We are adjusting Python's calendar here in the hope that "
"this will enable Fedora to integrate the newest version of Python with "
"the newest version of Fedora *as both are being developed* which makes "
"both projects better."
msgstr ""

#: ../../pep-0602.rst:312
msgid "Slow down releases but don't freeze feature development with Beta 1"
msgstr ""

#: ../../pep-0602.rst:314
msgid ""
"This is described in PEP 598.  This proposal includes non-standard "
"concepts like the \"incremental feature release\" which makes it hard to "
"understand.  The presented advantages are unclear while the unfamiliarity"
" of the scheme poses a real risk of user and integrator confusion."
msgstr ""

#: ../../pep-0602.rst:321
msgid "Long-Term Support Releases"
msgstr ""

#: ../../pep-0602.rst:323
msgid ""
"Each version of Python is effectively long-term support: it's supported "
"for five years, with the first eighteen months allowing regular bug fixes"
" and security updates.  For the remaining time security updates are "
"accepted and promptly released."
msgstr ""

#: ../../pep-0602.rst:328
msgid "No extended support in the vein of Python 2.7 is planned going forward."
msgstr ""

#: ../../pep-0602.rst:332
msgid "Copyright"
msgstr ""

#: ../../pep-0602.rst:334
msgid ""
"This document is placed in the public domain or under the "
"CC0-1.0-Universal license, whichever is more permissive."
msgstr ""

