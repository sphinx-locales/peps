# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0100.txt
msgid "PEP"
msgstr ""

#: ../../pep-0100.txt:1
msgid "100"
msgstr ""

#: ../../pep-0100.txt
msgid "Title"
msgstr ""

#: ../../pep-0100.txt:2
msgid "Python Unicode Integration"
msgstr ""

#: ../../pep-0100.txt
msgid "Author"
msgstr ""

#: ../../pep-0100.txt:5
msgid "mal@lemburg.com (Marc-Andr√© Lemburg)"
msgstr ""

#: ../../pep-0100.txt
msgid "Status"
msgstr ""

#: ../../pep-0100.txt:6
msgid "Final"
msgstr ""

#: ../../pep-0100.txt
msgid "Type"
msgstr ""

#: ../../pep-0100.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0100.txt
msgid "Created"
msgstr ""

#: ../../pep-0100.txt:9
msgid "10-Mar-2000"
msgstr ""

#: ../../pep-0100.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0100.txt:10
msgid "2.0"
msgstr ""

#: ../../pep-0100.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0100.txt:15
msgid "Historical Note"
msgstr ""

#: ../../pep-0100.txt:17
msgid ""
"This document was first written by Marc-Andre in the pre-PEP days, and "
"was originally distributed as Misc/unicode.txt in Python distributions up"
" to and included Python 2.1.  The last revision of the proposal in that "
"location was labeled version 1.7 (CVS revision 3.10).  Because the "
"document clearly serves the purpose of an informational PEP in the post-"
"PEP era, it has been moved here and reformatted to comply with PEP "
"guidelines.  Future revisions will be made to this document, while "
"Misc/unicode.txt will contain a pointer to this PEP."
msgstr ""

#: ../../pep-0100.txt:27
msgid "-Barry Warsaw, PEP editor"
msgstr ""

#: ../../pep-0100.txt:31
msgid "Introduction"
msgstr ""

#: ../../pep-0100.txt:33
msgid ""
"The idea of this proposal is to add native Unicode 3.0 support to Python "
"in a way that makes use of Unicode strings as simple as possible without "
"introducing too many pitfalls along the way."
msgstr ""

#: ../../pep-0100.txt:37
msgid ""
"Since this goal is not easy to achieve -- strings being one of the most "
"fundamental objects in Python -- we expect this proposal to undergo some "
"significant refinements."
msgstr ""

#: ../../pep-0100.txt:41
msgid ""
"Note that the current version of this proposal is still a bit unsorted "
"due to the many different aspects of the Unicode-Python integration."
msgstr ""

#: ../../pep-0100.txt:45
msgid ""
"The latest version of this document is always available at: "
"http://starship.python.net/~lemburg/unicode-proposal.txt"
msgstr ""

#: ../../pep-0100.txt:48
msgid ""
"Older versions are available as: http://starship.python.net/~lemburg"
"/unicode-proposal-X.X.txt"
msgstr ""

#: ../../pep-0100.txt:51
msgid ""
"[ed. note: new revisions should be made to this PEP document, while the "
"historical record previous to version 1.7 should be retrieved from MAL's "
"url, or Misc/unicode.txt]"
msgstr ""

#: ../../pep-0100.txt:57
msgid "Conventions"
msgstr ""

#: ../../pep-0100.txt:59
msgid "In examples we use u = Unicode object and s = Python string"
msgstr ""

#: ../../pep-0100.txt:61
msgid "'XXX' markings indicate points of discussion (PODs)"
msgstr ""

#: ../../pep-0100.txt:65
msgid "General Remarks"
msgstr ""

#: ../../pep-0100.txt:67
msgid ""
"Unicode encoding names should be lower case on output and case-"
"insensitive on input (they will be converted to lower case by all APIs "
"taking an encoding name as input)."
msgstr ""

#: ../../pep-0100.txt:71
msgid ""
"Encoding names should follow the name conventions as used by the Unicode "
"Consortium: spaces are converted to hyphens, e.g. 'utf 16' is written as "
"'utf-16'."
msgstr ""

#: ../../pep-0100.txt:75
msgid ""
"Codec modules should use the same names, but with hyphens converted to "
"underscores, e.g. ``utf_8``, ``utf_16``, ``iso_8859_1``."
msgstr ""

#: ../../pep-0100.txt:80
msgid "Unicode Default Encoding"
msgstr ""

#: ../../pep-0100.txt:82
msgid ""
"The Unicode implementation has to make some assumption about the encoding"
" of 8-bit strings passed to it for coercion and about the encoding to as "
"default for conversion of Unicode to strings when no specific encoding is"
" given.  This encoding is called <default encoding> throughout this text."
msgstr ""

#: ../../pep-0100.txt:88
msgid ""
"For this, the implementation maintains a global which can be set in the "
"site.py Python startup script.  Subsequent changes are not possible.  The"
" <default encoding> can be set and queried using the two sys module APIs:"
msgstr ""

#: ../../pep-0100.txt:99
msgid "``sys.setdefaultencoding(encoding)``"
msgstr ""

#: ../../pep-0100.txt:94
msgid ""
"Sets the <default encoding> used by the Unicode implementation. encoding "
"has to be an encoding which is supported by the Python installation, "
"otherwise, a LookupError is raised."
msgstr ""

#: ../../pep-0100.txt:98
msgid ""
"Note: This API is only available in site.py!  It is removed from the sys "
"module by site.py after usage."
msgstr ""

#: ../../pep-0100.txt:102
msgid "``sys.getdefaultencoding()``"
msgstr ""

#: ../../pep-0100.txt:102
msgid "Returns the current <default encoding>."
msgstr ""

#: ../../pep-0100.txt:104
msgid ""
"If not otherwise defined or set, the <default encoding> defaults to "
"'ascii'.  This encoding is also the startup default of Python (and in "
"effect before site.py is executed)."
msgstr ""

#: ../../pep-0100.txt:108
msgid ""
"Note that the default site.py startup module contains disabled optional "
"code which can set the <default encoding> according to the encoding "
"defined by the current locale.  The locale module is used to extract the "
"encoding from the locale default settings defined by the OS environment "
"(see locale.py).  If the encoding cannot be determined, is unknown or "
"unsupported, the code defaults to setting the <default encoding> to "
"'ascii'.  To enable this code, edit the site.py file or place the "
"appropriate code into the sitecustomize.py module of your Python "
"installation."
msgstr ""

#: ../../pep-0100.txt:120
msgid "Unicode Constructors"
msgstr ""

#: ../../pep-0100.txt:122
msgid ""
"Python should provide a built-in constructor for Unicode strings which is"
" available through ``__builtins__``::"
msgstr ""

#: ../../pep-0100.txt:131
msgid "With the 'unicode-escape' encoding being defined as:"
msgstr ""

#: ../../pep-0100.txt:133
msgid ""
"all non-escape characters represent themselves as Unicode ordinal (e.g. "
"'a' -> U+0061)."
msgstr ""

#: ../../pep-0100.txt:136
msgid ""
"all existing defined Python escape sequences are interpreted as Unicode "
"ordinals; note that ``\\xXXXX`` can represent all Unicode ordinals, and "
"``\\OOO`` (octal) can represent Unicode ordinals up to U+01FF."
msgstr ""

#: ../../pep-0100.txt:141
msgid ""
"a new escape sequence, ``\\uXXXX``, represents U+XXXX; it is a syntax "
"error to have fewer than 4 digits after ``\\u``."
msgstr ""

#: ../../pep-0100.txt:144
msgid ""
"For an explanation of possible values for errors see the Codec section "
"below."
msgstr ""

#: ../../pep-0100.txt:147
msgid "Examples::"
msgstr ""

#: ../../pep-0100.txt:153
msgid "The 'raw-unicode-escape' encoding is defined as follows:"
msgstr ""

#: ../../pep-0100.txt:155
msgid ""
"``\\uXXXX`` sequence represent the U+XXXX Unicode character if and only "
"if the number of leading backslashes is odd"
msgstr ""

#: ../../pep-0100.txt:158
msgid ""
"all other characters represent themselves as Unicode ordinal (e.g. 'b' ->"
" U+0062)"
msgstr ""

#: ../../pep-0100.txt:161
msgid ""
"Note that you should provide some hint to the encoding you used to write "
"your programs as pragma line in one the first few comment lines of the "
"source file (e.g. '# source file encoding: latin-1'). If you only use "
"7-bit ASCII then everything is fine and no such notice is needed, but if "
"you include Latin-1 characters not defined in ASCII, it may well be "
"worthwhile including a hint since people in other countries will want to "
"be able to read your source strings too."
msgstr ""

#: ../../pep-0100.txt:172
msgid "Unicode Type Object"
msgstr ""

#: ../../pep-0100.txt:174
msgid ""
"Unicode objects should have the type UnicodeType with type name "
"'unicode', made available through the standard types module."
msgstr ""

#: ../../pep-0100.txt:179
msgid "Unicode Output"
msgstr ""

#: ../../pep-0100.txt:181
msgid ""
"Unicode objects have a method .encode([encoding=<default encoding>]) "
"which returns a Python string encoding the Unicode string using the given"
" scheme (see Codecs)."
msgstr ""

#: ../../pep-0100.txt:193
msgid ""
"Also see Internal Argument Parsing and Buffer Interface for details on "
"how other APIs written in C will treat Unicode objects."
msgstr ""

#: ../../pep-0100.txt:198
msgid "Unicode Ordinals"
msgstr ""

#: ../../pep-0100.txt:200
msgid ""
"Since Unicode 3.0 has a 32-bit ordinal character set, the implementation "
"should provide 32-bit aware ordinal conversion APIs::"
msgstr ""

#: ../../pep-0100.txt:212
msgid ""
"Both APIs should go into ``__builtins__`` just like their string "
"counterparts ``ord()`` and ``chr()``."
msgstr ""

#: ../../pep-0100.txt:215
msgid ""
"Note that Unicode provides space for private encodings.  Usage of these "
"can cause different output representations on different machines.  This "
"problem is not a Python or Unicode problem, but a machine setup and "
"maintenance one."
msgstr ""

#: ../../pep-0100.txt:222
msgid "Comparison & Hash Value"
msgstr ""

#: ../../pep-0100.txt:224
msgid ""
"Unicode objects should compare equal to other objects after these other "
"objects have been coerced to Unicode.  For strings this means that they "
"are interpreted as Unicode string using the <default encoding>."
msgstr ""

#: ../../pep-0100.txt:229
msgid ""
"Unicode objects should return the same hash value as their ASCII "
"equivalent strings.  Unicode strings holding non-ASCII values are not "
"guaranteed to return the same hash values as the default encoded "
"equivalent string representation."
msgstr ""

#: ../../pep-0100.txt:234
msgid ""
"When compared using ``cmp()`` (or ``PyObject_Compare()``) the "
"implementation should mask ``TypeErrors`` raised during the conversion to"
" remain in synch with the string behavior.  All other errors such as "
"``ValueErrors`` raised during coercion of strings to Unicode should not "
"be masked and passed through to the user."
msgstr ""

#: ../../pep-0100.txt:240
msgid ""
"In containment tests ('a' in u'abc' and u'a' in 'abc') both sides should "
"be coerced to Unicode before applying the test.  Errors occurring during "
"coercion (e.g. None in u'abc') should not be masked."
msgstr ""

#: ../../pep-0100.txt:247
msgid "Coercion"
msgstr ""

#: ../../pep-0100.txt:249
msgid ""
"Using Python strings and Unicode objects to form new objects should "
"always coerce to the more precise format, i.e. Unicode objects."
msgstr ""

#: ../../pep-0100.txt:259
msgid ""
"All string methods should delegate the call to an equivalent Unicode "
"object method call by converting all involved strings to Unicode and then"
" applying the arguments to the Unicode method of the same name, e.g."
msgstr ""

#: ../../pep-0100.txt:270
#, python-format
msgid ""
"For a discussion of %-formatting w/r to Unicode objects, see Formatting "
"Markers."
msgstr ""

#: ../../pep-0100.txt:275
msgid "Exceptions"
msgstr ""

#: ../../pep-0100.txt:277
msgid ""
"``UnicodeError`` is defined in the exceptions module as a subclass of "
"``ValueError``.  It is available at the C level via "
"``PyExc_UnicodeError``.  All exceptions related to Unicode "
"encoding/decoding should be subclasses of ``UnicodeError``."
msgstr ""

#: ../../pep-0100.txt:284
msgid "Codecs (Coder/Decoders) Lookup"
msgstr ""

#: ../../pep-0100.txt:286
msgid ""
"A Codec (see Codec Interface Definition) search registry should be "
"implemented by a module \"codecs\"::"
msgstr ""

#: ../../pep-0100.txt:291
msgid ""
"Search functions are expected to take one argument, the encoding name in "
"all lower case letters and with hyphens and spaces converted to "
"underscores, and return a tuple of functions (encoder, decoder, "
"stream_reader, stream_writer) taking the following arguments:"
msgstr ""

#: ../../pep-0100.txt:301
msgid "encoder and decoder"
msgstr ""

#: ../../pep-0100.txt:298
msgid ""
"These must be functions or methods which have the same interface as the "
"``.encode``/``.decode`` methods of Codec instances (see Codec Interface)."
" The functions/methods are expected to work in a stateless mode."
msgstr ""

#: ../../pep-0100.txt:314
msgid "stream_reader and stream_writer"
msgstr ""

#: ../../pep-0100.txt:304
msgid "These need to be factory functions with the following interface::"
msgstr ""

#: ../../pep-0100.txt:309
msgid ""
"The factory functions must return objects providing the interfaces "
"defined by ``StreamWriter``/``StreamReader`` resp.  (see Codec "
"Interface).  Stream codecs can maintain state."
msgstr ""

#: ../../pep-0100.txt:313
msgid "Possible values for errors are defined in the Codec section below."
msgstr ""

#: ../../pep-0100.txt:316
msgid ""
"In case a search function cannot find a given encoding, it should return "
"None."
msgstr ""

#: ../../pep-0100.txt:319
msgid ""
"Aliasing support for encodings is left to the search functions to "
"implement."
msgstr ""

#: ../../pep-0100.txt:322
msgid ""
"The codecs module will maintain an encoding cache for performance "
"reasons.  Encodings are first looked up in the cache.  If not found, the "
"list of registered search functions is scanned.  If no codecs tuple is "
"found, a LookupError is raised.  Otherwise, the codecs tuple is stored in"
" the cache and returned to the caller."
msgstr ""

#: ../../pep-0100.txt:328
msgid "To query the Codec instance the following API should be used::"
msgstr ""

#: ../../pep-0100.txt:332
msgid "This will either return the found codecs tuple or raise a ``LookupError``."
msgstr ""

#: ../../pep-0100.txt:337
msgid "Standard Codecs"
msgstr ""

#: ../../pep-0100.txt:339
msgid ""
"Standard codecs should live inside an encodings/ package directory in the"
" Standard Python Code Library.  The ``__init__.py`` file of that "
"directory should include a Codec Lookup compatible search function "
"implementing a lazy module based codec lookup."
msgstr ""

#: ../../pep-0100.txt:344
msgid ""
"Python should provide a few standard codecs for the most relevant "
"encodings, e.g."
msgstr ""

#: ../../pep-0100.txt:359
msgid ""
"Common aliases should also be provided per default, e.g. 'latin-1' for "
"'iso-8859-1'."
msgstr ""

#: ../../pep-0100.txt:362
msgid ""
"Note: 'utf-16' should be implemented by using and requiring byte order "
"marks (BOM) for file input/output."
msgstr ""

#: ../../pep-0100.txt:365
msgid ""
"All other encodings such as the CJK ones to support Asian scripts should "
"be implemented in separate packages which do not get included in the core"
" Python distribution and are not a part of this proposal."
msgstr ""

#: ../../pep-0100.txt:372
msgid "Codecs Interface Definition"
msgstr ""

#: ../../pep-0100.txt:374
msgid ""
"The following base class should be defined in the module \"codecs\". They"
" provide not only templates for use by encoding module implementors, but "
"also define the interface which is expected by the Unicode "
"implementation."
msgstr ""

#: ../../pep-0100.txt:379
msgid ""
"Note that the Codec Interface defined here is well suitable for a larger "
"range of applications.  The Unicode implementation expects Unicode "
"objects on input for ``.encode()`` and ``.write()`` and character buffer "
"compatible objects on input for ``.decode()``.  Output of ``.encode()`` "
"and ``.read()`` should be a Python string and ``.decode()`` must return "
"an Unicode object."
msgstr ""

#: ../../pep-0100.txt:386
msgid ""
"First, we have the stateless encoders/decoders.  These do not work in "
"chunks as the stream codecs (see below) do, because all components are "
"expected to be available in memory."
msgstr ""

#: ../../pep-0100.txt:440
msgid ""
"``StreamWriter`` and ``StreamReader`` define the interface for stateful "
"encoders/decoders which work on streams.  These allow processing of the "
"data in chunks to efficiently use memory.  If you have large strings in "
"memory, you may want to wrap them with ``cStringIO`` objects and then use"
" these codecs on them to be able to do chunk processing as well, e.g. to "
"provide progress information to the user."
msgstr ""

#: ../../pep-0100.txt:620
msgid ""
"Stream codec implementors are free to combine the ``StreamWriter`` and "
"``StreamReader`` interfaces into one class.  Even combining all these "
"with the Codec class should be possible."
msgstr ""

#: ../../pep-0100.txt:624
msgid ""
"Implementors are free to add additional methods to enhance the codec "
"functionality or provide extra state information needed for them to work."
"  The internal codec implementation will only use the above interfaces, "
"though."
msgstr ""

#: ../../pep-0100.txt:629
msgid ""
"It is not required by the Unicode implementation to use these base "
"classes, only the interfaces must match; this allows writing Codecs as "
"extension types."
msgstr ""

#: ../../pep-0100.txt:633
msgid ""
"As guideline, large mapping tables should be implemented using static C "
"data in separate (shared) extension modules.  That way multiple processes"
" can share the same data."
msgstr ""

#: ../../pep-0100.txt:637
msgid ""
"A tool to auto-convert Unicode mapping files to mapping modules should be"
" provided to simplify support for additional mappings (see References)."
msgstr ""

#: ../../pep-0100.txt:643
msgid "Whitespace"
msgstr ""

#: ../../pep-0100.txt:645
msgid ""
"The ``.split()`` method will have to know about what is considered "
"whitespace in Unicode."
msgstr ""

#: ../../pep-0100.txt:650
msgid "Case Conversion"
msgstr ""

#: ../../pep-0100.txt:652
msgid ""
"Case conversion is rather complicated with Unicode data, since there are "
"many different conditions to respect.  See"
msgstr ""

#: ../../pep-0100.txt:655
msgid "http://www.unicode.org/unicode/reports/tr13/"
msgstr ""

#: ../../pep-0100.txt:657
msgid "for some guidelines on implementing case conversion."
msgstr ""

#: ../../pep-0100.txt:659
msgid ""
"For Python, we should only implement the 1-1 conversions included in "
"Unicode.  Locale dependent and other special case conversions (see the "
"Unicode standard file SpecialCasing.txt) should be left to user land "
"routines and not go into the core interpreter."
msgstr ""

#: ../../pep-0100.txt:664
msgid ""
"The methods ``.capitalize()`` and ``.iscapitalized()`` should follow the "
"case mapping algorithm defined in the above technical report as closely "
"as possible."
msgstr ""

#: ../../pep-0100.txt:670
msgid "Line Breaks"
msgstr ""

#: ../../pep-0100.txt:672
msgid ""
"Line breaking should be done for all Unicode characters having the B "
"property as well as the combinations CRLF, CR, LF (interpreted in that "
"order) and other special line separators defined by the standard."
msgstr ""

#: ../../pep-0100.txt:677
msgid ""
"The Unicode type should provide a ``.splitlines()`` method which returns "
"a list of lines according to the above specification. See Unicode "
"Methods."
msgstr ""

#: ../../pep-0100.txt:683
msgid "Unicode Character Properties"
msgstr ""

#: ../../pep-0100.txt:685
msgid ""
"A separate module \"unicodedata\" should provide a compact interface to "
"all Unicode character properties defined in the standard's "
"UnicodeData.txt file."
msgstr ""

#: ../../pep-0100.txt:689
msgid ""
"Among other things, these properties provide ways to recognize numbers, "
"digits, spaces, whitespace, etc."
msgstr ""

#: ../../pep-0100.txt:692
msgid ""
"Since this module will have to provide access to all Unicode characters, "
"it will eventually have to contain the data from UnicodeData.txt which "
"takes up around 600kB.  For this reason, the data should be stored in "
"static C data.  This enables compilation as shared module which the "
"underlying OS can shared between processes (unlike normal Python code "
"modules)."
msgstr ""

#: ../../pep-0100.txt:699
msgid ""
"There should be a standard Python interface for accessing this "
"information so that other implementors can plug in their own possibly "
"enhanced versions, e.g. ones that do decompressing of the data on-the-"
"fly."
msgstr ""

#: ../../pep-0100.txt:706
msgid "Private Code Point Areas"
msgstr ""

#: ../../pep-0100.txt:708
msgid ""
"Support for these is left to user land Codecs and not explicitly "
"integrated into the core.  Note that due to the Internal Format being "
"implemented, only the area between ``\\uE000`` and ``\\uF8FF`` is usable "
"for private encodings."
msgstr ""

#: ../../pep-0100.txt:715
msgid "Internal Format"
msgstr ""

#: ../../pep-0100.txt:717
msgid ""
"The internal format for Unicode objects should use a Python specific "
"fixed format <PythonUnicode> implemented as 'unsigned short' (or another "
"unsigned numeric type having 16 bits).  Byte order is platform dependent."
msgstr ""

#: ../../pep-0100.txt:722
msgid ""
"This format will hold UTF-16 encodings of the corresponding Unicode "
"ordinals.  The Python Unicode implementation will address these values as"
" if they were UCS-2 values. UCS-2 and UTF-16 are the same for all "
"currently defined Unicode character points. UTF-16 without surrogates "
"provides access to about 64k characters and covers all characters in the "
"Basic Multilingual Plane (BMP) of Unicode."
msgstr ""

#: ../../pep-0100.txt:730
msgid ""
"It is the Codec's responsibility to ensure that the data they pass to the"
" Unicode object constructor respects this assumption.  The constructor "
"does not check the data for Unicode compliance or use of surrogates."
msgstr ""

#: ../../pep-0100.txt:735
msgid ""
"Future implementations can extend the 32 bit restriction to the full set "
"of all UTF-16 addressable characters (around 1M characters)."
msgstr ""

#: ../../pep-0100.txt:739
msgid ""
"The Unicode API should provide interface routines from <PythonUnicode> to"
" the compiler's wchar_t which can be 16 or 32 bit depending on the "
"compiler/libc/platform being used."
msgstr ""

#: ../../pep-0100.txt:743
msgid ""
"Unicode objects should have a pointer to a cached Python string object "
"<defenc> holding the object's value using the <default encoding>.  This "
"is needed for performance and internal parsing (see Internal Argument "
"Parsing) reasons.  The buffer is filled when the first conversion request"
" to the <default encoding> is issued on the object."
msgstr ""

#: ../../pep-0100.txt:750
msgid ""
"Interning is not needed (for now), since Python identifiers are defined "
"as being ASCII only."
msgstr ""

#: ../../pep-0100.txt:753
msgid ""
"``codecs.BOM`` should return the byte order mark (BOM) for the format "
"used internally.  The codecs module should provide the following "
"additional constants for convenience and reference (``codecs.BOM`` will "
"either be ``BOM_BE`` or ``BOM_LE`` depending on the platform)::"
msgstr ""

#: ../../pep-0100.txt:772
msgid ""
"Note that Unicode sees big endian byte order as being \"correct\". The "
"swapped order is taken to be an indicator for a \"wrong\" format, hence "
"the illegal character definition."
msgstr ""

#: ../../pep-0100.txt:776
msgid ""
"The configure script should provide aid in deciding whether Python can "
"use the native ``wchar_t`` type or not (it has to be a 16-bit unsigned "
"type)."
msgstr ""

#: ../../pep-0100.txt:782
msgid "Buffer Interface"
msgstr ""

#: ../../pep-0100.txt:784
msgid ""
"Implement the buffer interface using the <defenc> Python string object as"
" basis for ``bf_getcharbuf`` and the internal buffer for "
"``bf_getreadbuf``.  If ``bf_getcharbuf`` is requested and the <defenc> "
"object does not yet exist, it is created first."
msgstr ""

#: ../../pep-0100.txt:789
msgid ""
"Note that as special case, the parser marker \"s#\" will not return raw "
"Unicode UTF-16 data (which the ``bf_getreadbuf`` returns), but instead "
"tries to encode the Unicode object using the default encoding and then "
"returns a pointer to the resulting string object (or raises an exception "
"in case the conversion fails).  This was done in order to prevent "
"accidentely writing binary data to an output stream which the other end "
"might not recognize."
msgstr ""

#: ../../pep-0100.txt:797
msgid ""
"This has the advantage of being able to write to output streams (which "
"typically use this interface) without additional specification of the "
"encoding to use."
msgstr ""

#: ../../pep-0100.txt:801
msgid ""
"If you need to access the read buffer interface of Unicode objects, use "
"the ``PyObject_AsReadBuffer()`` interface."
msgstr ""

#: ../../pep-0100.txt:804
msgid ""
"The internal format can also be accessed using the 'unicode-internal' "
"codec, e.g. via ``u.encode('unicode-internal')``."
msgstr ""

#: ../../pep-0100.txt:809
msgid "Pickle/Marshalling"
msgstr ""

#: ../../pep-0100.txt:811
msgid ""
"Should have native Unicode object support.  The objects should be encoded"
" using platform independent encodings."
msgstr ""

#: ../../pep-0100.txt:814
msgid ""
"Marshal should use UTF-8 and Pickle should either choose Raw-Unicode-"
"Escape (in text mode) or UTF-8 (in binary mode) as encoding.  Using UTF-8"
" instead of UTF-16 has the advantage of eliminating the need to store a "
"BOM mark."
msgstr ""

#: ../../pep-0100.txt:821
msgid "Regular Expressions"
msgstr ""

#: ../../pep-0100.txt:823
msgid ""
"Secret Labs AB is working on a Unicode-aware regular expression "
"machinery.  It works on plain 8-bit, UCS-2, and (optionally) UCS-4 "
"internal character buffers."
msgstr ""

#: ../../pep-0100.txt:827
msgid "Also see"
msgstr ""

#: ../../pep-0100.txt:829
msgid "http://www.unicode.org/unicode/reports/tr18/"
msgstr ""

#: ../../pep-0100.txt:831
msgid "for some remarks on how to treat Unicode REs."
msgstr ""

#: ../../pep-0100.txt:835
msgid "Formatting Markers"
msgstr ""

#: ../../pep-0100.txt:837
msgid ""
"Format markers are used in Python format strings.  If Python strings are "
"used as format strings, the following interpretations should be in "
"effect::"
msgstr ""

#: ../../pep-0100.txt:846
msgid ""
"In case the format string is an Unicode object, all parameters are "
"coerced to Unicode first and then put together and formatted according to"
" the format string.  Numbers are first converted to strings and then to "
"Unicode."
msgstr ""

#: ../../pep-0100.txt:857
msgid "All other string formatters should work accordingly."
msgstr ""

#: ../../pep-0100.txt:859
msgid "Example::"
msgstr ""

#: ../../pep-0100.txt:865
msgid "Internal Argument Parsing"
msgstr ""

#: ../../pep-0100.txt:867
msgid "These markers are used by the ``PyArg_ParseTuple()`` APIs:"
msgstr ""

#: ../../pep-0100.txt:870
msgid "\"U\""
msgstr ""

#: ../../pep-0100.txt:870
msgid "Check for Unicode object and return a pointer to it"
msgstr ""

#: ../../pep-0100.txt:874
msgid "\"s\""
msgstr ""

#: ../../pep-0100.txt:873
msgid ""
"For Unicode objects: return a pointer to the object's <defenc> buffer "
"(which uses the <default encoding>)."
msgstr ""

#: ../../pep-0100.txt:880
msgid "\"s#\""
msgstr ""

#: ../../pep-0100.txt:877
msgid ""
"Access to the default encoded version of the Unicode object (see Buffer "
"Interface); note that the length relates to the length of the default "
"encoded string rather than the Unicode object length."
msgstr ""

#: ../../pep-0100.txt:883
msgid "\"t#\""
msgstr ""

#: ../../pep-0100.txt:883
msgid "Same as \"s#\"."
msgstr ""

#: ../../pep-0100.txt:897
msgid "\"es\""
msgstr ""

#: ../../pep-0100.txt:886
msgid ""
"Takes two parameters: encoding (``const char *``) and buffer (``char "
"**``)."
msgstr ""

#: ../../pep-0100.txt:889 ../../pep-0100.txt:903
msgid ""
"The input object is first coerced to Unicode in the usual way and then "
"encoded into a string using the given encoding."
msgstr ""

#: ../../pep-0100.txt:893
msgid ""
"On output, a buffer of the needed size is allocated and returned through "
"``*buffer`` as NULL-terminated string.  The encoded may not contain "
"embedded NULL characters.  The caller is responsible for calling "
"``PyMem_Free()`` to free the allocated ``*buffer`` after usage."
msgstr ""

#: ../../pep-0100.txt:918
msgid "\"es#\""
msgstr ""

#: ../../pep-0100.txt:900
msgid ""
"Takes three parameters: encoding (``const char *``), buffer (``char **``)"
" and buffer_len (``int *``)."
msgstr ""

#: ../../pep-0100.txt:907
msgid ""
"If ``*buffer`` is non-NULL, ``*buffer_len`` must be set to "
"``sizeof(buffer)`` on input. Output is then copied to ``*buffer``."
msgstr ""

#: ../../pep-0100.txt:910
msgid ""
"If ``*buffer`` is NULL, a buffer of the needed size is allocated and "
"output copied into it.  ``*buffer`` is then updated to point to the "
"allocated memory area.  The caller is responsible for calling "
"``PyMem_Free()`` to free the allocated ``*buffer`` after usage."
msgstr ""

#: ../../pep-0100.txt:916
msgid ""
"In both cases ``*buffer_len`` is updated to the number of characters "
"written (excluding the trailing NULL-byte). The output buffer is assured "
"to be NULL-terminated."
msgstr ""

#: ../../pep-0100.txt:920
msgid "Examples:"
msgstr ""

#: ../../pep-0100.txt:922
msgid "Using \"es#\" with auto-allocation::"
msgstr ""

#: ../../pep-0100.txt:946
msgid "Using \"es\" with auto-allocation returning a NULL-terminated string::"
msgstr ""

#: ../../pep-0100.txt:969
msgid "Using \"es#\" with a pre-allocated buffer::"
msgstr ""

#: ../../pep-0100.txt:995
msgid "File/Stream Output"
msgstr ""

#: ../../pep-0100.txt:997
msgid ""
"Since file.write(object) and most other stream writers use the \"s#\" or "
"\"t#\" argument parsing marker for querying the data to write, the "
"default encoded string version of the Unicode object will be written to "
"the streams (see Buffer Interface)."
msgstr ""

#: ../../pep-0100.txt:1002
msgid ""
"For explicit handling of files using Unicode, the standard stream codecs "
"as available through the codecs module should be used."
msgstr ""

#: ../../pep-0100.txt:1005
msgid ""
"The codecs module should provide a short-cut open(filename,mode,encoding)"
" available which also assures that mode contains the 'b' character when "
"needed."
msgstr ""

#: ../../pep-0100.txt:1011
msgid "File/Stream Input"
msgstr ""

#: ../../pep-0100.txt:1013
msgid ""
"Only the user knows what encoding the input data uses, so no special "
"magic is applied.  The user will have to explicitly convert the string "
"data to Unicode objects as needed or use the file wrappers defined in the"
" codecs module (see File/Stream Output)."
msgstr ""

#: ../../pep-0100.txt:1021
msgid "Unicode Methods & Attributes"
msgstr ""

#: ../../pep-0100.txt:1023
msgid "All Python string methods, plus::"
msgstr ""

#: ../../pep-0100.txt:1036
msgid "Code Base"
msgstr ""

#: ../../pep-0100.txt:1038
msgid ""
"We should use Fredrik Lundh's Unicode object implementation as basis. It "
"already implements most of the string methods needed and provides a well "
"written code base which we can build upon."
msgstr ""

#: ../../pep-0100.txt:1042
msgid ""
"The object sharing implemented in Fredrik's implementation should be "
"dropped."
msgstr ""

#: ../../pep-0100.txt:1047
msgid "Test Cases"
msgstr ""

#: ../../pep-0100.txt:1049
msgid ""
"Test cases should follow those in Lib/test/test_string.py and include "
"additional checks for the Codec Registry and the Standard Codecs."
msgstr ""

#: ../../pep-0100.txt:1055
msgid "References"
msgstr ""

#: ../../pep-0100.txt:1057
msgid "Unicode Consortium: http://www.unicode.org/"
msgstr ""

#: ../../pep-0100.txt:1059
msgid "Unicode FAQ: http://www.unicode.org/unicode/faq/"
msgstr ""

#: ../../pep-0100.txt:1061
msgid ""
"Unicode 3.0: "
"http://www.unicode.org/unicode/standard/versions/Unicode3.0.html"
msgstr ""

#: ../../pep-0100.txt:1063
msgid ""
"Unicode-TechReports: "
"http://www.unicode.org/unicode/reports/techreports.html"
msgstr ""

#: ../../pep-0100.txt:1065
msgid "Unicode-Mappings: ftp://ftp.unicode.org/Public/MAPPINGS/"
msgstr ""

#: ../../pep-0100.txt:1067
msgid ""
"Introduction to Unicode (a little outdated by still nice to read): "
"http://www.nada.kth.se/i18n/ucs/unicode-iso10646-oview.html"
msgstr ""

#: ../../pep-0100.txt:1070
msgid ""
"For comparison: Introducing Unicode to ECMAScript (aka JavaScript) -- "
"http://www-4.ibm.com/software/developer/library/internationalization-"
"support.html"
msgstr ""

#: ../../pep-0100.txt:1074
msgid ""
"IANA Character Set Names: ftp://ftp.isi.edu/in-notes/iana/assignments"
"/character-sets"
msgstr ""

#: ../../pep-0100.txt:1077
msgid ""
"Discussion of UTF-8 and Unicode support for POSIX and Linux: "
"http://www.cl.cam.ac.uk/~mgk25/unicode.html"
msgstr ""

#: ../../pep-0100.txt:1080
msgid "Encodings:"
msgstr ""

#: ../../pep-0100.txt:1082
msgid "Overview: http://czyborra.com/utf/"
msgstr ""

#: ../../pep-0100.txt:1084
msgid "UCS-2: http://www.uazone.org/multiling/unicode/ucs2.html"
msgstr ""

#: ../../pep-0100.txt:1086
msgid ""
"UTF-7: Defined in RFC2152, e.g. http://www.uazone.org/multiling/ml-"
"docs/rfc2152.txt"
msgstr ""

#: ../../pep-0100.txt:1089
msgid "UTF-8: Defined in RFC2279, e.g. https://tools.ietf.org/html/rfc2279"
msgstr ""

#: ../../pep-0100.txt:1092
msgid "UTF-16: http://www.uazone.org/multiling/unicode/wg2n1035.html"
msgstr ""

#: ../../pep-0100.txt:1096
msgid "History of this Proposal"
msgstr ""

#: ../../pep-0100.txt:1098
msgid ""
"[ed. note: revisions prior to 1.7 are available in the CVS history of "
"Misc/unicode.txt from the standard Python distribution.  All subsequent "
"history is available via the CVS revisions on this file.]"
msgstr ""

#: ../../pep-0100.txt:1104
msgid "1.7"
msgstr ""

#: ../../pep-0100.txt:1106
msgid "Added note about the changed behaviour of \"s#\"."
msgstr ""

#: ../../pep-0100.txt:1109
msgid "1.6"
msgstr ""

#: ../../pep-0100.txt:1111
msgid ""
"Changed <defencstr> to <defenc> since this is the name used in the "
"implementation."
msgstr ""

#: ../../pep-0100.txt:1113
msgid ""
"Added notes about the usage of <defenc> in the buffer protocol "
"implementation."
msgstr ""

#: ../../pep-0100.txt:1117
msgid "1.5"
msgstr ""

#: ../../pep-0100.txt:1119
msgid "Added notes about setting the <default encoding>."
msgstr ""

#: ../../pep-0100.txt:1120
msgid "Fixed some typos (thanks to Andrew Kuchling)."
msgstr ""

#: ../../pep-0100.txt:1121
msgid "Changed <defencstr> to <utf8str>."
msgstr ""

#: ../../pep-0100.txt:1124
msgid "1.4"
msgstr ""

#: ../../pep-0100.txt:1126
msgid "Added note about mixed type comparisons and contains tests."
msgstr ""

#: ../../pep-0100.txt:1127
#, python-format
msgid ""
"Changed treating of Unicode objects in format strings (if used with "
"``'%s' % u`` they will now cause the format string to be coerced to "
"Unicode, thus producing a Unicode object on return)."
msgstr ""

#: ../../pep-0100.txt:1131
msgid "Added link to IANA charset names (thanks to Lars Marius Garshol)."
msgstr ""

#: ../../pep-0100.txt:1133
msgid ""
"Added new codec methods ``.readline()``, ``.readlines()`` and "
"``.writelines()``."
msgstr ""

#: ../../pep-0100.txt:1137
msgid "1.3"
msgstr ""

#: ../../pep-0100.txt:1139
msgid "Added new \"es\" and \"es#\" parser markers"
msgstr ""

#: ../../pep-0100.txt:1142
msgid "1.2"
msgstr ""

#: ../../pep-0100.txt:1144
msgid "Removed POD about ``codecs.open()``"
msgstr ""

#: ../../pep-0100.txt:1147
msgid "1.1"
msgstr ""

#: ../../pep-0100.txt:1149
msgid "Added note about comparisons and hash values."
msgstr ""

#: ../../pep-0100.txt:1150
msgid "Added note about case mapping algorithms."
msgstr ""

#: ../../pep-0100.txt:1151
msgid ""
"Changed stream codecs ``.read()`` and ``.write()`` method to match the "
"standard file-like object methods (bytes consumed information is no "
"longer returned by the methods)"
msgstr ""

#: ../../pep-0100.txt:1157
msgid "1.0"
msgstr ""

#: ../../pep-0100.txt:1159
msgid ""
"changed encode Codec method to be symmetric to the decode method (they "
"both return (object, data consumed) now and thus become interchangeable);"
msgstr ""

#: ../../pep-0100.txt:1162
msgid ""
"removed ``__init__`` method of Codec class (the methods are stateless) "
"and moved the errors argument down to the methods;"
msgstr ""

#: ../../pep-0100.txt:1165
msgid ""
"made the Codec design more generic w/r to type of input and output "
"objects;"
msgstr ""

#: ../../pep-0100.txt:1167
msgid ""
"changed ``StreamWriter.flush`` to ``StreamWriter.reset`` in order to "
"avoid overriding the stream's ``.flush()`` method;"
msgstr ""

#: ../../pep-0100.txt:1169
msgid "renamed ``.breaklines()`` to ``.splitlines()``;"
msgstr ""

#: ../../pep-0100.txt:1170
msgid "renamed the module unicodec to codecs;"
msgstr ""

#: ../../pep-0100.txt:1171
msgid "modified the File I/O section to refer to the stream codecs."
msgstr ""

#: ../../pep-0100.txt:1174
msgid "0.9"
msgstr ""

#: ../../pep-0100.txt:1176
msgid "changed errors keyword argument definition;"
msgstr ""

#: ../../pep-0100.txt:1177
msgid "added 'replace' error handling;"
msgstr ""

#: ../../pep-0100.txt:1178
msgid "changed the codec APIs to accept buffer like objects on input;"
msgstr ""

#: ../../pep-0100.txt:1180
msgid "some minor typo fixes;"
msgstr ""

#: ../../pep-0100.txt:1181
msgid ""
"added Whitespace section and included references for Unicode characters "
"that have the whitespace and the line break characteristic;"
msgstr ""

#: ../../pep-0100.txt:1183
msgid "added note that search functions can expect lower-case encoding names;"
msgstr ""

#: ../../pep-0100.txt:1184
msgid "dropped slicing and offsets in the codec APIs"
msgstr ""

#: ../../pep-0100.txt:1187
msgid "0.8"
msgstr ""

#: ../../pep-0100.txt:1189
msgid "added encodings package and raw unicode escape encoding;"
msgstr ""

#: ../../pep-0100.txt:1190
msgid "untabified the proposal;"
msgstr ""

#: ../../pep-0100.txt:1191
msgid "added notes on Unicode format strings;"
msgstr ""

#: ../../pep-0100.txt:1192
msgid "added ``.breaklines()`` method"
msgstr ""

#: ../../pep-0100.txt:1195
msgid "0.7"
msgstr ""

#: ../../pep-0100.txt:1197
msgid "added a whole new set of codec APIs;"
msgstr ""

#: ../../pep-0100.txt:1198
msgid "added a different encoder lookup scheme;"
msgstr ""

#: ../../pep-0100.txt:1199
msgid "fixed some names"
msgstr ""

#: ../../pep-0100.txt:1202
msgid "0.6"
msgstr ""

#: ../../pep-0100.txt:1204
msgid "changed \"s#\" to \"t#\";"
msgstr ""

#: ../../pep-0100.txt:1205
msgid "changed <defencbuf> to <defencstr> holding a real Python string object;"
msgstr ""

#: ../../pep-0100.txt:1207
msgid ""
"changed Buffer Interface to delegate requests to <defencstr>'s buffer "
"interface;"
msgstr ""

#: ../../pep-0100.txt:1209
msgid ""
"removed the explicit reference to the unicodec.codecs dictionary (the "
"module can implement this in way fit for the purpose);"
msgstr ""

#: ../../pep-0100.txt:1211
msgid "removed the settable default encoding;"
msgstr ""

#: ../../pep-0100.txt:1212
msgid "move ``UnicodeError`` from unicodec to exceptions;"
msgstr ""

#: ../../pep-0100.txt:1213
msgid "\"s#\" not returns the internal data;"
msgstr ""

#: ../../pep-0100.txt:1214
msgid ""
"passed the UCS-2/UTF-16 checking from the Unicode constructor to the "
"Codecs"
msgstr ""

#: ../../pep-0100.txt:1218
msgid "0.5"
msgstr ""

#: ../../pep-0100.txt:1220
msgid "moved ``sys.bom`` to ``unicodec.BOM``;"
msgstr ""

#: ../../pep-0100.txt:1221
msgid "added sections on case mapping,"
msgstr ""

#: ../../pep-0100.txt:1222
msgid "private use encodings and Unicode character properties"
msgstr ""

#: ../../pep-0100.txt:1225
msgid "0.4"
msgstr ""

#: ../../pep-0100.txt:1227
#, python-format
msgid "added Codec interface, notes on %-formatting,"
msgstr ""

#: ../../pep-0100.txt:1228
msgid "changed some encoding details,"
msgstr ""

#: ../../pep-0100.txt:1229
msgid "added comments on stream wrappers,"
msgstr ""

#: ../../pep-0100.txt:1230
msgid "fixed some discussion points (most important: Internal Format),"
msgstr ""

#: ../../pep-0100.txt:1231
msgid "clarified the 'unicode-escape' encoding, added encoding references"
msgstr ""

#: ../../pep-0100.txt:1235
msgid "0.3"
msgstr ""

#: ../../pep-0100.txt:1237
msgid ""
"added references, comments on codec modules, the internal format, "
"bf_getcharbuffer and the RE engine;"
msgstr ""

#: ../../pep-0100.txt:1239
msgid ""
"added 'unicode-escape' encoding proposed by Tim Peters and fixed repr(u) "
"accordingly"
msgstr ""

#: ../../pep-0100.txt:1243
msgid "0.2"
msgstr ""

#: ../../pep-0100.txt:1245
msgid "integrated Guido's suggestions, added stream codecs and file wrapping"
msgstr ""

#: ../../pep-0100.txt:1248
msgid "0.1"
msgstr ""

#: ../../pep-0100.txt:1250
msgid "first version"
msgstr ""

