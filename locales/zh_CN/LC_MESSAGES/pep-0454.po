# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0454.txt
msgid "PEP"
msgstr ""

#: ../../pep-0454.txt:1
msgid "454"
msgstr ""

#: ../../pep-0454.txt
msgid "Title"
msgstr ""

#: ../../pep-0454.txt:2
msgid "Add a new tracemalloc module to trace Python memory allocations"
msgstr ""

#: ../../pep-0454.txt
msgid "Author"
msgstr ""

#: ../../pep-0454.txt:5
msgid "Victor Stinner <vstinner@python.org>"
msgstr ""

#: ../../pep-0454.txt
msgid "BDFL-Delegate"
msgstr ""

#: ../../pep-0454.txt:6
msgid "Charles-Fran√ßois Natali <cf.natali@gmail.com>"
msgstr ""

#: ../../pep-0454.txt
msgid "Status"
msgstr ""

#: ../../pep-0454.txt:7
msgid "Final"
msgstr ""

#: ../../pep-0454.txt
msgid "Type"
msgstr ""

#: ../../pep-0454.txt:8
msgid "Standards Track"
msgstr ""

#: ../../pep-0454.txt
msgid "Created"
msgstr ""

#: ../../pep-0454.txt:10
msgid "03-Sep-2013"
msgstr ""

#: ../../pep-0454.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0454.txt:11
msgid "3.4"
msgstr ""

#: ../../pep-0454.txt
msgid "Resolution"
msgstr ""

#: ../../pep-0454.txt:12
msgid "https://mail.python.org/pipermail/python-dev/2013-November/130491.html"
msgstr ""

#: ../../pep-0454.txt:16
msgid "Abstract"
msgstr ""

#: ../../pep-0454.txt:18
msgid ""
"This PEP proposes to add a new ``tracemalloc`` module to trace memory "
"blocks allocated by Python."
msgstr ""

#: ../../pep-0454.txt:23
msgid "Rationale"
msgstr ""

#: ../../pep-0454.txt:25
msgid ""
"Classic generic tools like Valgrind can get the C traceback where a "
"memory block was allocated. Using such tools to analyze Python memory "
"allocations does not help because most memory blocks are allocated in the"
" same C function, in ``PyMem_Malloc()`` for example. Moreover, Python has"
" an allocator for small objects called \"pymalloc\" which keeps free "
"blocks for efficiency. This is not well handled by these tools."
msgstr ""

#: ../../pep-0454.txt:32
msgid ""
"There are debug tools dedicated to the Python language like ``Heapy`` "
"``Pympler`` and ``Meliae`` which lists all alive objects using the "
"garbage collector module (functions like ``gc.get_objects()``, "
"``gc.get_referrers()`` and ``gc.get_referents()``), compute their size "
"(ex: using ``sys.getsizeof()``) and group objects by type. These tools "
"provide a better estimation of the memory usage of an application.  They "
"are useful when most memory leaks are instances of the same type and this"
" type is only instantiated in a few functions. Problems arise when the "
"object type is very common like ``str`` or ``tuple``, and it is hard to "
"identify where these objects are instantiated."
msgstr ""

#: ../../pep-0454.txt:43
msgid ""
"Finding reference cycles is also a difficult problem.  There are "
"different tools to draw a diagram of all references.  These tools cannot "
"be used on large applications with thousands of objects because the "
"diagram is too huge to be analyzed manually."
msgstr ""

#: ../../pep-0454.txt:50
msgid "Proposal"
msgstr ""

#: ../../pep-0454.txt:52
msgid ""
"Using the customized allocation API from PEP 445, it becomes easy to set "
"up a hook on Python memory allocators. A hook can inspect Python "
"internals to retrieve Python tracebacks. The idea of getting the current "
"traceback comes from the faulthandler module. The faulthandler dumps the "
"traceback of all Python threads on a crash, here is the idea is to get "
"the traceback of the current Python thread when a memory block is "
"allocated by Python."
msgstr ""

#: ../../pep-0454.txt:60
msgid ""
"This PEP proposes to add a new ``tracemalloc`` module, a debug tool to "
"trace memory blocks allocated by Python. The module provides the "
"following information:"
msgstr ""

#: ../../pep-0454.txt:64
msgid "Traceback where an object was allocated"
msgstr ""

#: ../../pep-0454.txt:65
msgid ""
"Statistics on allocated memory blocks per filename and per line number: "
"total size, number and average size of allocated memory blocks"
msgstr ""

#: ../../pep-0454.txt:67
msgid "Computed differences between two snapshots to detect memory leaks"
msgstr ""

#: ../../pep-0454.txt:69
msgid ""
"The API of the tracemalloc module is similar to the API of the "
"faulthandler module: ``enable()`` / ``start()``, ``disable()`` / "
"``stop()`` and ``is_enabled()`` / ``is_tracing()`` functions, an "
"environment variable (``PYTHONFAULTHANDLER`` and ``PYTHONTRACEMALLOC``), "
"and a ``-X`` command line option (``-X faulthandler`` and ``-X "
"tracemalloc``). See the `documentation of the faulthandler module "
"<http://docs.python.org/3/library/faulthandler.html>`_."
msgstr ""

#: ../../pep-0454.txt:76
msgid ""
"The idea of tracing memory allocations is not new. It was first "
"implemented in the PySizer project in 2005. PySizer was implemented "
"differently: the traceback was stored in frame objects and some Python "
"types were linked the trace with the name of object type. PySizer patch "
"on CPython adds an overhead on performances and memory footprint, even if"
" the PySizer was not used. tracemalloc attaches a traceback to the "
"underlying layer, to memory blocks, and has no overhead when the module "
"is not tracing memory allocations."
msgstr ""

#: ../../pep-0454.txt:85
msgid ""
"The tracemalloc module has been written for CPython. Other "
"implementations of Python may not be able to provide it."
msgstr ""

#: ../../pep-0454.txt:90
msgid "API"
msgstr ""

#: ../../pep-0454.txt:92
msgid ""
"To trace most memory blocks allocated by Python, the module should be "
"started as early as possible by setting the ``PYTHONTRACEMALLOC`` "
"environment variable to ``1``, or by using ``-X tracemalloc`` command "
"line option. The ``tracemalloc.start()`` function can be called at "
"runtime to start tracing Python memory allocations."
msgstr ""

#: ../../pep-0454.txt:98
msgid ""
"By default, a trace of an allocated memory block only stores the most "
"recent frame (1 frame). To store 25 frames at startup: set the "
"``PYTHONTRACEMALLOC`` environment variable to ``25``, or use the ``-X "
"tracemalloc=25`` command line option. The ``set_traceback_limit()`` "
"function can be used at runtime to set the limit."
msgstr ""

#: ../../pep-0454.txt:106
msgid "Functions"
msgstr ""

#: ../../pep-0454.txt:108
msgid "``clear_traces()`` function:"
msgstr ""

#: ../../pep-0454.txt:110
msgid "Clear traces of memory blocks allocated by Python."
msgstr ""

#: ../../pep-0454.txt:112
msgid "See also ``stop()``."
msgstr ""

#: ../../pep-0454.txt:115
msgid "``get_object_traceback(obj)`` function:"
msgstr ""

#: ../../pep-0454.txt:117
msgid ""
"Get the traceback where the Python object *obj* was allocated. Return a "
"``Traceback`` instance, or ``None`` if the ``tracemalloc`` module is not "
"tracing memory allocations or did not trace the allocation of the object."
msgstr ""

#: ../../pep-0454.txt:122
msgid "See also ``gc.get_referrers()`` and ``sys.getsizeof()`` functions."
msgstr ""

#: ../../pep-0454.txt:125
msgid "``get_traceback_limit()`` function:"
msgstr ""

#: ../../pep-0454.txt:127
msgid "Get the maximum number of frames stored in the traceback of a trace."
msgstr ""

#: ../../pep-0454.txt:129
msgid ""
"The ``tracemalloc`` module must be tracing memory allocations to get the "
"limit, otherwise an exception is raised."
msgstr ""

#: ../../pep-0454.txt:132
msgid "The limit is set by the ``start()`` function."
msgstr ""

#: ../../pep-0454.txt:135
msgid "``get_traced_memory()`` function:"
msgstr ""

#: ../../pep-0454.txt:137
msgid ""
"Get the current size and maximum size of memory blocks traced by the "
"``tracemalloc`` module as a tuple: ``(size: int, max_size: int)``."
msgstr ""

#: ../../pep-0454.txt:141
msgid "``get_tracemalloc_memory()`` function:"
msgstr ""

#: ../../pep-0454.txt:143
msgid ""
"Get the memory usage in bytes of the ``tracemalloc`` module used to store"
" traces of memory blocks. Return an ``int``."
msgstr ""

#: ../../pep-0454.txt:147
msgid "``is_tracing()`` function:"
msgstr ""

#: ../../pep-0454.txt:149
msgid ""
"``True`` if the ``tracemalloc`` module is tracing Python memory "
"allocations, ``False`` otherwise."
msgstr ""

#: ../../pep-0454.txt:152
msgid "See also ``start()`` and ``stop()`` functions."
msgstr ""

#: ../../pep-0454.txt:155
msgid "``start(nframe: int=1)`` function:"
msgstr ""

#: ../../pep-0454.txt:157
msgid ""
"Start tracing Python memory allocations: install hooks on Python memory "
"allocators. Collected tracebacks of traces will be limited to *nframe* "
"frames. By default, a trace of a memory block only stores the most recent"
" frame: the limit is ``1``. *nframe* must be greater or equal to ``1``."
msgstr ""

#: ../../pep-0454.txt:163
msgid ""
"Storing more than ``1`` frame is only useful to compute statistics "
"grouped by ``'traceback'`` or to compute cumulative statistics: see the "
"``Snapshot.compare_to()`` and ``Snapshot.statistics()`` methods."
msgstr ""

#: ../../pep-0454.txt:167
msgid ""
"Storing more frames increases the memory and CPU overhead of the "
"``tracemalloc`` module. Use the ``get_tracemalloc_memory()`` function to "
"measure how much memory is used by the ``tracemalloc`` module."
msgstr ""

#: ../../pep-0454.txt:172
msgid ""
"The ``PYTHONTRACEMALLOC`` environment variable "
"(``PYTHONTRACEMALLOC=NFRAME``) and the ``-X`` ``tracemalloc=NFRAME`` "
"command line option can be used to start tracing at startup."
msgstr ""

#: ../../pep-0454.txt:176
msgid ""
"See also ``stop()``, ``is_tracing()`` and ``get_traceback_limit()`` "
"functions."
msgstr ""

#: ../../pep-0454.txt:180
msgid "``stop()`` function:"
msgstr ""

#: ../../pep-0454.txt:182
msgid ""
"Stop tracing Python memory allocations: uninstall hooks on Python memory "
"allocators. Clear also traces of memory blocks allocated by Python"
msgstr ""

#: ../../pep-0454.txt:186
msgid ""
"Call ``take_snapshot()`` function to take a snapshot of traces before "
"clearing them."
msgstr ""

#: ../../pep-0454.txt:189
msgid "See also ``start()`` and ``is_tracing()`` functions."
msgstr ""

#: ../../pep-0454.txt:192
msgid "``take_snapshot()`` function:"
msgstr ""

#: ../../pep-0454.txt:194
msgid ""
"Take a snapshot of traces of memory blocks allocated by Python. Return a "
"new ``Snapshot`` instance."
msgstr ""

#: ../../pep-0454.txt:197
msgid ""
"The snapshot does not include memory blocks allocated before the "
"``tracemalloc`` module started to trace memory allocations."
msgstr ""

#: ../../pep-0454.txt:200
msgid ""
"Tracebacks of traces are limited to ``get_traceback_limit()`` frames. Use"
" the *nframe* parameter of the ``start()`` function to store more frames."
msgstr ""

#: ../../pep-0454.txt:204
msgid ""
"The ``tracemalloc`` module must be tracing memory allocations to take a "
"snapshot, see the ``start()`` function."
msgstr ""

#: ../../pep-0454.txt:207
msgid "See also the ``get_object_traceback()`` function."
msgstr ""

#: ../../pep-0454.txt:211
msgid "Filter"
msgstr ""

#: ../../pep-0454.txt:213
msgid ""
"``Filter(inclusive: bool, filename_pattern: str, lineno: int=None, "
"all_frames: bool=False)`` class:"
msgstr ""

#: ../../pep-0454.txt:215
msgid "Filter on traces of memory blocks."
msgstr ""

#: ../../pep-0454.txt:217
msgid ""
"See the ``fnmatch.fnmatch()`` function for the syntax of "
"*filename_pattern*. The ``'.pyc'`` and ``'.pyo'`` file extensions are "
"replaced with ``'.py'``."
msgstr ""

#: ../../pep-0454.txt:221
msgid "Examples:"
msgstr ""

#: ../../pep-0454.txt:223
msgid ""
"``Filter(True, subprocess.__file__)`` only includes traces of the "
"``subprocess`` module"
msgstr ""

#: ../../pep-0454.txt:225
msgid ""
"``Filter(False, tracemalloc.__file__)`` excludes traces of the "
"``tracemalloc`` module"
msgstr ""

#: ../../pep-0454.txt:227
msgid "``Filter(False, \"<unknown>\")`` excludes empty tracebacks"
msgstr ""

#: ../../pep-0454.txt:229
msgid "``inclusive`` attribute:"
msgstr ""

#: ../../pep-0454.txt:231
msgid ""
"If *inclusive* is ``True`` (include), only trace memory blocks allocated "
"in a file with a name matching ``filename_pattern`` at line number "
"``lineno``."
msgstr ""

#: ../../pep-0454.txt:235
msgid ""
"If *inclusive* is ``False`` (exclude), ignore memory blocks allocated in "
"a file with a name matching ``filename_pattern`` at line number "
"``lineno``."
msgstr ""

#: ../../pep-0454.txt:239 ../../pep-0454.txt:272
msgid "``lineno`` attribute:"
msgstr ""

#: ../../pep-0454.txt:241
msgid ""
"Line number (``int``) of the filter. If *lineno* is ``None``, the filter "
"matches any line number."
msgstr ""

#: ../../pep-0454.txt:244
msgid "``filename_pattern`` attribute:"
msgstr ""

#: ../../pep-0454.txt:246
msgid "Filename pattern of the filter (``str``)."
msgstr ""

#: ../../pep-0454.txt:248
msgid "``all_frames`` attribute:"
msgstr ""

#: ../../pep-0454.txt:250
msgid ""
"If *all_frames* is ``True``, all frames of the traceback are checked. If "
"*all_frames* is ``False``, only the most recent frame is checked."
msgstr ""

#: ../../pep-0454.txt:254
msgid ""
"This attribute is ignored if the traceback limit is less than ``2``. See "
"the ``get_traceback_limit()`` function and ``Snapshot.traceback_limit`` "
"attribute."
msgstr ""

#: ../../pep-0454.txt:260
msgid "Frame"
msgstr ""

#: ../../pep-0454.txt:262
msgid "``Frame`` class:"
msgstr ""

#: ../../pep-0454.txt:264
msgid "Frame of a traceback."
msgstr ""

#: ../../pep-0454.txt:266
msgid "The ``Traceback`` class is a sequence of ``Frame`` instances."
msgstr ""

#: ../../pep-0454.txt:268
msgid "``filename`` attribute:"
msgstr ""

#: ../../pep-0454.txt:270
msgid "Filename (``str``)."
msgstr ""

#: ../../pep-0454.txt:274
msgid "Line number (``int``)."
msgstr ""

#: ../../pep-0454.txt:278
msgid "Snapshot"
msgstr ""

#: ../../pep-0454.txt:280
msgid "``Snapshot`` class:"
msgstr ""

#: ../../pep-0454.txt:282
msgid "Snapshot of traces of memory blocks allocated by Python."
msgstr ""

#: ../../pep-0454.txt:284
msgid "The ``take_snapshot()`` function creates a snapshot instance."
msgstr ""

#: ../../pep-0454.txt:286
msgid ""
"``compare_to(old_snapshot: Snapshot, group_by: str, cumulative: "
"bool=False)`` method:"
msgstr ""

#: ../../pep-0454.txt:288
msgid ""
"Compute the differences with an old snapshot. Get statistics as a sorted "
"list of ``StatisticDiff`` instances grouped by *group_by*."
msgstr ""

#: ../../pep-0454.txt:291
msgid ""
"See the ``statistics()`` method for *group_by* and *cumulative* "
"parameters."
msgstr ""

#: ../../pep-0454.txt:294
msgid ""
"The result is sorted from the biggest to the smallest by: absolute value "
"of ``StatisticDiff.size_diff``, ``StatisticDiff.size``, absolute value of"
" ``StatisticDiff.count_diff``, ``Statistic.count`` and then by "
"``StatisticDiff.traceback``."
msgstr ""

#: ../../pep-0454.txt:300
msgid "``dump(filename)`` method:"
msgstr ""

#: ../../pep-0454.txt:302
msgid "Write the snapshot into a file."
msgstr ""

#: ../../pep-0454.txt:304
msgid "Use ``load()`` to reload the snapshot."
msgstr ""

#: ../../pep-0454.txt:307
msgid "``filter_traces(filters)`` method:"
msgstr ""

#: ../../pep-0454.txt:309
msgid ""
"Create a new ``Snapshot`` instance with a filtered ``traces`` sequence, "
"*filters* is a list of ``Filter`` instances.  If *filters* is an empty "
"list, return a new ``Snapshot`` instance with a copy of the traces."
msgstr ""

#: ../../pep-0454.txt:314
msgid ""
"All inclusive filters are applied at once, a trace is ignored if no "
"inclusive filters match it. A trace is ignored if at least one exclusive "
"filter matches it."
msgstr ""

#: ../../pep-0454.txt:319
msgid "``load(filename)`` classmethod:"
msgstr ""

#: ../../pep-0454.txt:321
msgid "Load a snapshot from a file."
msgstr ""

#: ../../pep-0454.txt:323
msgid "See also ``dump()``."
msgstr ""

#: ../../pep-0454.txt:326
msgid "``statistics(group_by: str, cumulative: bool=False)`` method:"
msgstr ""

#: ../../pep-0454.txt:328
msgid ""
"Get statistics as a sorted list of ``Statistic`` instances grouped by "
"*group_by*:"
msgstr ""

#: ../../pep-0454.txt:332
msgid "group_by"
msgstr ""

#: ../../pep-0454.txt:332
msgid "description"
msgstr ""

#: ../../pep-0454.txt:334
msgid "``'filename'``"
msgstr ""

#: ../../pep-0454.txt:334
msgid "filename"
msgstr ""

#: ../../pep-0454.txt:335
msgid "``'lineno'``"
msgstr ""

#: ../../pep-0454.txt:335
msgid "filename and line number"
msgstr ""

#: ../../pep-0454.txt:336
msgid "``'traceback'``"
msgstr ""

#: ../../pep-0454.txt:336
msgid "traceback"
msgstr ""

#: ../../pep-0454.txt:339
msgid ""
"If *cumulative* is ``True``, cumulate size and count of memory blocks of "
"all frames of the traceback of a trace, not only the most recent frame. "
"The cumulative mode can only be used with *group_by* equals to "
"``'filename'`` and ``'lineno'`` and ``traceback_limit`` greater than "
"``1``."
msgstr ""

#: ../../pep-0454.txt:345
msgid ""
"The result is sorted from the biggest to the smallest by: "
"``Statistic.size``, ``Statistic.count`` and then by "
"``Statistic.traceback``."
msgstr ""

#: ../../pep-0454.txt:350
msgid "``traceback_limit`` attribute:"
msgstr ""

#: ../../pep-0454.txt:352
msgid ""
"Maximum number of frames stored in the traceback of ``traces``: result of"
" the ``get_traceback_limit()`` when the snapshot was taken."
msgstr ""

#: ../../pep-0454.txt:355
msgid "``traces`` attribute:"
msgstr ""

#: ../../pep-0454.txt:357
msgid ""
"Traces of all memory blocks allocated by Python: sequence of ``Trace`` "
"instances."
msgstr ""

#: ../../pep-0454.txt:360
msgid ""
"The sequence has an undefined order. Use the ``Snapshot.statistics()`` "
"method to get a sorted list of statistics."
msgstr ""

#: ../../pep-0454.txt:365
msgid "Statistic"
msgstr ""

#: ../../pep-0454.txt:367
msgid "``Statistic`` class:"
msgstr ""

#: ../../pep-0454.txt:369
msgid "Statistic on memory allocations."
msgstr ""

#: ../../pep-0454.txt:371
msgid "``Snapshot.statistics()`` returns a list of ``Statistic`` instances."
msgstr ""

#: ../../pep-0454.txt:373
msgid "See also the ``StatisticDiff`` class."
msgstr ""

#: ../../pep-0454.txt:375 ../../pep-0454.txt:400
msgid "``count`` attribute:"
msgstr ""

#: ../../pep-0454.txt:377
msgid "Number of memory blocks (``int``)."
msgstr ""

#: ../../pep-0454.txt:379 ../../pep-0454.txt:411 ../../pep-0454.txt:438
msgid "``size`` attribute:"
msgstr ""

#: ../../pep-0454.txt:381
msgid "Total size of memory blocks in bytes (``int``)."
msgstr ""

#: ../../pep-0454.txt:383 ../../pep-0454.txt:422 ../../pep-0454.txt:442
msgid "``traceback`` attribute:"
msgstr ""

#: ../../pep-0454.txt:385 ../../pep-0454.txt:444
msgid "Traceback where the memory block was allocated, ``Traceback`` instance."
msgstr ""

#: ../../pep-0454.txt:390
msgid "StatisticDiff"
msgstr ""

#: ../../pep-0454.txt:392
msgid "``StatisticDiff`` class:"
msgstr ""

#: ../../pep-0454.txt:394
msgid ""
"Statistic difference on memory allocations between an old and a new "
"``Snapshot`` instance."
msgstr ""

#: ../../pep-0454.txt:397
msgid ""
"``Snapshot.compare_to()`` returns a list of ``StatisticDiff`` instances. "
"See also the ``Statistic`` class."
msgstr ""

#: ../../pep-0454.txt:402
msgid ""
"Number of memory blocks in the new snapshot (``int``): ``0`` if the "
"memory blocks have been released in the new snapshot."
msgstr ""

#: ../../pep-0454.txt:405
msgid "``count_diff`` attribute:"
msgstr ""

#: ../../pep-0454.txt:407
msgid ""
"Difference of number of memory blocks between the old and the new "
"snapshots (``int``): ``0`` if the memory blocks have been allocated in "
"the new snapshot."
msgstr ""

#: ../../pep-0454.txt:413
msgid ""
"Total size of memory blocks in bytes in the new snapshot (``int``): ``0``"
" if the memory blocks have been released in the new snapshot."
msgstr ""

#: ../../pep-0454.txt:416
msgid "``size_diff`` attribute:"
msgstr ""

#: ../../pep-0454.txt:418
msgid ""
"Difference of total size of memory blocks in bytes between the old and "
"the new snapshots (``int``): ``0`` if the memory blocks have been "
"allocated in the new snapshot."
msgstr ""

#: ../../pep-0454.txt:424
msgid "Traceback where the memory blocks were allocated, ``Traceback`` instance."
msgstr ""

#: ../../pep-0454.txt:429
msgid "Trace"
msgstr ""

#: ../../pep-0454.txt:431
msgid "``Trace`` class:"
msgstr ""

#: ../../pep-0454.txt:433
msgid "Trace of a memory block."
msgstr ""

#: ../../pep-0454.txt:435
msgid "The ``Snapshot.traces`` attribute is a sequence of ``Trace`` instances."
msgstr ""

#: ../../pep-0454.txt:440
msgid "Size of the memory block in bytes (``int``)."
msgstr ""

#: ../../pep-0454.txt:449
msgid "Traceback"
msgstr ""

#: ../../pep-0454.txt:451
msgid "``Traceback`` class:"
msgstr ""

#: ../../pep-0454.txt:453
msgid ""
"Sequence of ``Frame`` instances sorted from the most recent frame to the "
"oldest frame."
msgstr ""

#: ../../pep-0454.txt:456
msgid ""
"A traceback contains at least ``1`` frame. If the ``tracemalloc`` module "
"failed to get a frame, the filename ``\"<unknown>\"`` at line number "
"``0`` is used."
msgstr ""

#: ../../pep-0454.txt:460
msgid ""
"When a snapshot is taken, tracebacks of traces are limited to "
"``get_traceback_limit()`` frames. See the ``take_snapshot()`` function."
msgstr ""

#: ../../pep-0454.txt:464
msgid ""
"The ``Trace.traceback`` attribute is an instance of ``Traceback`` "
"instance."
msgstr ""

#: ../../pep-0454.txt:469
msgid "Rejected Alternatives"
msgstr ""

#: ../../pep-0454.txt:472
msgid "Log calls to the memory allocator"
msgstr ""

#: ../../pep-0454.txt:474
msgid ""
"A different approach is to log calls to ``malloc()``, ``realloc()`` and "
"``free()`` functions. Calls can be logged into a file or send to another "
"computer through the network. Example of a log entry: name of the "
"function, size of the memory block, address of the memory block, Python "
"traceback where the allocation occurred, timestamp."
msgstr ""

#: ../../pep-0454.txt:480
msgid ""
"Logs cannot be used directly, getting the current status of the memory "
"requires to parse previous logs. For example, it is not possible to get "
"directly the traceback of a Python object, like "
"``get_object_traceback(obj)`` does with traces."
msgstr ""

#: ../../pep-0454.txt:485
msgid ""
"Python uses objects with a very short lifetime and so makes an extensive "
"use of memory allocators. It has an allocator optimized for small objects"
" (less than 512 bytes) with a short lifetime.  For example, the Python "
"test suites calls ``malloc()``, ``realloc()`` or ``free()`` 270,000 times"
" per second in average. If the size of log entry is 32 bytes, logging "
"produces 8.2 MB per second or 29.0 GB per hour."
msgstr ""

#: ../../pep-0454.txt:492
msgid ""
"The alternative was rejected because it is less efficient and has less "
"features. Parsing logs in a different process or a different computer is "
"slower than maintaining traces on allocated memory blocks in the same "
"process."
msgstr ""

#: ../../pep-0454.txt:499
msgid "Prior Work"
msgstr ""

#: ../../pep-0454.txt:501
msgid ""
"`Python Memory Validator "
"<http://www.softwareverify.com/python/memory/index.html>`_ (2005-2013): "
"commercial Python memory validator developed by Software Verification. It"
" uses the Python Reflection API."
msgstr ""

#: ../../pep-0454.txt:505
msgid ""
"`PySizer <http://pysizer.8325.org/>`_: Google Summer of Code 2005 project"
" by Nick Smallbone."
msgstr ""

#: ../../pep-0454.txt:507
msgid ""
"`Heapy <http://guppy-pe.sourceforge.net/>`_ (2006-2013): part of the "
"Guppy-PE project written by Sverker Nilsson."
msgstr ""

#: ../../pep-0454.txt:510
msgid ""
"Draft PEP: `Support Tracking Low-Level Memory Usage in CPython "
"<http://svn.python.org/projects/python/branches/bcannon-"
"sandboxing/PEP.txt>`_ (Brett Canon, 2006)"
msgstr ""

#: ../../pep-0454.txt:513
msgid "Muppy: project developed in 2008 by Robert Schuppenies."
msgstr ""

#: ../../pep-0454.txt:514
msgid ""
"`asizeof <http://code.activestate.com/recipes/546530/>`_: a pure Python "
"module to estimate the size of objects by Jean Brouwers (2008)."
msgstr ""

#: ../../pep-0454.txt:517
msgid ""
"`Heapmonitor <http://www.scons.org/wiki/LudwigHaehne/HeapMonitor>`_: It "
"provides facilities to size individual objects and can track all objects "
"of certain classes. It was developed in 2008 by Ludwig Haehne."
msgstr ""

#: ../../pep-0454.txt:520
msgid ""
"`Pympler <http://code.google.com/p/pympler/>`_ (2008-2011): project based"
" on asizeof, muppy and HeapMonitor"
msgstr ""

#: ../../pep-0454.txt:522
msgid "`objgraph <http://mg.pov.lt/objgraph/>`_ (2008-2012)"
msgstr ""

#: ../../pep-0454.txt:523
msgid ""
"`Dozer <https://pypi.python.org/pypi/Dozer>`_: WSGI Middleware version of"
" the CherryPy memory leak debugger, written by Marius Gedminas "
"(2008-2013)"
msgstr ""

#: ../../pep-0454.txt:525
msgid ""
"`Meliae <https://pypi.python.org/pypi/meliae>`_: Python Memory Usage "
"Analyzer developed by John A Meinel since 2009"
msgstr ""

#: ../../pep-0454.txt:528
msgid ""
"`gdb-heap <https://fedorahosted.org/gdb-heap/>`_: gdb script written in "
"Python by Dave Malcolm (2010-2011) to analyze the usage of the heap "
"memory"
msgstr ""

#: ../../pep-0454.txt:530
msgid ""
"`memory_profiler <https://pypi.python.org/pypi/memory_profiler>`_: "
"written by Fabian Pedregosa (2011-2013)"
msgstr ""

#: ../../pep-0454.txt:532
msgid ""
"`caulk <https://github.com/smartfile/caulk/>`_: written by Ben Timby in "
"2012"
msgstr ""

#: ../../pep-0454.txt:534
msgid ""
"See also `Pympler Related Work "
"<http://pythonhosted.org/Pympler/related.html>`_."
msgstr ""

#: ../../pep-0454.txt:539
msgid "Links"
msgstr ""

#: ../../pep-0454.txt:541
msgid "tracemalloc:"
msgstr ""

#: ../../pep-0454.txt:543
msgid ""
"`#18874: Add a new tracemalloc module to trace Python memory allocations "
"<http://bugs.python.org/issue18874>`_"
msgstr ""

#: ../../pep-0454.txt:545
msgid "`pytracemalloc on PyPI <https://pypi.python.org/pypi/pytracemalloc>`_"
msgstr ""

#: ../../pep-0454.txt:550
msgid "Copyright"
msgstr ""

#: ../../pep-0454.txt:552
msgid "This document has been placed in the public domain."
msgstr ""

