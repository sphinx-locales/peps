# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-3146.txt
msgid "PEP"
msgstr ""

#: ../../pep-3146.txt:1
msgid "3146"
msgstr ""

#: ../../pep-3146.txt
msgid "Title"
msgstr ""

#: ../../pep-3146.txt:2
msgid "Merging Unladen Swallow into CPython"
msgstr ""

#: ../../pep-3146.txt
msgid "Author"
msgstr ""

#: ../../pep-3146.txt:5
msgid ""
"Collin Winter <collinwinter@google.com>, Jeffrey Yasskin "
"<jyasskin@google.com>, Reid Kleckner <rnk@mit.edu>"
msgstr ""

#: ../../pep-3146.txt
msgid "Status"
msgstr ""

#: ../../pep-3146.txt:8
msgid "Withdrawn"
msgstr ""

#: ../../pep-3146.txt
msgid "Type"
msgstr ""

#: ../../pep-3146.txt:9
msgid "Standards Track"
msgstr ""

#: ../../pep-3146.txt
msgid "Created"
msgstr ""

#: ../../pep-3146.txt:11
msgid "01-Jan-2010"
msgstr ""

#: ../../pep-3146.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-3146.txt:12
msgid "3.3"
msgstr ""

#: ../../pep-3146.txt
msgid "Post-History"
msgstr ""

#: ../../pep-3146.txt:17
msgid "PEP Withdrawal"
msgstr ""

#: ../../pep-3146.txt:19
msgid ""
"With Unladen Swallow going the way of the Norwegian Blue [#us-post-"
"mortem]_ [#dead-parrot]_, this PEP has been deemed to have been "
"withdrawn."
msgstr ""

#: ../../pep-3146.txt:24
msgid "Abstract"
msgstr ""

#: ../../pep-3146.txt:26
msgid ""
"This PEP proposes the merger of the Unladen Swallow project [#us]_ into "
"CPython's source tree. Unladen Swallow is an open-source branch of "
"CPython focused on performance. Unladen Swallow is source-compatible with"
" valid Python 2.6.4 applications and C extension modules."
msgstr ""

#: ../../pep-3146.txt:31
msgid ""
"Unladen Swallow adds a just-in-time (JIT) compiler to CPython, allowing "
"for the compilation of selected Python code to optimized machine code. "
"Beyond classical static compiler optimizations, Unladen Swallow's JIT "
"compiler takes advantage of data collected at runtime to make checked "
"assumptions about code behaviour, allowing the production of faster "
"machine code."
msgstr ""

#: ../../pep-3146.txt:37
msgid ""
"This PEP proposes to integrate Unladen Swallow into CPython's development"
" tree in a separate ``py3k-jit`` branch, targeted for eventual merger "
"with the main ``py3k`` branch. While Unladen Swallow is by no means "
"finished or perfect, we feel that Unladen Swallow has reached sufficient "
"maturity to warrant incorporation into CPython's roadmap. We have sought "
"to create a stable platform that the wider CPython development team can "
"build upon, a platform that will yield increasing performance for years "
"to come."
msgstr ""

#: ../../pep-3146.txt:45
msgid ""
"This PEP will detail Unladen Swallow's implementation and how it differs "
"from CPython 2.6.4; the benchmarks used to measure performance; the tools"
" used to ensure correctness and compatibility; the impact on CPython's "
"current platform support; and the impact on the CPython core development "
"process. The PEP concludes with a proposed merger plan and brief notes on"
" possible directions for future work."
msgstr ""

#: ../../pep-3146.txt:52
msgid "We seek the following from the BDFL:"
msgstr ""

#: ../../pep-3146.txt:54
msgid ""
"Approval for the overall concept of adding a just-in-time compiler to "
"CPython, following the design laid out below."
msgstr ""

#: ../../pep-3146.txt:56
msgid ""
"Permission to continue working on the just-in-time compiler in the "
"CPython source tree."
msgstr ""

#: ../../pep-3146.txt:58
msgid ""
"Permission to eventually merge the just-in-time compiler into the "
"``py3k`` branch once all blocking issues [#us-punchlist]_ have been "
"addressed."
msgstr ""

#: ../../pep-3146.txt:60
msgid "A pony."
msgstr ""

#: ../../pep-3146.txt:64
msgid "Rationale, Implementation"
msgstr ""

#: ../../pep-3146.txt:66
msgid ""
"Many companies and individuals would like Python to be faster, to enable "
"its use in more projects. Google is one such company."
msgstr ""

#: ../../pep-3146.txt:69
msgid ""
"Unladen Swallow is a Google-sponsored branch of CPython, initiated to "
"improve the performance of Google's numerous Python libraries, tools and "
"applications. To make the adoption of Unladen Swallow as easy as "
"possible, the project initially aimed at four goals:"
msgstr ""

#: ../../pep-3146.txt:74
msgid ""
"A performance improvement of 5x over the baseline of CPython 2.6.4 for "
"single-threaded code."
msgstr ""

#: ../../pep-3146.txt:76
#, python-format
msgid "100% source compatibility with valid CPython 2.6 applications."
msgstr ""

#: ../../pep-3146.txt:77
#, python-format
msgid "100% source compatibility with valid CPython 2.6 C extension modules."
msgstr ""

#: ../../pep-3146.txt:78
msgid "Design for eventual merger back into CPython."
msgstr ""

#: ../../pep-3146.txt:80
msgid ""
"We chose 2.6.4 as our baseline because Google uses CPython 2.4 "
"internally, and jumping directly from CPython 2.4 to CPython 3.x was "
"considered infeasible."
msgstr ""

#: ../../pep-3146.txt:83
msgid ""
"To achieve the desired performance, Unladen Swallow has implemented a "
"just-in-time (JIT) compiler [#jit]_ in the tradition of Urs Hoelzle's "
"work on Self [#urs-self]_, gathering feedback at runtime and using that "
"to inform compile-time optimizations. This is similar to the approach "
"taken by the current breed of JavaScript engines [#v8]_, "
"[#squirrelfishextreme]_; most Java virtual machines [#hotspot]_; Rubinius"
" [#rubinius]_, MacRuby [#macruby]_, and other Ruby implementations; Psyco"
" [#psyco]_; and others."
msgstr ""

#: ../../pep-3146.txt:91
msgid ""
"We explicitly reject any suggestion that our ideas are original. We have "
"sought to reuse the published work of other researchers wherever "
"possible. If we have done any original work, it is by accident. We have "
"tried, as much as possible, to take good ideas from all corners of the "
"academic and industrial community. A partial list of the research papers "
"that have informed Unladen Swallow is available on the Unladen Swallow "
"wiki [#us-relevantpapers]_."
msgstr ""

#: ../../pep-3146.txt:98
msgid ""
"The key observation about optimizing dynamic languages is that they are "
"only dynamic in theory; in practice, each individual function or snippet "
"of code is relatively static, using a stable set of types and child "
"functions. The current CPython bytecode interpreter assumes the worst "
"about the code it is running, that at any moment the user might override "
"the ``len()`` function or pass a never-before-seen type into a function. "
"In practice this never happens, but user code pays for that support. "
"Unladen Swallow takes advantage of the relatively static nature of user "
"code to improve performance."
msgstr ""

#: ../../pep-3146.txt:107
msgid ""
"At a high level, the Unladen Swallow JIT compiler works by translating a "
"function's CPython bytecode to platform-specific machine code, using data"
" collected at runtime, as well as classical compiler optimizations, to "
"improve the quality of the generated machine code. Because we only want "
"to spend resources compiling Python code that will actually benefit the "
"runtime of the program, an online heuristic is used to assess how hot a "
"given function is. Once the hotness value for a function crosses a given "
"threshold, it is selected for compilation and optimization. Until a "
"function is judged hot, however, it runs in the standard CPython eval "
"loop, which in Unladen Swallow has been instrumented to record "
"interesting data about each bytecode executed. This runtime data is used "
"to reduce the flexibility of the generated machine code, allowing us to "
"optimize for the common case. For example, we collect data on"
msgstr ""

#: ../../pep-3146.txt:120
msgid ""
"Whether a branch was taken/not taken. If a branch is never taken, we will"
" not compile it to machine code."
msgstr ""

#: ../../pep-3146.txt:122
msgid ""
"Types used by operators. If we find that ``a + b`` is only ever adding "
"integers, the generated machine code for that snippet will not support "
"adding floats."
msgstr ""

#: ../../pep-3146.txt:125
msgid ""
"Functions called at each callsite. If we find that a particular ``foo()``"
" callsite is always calling the same ``foo`` function, we can optimize "
"the call or inline it away"
msgstr ""

#: ../../pep-3146.txt:129
msgid ""
"Refer to [#us-llvm-notes]_ for a complete list of data points gathered "
"and how they are used."
msgstr ""

#: ../../pep-3146.txt:132
msgid ""
"However, if by chance the historically-untaken branch is now taken, or "
"some integer-optimized ``a + b`` snippet receives two strings, we must "
"support this. We cannot change Python semantics. Each of these sections "
"of optimized machine code is preceded by a `guard`, which checks whether "
"the simplifying assumptions we made when optimizing still hold. If the "
"assumptions are still valid, we run the optimized machine code; if they "
"are not, we revert back to the interpreter and pick up where we left off."
msgstr ""

#: ../../pep-3146.txt:140
msgid ""
"We have chosen to reuse a set of existing compiler libraries called LLVM "
"[#llvm]_ for code generation and code optimization. This has saved our "
"small team from needing to understand and debug code generation on "
"multiple machine instruction sets and from needing to implement a large "
"set of classical compiler optimizations. The project would not have been "
"possible without such code reuse. We have found LLVM easy to modify and "
"its community receptive to our suggestions and modifications."
msgstr ""

#: ../../pep-3146.txt:148
msgid ""
"In somewhat more depth, Unladen Swallow's JIT works by compiling CPython "
"bytecode to LLVM's own intermediate representation (IR) [#llvm-langref]_,"
" taking into account any runtime data from the CPython eval loop. We then"
" run a set of LLVM's built-in optimization passes, producing a smaller, "
"optimized version of the original LLVM IR. LLVM then lowers the IR to "
"platform-specific machine code, performing register allocation, "
"instruction scheduling, and any necessary relocations. This arrangement "
"of the compilation pipeline allows the LLVM-based JIT to be easily "
"omitted from a compiled ``python`` binary by passing ``--without-llvm`` "
"to ``./configure``; various use cases for this flag are discussed later."
msgstr ""

#: ../../pep-3146.txt:159
msgid ""
"For a complete detailing of how Unladen Swallow works, consult the "
"Unladen Swallow documentation [#us-projectplan]_, [#us-llvm-notes]_."
msgstr ""

#: ../../pep-3146.txt:162
msgid ""
"Unladen Swallow has focused on improving the performance of single-"
"threaded, pure-Python code. We have not made an effort to remove "
"CPython's global interpreter lock (GIL); we feel this is separate from "
"our work, and due to its sensitivity, is best done in a mainline "
"development branch. We considered making GIL-removal a part of Unladen "
"Swallow, but were concerned by the possibility of introducing subtle bugs"
" when porting our work from CPython 2.6 to 3.x."
msgstr ""

#: ../../pep-3146.txt:170
msgid ""
"A JIT compiler is an extremely versatile tool, and we have by no means "
"exhausted its full potential. We have tried to create a sufficiently "
"flexible framework that the wider CPython development community can build"
" upon it for years to come, extracting increased performance in each "
"subsequent release."
msgstr ""

#: ../../pep-3146.txt:176
msgid "Alternatives"
msgstr ""

#: ../../pep-3146.txt:178
msgid ""
"There are number of alternative strategies for improving Python "
"performance which we considered, but found unsatisfactory."
msgstr ""

#: ../../pep-3146.txt:181
msgid ""
"*Cython, Shedskin*: Cython [#cython]_ and Shedskin [#shedskin]_ are both "
"static compilers for Python. We view these as useful-but-limited "
"workarounds for CPython's historically-poor performance. Shedskin does "
"not support the full Python standard library [#shedskin-library-limits]_,"
" while Cython requires manual Cython-specific annotations for optimum "
"performance."
msgstr ""

#: ../../pep-3146.txt:187
msgid ""
"Static compilers like these are useful for writing extension modules "
"without worrying about reference counting, but because they are static, "
"ahead-of-time compilers, they cannot optimize the full range of code "
"under consideration by a just-in-time compiler informed by runtime data."
msgstr ""

#: ../../pep-3146.txt:191
msgid ""
"*IronPython*: IronPython [#ironpython]_ is Python on Microsoft's .Net "
"platform. It is not actively tested on Mono [#mono]_, meaning that it is "
"essentially Windows-only, making it unsuitable as a general CPython "
"replacement."
msgstr ""

#: ../../pep-3146.txt:195
msgid ""
"*Jython*: Jython [#jython]_ is a complete implementation of Python 2.5, "
"but is significantly slower than Unladen Swallow (3-5x on measured "
"benchmarks) and has no support for CPython extension modules "
"[#jython-c-ext]_, which would make migration of large applications "
"prohibitively expensive."
msgstr ""

#: ../../pep-3146.txt:199
msgid ""
"*Psyco*: Psyco [#psyco]_ is a specializing JIT compiler for CPython, "
"implemented as an extension module. It primarily improves performance for"
" numerical code. Pros: exists; makes some code faster. Cons: 32-bit only,"
" with no plans for 64-bit support; supports x86 only; very difficult to "
"maintain; incompatible with SSE2 optimized code due to alignment issues."
msgstr ""

#: ../../pep-3146.txt:204
msgid ""
"*PyPy*: PyPy [#pypy]_ has good performance on numerical code, but is "
"slower than Unladen Swallow on some workloads. Migration of large "
"applications from CPython to PyPy would be prohibitively expensive: "
"PyPy's JIT compiler supports only 32-bit x86 code generation; important "
"modules, such as MySQLdb and pycrypto, do not build against PyPy; PyPy "
"does not offer an embedding API, much less the same API as CPython."
msgstr ""

#: ../../pep-3146.txt:210
msgid ""
"*PyV8*: PyV8 [#pyv8]_ is an alpha-stage experimental Python-to-JavaScript"
" compiler that runs on top of V8. PyV8 does not implement the whole "
"Python language, and has no support for CPython extension modules."
msgstr ""

#: ../../pep-3146.txt:213
msgid ""
"*WPython*: WPython [#wpython]_ is a wordcode-based reimplementation of "
"CPython's interpreter loop. While it provides a modest improvement to "
"interpreter performance [#wpython-performance]_, it is not an either-or "
"substitute for a just-in-time compiler. An interpreter will never be as "
"fast as optimized machine code. We view WPython and similar interpreter "
"enhancements as complementary to our work, rather than as competitors."
msgstr ""

#: ../../pep-3146.txt:223
msgid "Performance"
msgstr ""

#: ../../pep-3146.txt:226
msgid "Benchmarks"
msgstr ""

#: ../../pep-3146.txt:228
msgid ""
"Unladen Swallow has developed a fairly large suite of benchmarks, ranging"
" from synthetic microbenchmarks designed to test a single feature up "
"through whole-application macrobenchmarks. The inspiration for these "
"benchmarks has come variously from third-party contributors (in the case "
"of the ``html5lib`` benchmark), Google's own internal workloads "
"(``slowspitfire``, ``pickle``, ``unpickle``), as well as tools and "
"libraries in heavy use throughout the wider Python community (``django``,"
" ``2to3``, ``spambayes``). These benchmarks are run through a single "
"interface called ``perf.py`` that takes care of collecting memory usage "
"information, graphing performance, and running statistics on the "
"benchmark results to ensure significance."
msgstr ""

#: ../../pep-3146.txt:239
msgid ""
"The full list of available benchmarks is available on the Unladen Swallow"
" wiki [#us-benchmarks]_, including instructions on downloading and "
"running the benchmarks for yourself. All our benchmarks are open-source; "
"none are Google-proprietary. We believe this collection of benchmarks "
"serves as a useful tool to benchmark any complete Python implementation, "
"and indeed, PyPy is already using these benchmarks for their own "
"performance testing [#pypy-bmarks]_, [#us-wider-perf-issue]_. We welcome "
"this, and we seek additional workloads for the benchmark suite from the "
"Python community."
msgstr ""

#: ../../pep-3146.txt:248
msgid ""
"We have focused our efforts on collecting macrobenchmarks and benchmarks "
"that simulate real applications as well as possible, when running a whole"
" application is not feasible. Along a different axis, our benchmark "
"collection originally focused on the kinds of workloads seen by Google's "
"Python code (webapps, text processing), though we have since expanded the"
" collection to include workloads Google cares nothing about. We have so "
"far shied away from heavily numerical workloads, since NumPy [#numpy]_ "
"already does an excellent job on such code and so improving numerical "
"performance was not an initial high priority for the team; we have begun "
"to incorporate such benchmarks into the collection [#us-nbody]_ and have "
"started work on optimizing numerical Python code."
msgstr ""

#: ../../pep-3146.txt:259
msgid ""
"Beyond these benchmarks, there are also a variety of workloads we are "
"explicitly not interested in benchmarking. Unladen Swallow is focused on "
"improving the performance of pure-Python code, so the performance of "
"extension modules like NumPy is uninteresting since NumPy's core routines"
" are implemented in C. Similarly, workloads that involve a lot of IO like"
" GUIs, databases or socket-heavy applications would, we feel, fail to "
"accurately measure interpreter or code generation optimizations. That "
"said, there's certainly room to improve the performance of C-language "
"extensions modules in the standard library, and as such, we have added "
"benchmarks for the ``cPickle`` and ``re`` modules."
msgstr ""

#: ../../pep-3146.txt:271
msgid "Performance vs CPython 2.6.4"
msgstr ""

#: ../../pep-3146.txt:273
#, python-format
msgid ""
"The charts below compare the arithmetic mean of multiple benchmark "
"iterations for CPython 2.6.4 and Unladen Swallow. ``perf.py`` gathers "
"more data than this, and indeed, arithmetic mean is not the whole story; "
"we reproduce only the mean for the sake of conciseness. We include the "
"``t`` score from the Student's two-tailed T-test [#students-t-test]_ at "
"the 95% confidence interval to indicate the significance of the result. "
"Most benchmarks are run for 100 iterations, though some longer-running "
"whole-application benchmarks are run for fewer iterations."
msgstr ""

#: ../../pep-3146.txt:282
msgid ""
"A description of each of these benchmarks is available on the Unladen "
"Swallow wiki [#us-benchmarks]_."
msgstr ""

#: ../../pep-3146.txt:285
msgid "Command: ::"
msgstr ""

#: ../../pep-3146.txt:291
msgid ""
"32-bit; gcc 4.0.3; Ubuntu Dapper; Intel Core2 Duo 6600 @ 2.4GHz; 2 cores;"
" 4MB L2 cache; 4GB RAM"
msgstr ""

#: ../../pep-3146.txt:294 ../../pep-3146.txt:319 ../../pep-3146.txt:377
#: ../../pep-3146.txt:402
msgid "Benchmark"
msgstr ""

#: ../../pep-3146.txt:294 ../../pep-3146.txt:319 ../../pep-3146.txt:377
#: ../../pep-3146.txt:402 ../../pep-3146.txt:504 ../../pep-3146.txt:948
#: ../../pep-3146.txt:958 ../../pep-3146.txt:975
msgid "CPython 2.6.4"
msgstr ""

#: ../../pep-3146.txt:294 ../../pep-3146.txt:319 ../../pep-3146.txt:377
#: ../../pep-3146.txt:402 ../../pep-3146.txt:948 ../../pep-3146.txt:958
msgid "Unladen Swallow r988"
msgstr ""

#: ../../pep-3146.txt:294 ../../pep-3146.txt:319 ../../pep-3146.txt:377
#: ../../pep-3146.txt:402
msgid "Change"
msgstr ""

#: ../../pep-3146.txt:294 ../../pep-3146.txt:319
msgid "Significance"
msgstr ""

#: ../../pep-3146.txt:294 ../../pep-3146.txt:319 ../../pep-3146.txt:377
#: ../../pep-3146.txt:402
msgid "Timeline"
msgstr ""

#: ../../pep-3146.txt:296 ../../pep-3146.txt:321 ../../pep-3146.txt:379
#: ../../pep-3146.txt:404 ../../pep-3146.txt:590
msgid "2to3"
msgstr ""

#: ../../pep-3146.txt:296
msgid "25.13 s"
msgstr ""

#: ../../pep-3146.txt:296
msgid "24.87 s"
msgstr ""

#: ../../pep-3146.txt:296
msgid "1.01x faster"
msgstr ""

#: ../../pep-3146.txt:296
msgid "t=8.94"
msgstr ""

#: ../../pep-3146.txt:296
msgid "http://tinyurl.com/yamhrpg"
msgstr ""

#: ../../pep-3146.txt:298 ../../pep-3146.txt:323 ../../pep-3146.txt:381
#: ../../pep-3146.txt:406
msgid "django"
msgstr ""

#: ../../pep-3146.txt:298
msgid "1.08 s"
msgstr ""

#: ../../pep-3146.txt:298 ../../pep-3146.txt:329
msgid "0.80 s"
msgstr ""

#: ../../pep-3146.txt:298
msgid "1.35x faster"
msgstr ""

#: ../../pep-3146.txt:298
msgid "t=315.59"
msgstr ""

#: ../../pep-3146.txt:298
msgid "http://tinyurl.com/y9mrn8s"
msgstr ""

#: ../../pep-3146.txt:300 ../../pep-3146.txt:325 ../../pep-3146.txt:383
#: ../../pep-3146.txt:408
msgid "html5lib"
msgstr ""

#: ../../pep-3146.txt:300
msgid "14.29 s"
msgstr ""

#: ../../pep-3146.txt:300
msgid "13.20 s"
msgstr ""

#: ../../pep-3146.txt:300
msgid "1.08x faster"
msgstr ""

#: ../../pep-3146.txt:300
msgid "t=2.17"
msgstr ""

#: ../../pep-3146.txt:300
msgid "http://tinyurl.com/y8tyslu"
msgstr ""

#: ../../pep-3146.txt:302 ../../pep-3146.txt:327 ../../pep-3146.txt:385
#: ../../pep-3146.txt:410
msgid "nbody"
msgstr ""

#: ../../pep-3146.txt:302 ../../pep-3146.txt:335
msgid "0.51 s"
msgstr ""

#: ../../pep-3146.txt:302
msgid "0.28 s"
msgstr ""

#: ../../pep-3146.txt:302
msgid "1.84x faster"
msgstr ""

#: ../../pep-3146.txt:302
msgid "t=78.007"
msgstr ""

#: ../../pep-3146.txt:302
msgid "http://tinyurl.com/y989qhg"
msgstr ""

#: ../../pep-3146.txt:304 ../../pep-3146.txt:329 ../../pep-3146.txt:387
#: ../../pep-3146.txt:412
msgid "rietveld"
msgstr ""

#: ../../pep-3146.txt:304 ../../pep-3146.txt:306
msgid "0.75 s"
msgstr ""

#: ../../pep-3146.txt:304 ../../pep-3146.txt:306
msgid "0.55 s"
msgstr ""

#: ../../pep-3146.txt:304 ../../pep-3146.txt:306
msgid "1.37x faster"
msgstr ""

#: ../../pep-3146.txt:304 ../../pep-3146.txt:312 ../../pep-3146.txt:337
msgid "Insignificant"
msgstr ""

#: ../../pep-3146.txt:304
msgid "http://tinyurl.com/ye7mqd3"
msgstr ""

#: ../../pep-3146.txt:306 ../../pep-3146.txt:331 ../../pep-3146.txt:389
#: ../../pep-3146.txt:414
msgid "slowpickle"
msgstr ""

#: ../../pep-3146.txt:306
msgid "t=20.78"
msgstr ""

#: ../../pep-3146.txt:306
msgid "http://tinyurl.com/ybrsfnd"
msgstr ""

#: ../../pep-3146.txt:308 ../../pep-3146.txt:333 ../../pep-3146.txt:391
#: ../../pep-3146.txt:416
msgid "slowspitfire"
msgstr ""

#: ../../pep-3146.txt:308
msgid "0.83 s"
msgstr ""

#: ../../pep-3146.txt:308
msgid "0.61 s"
msgstr ""

#: ../../pep-3146.txt:308
msgid "1.36x faster"
msgstr ""

#: ../../pep-3146.txt:308
msgid "t=2124.66"
msgstr ""

#: ../../pep-3146.txt:308
msgid "http://tinyurl.com/yfknhaw"
msgstr ""

#: ../../pep-3146.txt:310 ../../pep-3146.txt:335 ../../pep-3146.txt:393
#: ../../pep-3146.txt:418
msgid "slowunpickle"
msgstr ""

#: ../../pep-3146.txt:310
msgid "0.33 s"
msgstr ""

#: ../../pep-3146.txt:310
msgid "0.26 s"
msgstr ""

#: ../../pep-3146.txt:310
msgid "1.26x faster"
msgstr ""

#: ../../pep-3146.txt:310
msgid "t=15.12"
msgstr ""

#: ../../pep-3146.txt:310
msgid "http://tinyurl.com/yzlakoo"
msgstr ""

#: ../../pep-3146.txt:312 ../../pep-3146.txt:337 ../../pep-3146.txt:395
#: ../../pep-3146.txt:420
msgid "spambayes"
msgstr ""

#: ../../pep-3146.txt:312
msgid "0.31 s"
msgstr ""

#: ../../pep-3146.txt:312 ../../pep-3146.txt:335
msgid "0.34 s"
msgstr ""

#: ../../pep-3146.txt:312
msgid "1.10x slower"
msgstr ""

#: ../../pep-3146.txt:312 ../../pep-3146.txt:395
msgid "http://tinyurl.com/yem62ub"
msgstr ""

#: ../../pep-3146.txt:316
msgid ""
"64-bit; gcc 4.2.4; Ubuntu Hardy; AMD Opteron 8214 HE @ 2.2 GHz; 4 cores; "
"1MB L2 cache; 8GB RAM"
msgstr ""

#: ../../pep-3146.txt:321
msgid "31.98 s"
msgstr ""

#: ../../pep-3146.txt:321
msgid "30.41 s"
msgstr ""

#: ../../pep-3146.txt:321
msgid "1.05x faster"
msgstr ""

#: ../../pep-3146.txt:321
msgid "t=8.35"
msgstr ""

#: ../../pep-3146.txt:321
msgid "http://tinyurl.com/ybcrl3b"
msgstr ""

#: ../../pep-3146.txt:323
msgid "1.22 s"
msgstr ""

#: ../../pep-3146.txt:323
msgid "0.94 s"
msgstr ""

#: ../../pep-3146.txt:323
msgid "1.30x faster"
msgstr ""

#: ../../pep-3146.txt:323
msgid "t=106.68"
msgstr ""

#: ../../pep-3146.txt:323
msgid "http://tinyurl.com/ybwqll6"
msgstr ""

#: ../../pep-3146.txt:325
msgid "18.97 s"
msgstr ""

#: ../../pep-3146.txt:325
msgid "17.79 s"
msgstr ""

#: ../../pep-3146.txt:325
msgid "1.06x faster"
msgstr ""

#: ../../pep-3146.txt:325
msgid "t=2.78"
msgstr ""

#: ../../pep-3146.txt:325
msgid "http://tinyurl.com/yzlyqvk"
msgstr ""

#: ../../pep-3146.txt:327
msgid "0.77 s"
msgstr ""

#: ../../pep-3146.txt:327
msgid "0.27 s"
msgstr ""

#: ../../pep-3146.txt:327
msgid "2.86x faster"
msgstr ""

#: ../../pep-3146.txt:327
msgid "t=133.49"
msgstr ""

#: ../../pep-3146.txt:327
msgid "http://tinyurl.com/yeyqhbg"
msgstr ""

#: ../../pep-3146.txt:329
msgid "0.74 s"
msgstr ""

#: ../../pep-3146.txt:329
msgid "1.08x slower"
msgstr ""

#: ../../pep-3146.txt:329
msgid "t=-2.45"
msgstr ""

#: ../../pep-3146.txt:329
msgid "http://tinyurl.com/yzjc6ff"
msgstr ""

#: ../../pep-3146.txt:331
msgid "0.91 s"
msgstr ""

#: ../../pep-3146.txt:331
msgid "0.62 s"
msgstr ""

#: ../../pep-3146.txt:331
msgid "1.48x faster"
msgstr ""

#: ../../pep-3146.txt:331
msgid "t=28.04"
msgstr ""

#: ../../pep-3146.txt:331
msgid "http://tinyurl.com/yf7en6k"
msgstr ""

#: ../../pep-3146.txt:333
msgid "1.01 s"
msgstr ""

#: ../../pep-3146.txt:333
msgid "0.72 s"
msgstr ""

#: ../../pep-3146.txt:333
msgid "1.40x faster"
msgstr ""

#: ../../pep-3146.txt:333
msgid "t=98.70"
msgstr ""

#: ../../pep-3146.txt:333
msgid "http://tinyurl.com/yc8pe2o"
msgstr ""

#: ../../pep-3146.txt:335
msgid "1.51x faster"
msgstr ""

#: ../../pep-3146.txt:335
msgid "t=32.65"
msgstr ""

#: ../../pep-3146.txt:335
msgid "http://tinyurl.com/yjufu4j"
msgstr ""

#: ../../pep-3146.txt:337
msgid "0.43 s"
msgstr ""

#: ../../pep-3146.txt:337
msgid "0.45 s"
msgstr ""

#: ../../pep-3146.txt:337
msgid "1.06x slower"
msgstr ""

#: ../../pep-3146.txt:337
msgid "http://tinyurl.com/yztbjfp"
msgstr ""

#: ../../pep-3146.txt:341
msgid ""
"Many of these benchmarks take a hit under Unladen Swallow because the "
"current version blocks execution to compile Python functions down to "
"machine code. This leads to the behaviour seen in the timeline graphs for"
" the ``html5lib`` and ``rietveld`` benchmarks, for example, and slows "
"down the overall performance of ``2to3``. We have an active development "
"branch to fix this problem ([#us-background-thread]_, [#us-background-"
"thread-issue]_), but working within the strictures of CPython's current "
"threading system has complicated the process and required far more care "
"and time than originally anticipated. We view this issue as critical to "
"final merger into the ``py3k`` branch."
msgstr ""

#: ../../pep-3146.txt:351
msgid ""
"We have obviously not met our initial goal of a 5x performance "
"improvement. A `performance retrospective`_ follows, which addresses why "
"we failed to meet our initial performance goal. We maintain a list of "
"yet-to-be-implemented performance work [#us-perf-punchlist]_."
msgstr ""

#: ../../pep-3146.txt:358
msgid "Memory Usage"
msgstr ""

#: ../../pep-3146.txt:360
msgid ""
"The following table shows maximum memory usage (in kilobytes) for each of"
" Unladen Swallow's default benchmarks for both CPython 2.6.4 and Unladen "
"Swallow r988, as well as a timeline of memory usage across the lifetime "
"of the benchmark. We include tables for both 32- and 64-bit binaries. "
"Memory usage was measured on Linux 2.6 systems by summing the "
"``Private_`` sections from the kernel's ``/proc/$pid/smaps`` pseudo-files"
" [#smaps]_."
msgstr ""

#: ../../pep-3146.txt:367
msgid "Command:"
msgstr ""

#: ../../pep-3146.txt:374 ../../pep-3146.txt:506
msgid "32-bit"
msgstr ""

#: ../../pep-3146.txt:379
msgid "26396 kb"
msgstr ""

#: ../../pep-3146.txt:379
msgid "46896 kb"
msgstr ""

#: ../../pep-3146.txt:379
msgid "1.77x"
msgstr ""

#: ../../pep-3146.txt:379
msgid "http://tinyurl.com/yhr2h4z"
msgstr ""

#: ../../pep-3146.txt:381
msgid "10028 kb"
msgstr ""

#: ../../pep-3146.txt:381
msgid "27740 kb"
msgstr ""

#: ../../pep-3146.txt:381
msgid "2.76x"
msgstr ""

#: ../../pep-3146.txt:381
msgid "http://tinyurl.com/yhan8vs"
msgstr ""

#: ../../pep-3146.txt:383
msgid "150028 kb"
msgstr ""

#: ../../pep-3146.txt:383
msgid "173924 kb"
msgstr ""

#: ../../pep-3146.txt:383
msgid "1.15x"
msgstr ""

#: ../../pep-3146.txt:383
msgid "http://tinyurl.com/ybt44en"
msgstr ""

#: ../../pep-3146.txt:385
msgid "3020 kb"
msgstr ""

#: ../../pep-3146.txt:385
msgid "16036 kb"
msgstr ""

#: ../../pep-3146.txt:385
msgid "5.31x"
msgstr ""

#: ../../pep-3146.txt:385
msgid "http://tinyurl.com/ya8hltw"
msgstr ""

#: ../../pep-3146.txt:387
msgid "15008 kb"
msgstr ""

#: ../../pep-3146.txt:387
msgid "46400 kb"
msgstr ""

#: ../../pep-3146.txt:387
msgid "3.09x"
msgstr ""

#: ../../pep-3146.txt:387
msgid "http://tinyurl.com/yhd5dra"
msgstr ""

#: ../../pep-3146.txt:389
msgid "4608 kb"
msgstr ""

#: ../../pep-3146.txt:389
msgid "16656 kb"
msgstr ""

#: ../../pep-3146.txt:389
msgid "3.61x"
msgstr ""

#: ../../pep-3146.txt:389
msgid "http://tinyurl.com/ybukyvo"
msgstr ""

#: ../../pep-3146.txt:391
msgid "85776 kb"
msgstr ""

#: ../../pep-3146.txt:391
msgid "97620 kb"
msgstr ""

#: ../../pep-3146.txt:391
msgid "1.13x"
msgstr ""

#: ../../pep-3146.txt:391
msgid "http://tinyurl.com/y9vj35z"
msgstr ""

#: ../../pep-3146.txt:393
msgid "3448 kb"
msgstr ""

#: ../../pep-3146.txt:393
msgid "13744 kb"
msgstr ""

#: ../../pep-3146.txt:393
msgid "3.98x"
msgstr ""

#: ../../pep-3146.txt:393
msgid "http://tinyurl.com/yexh4d5"
msgstr ""

#: ../../pep-3146.txt:395
msgid "7352 kb"
msgstr ""

#: ../../pep-3146.txt:395
msgid "46480 kb"
msgstr ""

#: ../../pep-3146.txt:395
msgid "6.32x"
msgstr ""

#: ../../pep-3146.txt:399 ../../pep-3146.txt:508
msgid "64-bit"
msgstr ""

#: ../../pep-3146.txt:404
msgid "51596 kb"
msgstr ""

#: ../../pep-3146.txt:404
msgid "82340 kb"
msgstr ""

#: ../../pep-3146.txt:404
msgid "1.59x"
msgstr ""

#: ../../pep-3146.txt:404
msgid "http://tinyurl.com/yljg6rs"
msgstr ""

#: ../../pep-3146.txt:406
msgid "16020 kb"
msgstr ""

#: ../../pep-3146.txt:406
msgid "38908 kb"
msgstr ""

#: ../../pep-3146.txt:406
msgid "2.43x"
msgstr ""

#: ../../pep-3146.txt:406
msgid "http://tinyurl.com/ylqsebh"
msgstr ""

#: ../../pep-3146.txt:408
msgid "259232 kb"
msgstr ""

#: ../../pep-3146.txt:408
msgid "324968 kb"
msgstr ""

#: ../../pep-3146.txt:408
msgid "1.25x"
msgstr ""

#: ../../pep-3146.txt:408
msgid "http://tinyurl.com/yha6oee"
msgstr ""

#: ../../pep-3146.txt:410
msgid "4296 kb"
msgstr ""

#: ../../pep-3146.txt:410
msgid "23012 kb"
msgstr ""

#: ../../pep-3146.txt:410
msgid "5.35x"
msgstr ""

#: ../../pep-3146.txt:410
msgid "http://tinyurl.com/yztozza"
msgstr ""

#: ../../pep-3146.txt:412
msgid "24140 kb"
msgstr ""

#: ../../pep-3146.txt:412
msgid "73960 kb"
msgstr ""

#: ../../pep-3146.txt:412
msgid "3.06x"
msgstr ""

#: ../../pep-3146.txt:412
msgid "http://tinyurl.com/ybg2nq7"
msgstr ""

#: ../../pep-3146.txt:414
msgid "4928 kb"
msgstr ""

#: ../../pep-3146.txt:414
msgid "23300 kb"
msgstr ""

#: ../../pep-3146.txt:414
msgid "4.73x"
msgstr ""

#: ../../pep-3146.txt:414
msgid "http://tinyurl.com/yk5tpbr"
msgstr ""

#: ../../pep-3146.txt:416
msgid "133276 kb"
msgstr ""

#: ../../pep-3146.txt:416
msgid "148676 kb"
msgstr ""

#: ../../pep-3146.txt:416
msgid "1.11x"
msgstr ""

#: ../../pep-3146.txt:416
msgid "http://tinyurl.com/y8bz2xe"
msgstr ""

#: ../../pep-3146.txt:418
msgid "4896 kb"
msgstr ""

#: ../../pep-3146.txt:418
msgid "16948 kb"
msgstr ""

#: ../../pep-3146.txt:418
msgid "3.46x"
msgstr ""

#: ../../pep-3146.txt:418
msgid "http://tinyurl.com/ygywwoc"
msgstr ""

#: ../../pep-3146.txt:420
msgid "10728 kb"
msgstr ""

#: ../../pep-3146.txt:420
msgid "84992 kb"
msgstr ""

#: ../../pep-3146.txt:420
msgid "7.92x"
msgstr ""

#: ../../pep-3146.txt:420
msgid "http://tinyurl.com/yhjban5"
msgstr ""

#: ../../pep-3146.txt:424
msgid ""
"The increased memory usage comes from a) LLVM code generation, analysis "
"and optimization libraries; b) native code; c) memory usage issues or "
"leaks in LLVM; d) data structures needed to optimize and generate machine"
" code; e) as-yet uncategorized other sources."
msgstr ""

#: ../../pep-3146.txt:429
msgid ""
"While we have made significant progress in reducing memory usage since "
"the initial naive JIT implementation [#us-memory-issue]_, there is "
"obviously more to do. We believe that there are still memory savings to "
"be made without sacrificing performance. We have tended to focus on raw "
"performance, and we have not yet made a concerted push to reduce memory "
"usage. We view reducing memory usage as a blocking issue for final merger"
" into the ``py3k`` branch. We seek guidance from the community on an "
"acceptable level of increased memory usage."
msgstr ""

#: ../../pep-3146.txt:440
msgid "Start-up Time"
msgstr ""

#: ../../pep-3146.txt:442
msgid ""
"Statically linking LLVM's code generation, analysis and optimization "
"libraries increases the time needed to start the Python binary. C++ "
"static initializers used by LLVM also increase start-up time, as does "
"importing the collection of pre-compiled C runtime routines we want to "
"inline to Python code."
msgstr ""

#: ../../pep-3146.txt:447
msgid "Results from Unladen Swallow's ``startup`` benchmarks:"
msgstr ""

#: ../../pep-3146.txt:482
msgid ""
"``bzr_startup`` and ``hg_startup`` measure how long it takes Bazaar and "
"Mercurial, respectively, to display their help screens. "
"``startup_nosite`` runs ``python -S`` many times; usage of the ``-S`` "
"option is rare, but we feel this gives a good indication of where "
"increased startup time is coming from."
msgstr ""

#: ../../pep-3146.txt:487
msgid ""
"Unladen Swallow has made headway toward optimizing startup time, but "
"there is still more work to do and further optimizations to implement. "
"Improving start-up time is a high-priority item [#us-issue-startup-time]_"
" in Unladen Swallow's merger punchlist."
msgstr ""

#: ../../pep-3146.txt:494
msgid "Binary Size"
msgstr ""

#: ../../pep-3146.txt:496
msgid ""
"Statically linking LLVM's code generation, analysis and optimization "
"libraries significantly increases the size of the ``python`` binary. The "
"tables below report stripped on-disk binary sizes; the binaries are "
"stripped to better correspond with the configurations used by system "
"package managers. We feel this is the most realistic measure of any "
"change in binary size."
msgstr ""

#: ../../pep-3146.txt:504
msgid "Binary size"
msgstr ""

#: ../../pep-3146.txt:504 ../../pep-3146.txt:948 ../../pep-3146.txt:958
#: ../../pep-3146.txt:975
msgid "CPython 3.1.1"
msgstr ""

#: ../../pep-3146.txt:504
msgid "Unladen Swallow r1041"
msgstr ""

#: ../../pep-3146.txt:506
msgid "1.3M"
msgstr ""

#: ../../pep-3146.txt:506
msgid "1.4M"
msgstr ""

#: ../../pep-3146.txt:506 ../../pep-3146.txt:508
msgid "12M"
msgstr ""

#: ../../pep-3146.txt:508
msgid "1.6M"
msgstr ""

#: ../../pep-3146.txt:512
msgid ""
"The increased binary size is caused by statically linking LLVM's code "
"generation, analysis and optimization libraries into the ``python`` "
"binary. This can be straightforwardly addressed by modifying LLVM to "
"better support shared linking and then using that, instead of the current"
" static linking. For the moment, though, static linking provides an "
"accurate look at the cost of linking against LLVM."
msgstr ""

#: ../../pep-3146.txt:519
msgid ""
"Even when statically linking, we believe there is still headroom to "
"improve on-disk binary size by narrowing Unladen Swallow's dependencies "
"on LLVM. This issue is actively being addressed [#us-binary-size]_."
msgstr ""

#: ../../pep-3146.txt:525
msgid "Performance Retrospective"
msgstr ""

#: ../../pep-3146.txt:527
msgid ""
"Our initial goal for Unladen Swallow was a 5x performance improvement "
"over CPython 2.6. We did not hit that, nor to put it bluntly, even come "
"close. Why did the project not hit that goal, and can an LLVM-based JIT "
"ever hit that goal?"
msgstr ""

#: ../../pep-3146.txt:531
msgid ""
"Why did Unladen Swallow not achieve its 5x goal? The primary reason was "
"that LLVM required more work than we had initially anticipated. Based on "
"the fact that Apple was shipping products based on LLVM [#llvm-users]_, "
"and other high-level languages had successfully implemented LLVM-based "
"JITs ([#rubinius]_, [#macruby]_, [#hlvm]_), we had assumed that LLVM's "
"JIT was relatively free of show-stopper bugs."
msgstr ""

#: ../../pep-3146.txt:538
msgid ""
"That turned out to be incorrect. We had to turn our attention away from "
"performance to fix a number of critical bugs in LLVM's JIT infrastructure"
" (for example, [#llvm-far-call-issue]_, [#llvm-jmm-rev]_) as well as a "
"number of nice-to-have enhancements that would enable further "
"optimizations along various axes (for example, [#llvm-globaldce-rev]_, "
"[#llvm-memleak-rev]_, [#llvm-availext-issue]_). LLVM's static code "
"generation facilities, tools and optimization passes are stable and "
"stress-tested, but the just-in-time infrastructure was relatively "
"untested and buggy. We have fixed this."
msgstr ""

#: ../../pep-3146.txt:548
msgid ""
"(Our hypothesis is that we hit these problems -- problems other projects "
"had avoided -- because of the complexity and thoroughness of CPython's "
"standard library test suite.)"
msgstr ""

#: ../../pep-3146.txt:552
msgid ""
"We also diverted engineering effort away from performance and into "
"support tools such as gdb and oProfile. gdb did not work well with JIT "
"compilers at all, and LLVM previously had no integration with oProfile. "
"Having JIT-aware debuggers and profilers has been very valuable to the "
"project, and we do not regret channeling our time in these directions. "
"See the `Debugging`_ and `Profiling`_ sections for more information."
msgstr ""

#: ../../pep-3146.txt:559
msgid ""
"Can an LLVM-based CPython JIT ever hit the 5x performance target? The "
"benchmark results for JIT-based JavaScript implementations suggest that "
"5x is indeed possible, as do the results PyPy's JIT has delivered for "
"numeric workloads. The experience of Self-92 [#urs-self]_ is also "
"instructive."
msgstr ""

#: ../../pep-3146.txt:564
msgid ""
"Can LLVM deliver this? We believe that we have only begun to scratch the "
"surface of what our LLVM-based JIT can deliver. The optimizations we have"
" incorporated into this system thus far have borne significant fruit (for"
" example, [#us-specialization-issue]_, [#us-direct-calling-issue]_, [#us-"
"fast-globals-issue]_). Our experience to date is that the limiting factor"
" on Unladen Swallow's performance is the engineering cycles needed to "
"implement the literature. We have found LLVM easy to work with and to "
"modify, and its built-in optimizations have greatly simplified the task "
"of implementing Python-level optimizations."
msgstr ""

#: ../../pep-3146.txt:574
msgid ""
"An overview of further performance opportunities is discussed in the "
"`Future Work`_ section."
msgstr ""

#: ../../pep-3146.txt:580
msgid "Correctness and Compatibility"
msgstr ""

#: ../../pep-3146.txt:582
msgid ""
"Unladen Swallow's correctness test suite includes CPython's test suite "
"(under ``Lib/test/``), as well as a number of important third-party "
"applications and libraries [#tested-apps]_. A full list of these "
"applications and libraries is reproduced below. Any dependencies needed "
"by these packages, such as ``zope.interface`` [#zope-interface]_, are "
"also tested indirectly as a part of testing the primary package, thus "
"widening the corpus of tested third-party Python code."
msgstr ""

#: ../../pep-3146.txt:591
msgid "Cheetah"
msgstr ""

#: ../../pep-3146.txt:592
msgid "cvs2svn"
msgstr ""

#: ../../pep-3146.txt:593
msgid "Django"
msgstr ""

#: ../../pep-3146.txt:594
msgid "Nose"
msgstr ""

#: ../../pep-3146.txt:595
msgid "NumPy"
msgstr ""

#: ../../pep-3146.txt:596
msgid "PyCrypto"
msgstr ""

#: ../../pep-3146.txt:597
msgid "pyOpenSSL"
msgstr ""

#: ../../pep-3146.txt:598
msgid "PyXML"
msgstr ""

#: ../../pep-3146.txt:599
msgid "Setuptools"
msgstr ""

#: ../../pep-3146.txt:600
msgid "SQLAlchemy"
msgstr ""

#: ../../pep-3146.txt:601
msgid "SWIG"
msgstr ""

#: ../../pep-3146.txt:602
msgid "SymPy"
msgstr ""

#: ../../pep-3146.txt:603
msgid "Twisted"
msgstr ""

#: ../../pep-3146.txt:604
msgid "ZODB"
msgstr ""

#: ../../pep-3146.txt:606
msgid ""
"These applications pass all relevant tests when run under Unladen "
"Swallow. Note that some tests that failed against our baseline of CPython"
" 2.6.4 were disabled, as were tests that made assumptions about CPython "
"internals such as exact bytecode numbers or bytecode format. Any package "
"with disabled tests includes a ``README.unladen`` file that details the "
"changes (for example, [#us-sqlalchemy-readme]_)."
msgstr ""

#: ../../pep-3146.txt:613
msgid ""
"In addition, Unladen Swallow is tested automatically against an array of "
"internal Google Python libraries and applications. These include Google's"
" internal Python bindings for BigTable [#bigtable]_, the Mondrian code "
"review application [#mondrian]_, and Google's Python standard library, "
"among others. The changes needed to run these projects under Unladen "
"Swallow have consistently broken into one of three camps:"
msgstr ""

#: ../../pep-3146.txt:620
msgid ""
"Adding CPython 2.6 C API compatibility. Since Google still primarily uses"
" CPython 2.4 internally, we have needed to convert uses of ``int`` to "
"``Py_ssize_t`` and similar API changes."
msgstr ""

#: ../../pep-3146.txt:623
msgid ""
"Fixing or disabling explicit, incorrect tests of the CPython version "
"number."
msgstr ""

#: ../../pep-3146.txt:624
msgid ""
"Conditionally disabling code that worked around or depending on bugs in "
"CPython 2.4 that have since been fixed."
msgstr ""

#: ../../pep-3146.txt:627
msgid ""
"Testing against this wide range of public and proprietary applications "
"and libraries has been instrumental in ensuring the correctness of "
"Unladen Swallow. Testing has exposed bugs that we have duly corrected. "
"Our automated regression testing regime has given us high confidence in "
"our changes as we have moved forward."
msgstr ""

#: ../../pep-3146.txt:633
msgid ""
"In addition to third-party testing, we have added further tests to "
"CPython's test suite for corner cases of the language or implementation "
"that we felt were untested or underspecified (for example, [#us-import-"
"tests]_, [#us-tracing-tests]_). These have been especially important when"
" implementing optimizations, helping make sure we have not accidentally "
"broken the darker corners of Python."
msgstr ""

#: ../../pep-3146.txt:640
msgid ""
"We have also constructed a test suite focused solely on the LLVM-based "
"JIT compiler and the optimizations implemented for it [#us-test_llvm]_. "
"Because of the complexity and subtlety inherent in writing an optimizing "
"compiler, we have attempted to exhaustively enumerate the constructs, "
"scenarios and corner cases we are compiling and optimizing. The JIT tests"
" also include tests for things like the JIT hotness model, making it "
"easier for future CPython developers to maintain and improve."
msgstr ""

#: ../../pep-3146.txt:648
msgid ""
"We have recently begun using fuzz testing [#fuzz-testing]_ to stress-test"
" the compiler. We have used both pyfuzz [#pyfuzz]_ and Fusil [#fusil]_ in"
" the past, and we recommend they be introduced as an automated part of "
"the CPython testing process."
msgstr ""

#: ../../pep-3146.txt:654
msgid "Known Incompatibilities"
msgstr ""

#: ../../pep-3146.txt:656
msgid ""
"The only application or library we know to not work with Unladen Swallow "
"that does work with CPython 2.6.4 is Psyco [#psyco]_. We are aware of "
"some libraries such as PyGame [#pygame]_ that work well with CPython "
"2.6.4, but suffer some degradation due to changes made in Unladen "
"Swallow. We are tracking this issue [#us-background-thread-issue]_ and "
"are working to resolve these instances of degradation."
msgstr ""

#: ../../pep-3146.txt:663
msgid ""
"While Unladen Swallow is source-compatible with CPython 2.6.4, it is not "
"binary compatible. C extension modules compiled against one will need to "
"be recompiled to work with the other."
msgstr ""

#: ../../pep-3146.txt:667
msgid ""
"The merger of Unladen Swallow should have minimal impact on long-lived "
"CPython optimization branches like WPython. WPython [#wpython]_ and "
"Unladen Swallow are largely orthogonal, and there is no technical reason "
"why both could not be merged into CPython. The changes needed to make "
"WPython compatible with a JIT-enhanced version of CPython should be "
"minimal [#us-wpython-compat]_. The same should be true for other CPython "
"optimization projects (for example, [#asher-rotem]_)."
msgstr ""

#: ../../pep-3146.txt:675
msgid ""
"Invasive forks of CPython such as Stackless Python [#stackless]_ are more"
" challenging to support. Since Stackless is highly unlikely to be merged "
"into CPython [#stackless-merger]_ and an increased maintenance burden is "
"part and parcel of any fork, we consider compatibility with Stackless to "
"be relatively low-priority. JIT-compiled stack frames use the C stack, so"
" Stackless should be able to treat them the same as it treats calls "
"through extension modules. If that turns out to be unacceptable, "
"Stackless could either remove the JIT compiler or improve JIT code "
"generation to better support heap-based stack frames [#llvm-heap-"
"frames]_, [#llvm-heap-frames-disc]_."
msgstr ""

#: ../../pep-3146.txt:687
msgid "Platform Support"
msgstr ""

#: ../../pep-3146.txt:689
msgid ""
"Unladen Swallow is inherently limited by the platform support provided by"
" LLVM, especially LLVM's JIT compilation system [#llvm-hardware]_. LLVM's"
" JIT has the best support on x86 and x86-64 systems, and these are the "
"platforms where Unladen Swallow has received the most testing. We are "
"confident in LLVM/Unladen Swallow's support for x86 and x86-64 hardware. "
"PPC and ARM support exists, but is not widely used and may be buggy (for "
"example, [#llvm-ppc-eager-jit-issue]_, [#llvm-far-call-issue]_, [#llvm-"
"arm-jit-issue]_)."
msgstr ""

#: ../../pep-3146.txt:697
msgid ""
"Unladen Swallow is known to work on the following operating systems: "
"Linux, Darwin, Windows. Unladen Swallow has received the most testing on "
"Linux and Darwin, though it still builds and passes its tests on Windows."
msgstr ""

#: ../../pep-3146.txt:701
msgid ""
"In order to support hardware and software platforms where LLVM's JIT does"
" not work, Unladen Swallow provides a ``./configure --without-llvm`` "
"option. This flag carves out any part of Unladen Swallow that depends on "
"LLVM, yielding a Python binary that works and passes its tests, but has "
"no performance advantages. This configuration is recommended for hardware"
" unsupported by LLVM, or systems that care more about memory usage than "
"performance."
msgstr ""

#: ../../pep-3146.txt:710
msgid "Impact on CPython Development"
msgstr ""

#: ../../pep-3146.txt:713
msgid "Experimenting with Changes to Python or CPython Bytecode"
msgstr ""

#: ../../pep-3146.txt:715
msgid ""
"Unladen Swallow's JIT compiler operates on CPython bytecode, and as such,"
" it is immune to Python language changes that affect only the parser."
msgstr ""

#: ../../pep-3146.txt:718
msgid ""
"We recommend that changes to the CPython bytecode compiler or the "
"semantics of individual bytecodes be prototyped in the interpreter loop "
"first, then be ported to the JIT compiler once the semantics are clear. "
"To make this easier, Unladen Swallow includes a ``--without-llvm`` "
"configure-time option that strips out the JIT compiler and all associated"
" infrastructure. This leaves the current burden of experimentation "
"unchanged so that developers can prototype in the current low-barrier-to-"
"entry interpreter loop."
msgstr ""

#: ../../pep-3146.txt:726
msgid ""
"Unladen Swallow began implementing its JIT compiler by doing "
"straightforward, naive translations from bytecode implementations into "
"LLVM API calls. We found this process to be easily understood, and we "
"recommend the same approach for CPython. We include several sample "
"changes from the Unladen Swallow repository here as examples of this "
"style of development: [#us-r359]_, [#us-r376]_, [#us-r417]_, [#us-r517]_."
msgstr ""

#: ../../pep-3146.txt:735
msgid "Debugging"
msgstr ""

#: ../../pep-3146.txt:737
msgid ""
"The Unladen Swallow team implemented changes to gdb to make it easier to "
"use gdb to debug JIT-compiled Python code. These changes were released in"
" gdb 7.0 [#gdb70]_. They make it possible for gdb to identify and unwind "
"past JIT-generated call stack frames. This allows gdb to continue to "
"function as before for CPython development if one is changing, for "
"example, the ``list`` type or builtin functions."
msgstr ""

#: ../../pep-3146.txt:744
msgid ""
"Example backtrace after our changes, where ``baz``, ``bar`` and ``foo`` "
"are JIT-compiled:"
msgstr ""

#: ../../pep-3146.txt:764
msgid ""
"Previously, the JIT-compiled frames would have caused gdb to unwind "
"incorrectly, generating lots of obviously-incorrect ``#6 "
"0x00002aaaabe7d0aa in ?? ()``-style stack frames."
msgstr ""

#: ../../pep-3146.txt:768 ../../pep-3146.txt:832 ../../pep-3146.txt:865
msgid "Highlights:"
msgstr ""

#: ../../pep-3146.txt:770
msgid ""
"gdb 7.0 is able to correctly parse JIT-compiled stack frames, allowing "
"full use of gdb on non-JIT-compiled functions, that is, the vast majority"
" of the CPython codebase."
msgstr ""

#: ../../pep-3146.txt:773
msgid ""
"Disassembling inside a JIT-compiled stack frame automatically prints the "
"full list of instructions making up that function. This is an advance "
"over the state of gdb before our work: developers needed to guess the "
"starting address of the function and manually disassemble the assembly "
"code."
msgstr ""

#: ../../pep-3146.txt:777
msgid ""
"Flexible underlying mechanism allows CPython to add more and more "
"information, and eventually reach parity with C/C++ support in gdb for "
"JIT-compiled machine code."
msgstr ""

#: ../../pep-3146.txt:781 ../../pep-3146.txt:836 ../../pep-3146.txt:873
msgid "Lowlights:"
msgstr ""

#: ../../pep-3146.txt:783
msgid ""
"gdb cannot print local variables or tell you what line you're currently "
"executing inside a JIT-compiled function. Nor can it step through JIT-"
"compiled code, except for one instruction at a time."
msgstr ""

#: ../../pep-3146.txt:786
msgid ""
"Not yet integrated with Apple's gdb or Microsoft's Visual Studio "
"debuggers."
msgstr ""

#: ../../pep-3146.txt:788
msgid ""
"The Unladen Swallow team is working with Apple to get these changes "
"incorporated into their future gdb releases."
msgstr ""

#: ../../pep-3146.txt:793
msgid "Profiling"
msgstr ""

#: ../../pep-3146.txt:795
msgid ""
"Unladen Swallow integrates with oProfile 0.9.4 and newer [#oprofile]_ to "
"support assembly-level profiling on Linux systems. This means that "
"oProfile will correctly symbolize JIT-compiled functions in its reports."
msgstr ""

#: ../../pep-3146.txt:799
msgid ""
"Example report, where the ``#u#``-prefixed symbol names are JIT-compiled "
"Python functions:"
msgstr ""

#: ../../pep-3146.txt:828
msgid ""
"This support is functional, but as-yet unpolished. Unladen Swallow "
"maintains a punchlist of items we feel are important to improve in our "
"oProfile integration to make it more useful to core CPython developers "
"[#us-oprofile-punchlist]_."
msgstr ""

#: ../../pep-3146.txt:834
msgid "Symbolization of JITted frames working in oProfile on Linux."
msgstr ""

#: ../../pep-3146.txt:838
msgid ""
"No work yet invested in improving symbolization of JIT-compiled frames "
"for Apple's Shark [#shark]_ or Microsoft's Visual Studio profiling tools."
msgstr ""

#: ../../pep-3146.txt:840
msgid "Some polishing still desired for oProfile output."
msgstr ""

#: ../../pep-3146.txt:842
msgid ""
"We recommend using oProfile 0.9.5 (and newer) to work around a now-fixed "
"bug on x86-64 platforms in oProfile. oProfile 0.9.4 will work fine on "
"32-bit platforms, however."
msgstr ""

#: ../../pep-3146.txt:846
msgid ""
"Given the ease of integrating oProfile with LLVM [#llvm-oprofile-change]_"
" and Unladen Swallow [#us-oprofile-change]_, other profiling tools should"
" be easy as well, provided they support a similar JIT interface "
"[#oprofile-jit-interface]_."
msgstr ""

#: ../../pep-3146.txt:850
msgid ""
"We have documented the process for using oProfile to profile Unladen "
"Swallow [#oprofile-workflow]_. This document will be merged into "
"CPython's `Doc/` tree in the merge."
msgstr ""

#: ../../pep-3146.txt:856
msgid "Addition of C++ to CPython"
msgstr ""

#: ../../pep-3146.txt:858
msgid ""
"In order to use LLVM, Unladen Swallow has introduced C++ into the core "
"CPython tree and build process. This is an unavoidable part of depending "
"on LLVM; though LLVM offers a C API [#llvm-c-api]_, it is limited and "
"does not expose the functionality needed by CPython. Because of this, we "
"have implemented the internal details of the Unladen Swallow JIT and its "
"supporting infrastructure in C++. We do not propose converting the entire"
" CPython codebase to C++."
msgstr ""

#: ../../pep-3146.txt:867
msgid "Easy use of LLVM's full, powerful code generation and related APIs."
msgstr ""

#: ../../pep-3146.txt:868
msgid "Convenient, abstract data structures simplify code."
msgstr ""

#: ../../pep-3146.txt:869
msgid "C++ is limited to relatively small corners of the CPython codebase."
msgstr ""

#: ../../pep-3146.txt:870
msgid ""
"C++ can be disabled via ``./configure --without-llvm``, which even omits "
"the dependency on ``libstdc++``."
msgstr ""

#: ../../pep-3146.txt:875
msgid ""
"Developers must know two related languages, C and C++ to work on the full"
" range of CPython's internals."
msgstr ""

#: ../../pep-3146.txt:877
msgid ""
"A C++ style guide will need to be developed and enforced. PEP 7 will be "
"extended [#pep7-cpp]_ to encompass C++ by taking the relevant parts of "
"the C++ style guides from Unladen Swallow [#us-styleguide]_, LLVM [#llvm-"
"styleguide]_ and Google [#google-styleguide]_."
msgstr ""

#: ../../pep-3146.txt:881
msgid ""
"Different C++ compilers emit different ABIs; this can cause problems if "
"CPython is compiled with one C++ compiler and extensions modules are "
"compiled with a different C++ compiler."
msgstr ""

#: ../../pep-3146.txt:887
msgid "Managing LLVM Releases, C++ API Changes"
msgstr ""

#: ../../pep-3146.txt:889
msgid ""
"LLVM is released regularly every six months. This means that LLVM may be "
"released two or three times during the course of development of a CPython"
" 3.x release. Each LLVM release brings newer and more powerful "
"optimizations, improved platform support and more sophisticated code "
"generation."
msgstr ""

#: ../../pep-3146.txt:894
msgid ""
"LLVM releases usually include incompatible changes to the LLVM C++ API; "
"the release notes for LLVM 2.6 [#llvm-26-whatsnew]_ include a list of "
"intentionally-introduced incompatibilities. Unladen Swallow has tracked "
"LLVM trunk closely over the course of development. Our experience has "
"been that LLVM API changes are obvious and easily or mechanically "
"remedied. We include two such changes from the Unladen Swallow tree as "
"references here: [#us-llvm-r820]_, [#us-llvm-r532]_."
msgstr ""

#: ../../pep-3146.txt:902
msgid ""
"Due to API incompatibilities, we recommend that an LLVM-based CPython "
"target compatibility with a single version of LLVM at a time. This will "
"lower the overhead on the core development team. Pegging to an LLVM "
"version should not be a problem from a packaging perspective, because "
"pre-built LLVM packages generally become available via standard system "
"package managers fairly quickly following an LLVM release, and failing "
"that, llvm.org itself includes binary releases."
msgstr ""

#: ../../pep-3146.txt:910
msgid ""
"Unladen Swallow has historically included a copy of the LLVM and Clang "
"source trees in the Unladen Swallow tree; this was done to allow us to "
"closely track LLVM trunk as we made patches to it. We do not recommend "
"this model of development for CPython. CPython releases should be based "
"on official LLVM releases. Pre-built LLVM packages are available from "
"MacPorts [#llvm-macports]_ for Darwin, and from most major Linux "
"distributions ([#llvm-ubuntu]_, [#llvm-debian]_, [#llvm-fedora]_). LLVM "
"itself provides additional binaries, such as for MinGW [#llvm-mingw]_."
msgstr ""

#: ../../pep-3146.txt:919
msgid ""
"LLVM is currently intended to be statically linked; this means that "
"binary releases of CPython will include the relevant parts (not all!) of "
"LLVM. This will increase the binary size, as noted above. To simplify "
"downstream package management, we will modify LLVM to better support "
"shared linking. This issue will block final merger [#us-shared-link-"
"issue]_."
msgstr ""

#: ../../pep-3146.txt:925
msgid ""
"Unladen Swallow has tasked a full-time engineer with fixing any remaining"
" critical issues in LLVM before LLVM's 2.7 release. We consider it "
"essential that CPython 3.x be able to depend on a released version of "
"LLVM, rather than closely tracking LLVM trunk as Unladen Swallow has "
"done. We believe we will finish this work [#us-llvm-punchlist]_ before "
"the release of LLVM 2.7, expected in May 2010."
msgstr ""

#: ../../pep-3146.txt:933
msgid "Building CPython"
msgstr ""

#: ../../pep-3146.txt:935
msgid ""
"In addition to a runtime dependency on LLVM, Unladen Swallow includes a "
"build-time dependency on Clang [#clang]_, an LLVM-based C/C++ compiler. "
"We use this to compile parts of the C-language Python runtime to LLVM's "
"intermediate representation; this allows us to perform cross-language "
"inlining, yielding increased performance. Clang is not required to run "
"Unladen Swallow. Clang binary packages are available from most major "
"Linux distributions (for example, [#clang-debian]_)."
msgstr ""

#: ../../pep-3146.txt:943
msgid ""
"We examined the impact of Unladen Swallow on the time needed to build "
"Python, including configure, full builds and incremental builds after "
"touching a single C source file."
msgstr ""

#: ../../pep-3146.txt:948
msgid "./configure"
msgstr ""

#: ../../pep-3146.txt:950 ../../pep-3146.txt:960 ../../pep-3146.txt:977
msgid "Run 1"
msgstr ""

#: ../../pep-3146.txt:950
msgid "0m20.795s"
msgstr ""

#: ../../pep-3146.txt:950
msgid "0m16.558s"
msgstr ""

#: ../../pep-3146.txt:950
msgid "0m15.477s"
msgstr ""

#: ../../pep-3146.txt:952 ../../pep-3146.txt:962 ../../pep-3146.txt:979
msgid "Run 2"
msgstr ""

#: ../../pep-3146.txt:952
msgid "0m15.255s"
msgstr ""

#: ../../pep-3146.txt:952
msgid "0m16.349s"
msgstr ""

#: ../../pep-3146.txt:952
msgid "0m15.391s"
msgstr ""

#: ../../pep-3146.txt:954 ../../pep-3146.txt:964 ../../pep-3146.txt:981
msgid "Run 3"
msgstr ""

#: ../../pep-3146.txt:954
msgid "0m15.228s"
msgstr ""

#: ../../pep-3146.txt:954
msgid "0m16.299s"
msgstr ""

#: ../../pep-3146.txt:954
msgid "0m15.528s"
msgstr ""

#: ../../pep-3146.txt:958
msgid "Full make"
msgstr ""

#: ../../pep-3146.txt:960
msgid "1m30.776s"
msgstr ""

#: ../../pep-3146.txt:960
msgid "1m22.367s"
msgstr ""

#: ../../pep-3146.txt:960
msgid "1m54.053s"
msgstr ""

#: ../../pep-3146.txt:962
msgid "1m21.374s"
msgstr ""

#: ../../pep-3146.txt:962
msgid "1m22.064s"
msgstr ""

#: ../../pep-3146.txt:962
msgid "1m49.448s"
msgstr ""

#: ../../pep-3146.txt:964
msgid "1m22.047s"
msgstr ""

#: ../../pep-3146.txt:964
msgid "1m23.645s"
msgstr ""

#: ../../pep-3146.txt:964
msgid "1m49.305s"
msgstr ""

#: ../../pep-3146.txt:967
msgid ""
"Full builds take a hit due to a) additional ``.cc`` files needed for LLVM"
" interaction, b) statically linking LLVM into ``libpython``, c) compiling"
" parts of the Python runtime to LLVM IR to enable cross-language "
"inlining."
msgstr ""

#: ../../pep-3146.txt:971
msgid ""
"Incremental builds are also somewhat slower than mainline CPython. The "
"table below shows incremental rebuild times after touching "
"``Objects/listobject.c``."
msgstr ""

#: ../../pep-3146.txt:975
msgid "Incr make"
msgstr ""

#: ../../pep-3146.txt:975
msgid "Unladen Swallow r1024"
msgstr ""

#: ../../pep-3146.txt:977
msgid "0m1.854s"
msgstr ""

#: ../../pep-3146.txt:977
msgid "0m1.456s"
msgstr ""

#: ../../pep-3146.txt:977
msgid "0m6.680s"
msgstr ""

#: ../../pep-3146.txt:979
msgid "0m1.437s"
msgstr ""

#: ../../pep-3146.txt:979
msgid "0m1.442s"
msgstr ""

#: ../../pep-3146.txt:979
msgid "0m5.310s"
msgstr ""

#: ../../pep-3146.txt:981
msgid "0m1.440s"
msgstr ""

#: ../../pep-3146.txt:981
msgid "0m1.425s"
msgstr ""

#: ../../pep-3146.txt:981
msgid "0m7.639s"
msgstr ""

#: ../../pep-3146.txt:984
msgid ""
"As with full builds, this extra time comes from statically linking LLVM "
"into ``libpython``. If ``libpython`` were linked shared against LLVM, "
"this overhead would go down."
msgstr ""

#: ../../pep-3146.txt:990
msgid "Proposed Merge Plan"
msgstr ""

#: ../../pep-3146.txt:992
msgid ""
"We propose focusing our efforts on eventual merger with CPython's 3.x "
"line of development. The BDFL has indicated that 2.7 is to be the final "
"release of CPython's 2.x line of development [#bdfl-27-final]_, and since"
" 2.7 alpha 1 has already been released [#cpy-27a1]_, we have missed the "
"window. Python 3 is the future, and that is where we will target our "
"performance efforts."
msgstr ""

#: ../../pep-3146.txt:998
msgid ""
"We recommend the following plan for merger of Unladen Swallow into the "
"CPython source tree:"
msgstr ""

#: ../../pep-3146.txt:1001
msgid ""
"Creation of a branch in the CPython SVN repository to work in, call it "
"``py3k-jit`` as a strawman. This will be a branch of the CPython ``py3k``"
" branch."
msgstr ""

#: ../../pep-3146.txt:1004
msgid ""
"We will keep this branch closely integrated to ``py3k``. The further we "
"deviate, the harder our work will be."
msgstr ""

#: ../../pep-3146.txt:1006
msgid "Any JIT-related patches will go into the ``py3k-jit`` branch."
msgstr ""

#: ../../pep-3146.txt:1007
msgid ""
"Non-JIT-related patches will go into the ``py3k`` branch (once reviewed "
"and approved) and be merged back into the ``py3k-jit`` branch."
msgstr ""

#: ../../pep-3146.txt:1009
msgid ""
"Potentially-contentious issues, such as the introduction of new command "
"line flags or environment variables, will be discussed on python-dev."
msgstr ""

#: ../../pep-3146.txt:1013
msgid ""
"Because Google uses CPython 2.x internally, Unladen Swallow is based on "
"CPython 2.6. We would need to port our compiler to Python 3; this would "
"be done as patches are applied to the ``py3k-jit`` branch, so that the "
"branch remains a consistent implementation of Python 3 at all times."
msgstr ""

#: ../../pep-3146.txt:1018
msgid ""
"We believe this approach will be minimally disruptive to the 3.2 or 3.3 "
"release process while we iron out any remaining issues blocking final "
"merger into ``py3k``. Unladen Swallow maintains a punchlist of known "
"issues needed before final merger [#us-punchlist]_, which includes all "
"problems mentioned in this PEP; we trust the CPython community will have "
"its own concerns. This punchlist is not static; other issues may emerge "
"in the future that will block final merger into the ``py3k`` branch."
msgstr ""

#: ../../pep-3146.txt:1026
msgid ""
"Changes will be committed directly to the ``py3k-jit`` branch, with only "
"large, tricky or controversial changes sent for pre-commit code review."
msgstr ""

#: ../../pep-3146.txt:1031
msgid "Contingency Plans"
msgstr ""

#: ../../pep-3146.txt:1033
msgid ""
"There is a chance that we will not be able to reduce memory usage or "
"startup time to a level satisfactory to the CPython community. Our "
"primary contingency plan for this situation is to shift from an online "
"just-in-time compilation strategy to an offline ahead-of-time strategy "
"using an instrumented CPython interpreter loop to obtain feedback. This "
"is the same model used by gcc's feedback-directed optimizations "
"(`-fprofile-generate`) [#gcc-fdo]_ and Microsoft Visual Studio's profile-"
"guided optimizations [#msvc-pgo]_; we will refer to this as \"feedback-"
"directed optimization\" here, or FDO."
msgstr ""

#: ../../pep-3146.txt:1042
msgid ""
"We believe that an FDO compiler for Python would be inferior to a JIT "
"compiler. FDO requires a high-quality, representative benchmark suite, "
"which is a relative rarity in both open- and closed-source development. A"
" JIT compiler can dynamically find and optimize the hot spots in any "
"application -- benchmark suite or no -- allowing it to adapt to changes "
"in application bottlenecks without human intervention."
msgstr ""

#: ../../pep-3146.txt:1049
msgid ""
"If an ahead-of-time FDO compiler is required, it should be able to "
"leverage a large percentage of the code and infrastructure already "
"developed for Unladen Swallow's JIT compiler. Indeed, these two "
"compilation strategies could exist side by side."
msgstr ""

#: ../../pep-3146.txt:1056
msgid "Future Work"
msgstr ""

#: ../../pep-3146.txt:1058
msgid ""
"A JIT compiler is an extremely flexible tool, and we have by no means "
"exhausted its full potential. Unladen Swallow maintains a list of yet-to-"
"be-implemented performance optimizations [#us-perf-punchlist]_ that the "
"team has not yet had time to fully implement. Examples:"
msgstr ""

#: ../../pep-3146.txt:1063
msgid ""
"Python/Python inlining [#inlining]_. Our compiler currently performs no "
"inlining between pure-Python functions. Work on this is on-going [#us-"
"inlining]_."
msgstr ""

#: ../../pep-3146.txt:1066
msgid ""
"Unboxing [#unboxing]_. Unboxing is critical for numerical performance. "
"PyPy in particular has demonstrated the value of unboxing to heavily "
"numeric workloads."
msgstr ""

#: ../../pep-3146.txt:1069
msgid ""
"Recompilation, adaptation. Unladen Swallow currently only compiles a "
"Python function once, based on its usage pattern up to that point. If the"
" usage pattern changes, limitations in LLVM [#us-recompile-issue]_ "
"prevent us from recompiling the function to better serve the new usage "
"pattern."
msgstr ""

#: ../../pep-3146.txt:1073
msgid ""
"JIT-compile regular expressions. Modern JavaScript engines reuse their "
"JIT compilation infrastructure to boost regex performance [#us-regex-"
"perf]_. Unladen Swallow has developed benchmarks for Python regular "
"expression performance ([#us-bm-re-compile]_, [#us-bm-re-v8]_, [#us-bm-"
"re-effbot]_), but work on regex performance is still at an early stage "
"[#us-regex-issue]_."
msgstr ""

#: ../../pep-3146.txt:1078
msgid ""
"Trace compilation [#traces-waste-of-time]_, [#traces-explicit-pipeline]_."
" Based on the results of PyPy and Tracemonkey [#tracemonkey]_, we believe"
" that a CPython JIT should incorporate trace compilation to some degree. "
"We initially avoided a purely-tracing JIT compiler in favor of a simpler,"
" function-at-a-time compiler. However this function-at-a-time compiler "
"has laid the groundwork for a future tracing compiler implemented in the "
"same terms."
msgstr ""

#: ../../pep-3146.txt:1084
msgid ""
"Profile generation/reuse. The runtime data gathered by the JIT could be "
"persisted to disk and reused by subsequent JIT compilations, or by "
"external tools such as Cython [#cython]_ or a feedback-enhanced code "
"coverage tool."
msgstr ""

#: ../../pep-3146.txt:1088
msgid ""
"This list is by no means exhaustive. There is a vast literature on "
"optimizations for dynamic languages that could and should be implemented "
"in terms of Unladen Swallow's LLVM-based JIT compiler [#us-"
"relevantpapers]_."
msgstr ""

#: ../../pep-3146.txt:1094
msgid "Unladen Swallow Community"
msgstr ""

#: ../../pep-3146.txt:1096
msgid ""
"We would like to thank the community of developers who have contributed "
"to Unladen Swallow, in particular: James Abbatiello, Joerg Blank, Eric "
"Christopher, Alex Gaynor, Chris Lattner, Nick Lewycky, Evan Phoenix and "
"Thomas Wouters."
msgstr ""

#: ../../pep-3146.txt:1102
msgid "Licensing"
msgstr ""

#: ../../pep-3146.txt:1104
msgid ""
"All work on Unladen Swallow is licensed to the Python Software Foundation"
" (PSF) under the terms of the Python Software Foundation License v2 "
"[#psf-lic]_ under the umbrella of Google's blanket Contributor License "
"Agreement with the PSF."
msgstr ""

#: ../../pep-3146.txt:1108
msgid ""
"LLVM is licensed [#llvm-lic]_ under the University of llinois/NCSA Open "
"Source License [#ui-lic]_, a liberal, OSI-approved license. The "
"University of Illinois Urbana-Champaign is the sole copyright holder for "
"LLVM."
msgstr ""

#: ../../pep-3146.txt:1114
msgid "References"
msgstr ""

#: ../../pep-3146.txt:1117
msgid "http://qinsb.blogspot.com/2011/03/unladen-swallow-retrospective.html"
msgstr ""

#: ../../pep-3146.txt:1120
msgid "http://en.wikipedia.org/wiki/Dead_Parrot_sketch"
msgstr ""

#: ../../pep-3146.txt:1123
msgid "http://code.google.com/p/unladen-swallow/"
msgstr ""

#: ../../pep-3146.txt:1126
msgid "http://llvm.org/"
msgstr ""

#: ../../pep-3146.txt:1129
msgid "http://clang.llvm.org/"
msgstr ""

#: ../../pep-3146.txt:1132
msgid "http://code.google.com/p/unladen-swallow/wiki/Testing"
msgstr ""

#: ../../pep-3146.txt:1135
msgid "http://llvm.org/docs/GettingStarted.html#hardware"
msgstr ""

#: ../../pep-3146.txt:1138
msgid "http://llvm.org/viewvc/llvm-project/llvm/trunk/include/llvm-c/"
msgstr ""

#: ../../pep-3146.txt:1141
msgid "http://llvm.org/releases/2.6/docs/ReleaseNotes.html#whatsnew"
msgstr ""

#: ../../pep-3146.txt:1144
msgid "http://code.google.com/p/unladen-swallow/source/detail?r=820"
msgstr ""

#: ../../pep-3146.txt:1147
msgid "http://code.google.com/p/unladen-swallow/source/detail?r=532"
msgstr ""

#: ../../pep-3146.txt:1150
msgid "http://trac.macports.org/browser/trunk/dports/lang/llvm/Portfile"
msgstr ""

#: ../../pep-3146.txt:1153
msgid "http://packages.ubuntu.com/karmic/llvm"
msgstr ""

#: ../../pep-3146.txt:1156
msgid "http://packages.debian.org/unstable/devel/llvm"
msgstr ""

#: ../../pep-3146.txt:1159
msgid "http://packages.debian.org/sid/clang"
msgstr ""

#: ../../pep-3146.txt:1162
msgid "http://koji.fedoraproject.org/koji/buildinfo?buildID=134384"
msgstr ""

#: ../../pep-3146.txt:1165
msgid "http://www.gnu.org/software/gdb/download/ANNOUNCEMENT"
msgstr ""

#: ../../pep-3146.txt:1168
msgid "http://oprofile.sourceforge.net/news/"
msgstr ""

#: ../../pep-3146.txt:1171
msgid "http://code.google.com/p/unladen-swallow/issues/detail?id=63"
msgstr ""

#: ../../pep-3146.txt:1174
msgid "http://developer.apple.com/tools/sharkoptimize.html"
msgstr ""

#: ../../pep-3146.txt:1177
msgid "http://llvm.org/viewvc/llvm-project?view=rev&revision=75279"
msgstr ""

#: ../../pep-3146.txt:1180
msgid "http://code.google.com/p/unladen-swallow/source/detail?r=986"
msgstr ""

#: ../../pep-3146.txt:1183
msgid "http://oprofile.sourceforge.net/doc/devel/jit-interface.html"
msgstr ""

#: ../../pep-3146.txt:1186
msgid "http://code.google.com/p/unladen-swallow/wiki/UsingOProfile"
msgstr ""

#: ../../pep-3146.txt:1189
msgid "http://llvm.org/releases/download.html"
msgstr ""

#: ../../pep-3146.txt:1192
msgid "http://code.google.com/p/unladen-swallow/source/detail?r=359"
msgstr ""

#: ../../pep-3146.txt:1195
msgid "http://code.google.com/p/unladen-swallow/source/detail?r=376"
msgstr ""

#: ../../pep-3146.txt:1198
msgid "http://code.google.com/p/unladen-swallow/source/detail?r=417"
msgstr ""

#: ../../pep-3146.txt:1201
msgid "http://code.google.com/p/unladen-swallow/source/detail?r=517"
msgstr ""

#: ../../pep-3146.txt:1204
msgid "https://mail.python.org/pipermail/python-dev/2010-January/095682.html"
msgstr ""

#: ../../pep-3146.txt:1207
msgid "http://www.python.org/dev/peps/pep-0373/"
msgstr ""

#: ../../pep-3146.txt:1213
msgid "http://code.google.com/p/unladen-swallow/issues/list?q=label:Merger"
msgstr ""

#: ../../pep-3146.txt:1216
msgid "http://code.google.com/p/unladen-swallow/issues/detail?id=118"
msgstr ""

#: ../../pep-3146.txt:1219
msgid "http://code.google.com/p/unladen-swallow/issues/detail?id=64"
msgstr ""

#: ../../pep-3146.txt:1222
msgid "http://www.zope.org/Products/ZopeInterface"
msgstr ""

#: ../../pep-3146.txt:1225
msgid "http://en.wikipedia.org/wiki/BigTable"
msgstr ""

#: ../../pep-3146.txt:1228
msgid "http://www.niallkennedy.com/blog/2006/11/google-mondrian.html"
msgstr ""

#: ../../pep-3146.txt:1231
msgid ""
"http://code.google.com/p/unladen-"
"swallow/source/browse/tests/lib/sqlalchemy/README.unladen"
msgstr ""

#: ../../pep-3146.txt:1234
msgid ""
"http://code.google.com/p/unladen-"
"swallow/source/browse/trunk/Lib/test/test_llvm.py"
msgstr ""

#: ../../pep-3146.txt:1237
msgid "http://en.wikipedia.org/wiki/Fuzz_testing"
msgstr ""

#: ../../pep-3146.txt:1240
msgid "http://bitbucket.org/ebo/pyfuzz/overview/"
msgstr ""

#: ../../pep-3146.txt:1243
msgid "http://lwn.net/Articles/322826/"
msgstr ""

#: ../../pep-3146.txt:1246
msgid "http://code.google.com/p/unladen-swallow/issues/detail?id=68"
msgstr ""

#: ../../pep-3146.txt:1249
msgid "http://code.google.com/p/unladen-swallow/wiki/Benchmarks"
msgstr ""

#: ../../pep-3146.txt:1252
msgid "http://en.wikipedia.org/wiki/Student's_t-test"
msgstr ""

#: ../../pep-3146.txt:1255
msgid "http://bmaurer.blogspot.com/2006/03/memory-usage-with-smaps.html"
msgstr ""

#: ../../pep-3146.txt:1258
msgid ""
"http://code.google.com/p/unladen-swallow/source/browse/branches"
"/background-thread"
msgstr ""

#: ../../pep-3146.txt:1261
msgid "http://code.google.com/p/unladen-swallow/issues/detail?id=40"
msgstr ""

#: ../../pep-3146.txt:1264
msgid "http://code.google.com/p/unladen-swallow/source/detail?r=888"
msgstr ""

#: ../../pep-3146.txt:1267
msgid ""
"http://code.google.com/p/unladen-"
"swallow/source/diff?spec=svn576&r=576&format=side&path=/trunk/Lib/test/test_trace.py"
msgstr ""

#: ../../pep-3146.txt:1270
msgid "http://code.google.com/p/unladen-swallow/issues/list?q=label:Performance"
msgstr ""

#: ../../pep-3146.txt:1273
msgid "http://en.wikipedia.org/wiki/Just-in-time_compilation"
msgstr ""

#: ../../pep-3146.txt:1276
msgid "http://research.sun.com/self/papers/urs-thesis.html"
msgstr ""

#: ../../pep-3146.txt:1279
msgid "http://code.google.com/p/unladen-swallow/wiki/ProjectPlan"
msgstr ""

#: ../../pep-3146.txt:1282
msgid "http://code.google.com/p/unladen-swallow/wiki/RelevantPapers"
msgstr ""

#: ../../pep-3146.txt:1285
msgid ""
"http://code.google.com/p/unladen-"
"swallow/source/browse/trunk/Python/llvm_notes.txt"
msgstr ""

#: ../../pep-3146.txt:1288
msgid "http://www.python.org/psf/license/"
msgstr ""

#: ../../pep-3146.txt:1291
msgid "http://llvm.org/docs/DeveloperPolicy.html#clp"
msgstr ""

#: ../../pep-3146.txt:1294
msgid "http://www.opensource.org/licenses/UoI-NCSA.php"
msgstr ""

#: ../../pep-3146.txt:1297
msgid "http://code.google.com/p/v8/"
msgstr ""

#: ../../pep-3146.txt:1300
msgid "http://webkit.org/blog/214/introducing-squirrelfish-extreme/"
msgstr ""

#: ../../pep-3146.txt:1303
msgid "http://rubini.us/"
msgstr ""

#: ../../pep-3146.txt:1306
msgid "http://lists.parrot.org/pipermail/parrot-dev/2009-September/002811.html"
msgstr ""

#: ../../pep-3146.txt:1309
msgid "http://www.macruby.org/"
msgstr ""

#: ../../pep-3146.txt:1312
msgid "http://en.wikipedia.org/wiki/HotSpot"
msgstr ""

#: ../../pep-3146.txt:1315
msgid "http://psyco.sourceforge.net/"
msgstr ""

#: ../../pep-3146.txt:1318
msgid "http://codespeak.net/pypy/dist/pypy/doc/"
msgstr ""

#: ../../pep-3146.txt:1321
msgid "http://en.wikipedia.org/wiki/Inline_expansion"
msgstr ""

#: ../../pep-3146.txt:1324
msgid "http://en.wikipedia.org/wiki/Object_type_(object-oriented_programming%29"
msgstr ""

#: ../../pep-3146.txt:1327
msgid "http://code.google.com/p/unladen-swallow/issues/detail?id=86"
msgstr ""

#: ../../pep-3146.txt:1330
msgid "http://code.google.com/p/unladen-swallow/wiki/StyleGuide"
msgstr ""

#: ../../pep-3146.txt:1333
msgid "http://llvm.org/docs/CodingStandards.html"
msgstr ""

#: ../../pep-3146.txt:1336
msgid "http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml"
msgstr ""

#: ../../pep-3146.txt:1339
msgid "http://code.google.com/p/unladen-swallow/issues/detail?id=41"
msgstr ""

#: ../../pep-3146.txt:1342
msgid ""
"http://code.google.com/p/unladen-"
"swallow/wiki/ProjectPlan#Regular_Expressions"
msgstr ""

#: ../../pep-3146.txt:1345
msgid ""
"http://code.google.com/p/unladen-"
"swallow/source/browse/tests/performance/bm_regex_compile.py"
msgstr ""

#: ../../pep-3146.txt:1348
msgid ""
"http://code.google.com/p/unladen-"
"swallow/source/browse/tests/performance/bm_regex_v8.py"
msgstr ""

#: ../../pep-3146.txt:1351
msgid ""
"http://code.google.com/p/unladen-"
"swallow/source/browse/tests/performance/bm_regex_effbot.py"
msgstr ""

#: ../../pep-3146.txt:1354
msgid "http://code.google.com/p/unladen-swallow/issues/detail?id=13"
msgstr ""

#: ../../pep-3146.txt:1357
msgid "http://www.pygame.org/"
msgstr ""

#: ../../pep-3146.txt:1360
msgid "http://numpy.scipy.org/"
msgstr ""

#: ../../pep-3146.txt:1363
msgid "http://codespeak.net:8099/plotsummary.html"
msgstr ""

#: ../../pep-3146.txt:1366
msgid "http://llvm.org/Users.html"
msgstr ""

#: ../../pep-3146.txt:1369
msgid "http://www.ffconsultancy.com/ocaml/hlvm/"
msgstr ""

#: ../../pep-3146.txt:1372
msgid "http://llvm.org/PR5201"
msgstr ""

#: ../../pep-3146.txt:1375
msgid "http://llvm.org/viewvc/llvm-project?view=rev&revision=76828"
msgstr ""

#: ../../pep-3146.txt:1378
msgid "http://llvm.org/viewvc/llvm-project?rev=91611&view=rev"
msgstr ""

#: ../../pep-3146.txt:1381
msgid "http://llvm.org/viewvc/llvm-project?rev=85182&view=rev"
msgstr ""

#: ../../pep-3146.txt:1384
msgid "http://llvm.org/PR5735"
msgstr ""

#: ../../pep-3146.txt:1387
msgid "http://code.google.com/p/unladen-swallow/issues/detail?id=73"
msgstr ""

#: ../../pep-3146.txt:1390
msgid "http://code.google.com/p/unladen-swallow/issues/detail?id=88"
msgstr ""

#: ../../pep-3146.txt:1393
msgid "http://code.google.com/p/unladen-swallow/issues/detail?id=67"
msgstr ""

#: ../../pep-3146.txt:1396
msgid "http://www.ics.uci.edu/~franz/Site/pubs-pdf/C44Prepub.pdf"
msgstr ""

#: ../../pep-3146.txt:1399
msgid "http://www.ics.uci.edu/~franz/Site/pubs-pdf/ICS-TR-07-12.pdf"
msgstr ""

#: ../../pep-3146.txt:1402
msgid "https://wiki.mozilla.org/JavaScript:TraceMonkey"
msgstr ""

#: ../../pep-3146.txt:1405
msgid "http://llvm.org/docs/LangRef.html"
msgstr ""

#: ../../pep-3146.txt:1408
msgid "http://code.google.com/p/unladen-swallow/issues/detail?id=120"
msgstr ""

#: ../../pep-3146.txt:1411
msgid ""
"http://code.google.com/p/unladen-"
"swallow/source/browse/tests/performance/bm_nbody.py"
msgstr ""

#: ../../pep-3146.txt:1414
msgid "http://code.google.com/p/unladen-swallow/issues/detail?id=130"
msgstr ""

#: ../../pep-3146.txt:1417
msgid "http://code.google.com/p/unladen-swallow/issues/detail?id=131"
msgstr ""

#: ../../pep-3146.txt:1420
msgid "http://llvm.org/PR4816"
msgstr ""

#: ../../pep-3146.txt:1423
msgid "http://llvm.org/PR6065"
msgstr ""

#: ../../pep-3146.txt:1426
msgid "http://www.cython.org/"
msgstr ""

#: ../../pep-3146.txt:1429
msgid "http://shed-skin.blogspot.com/"
msgstr ""

#: ../../pep-3146.txt:1432
msgid "http://shedskin.googlecode.com/files/shedskin-tutorial-0.3.html"
msgstr ""

#: ../../pep-3146.txt:1435
msgid "http://code.google.com/p/wpython/"
msgstr ""

#: ../../pep-3146.txt:1438
msgid "http://www.mail-archive.com/python-dev@python.org/msg45143.html"
msgstr ""

#: ../../pep-3146.txt:1441
msgid "http://ironpython.net/"
msgstr ""

#: ../../pep-3146.txt:1444
msgid "http://www.mono-project.com/"
msgstr ""

#: ../../pep-3146.txt:1447
msgid "http://www.jython.org/"
msgstr ""

#: ../../pep-3146.txt:1450
msgid "http://wiki.python.org/jython/JythonFaq/GeneralInfo"
msgstr ""

#: ../../pep-3146.txt:1453
msgid "http://code.google.com/p/pyv8/"
msgstr ""

#: ../../pep-3146.txt:1456
msgid "http://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html"
msgstr ""

#: ../../pep-3146.txt:1459
msgid "http://msdn.microsoft.com/en-us/library/e7k32f4k.aspx"
msgstr ""

#: ../../pep-3146.txt:1462
msgid "http://www.mail-archive.com/python-dev@python.org/msg44962.html"
msgstr ""

#: ../../pep-3146.txt:1465
msgid "http://portal.acm.org/citation.cfm?id=1534530.1534550"
msgstr ""

#: ../../pep-3146.txt:1468
msgid "http://www.stackless.com/"
msgstr ""

#: ../../pep-3146.txt:1471
msgid "https://mail.python.org/pipermail/python-dev/2004-June/045165.html"
msgstr ""

#: ../../pep-3146.txt:1474
msgid "http://www.nondot.org/sabre/LLVMNotes/ExplicitlyManagedStackFrames.txt"
msgstr ""

#: ../../pep-3146.txt:1477
msgid "http://old.nabble.com/LLVM-and-coroutines-microthreads-td23080883.html"
msgstr ""

#: ../../pep-3146.txt:1480
msgid "http://www.mail-archive.com/python-dev@python.org/msg45544.html"
msgstr ""

#: ../../pep-3146.txt:1484
msgid "Copyright"
msgstr ""

#: ../../pep-3146.txt:1486
msgid "This document has been placed in the public domain."
msgstr ""

