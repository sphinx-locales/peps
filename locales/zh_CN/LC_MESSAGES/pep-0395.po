# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0395.txt
msgid "PEP"
msgstr ""

#: ../../pep-0395.txt:1
msgid "395"
msgstr ""

#: ../../pep-0395.txt
msgid "Title"
msgstr ""

#: ../../pep-0395.txt:2 ../../pep-0395.txt:286
msgid "Qualified Names for Modules"
msgstr ""

#: ../../pep-0395.txt
msgid "Author"
msgstr ""

#: ../../pep-0395.txt:5
msgid "Nick Coghlan <ncoghlan@gmail.com>"
msgstr ""

#: ../../pep-0395.txt
msgid "Status"
msgstr ""

#: ../../pep-0395.txt:6
msgid "Withdrawn"
msgstr ""

#: ../../pep-0395.txt
msgid "Type"
msgstr ""

#: ../../pep-0395.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0395.txt
msgid "Created"
msgstr ""

#: ../../pep-0395.txt:9
msgid "04-Mar-2011"
msgstr ""

#: ../../pep-0395.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0395.txt:10
msgid "3.4"
msgstr ""

#: ../../pep-0395.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0395.txt:11
msgid "5-Mar-2011, 19-Nov-2011"
msgstr ""

#: ../../pep-0395.txt:15
msgid "PEP Withdrawal"
msgstr ""

#: ../../pep-0395.txt:17
msgid ""
"This PEP was withdrawn by the author in December 2013, as other "
"significant changes in the time since it was written have rendered "
"several aspects obsolete. Most notably :pep:`420` namespace packages "
"rendered some of the proposals related to package detection unworkable "
"and :pep:`451` module specifications resolved the multiprocessing issues "
"and provide a possible means to tackle the pickle compatibility issues."
msgstr ""

#: ../../pep-0395.txt:24
msgid ""
"A future PEP to resolve the remaining issues would still be appropriate, "
"but it's worth starting any such effort as a fresh PEP restating the "
"remaining problems in an updated context rather than trying to build on "
"this one directly."
msgstr ""

#: ../../pep-0395.txt:31
msgid "Abstract"
msgstr ""

#: ../../pep-0395.txt:33
msgid ""
"This PEP proposes new mechanisms that eliminate some longstanding traps "
"for the unwary when dealing with Python's import system, as well as "
"serialisation and introspection of functions and classes."
msgstr ""

#: ../../pep-0395.txt:37
msgid "It builds on the \"Qualified Name\" concept defined in PEP 3155."
msgstr ""

#: ../../pep-0395.txt:41
msgid "Relationship with Other PEPs"
msgstr ""

#: ../../pep-0395.txt:43
msgid ""
"Most significantly, this PEP is currently deferred as it requires "
"significant changes in order to be made compatible with the removal of "
"mandatory __init__.py files in PEP 420 (which has been implemented and "
"released in Python 3.3)."
msgstr ""

#: ../../pep-0395.txt:48
msgid ""
"This PEP builds on the \"qualified name\" concept introduced by PEP 3155,"
" and also shares in that PEP's aim of fixing some ugly corner cases when "
"dealing with serialisation of arbitrary functions and classes."
msgstr ""

#: ../../pep-0395.txt:52
msgid ""
"It also builds on PEP 366, which took initial tentative steps towards "
"making explicit relative imports from the main module work correctly in "
"at least *some* circumstances."
msgstr ""

#: ../../pep-0395.txt:56
msgid ""
"Finally, PEP 328 eliminated implicit relative imports from imported "
"modules. This PEP proposes that the de facto implicit relative imports "
"from main modules that are provided by the current initialisation "
"behaviour for ``sys.path[0]`` also be eliminated."
msgstr ""

#: ../../pep-0395.txt:63
msgid "What's in a ``__name__``?"
msgstr ""

#: ../../pep-0395.txt:65
msgid ""
"Over time, a module's ``__name__`` attribute has come to be used to "
"handle a number of different tasks."
msgstr ""

#: ../../pep-0395.txt:68
msgid "The key use cases identified for this module attribute are:"
msgstr ""

#: ../../pep-0395.txt:70
msgid ""
"Flagging the main module in a program, using the ``if __name__ == "
"\"__main__\":`` convention."
msgstr ""

#: ../../pep-0395.txt:72
msgid "As the starting point for relative imports"
msgstr ""

#: ../../pep-0395.txt:73
msgid ""
"To identify the location of function and class definitions within the "
"running application"
msgstr ""

#: ../../pep-0395.txt:75
msgid ""
"To identify the location of classes for serialisation into pickle objects"
" which may be shared with other interpreter instances"
msgstr ""

#: ../../pep-0395.txt:80
msgid "Traps for the Unwary"
msgstr ""

#: ../../pep-0395.txt:82
msgid ""
"The overloading of the semantics of ``__name__``, along with some "
"historically associated behaviour in the initialisation of "
"``sys.path[0]``, has resulted in several traps for the unwary. These "
"traps can be quite annoying in practice, as they are highly unobvious "
"(especially to beginners) and can cause quite confusing behaviour."
msgstr ""

#: ../../pep-0395.txt:90
msgid "Why are my imports broken?"
msgstr ""

#: ../../pep-0395.txt:92
msgid ""
"There's a general principle that applies when modifying ``sys.path``: "
"*never* put a package directory directly on ``sys.path``. The reason this"
" is problematic is that every module in that directory is now potentially"
" accessible under two different names: as a top level module (since the "
"package directory is on ``sys.path``) and as a submodule of the package "
"(if the higher level directory containing the package itself is also on "
"``sys.path``)."
msgstr ""

#: ../../pep-0395.txt:100
msgid ""
"As an example, Django (up to and including version 1.3) is guilty of "
"setting up exactly this situation for site-specific applications - the "
"application ends up being accessible as both ``app`` and ``site.app`` in "
"the module namespace, and these are actually two *different* copies of "
"the module. This is a recipe for confusion if there is any meaningful "
"mutable module level state, so this behaviour is being eliminated from "
"the default site set up in version 1.4 (site-specific apps will always be"
" fully qualified with the site name)."
msgstr ""

#: ../../pep-0395.txt:109
msgid ""
"However, it's hard to blame Django for this, when the same part of Python"
" responsible for setting ``__name__ = \"__main__\"`` in the main module "
"commits the exact same error when determining the value for "
"``sys.path[0]``."
msgstr ""

#: ../../pep-0395.txt:113
msgid ""
"The impact of this can be seen relatively frequently if you follow the "
"\"python\" and \"import\" tags on Stack Overflow. When I had the time to "
"follow it myself, I regularly encountered people struggling to understand"
" the behaviour of straightforward package layouts like the following (I "
"actually use package layouts along these lines in my own projects)::"
msgstr ""

#: ../../pep-0395.txt:128
msgid ""
"While I would often see it without the ``__init__.py`` files first, "
"that's a trivial fix to explain. What's hard to explain is that all of "
"the following ways to invoke ``test_foo.py`` *probably won't work* due to"
" broken imports (either failing to find ``example`` for absolute imports,"
" complaining about relative imports in a non-package or beyond the "
"toplevel package for explicit relative imports, or issuing even more "
"obscure errors if some other submodule happens to shadow the name of a "
"top-level module, such as an ``example.json`` module that handled "
"serialisation or an ``example.tests.unittest`` test runner)::"
msgstr ""

#: ../../pep-0395.txt:162
msgid ""
"That's right, that long list is of all the methods of invocation that "
"will almost certainly *break* if you try them, and the error messages "
"won't make any sense if you're not already intimately familiar not only "
"with the way Python's import system works, but also with how it gets "
"initialised."
msgstr ""

#: ../../pep-0395.txt:167
msgid ""
"For a long time, the only way to get ``sys.path`` right with that kind of"
" setup was to either set it manually in ``test_foo.py`` itself (hardly "
"something a novice, or even many veteran, Python programmers are going to"
" know how to do) or else to make sure to import the module instead of "
"executing it directly::"
msgstr ""

#: ../../pep-0395.txt:176
msgid ""
"Since the implementation of PEP 366 (which defined a mechanism that "
"allows relative imports to work correctly when a module inside a package "
"is executed via the ``-m`` switch), the following also works properly::"
msgstr ""

#: ../../pep-0395.txt:183
msgid ""
"The fact that most methods of invoking Python code from the command line "
"break when that code is inside a package, and the two that do work are "
"highly sensitive to the current working directory is all thoroughly "
"confusing for a beginner. I personally believe it is one of the key "
"factors leading to the perception that Python packages are complicated "
"and hard to get right."
msgstr ""

#: ../../pep-0395.txt:189
msgid ""
"This problem isn't even limited to the command line - if ``test_foo.py`` "
"is open in Idle and you attempt to run it by pressing F5, or if you try "
"to run it by clicking on it in a graphical filebrowser, then it will fail"
" in just the same way it would if run directly from the command line."
msgstr ""

#: ../../pep-0395.txt:194
msgid ""
"There's a reason the general \"no package directories on ``sys.path``\" "
"guideline exists, and the fact that the interpreter itself doesn't follow"
" it when determining ``sys.path[0]`` is the root cause of all sorts of "
"grief."
msgstr ""

#: ../../pep-0395.txt:198
msgid ""
"In the past, this couldn't be fixed due to backwards compatibility "
"concerns. However, scripts potentially affected by this problem will "
"*already* require fixes when porting to the Python 3.x (due to the "
"elimination of implicit relative imports when importing modules "
"normally). This provides a convenient opportunity to implement a "
"corresponding change in the initialisation semantics for ``sys.path[0]``."
msgstr ""

#: ../../pep-0395.txt:207
msgid "Importing the main module twice"
msgstr ""

#: ../../pep-0395.txt:209
msgid ""
"Another venerable trap is the issue of importing ``__main__`` twice. This"
" occurs when the main module is also imported under its real name, "
"effectively creating two instances of the same module under different "
"names."
msgstr ""

#: ../../pep-0395.txt:213
msgid ""
"If the state stored in ``__main__`` is significant to the correct "
"operation of the program, or if there is top-level code in the main "
"module that has non-idempotent side effects, then this duplication can "
"cause obscure and surprising errors."
msgstr ""

#: ../../pep-0395.txt:220
msgid "In a bit of a pickle"
msgstr ""

#: ../../pep-0395.txt:222
msgid ""
"Something many users may not realise is that the ``pickle`` module "
"sometimes relies on the ``__module__`` attribute when serialising "
"instances of arbitrary classes. So instances of classes defined in "
"``__main__`` are pickled that way, and won't be unpickled correctly by "
"another python instance that only imported that module instead of running"
" it directly. This behaviour is the underlying reason for the advice from"
" many Python veterans to do as little as possible in the  ``__main__`` "
"module in any application that involves any form of object serialisation "
"and persistence."
msgstr ""

#: ../../pep-0395.txt:231
msgid ""
"Similarly, when creating a pseudo-module (see next paragraph), pickles "
"rely on the name of the module where a class is actually defined, rather "
"than the officially documented location for that class in the module "
"hierarchy."
msgstr ""

#: ../../pep-0395.txt:235
msgid ""
"For the purposes of this PEP, a \"pseudo-module\" is a package designed "
"like the Python 3.2 ``unittest`` and ``concurrent.futures`` packages. "
"These packages are documented as if they were single modules, but are in "
"fact internally implemented as a package. This is *supposed* to be an "
"implementation detail that users and other implementations don't need to "
"worry about, but, thanks to ``pickle`` (and serialisation in general), "
"the details are often exposed and can effectively become part of the "
"public API."
msgstr ""

#: ../../pep-0395.txt:244
msgid ""
"While this PEP focuses specifically on ``pickle`` as the principal "
"serialisation scheme in the standard library, this issue may also affect "
"other mechanisms that support serialisation of arbitrary class instances "
"and rely on ``__module__`` attributes to determine how to handle "
"deserialisation."
msgstr ""

#: ../../pep-0395.txt:252
msgid "Where's the source?"
msgstr ""

#: ../../pep-0395.txt:254
msgid ""
"Some sophisticated users of the pseudo-module technique described above "
"recognise the problem with implementation details leaking out via the "
"``pickle`` module, and choose to address it by altering ``__name__`` to "
"refer to the public location for the module before defining any functions"
" or classes (or else by modifying the ``__module__`` attributes of those "
"objects after they have been defined)."
msgstr ""

#: ../../pep-0395.txt:261
msgid ""
"This approach is effective at eliminating the leakage of information via "
"pickling, but comes at the cost of breaking introspection for functions "
"and classes (as their ``__module__`` attribute now points to the wrong "
"place)."
msgstr ""

#: ../../pep-0395.txt:267
msgid "Forkless Windows"
msgstr ""

#: ../../pep-0395.txt:269
msgid ""
"To get around the lack of ``os.fork`` on Windows, the ``multiprocessing``"
" module attempts to re-execute Python with the same main module, but "
"skipping over any code guarded by ``if __name__ == \"__main__\":`` "
"checks. It does the best it can with the information it has, but is "
"forced to make assumptions that simply aren't valid whenever the main "
"module isn't an ordinary directly executed script or top-level module. "
"Packages and non-top-level modules executed via the ``-m`` switch, as "
"well as directly executed zipfiles or directories, are likely to make "
"multiprocessing on Windows do the wrong thing (either quietly or noisily,"
" depending on application details) when spawning a new process."
msgstr ""

#: ../../pep-0395.txt:280
msgid ""
"While this issue currently only affects Windows directly, it also impacts"
" any proposals to provide Windows-style \"clean process\" invocation via "
"the multiprocessing module on other platforms."
msgstr ""

#: ../../pep-0395.txt:288
msgid ""
"To make it feasible to fix these problems once and for all, it is "
"proposed to add a new module level attribute: ``__qualname__``. This "
"abbreviation of \"qualified name\" is taken from PEP 3155, where it is "
"used to store the naming path to a nested class or function definition "
"relative to the top level module."
msgstr ""

#: ../../pep-0395.txt:294
msgid ""
"For modules, ``__qualname__`` will normally be the same as ``__name__``, "
"just as it is for top-level functions and classes in PEP 3155. However, "
"it will differ in some situations so that the above problems can be "
"addressed."
msgstr ""

#: ../../pep-0395.txt:298
msgid ""
"Specifically, whenever ``__name__`` is modified for some other purpose "
"(such as to denote the main module), then ``__qualname__`` will remain "
"unchanged, allowing code that needs it to access the original unmodified "
"value."
msgstr ""

#: ../../pep-0395.txt:302
msgid ""
"If a module loader does not initialise ``__qualname__`` itself, then the "
"import system will add it automatically (setting it to the same value as "
"``__name__``)."
msgstr ""

#: ../../pep-0395.txt:308
msgid "Alternative Names"
msgstr ""

#: ../../pep-0395.txt:310
msgid ""
"Two alternative names were also considered for the new attribute: \"full "
"name\" (``__fullname__``) and \"implementation name\" (``__implname__``)."
msgstr ""

#: ../../pep-0395.txt:313
msgid ""
"Either of those would actually be valid for the use case in this PEP. "
"However, as a meta-issue, PEP 3155 is *also* adding a new attribute (for "
"functions and classes) that is \"like ``__name__``, but different in some"
" cases where ``__name__`` is missing necessary information\" and those "
"terms aren't accurate for the PEP 3155 function and class use case."
msgstr ""

#: ../../pep-0395.txt:319
msgid ""
"PEP 3155 deliberately omits the module information, so the term \"full "
"name\" is simply untrue, and \"implementation name\" implies that it may "
"specify an object other than that specified by ``__name__``, and that is "
"never the case for PEP 3155 (in that PEP, ``__name__`` and "
"``__qualname__`` always refer to the same function or class, it's just "
"that ``__name__`` is insufficient to accurately identify nested functions"
" and classes)."
msgstr ""

#: ../../pep-0395.txt:326
msgid ""
"Since it seems needlessly inconsistent to add *two* new terms for "
"attributes that only exist because backwards compatibility concerns keep "
"us from changing the behaviour of ``__name__`` itself, this PEP instead "
"chose to adopt the PEP 3155 terminology."
msgstr ""

#: ../../pep-0395.txt:331
msgid ""
"If the relative inscrutability of \"qualified name\" and ``__qualname__``"
" encourages interested developers to look them up at least once rather "
"than assuming they know what they mean just from the name and guessing "
"wrong, that's not necessarily a bad outcome."
msgstr ""

#: ../../pep-0395.txt:336
#, python-format
msgid ""
"Besides, 99% of Python developers should never need to even care these "
"extra attributes exist - they're really an implementation detail to let "
"us fix a few problematic behaviours exhibited by imports, pickling and "
"introspection, not something people are going to be dealing with on a "
"regular basis."
msgstr ""

#: ../../pep-0395.txt:343
msgid "Eliminating the Traps"
msgstr ""

#: ../../pep-0395.txt:345
msgid ""
"The following changes are interrelated and make the most sense when "
"considered together. They collectively either completely eliminate the "
"traps for the unwary noted above, or else provide straightforward "
"mechanisms for dealing with them."
msgstr ""

#: ../../pep-0395.txt:350
msgid ""
"A rough draft of some of the concepts presented here was first posted on "
"the python-ideas list ([1]_), but they have evolved considerably since "
"first being discussed in that thread. Further discussion has subsequently"
" taken place on the import-sig mailing list ([2]_. [3]_)."
msgstr ""

#: ../../pep-0395.txt:357
msgid "Fixing main module imports inside packages"
msgstr ""

#: ../../pep-0395.txt:359
msgid ""
"To eliminate this trap, it is proposed that an additional filesystem "
"check be performed when determining a suitable value for ``sys.path[0]``."
" This check will look for Python's explicit package directory markers and"
" use them to find the appropriate directory to add to ``sys.path``."
msgstr ""

#: ../../pep-0395.txt:364
msgid ""
"The current algorithm for setting ``sys.path[0]`` in relevant cases is "
"roughly as follows::"
msgstr ""

#: ../../pep-0395.txt:380
msgid ""
"It is proposed that this initialisation process be modified to take "
"package details stored on the filesystem into account::"
msgstr ""

#: ../../pep-0395.txt:419
msgid ""
"The ``split_path_module()`` supporting function used in the above pseudo-"
"code would have the following semantics::"
msgstr ""

#: ../../pep-0395.txt:449
msgid ""
"This PEP also proposes that the ``split_path_module()`` functionality be "
"exposed directly to Python users via the ``runpy`` module."
msgstr ""

#: ../../pep-0395.txt:452
msgid ""
"With this fix in place, and the same simple package layout described "
"earlier, *all* of the following commands would invoke the test suite "
"correctly::"
msgstr ""

#: ../../pep-0395.txt:482
msgid ""
"With these changes, clicking Python modules in a graphical file browser "
"should always execute them correctly, even if they live inside a package."
" Depending on the details of how it invokes the script, Idle would likely"
" also be able to run ``test_foo.py`` correctly with F5, without needing "
"any Idle specific fixes."
msgstr ""

#: ../../pep-0395.txt:489
msgid "Optional addition: command line relative imports"
msgstr ""

#: ../../pep-0395.txt:491
msgid ""
"With the above changes in place, it would be a fairly minor addition to "
"allow explicit relative imports as arguments to the ``-m`` switch::"
msgstr ""

#: ../../pep-0395.txt:501
msgid ""
"With this addition, system initialisation for the ``-m`` switch would "
"change as follows::"
msgstr ""

#: ../../pep-0395.txt:526
msgid "Compatibility with PEP 382"
msgstr ""

#: ../../pep-0395.txt:528
msgid ""
"Making this proposal compatible with the PEP 382 namespace packaging PEP "
"is trivial. The semantics of ``_is_package_dir()`` are merely changed to "
"be::"
msgstr ""

#: ../../pep-0395.txt:538
msgid "Incompatibility with PEP 402"
msgstr ""

#: ../../pep-0395.txt:540
msgid ""
"PEP 402 proposes the elimination of explicit markers in the file system "
"for Python packages. This fundamentally breaks the proposed concept of "
"being able to take a filesystem path and a Python module name and work "
"out an unambiguous mapping to the Python module namespace. Instead, the "
"appropriate mapping would depend on the current values in ``sys.path``, "
"rendering it impossible to ever fix the problems described above with the"
" calculation of ``sys.path[0]`` when the interpreter is initialised."
msgstr ""

#: ../../pep-0395.txt:548
msgid ""
"While some aspects of this PEP could probably be salvaged if PEP 402 were"
" adopted, the core concept of making import semantics from main and other"
" modules more consistent would no longer be feasible."
msgstr ""

#: ../../pep-0395.txt:552
msgid ""
"This incompatibility is discussed in more detail in the relevant import-"
"sig threads ([2]_, [3]_)."
msgstr ""

#: ../../pep-0395.txt:557
msgid "Potential incompatibilities with scripts stored in packages"
msgstr ""

#: ../../pep-0395.txt:559
msgid ""
"The proposed change to ``sys.path[0]`` initialisation *may* break some "
"existing code. Specifically, it will break scripts stored in package "
"directories that rely on the implicit relative imports from ``__main__`` "
"in order to run correctly under Python 3."
msgstr ""

#: ../../pep-0395.txt:564
msgid ""
"While such scripts could be imported in Python 2 (due to implicit "
"relative imports) it is already the case that they cannot be imported in "
"Python 3, as implicit relative imports are no longer permitted when a "
"module is imported."
msgstr ""

#: ../../pep-0395.txt:569
msgid ""
"By disallowing implicit relatives imports from the main module as well, "
"such modules won't even work as scripts with this PEP. Switching them "
"over to explicit relative imports will then get them working again as "
"both executable scripts *and* as importable modules."
msgstr ""

#: ../../pep-0395.txt:574
msgid ""
"To support earlier versions of Python, a script could be written to use "
"different forms of import based on the Python version::"
msgstr ""

#: ../../pep-0395.txt:584
msgid "Fixing dual imports of the main module"
msgstr ""

#: ../../pep-0395.txt:586
msgid ""
"Given the above proposal to get ``__qualname__`` consistently set "
"correctly in the main module, one simple change is proposed to eliminate "
"the problem of dual imports of the main module: the addition of a "
"``sys.metapath`` hook that detects attempts to import ``__main__`` under "
"its real name and returns the original main module instead::"
msgstr ""

#: ../../pep-0395.txt:611
msgid ""
"This metapath hook would be added automatically during import system "
"initialisation based on the following logic::"
msgstr ""

#: ../../pep-0395.txt:618
msgid ""
"This is probably the least important proposal in the PEP - it just closes"
" off the last mechanism that is likely to lead to module duplication "
"after the configuration of ``sys.path[0]`` at interpreter startup is "
"addressed."
msgstr ""

#: ../../pep-0395.txt:625
msgid "Fixing pickling without breaking introspection"
msgstr ""

#: ../../pep-0395.txt:627
msgid ""
"To fix this problem, it is proposed to make use of the new module level "
"``__qualname__`` attributes to determine the real module location when "
"``__name__`` has been modified for any reason."
msgstr ""

#: ../../pep-0395.txt:631
msgid ""
"In the main module, ``__qualname__`` will automatically be set to the "
"main module's \"real\" name (as described above) by the interpreter."
msgstr ""

#: ../../pep-0395.txt:634
msgid ""
"Pseudo-modules that adjust ``__name__`` to point to the public namespace "
"will leave ``__qualname__`` untouched, so the implementation location "
"remains readily accessible for introspection."
msgstr ""

#: ../../pep-0395.txt:638
msgid ""
"If ``__name__`` is adjusted at the top of a module, then this will "
"automatically adjust the ``__module__`` attribute for all functions and "
"classes subsequently defined in that module."
msgstr ""

#: ../../pep-0395.txt:642
msgid ""
"Since multiple submodules may be set to use the same \"public\" "
"namespace, functions and classes will be given a new ``__qualmodule__`` "
"attribute that refers to the ``__qualname__`` of their module."
msgstr ""

#: ../../pep-0395.txt:646
msgid ""
"This isn't strictly necessary for functions (you could find out their "
"module's qualified name by looking in their globals dictionary), but it "
"is needed for classes, since they don't hold a reference to the globals "
"of their defining module. Once a new attribute is added to classes, it is"
" more convenient to keep the API consistent and add a new attribute to "
"functions as well."
msgstr ""

#: ../../pep-0395.txt:653
msgid ""
"These changes mean that adjusting ``__name__`` (and, either directly or "
"indirectly, the corresponding function and class ``__module__`` "
"attributes) becomes the officially sanctioned way to implement a "
"namespace as a package, while exposing the API as if it were still a "
"single module."
msgstr ""

#: ../../pep-0395.txt:658
msgid ""
"All serialisation code that currently uses ``__name__`` and "
"``__module__`` attributes will then avoid exposing implementation details"
" by default."
msgstr ""

#: ../../pep-0395.txt:661
msgid ""
"To correctly handle serialisation of items from the main module, the "
"class and function definition logic will be updated to also use "
"``__qualname__`` for the ``__module__`` attribute in the case where "
"``__name__ == \"__main__\"``."
msgstr ""

#: ../../pep-0395.txt:665
msgid ""
"With ``__name__`` and ``__module__`` being officially blessed as being "
"used for the *public* names of things, the introspection tools in the "
"standard library will be updated to use ``__qualname__`` and "
"``__qualmodule__`` where appropriate. For example:"
msgstr ""

#: ../../pep-0395.txt:670
msgid "``pydoc`` will report both public and qualified names for modules"
msgstr ""

#: ../../pep-0395.txt:671
msgid ""
"``inspect.getsource()`` (and similar tools) will use the qualified names "
"that point to the implementation of the code"
msgstr ""

#: ../../pep-0395.txt:673
msgid ""
"additional ``pydoc`` and/or ``inspect`` APIs may be provided that report "
"all modules with a given public ``__name__``."
msgstr ""

#: ../../pep-0395.txt:678
msgid "Fixing multiprocessing on Windows"
msgstr ""

#: ../../pep-0395.txt:680
msgid ""
"With ``__qualname__`` now available to tell ``multiprocessing`` the real "
"name of the main module, it will be able to simply include it in the "
"serialised information passed to the child process, eliminating the need "
"for the current dubious introspection of the ``__file__`` attribute."
msgstr ""

#: ../../pep-0395.txt:685
msgid ""
"For older Python versions, ``multiprocessing`` could be improved by "
"applying the ``split_path_module()`` algorithm described above when "
"attempting to work out how to execute the main module based on its "
"``__file__`` attribute."
msgstr ""

#: ../../pep-0395.txt:691
msgid "Explicit relative imports"
msgstr ""

#: ../../pep-0395.txt:693
msgid ""
"This PEP proposes that ``__package__`` be unconditionally defined in the "
"main module as ``__qualname__.rpartition('.')[0]``. Aside from that, it "
"proposes that the behaviour of explicit relative imports be left alone."
msgstr ""

#: ../../pep-0395.txt:697
msgid ""
"In particular, if ``__package__`` is not set in a module when an explicit"
" relative import occurs, the automatically cached value  will continue to"
" be derived from ``__name__`` rather than ``__qualname__``. This "
"minimises any backwards incompatibilities with existing code that "
"deliberately manipulates relative imports by adjusting ``__name__`` "
"rather than setting ``__package__`` directly."
msgstr ""

#: ../../pep-0395.txt:704
msgid ""
"This PEP does *not* propose that ``__package__`` be deprecated. While it "
"is technically redundant following the introduction of ``__qualname__``, "
"it just isn't worth the hassle of deprecating it within the lifetime of "
"Python 3.x."
msgstr ""

#: ../../pep-0395.txt:710
msgid "Reference Implementation"
msgstr ""

#: ../../pep-0395.txt:712
msgid "None as yet."
msgstr ""

#: ../../pep-0395.txt:716
msgid "References"
msgstr ""

#: ../../pep-0395.txt:718
msgid ""
"Module aliases and/or \"real names\" (https://mail.python.org/pipermail"
"/python-ideas/2011-January/008983.html)"
msgstr ""

#: ../../pep-0395.txt:721
msgid ""
"PEP 395 (Module aliasing) and the namespace PEPs "
"(https://mail.python.org/pipermail/import-sig/2011-November/000382.html)"
msgstr ""

#: ../../pep-0395.txt:724
msgid ""
"Updated PEP 395 (aka \"Implicit Relative Imports Must Die!\") "
"(https://mail.python.org/pipermail/import-sig/2011-November/000397.html)"
msgstr ""

#: ../../pep-0395.txt:727
msgid ""
"Elaboration of compatibility problems between this PEP and PEP 402 "
"(https://mail.python.org/pipermail/import-sig/2011-November/000403.html)"
msgstr ""

#: ../../pep-0395.txt:731
msgid "Copyright"
msgstr ""

#: ../../pep-0395.txt:733
msgid "This document has been placed in the public domain."
msgstr ""

