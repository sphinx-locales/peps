# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-3100.txt
msgid "PEP"
msgstr ""

#: ../../pep-3100.txt:1
msgid "3100"
msgstr ""

#: ../../pep-3100.txt
msgid "Title"
msgstr ""

#: ../../pep-3100.txt:2
msgid "Miscellaneous Python 3.0 Plans"
msgstr ""

#: ../../pep-3100.txt
msgid "Author"
msgstr ""

#: ../../pep-3100.txt:5
msgid "Brett Cannon <brett@python.org>"
msgstr ""

#: ../../pep-3100.txt
msgid "Status"
msgstr ""

#: ../../pep-3100.txt:6
msgid "Final"
msgstr ""

#: ../../pep-3100.txt
msgid "Type"
msgstr ""

#: ../../pep-3100.txt:7
msgid "Process"
msgstr ""

#: ../../pep-3100.txt
msgid "Created"
msgstr ""

#: ../../pep-3100.txt:9
msgid "20-Aug-2004"
msgstr ""

#: ../../pep-3100.txt
msgid "Post-History"
msgstr ""

#: ../../pep-3100.txt:14
msgid "Abstract"
msgstr ""

#: ../../pep-3100.txt:16
msgid ""
"This PEP, previously known as PEP 3000, describes smaller scale changes "
"and new features for which no separate PEP is written yet, all targeted "
"for Python 3000."
msgstr ""

#: ../../pep-3100.txt:20
msgid ""
"The list of features included in this document is subject to change and "
"isn't binding on the Python development community; features may be added,"
" removed, and modified at any time.  The purpose of this list is to focus"
" our language development effort on changes that are steps to 3.0, and to"
" encourage people to invent ways to smooth the transition."
msgstr ""

#: ../../pep-3100.txt:26
msgid ""
"This document is not a wish-list that anyone can extend.  While there are"
" two authors of this PEP, we're just supplying the text; the decisions "
"for which changes are listed in this document are made by Guido van "
"Rossum, who has chosen them as goals for Python 3.0."
msgstr ""

#: ../../pep-3100.txt:31
msgid ""
"Guido's pronouncements on things that will not change in Python 3.0 are "
"recorded in PEP 3099. [#pep3099]_"
msgstr ""

#: ../../pep-3100.txt:36
msgid "General goals"
msgstr ""

#: ../../pep-3100.txt:38
msgid ""
"A general goal is to reduce feature duplication by removing old ways of "
"doing things.  A general principle of the design will be that one obvious"
" way of doing something is enough. [1]_"
msgstr ""

#: ../../pep-3100.txt:44
msgid "Influencing PEPs"
msgstr ""

#: ../../pep-3100.txt:46
msgid "PEP 238 (Changing the Division Operator) [#pep238]_"
msgstr ""

#: ../../pep-3100.txt:47
msgid "PEP 328 (Imports: Multi-Line and Absolute/Relative) [#pep328]_"
msgstr ""

#: ../../pep-3100.txt:48
msgid "PEP 343 (The \"with\" Statement) [#pep343]_"
msgstr ""

#: ../../pep-3100.txt:49
msgid "PEP 352 (Required Superclass for Exceptions) [#pep352]_"
msgstr ""

#: ../../pep-3100.txt:53
msgid "Style changes"
msgstr ""

#: ../../pep-3100.txt:55
msgid ""
"The C style guide will be updated to use 4-space indents, never tabs. "
"This style should be used for all new files; existing files can be "
"updated only if there is no hope to ever merge a particular file from the"
" Python 2 HEAD.  Within a file, the indentation style should be "
"consistent.  No other style guide changes are planned ATM."
msgstr ""

#: ../../pep-3100.txt:63
msgid "Core language"
msgstr ""

#: ../../pep-3100.txt:65
msgid "True division becomes default behavior [#pep238]_ [done]"
msgstr ""

#: ../../pep-3100.txt:66
msgid "``exec`` as a statement is not worth it -- make it a function [done]"
msgstr ""

#: ../../pep-3100.txt:67
msgid "Add optional declarations for static typing [#pep3107]_ [10]_ [done]"
msgstr ""

#: ../../pep-3100.txt:68
msgid "Support only new-style classes; classic classes will be gone [1]_ [done]"
msgstr ""

#: ../../pep-3100.txt:69
msgid "Replace ``print`` by a function [14]_  [#pep3105]_ [done]"
msgstr ""

#: ../../pep-3100.txt:70
msgid "The ``softspace`` attribute of files goes away. [done]"
msgstr ""

#: ../../pep-3100.txt:71
msgid ""
"Use ``except E1, E2, E3 as err:`` if you want the error variable. [3]_ "
"[done]"
msgstr ""

#: ../../pep-3100.txt:72
msgid "``None`` becomes a keyword [4]_; also ``True`` and ``False`` [done]"
msgstr ""

#: ../../pep-3100.txt:73
msgid "``...`` to become a general expression element [16]_ [done]"
msgstr ""

#: ../../pep-3100.txt:74
msgid "``as`` becomes a keyword [5]_ (starting in 2.6 already) [done]"
msgstr ""

#: ../../pep-3100.txt:75
msgid ""
"Have list comprehensions be syntactic sugar for passing an equivalent "
"generator expression to ``list()``; as a consequence the loop variable "
"will no longer be exposed [#pep289]_ [done]"
msgstr ""

#: ../../pep-3100.txt:78
msgid ""
"Comparisons other than ``==`` and ``!=`` between disparate types will "
"raise an exception unless explicitly supported by the type [6]_ [done]"
msgstr ""

#: ../../pep-3100.txt:80
msgid ""
"floats will not be acceptable as arguments in place of ints for "
"operations where floats are inadvertently accepted (PyArg_ParseTuple() i "
"& l formats)"
msgstr ""

#: ../../pep-3100.txt:82
msgid ""
"Remove from ... import * at function scope.  [done] This means that "
"functions can always be optimized and support for unoptimized functions "
"can go away."
msgstr ""

#: ../../pep-3100.txt:88
msgid "Imports [#pep328]_"
msgstr ""

#: ../../pep-3100.txt:85
msgid "Imports will be absolute by default. [done]"
msgstr ""

#: ../../pep-3100.txt:86
msgid "Relative imports must be explicitly specified. [done]"
msgstr ""

#: ../../pep-3100.txt:87
msgid ""
"Indirection entries in ``sys.modules`` (i.e., a value of ``None`` for "
"``A.string`` means to use the top-level ``string`` module) will not be "
"supported."
msgstr ""

#: ../../pep-3100.txt:90
msgid ""
"__init__.py might become optional in sub-packages?  __init__.py will "
"still be required for top-level packages."
msgstr ""

#: ../../pep-3100.txt:92
msgid "Cleanup the Py_InitModule() variants {,3,4} (also import and parser APIs)"
msgstr ""

#: ../../pep-3100.txt:93
msgid "Cleanup the APIs exported in pythonrun, etc."
msgstr ""

#: ../../pep-3100.txt:94
msgid "Some expressions will require parentheses that didn't in 2.x:"
msgstr ""

#: ../../pep-3100.txt:96
msgid ""
"List comprehensions will require parentheses around the iterables. This "
"will make list comprehensions more similar to generator comprehensions. "
"[x for x in 1, 2] will need to be:  [x for x in (1, 2)] [done]"
msgstr ""

#: ../../pep-3100.txt:99
msgid "Lambdas may have to be parenthesized [#pep308]_ [NO]"
msgstr ""

#: ../../pep-3100.txt:101
msgid ""
"In order to get rid of the confusion between __builtin__ and "
"__builtins__, it was decided to rename __builtin__ (the module) to "
"builtins, and to leave __builtins__ (the sandbox hook) alone. [#builtin]_"
" [#builtins]_ [done]"
msgstr ""

#: ../../pep-3100.txt:104
msgid ""
"Attributes on functions of the form ``func_whatever`` will be renamed "
"``__whatever__`` [17]_ [done]"
msgstr ""

#: ../../pep-3100.txt:106
msgid ""
"Set literals and comprehensions [19]_ [20]_ [done] {x} means set([x]); "
"{x, y} means set([x, y]). {F(x) for x in S if P(x)} means set(F(x) for x "
"in S if P(x)). NB. {range(x)} means set([range(x)]), NOT set(range(x)). "
"There's no literal for an empty set; use set() (or {1}&{2} :-). There's "
"no frozenset literal; they are too rarely needed."
msgstr ""

#: ../../pep-3100.txt:112
msgid ""
"The ``__nonzero__`` special method will be renamed to ``__bool__`` and "
"have to return a bool. The typeobject slot will be called ``tp_bool`` "
"[23]_ [done]"
msgstr ""

#: ../../pep-3100.txt:115
msgid ""
"Dict comprehensions, as first proposed in [#pep274]_ [done] {K(x): V(x) "
"for x in S if P(x)} means dict((K(x), V(x)) for x in S if P(x))."
msgstr ""

#: ../../pep-3100.txt:118 ../../pep-3100.txt:158 ../../pep-3100.txt:182
#: ../../pep-3100.txt:207
msgid "To be removed:"
msgstr ""

#: ../../pep-3100.txt:120
msgid "String exceptions: use instances of an Exception class [2]_ [done]"
msgstr ""

#: ../../pep-3100.txt:121
msgid ""
"``raise Exception, \"message\"``: use ``raise Exception(\"message\")`` "
"[12]_ [done]"
msgstr ""

#: ../../pep-3100.txt:123
msgid "``x``: use ``repr(x)`` [2]_ [done]"
msgstr ""

#: ../../pep-3100.txt:124
msgid "The ``<>`` operator: use ``!=`` instead [3]_ [done]"
msgstr ""

#: ../../pep-3100.txt:125
msgid ""
"The __mod__ and __divmod__ special methods on float. [they should stay] "
"[21]_"
msgstr ""

#: ../../pep-3100.txt:126
msgid "Drop unbound methods [7]_ [25]_ [done]"
msgstr ""

#: ../../pep-3100.txt:127
msgid "METH_OLDARGS [done]"
msgstr ""

#: ../../pep-3100.txt:128
msgid "WITH_CYCLE_GC [done]"
msgstr ""

#: ../../pep-3100.txt:129
msgid ""
"__getslice__, __setslice__, __delslice__ [#sequence-types]_; remove slice"
" opcodes and use slice objects. [done]"
msgstr ""

#: ../../pep-3100.txt:131
msgid ""
"``__oct__``, ``__hex__``: use ``__index__`` in ``oct()`` and ``hex()`` "
"instead. [done]"
msgstr ""

#: ../../pep-3100.txt:133
msgid "``__methods__`` and ``__members__`` [done]"
msgstr ""

#: ../../pep-3100.txt:134
msgid ""
"C APIs (see code): PyFloat_AsString, PyFloat_AsReprString, "
"PyFloat_AsStringEx, PySequence_In, PyEval_EvalFrame, PyEval_CallObject, "
"_PyObject_Del, _PyObject_GC_Del, _PyObject_GC_Track, _PyObject_GC_UnTrack"
" PyString_AsEncodedString, PyString_AsDecodedString PyArg_NoArgs, "
"PyArg_GetInt, intargfunc, intintargfunc"
msgstr ""

#: ../../pep-3100.txt:141
msgid "PyImport_ReloadModule ?"
msgstr ""

#: ../../pep-3100.txt:145
msgid "Atomic Types"
msgstr ""

#: ../../pep-3100.txt:147
msgid ""
"Remove distinction between int and long types; 'long' built-in type and "
"literals with 'L' or 'l' suffix disappear [1]_ [done]"
msgstr ""

#: ../../pep-3100.txt:149
msgid ""
"Make all strings be Unicode, and have a separate bytes() type [1]_ The "
"new string type will be called 'str'. See PEP 3137. [done]"
msgstr ""

#: ../../pep-3100.txt:151
msgid ""
"Return iterable views instead of lists where appropriate for atomic type "
"methods (e.g. ``dict.keys()``, ``dict.values()``, ``dict.items()``, "
"etc.); iter* methods will be removed. [done]"
msgstr ""

#: ../../pep-3100.txt:154
msgid "Make ``string.join()`` stringify its arguments? [18]_ [NO]"
msgstr ""

#: ../../pep-3100.txt:155
msgid ""
"Fix open() so it returns a ValueError if the mode is bad rather than "
"IOError. [done]"
msgstr ""

#: ../../pep-3100.txt:160
msgid ""
"``basestring.find()`` and ``basestring.rfind()``; use "
"``basestring.index()`` or ``basestring.[r]partition()`` or "
"``basestring.rindex()`` in a try/except block??? [13]_ [UNLIKELY]"
msgstr ""

#: ../../pep-3100.txt:163
msgid "``file.xreadlines()`` method [#file-object]_ [done]"
msgstr ""

#: ../../pep-3100.txt:164
msgid "``dict.setdefault()``? [15]_ [UNLIKELY]"
msgstr ""

#: ../../pep-3100.txt:165
msgid "``dict.has_key()`` method; use ``in`` operator [done]"
msgstr ""

#: ../../pep-3100.txt:166
msgid ""
"``list.sort()`` and ``builtin.sorted()`` methods: eliminate ``cmp`` "
"parameter [27]_ [done]"
msgstr ""

#: ../../pep-3100.txt:170
msgid "Built-in Namespace"
msgstr ""

#: ../../pep-3100.txt:172
msgid ""
"Make built-ins return an iterator where appropriate (e.g. ``range()``, "
"``zip()``, ``map()``, ``filter()``, etc.) [done]"
msgstr ""

#: ../../pep-3100.txt:174
msgid ""
"Remove ``input()`` and rename ``raw_input()`` to ``input()``. If you need"
" the old input(), use eval(input()). [done]"
msgstr ""

#: ../../pep-3100.txt:176
msgid ""
"Introduce ``trunc()``, which would call the ``__trunc__()`` method on its"
" argument; suggested use is for objects like float where calling "
"``__int__()`` has data loss, but an integral representation is still "
"desired? [8]_ [done]"
msgstr ""

#: ../../pep-3100.txt:179
msgid "Exception hierarchy changes [#pep352]_ [done]"
msgstr ""

#: ../../pep-3100.txt:180
msgid "Add a ``bin()`` function for a binary representation of integers [done]"
msgstr ""

#: ../../pep-3100.txt:184
msgid "``apply()``: use ``f(*args, **kw)`` instead [2]_ [done]"
msgstr ""

#: ../../pep-3100.txt:185
msgid "``buffer()``: must die (use a bytes() type instead) (?) [2]_ [done]"
msgstr ""

#: ../../pep-3100.txt:186
msgid ""
"``callable()``: just use isinstance(x, collections.Callable) (?) [2]_ "
"[done]"
msgstr ""

#: ../../pep-3100.txt:187
msgid "``compile()``: put in ``sys`` (or perhaps in a module of its own) [2]_"
msgstr ""

#: ../../pep-3100.txt:188
msgid "``coerce()``: no longer needed [2]_ [done]"
msgstr ""

#: ../../pep-3100.txt:189
msgid "``execfile()``, ``reload()``: use ``exec()`` [2]_ [done]"
msgstr ""

#: ../../pep-3100.txt:190
msgid "``intern()``: put in ``sys`` [2]_, [22]_ [done]"
msgstr ""

#: ../../pep-3100.txt:191
msgid ""
"``reduce()``: put in ``functools``, a loop is more readable most of the "
"times [2]_, [9]_ [done]"
msgstr ""

#: ../../pep-3100.txt:193
msgid "``xrange()``: use ``range()`` instead [1]_ [See range() above] [done]"
msgstr ""

#: ../../pep-3100.txt:196
msgid "``StandardError``: this is a relic from the original exception hierarchy;"
msgstr ""

#: ../../pep-3100.txt:195
msgid "subclass ``Exception`` instead. [done]"
msgstr ""

#: ../../pep-3100.txt:199
msgid "Standard library"
msgstr ""

#: ../../pep-3100.txt:201
msgid "Reorganize the standard library to not be as shallow?"
msgstr ""

#: ../../pep-3100.txt:202
msgid ""
"Move test code to where it belongs, there will be no more test() "
"functions in the standard library"
msgstr ""

#: ../../pep-3100.txt:204
msgid "Convert all tests to use either doctest or unittest."
msgstr ""

#: ../../pep-3100.txt:205
msgid ""
"For the procedures of standard library improvement, see PEP 3001 "
"[#pep3001]_"
msgstr ""

#: ../../pep-3100.txt:209
msgid "The sets module.  [done]"
msgstr ""

#: ../../pep-3100.txt:229
msgid "stdlib modules to be removed"
msgstr ""

#: ../../pep-3100.txt:213
msgid "see docstrings and comments in the source"
msgstr ""

#: ../../pep-3100.txt:212
msgid "``macfs`` [to do]"
msgstr ""

#: ../../pep-3100.txt:213
msgid ""
"``new``, ``reconvert``, ``stringold``, ``xmllib``, ``pcre``, ``pypcre``, "
"``strop`` [all done]"
msgstr ""

#: ../../pep-3100.txt:223
msgid "see PEP 4 [#pep4]_"
msgstr ""

#: ../../pep-3100.txt:216
msgid "``buildtools``, ``mimetools``, ``multifile``, ``rfc822``, [to do]"
msgstr ""

#: ../../pep-3100.txt:221
msgid ""
"``mpz``, ``posixfile``, ``regsub``, ``rgbimage``, ``sha``, ``statcache``,"
" ``sv``, ``TERMIOS``, ``timing`` [done]"
msgstr ""

#: ../../pep-3100.txt:223
msgid "``cfmfile``, ``gopherlib``, ``md5``, ``MimeWriter``, ``mimify`` [done]"
msgstr ""

#: ../../pep-3100.txt:224
msgid "``cl``, ``sets``, ``xreadlines``, ``rotor``, ``whrandom`` [done]"
msgstr ""

#: ../../pep-3100.txt:229
msgid "Everything in lib-old [#pep4]_ [done]"
msgstr ""

#: ../../pep-3100.txt:226
msgid ""
"``Para``, ``addpack``, ``cmp``, ``cmpcache``, ``codehack``, ``dircmp``, "
"``dump``, ``find``, ``fmt``, ``grep``, ``lockfile``, ``newdir``, ``ni``, "
"``packmail``, ``poly``, ``rand``, ``statcache``, ``tb``, ``tzparse``, "
"``util``, ``whatsound``, ``whrandom``, ``zmod``"
msgstr ""

#: ../../pep-3100.txt:231
msgid ""
"``sys.exitfunc``: use atexit module instead [#sys-module]_, [#exitfunc-"
"patch]_ [done]"
msgstr ""

#: ../../pep-3100.txt:233
msgid ""
"``sys.exc_type``, ``sys.exc_values``, ``sys.exc_traceback``: not thread-"
"safe; use ``sys.exc_info()`` or an attribute of the exception [2]_ [11]_ "
"[#sys-module]_ [done]"
msgstr ""

#: ../../pep-3100.txt:236
msgid ""
"``sys.exc_clear``: Python 3's except statements provide the same "
"functionality [24]_ [#pep3110]_ [#sys-module]_ [done]"
msgstr ""

#: ../../pep-3100.txt:238
msgid "``array.read``, ``array.write`` [#array-module]_"
msgstr ""

#: ../../pep-3100.txt:239
msgid ""
"``operator.isCallable`` : ``callable()`` built-in is being removed "
"[#operator-module]_ [#remove-operator-funcs]_ [done]"
msgstr ""

#: ../../pep-3100.txt:241
msgid ""
"``operator.sequenceIncludes`` : redundant thanks to ``operator.contains``"
" [#operator-module]_  [#remove-operator-funcs]_ [done]"
msgstr ""

#: ../../pep-3100.txt:243
msgid ""
"In the thread module, the acquire_lock() and release_lock() aliases for "
"the acquire() and release() methods on lock objects. (Probably also just "
"remove the thread module as a public API, in favor of always using "
"threading.py.)"
msgstr ""

#: ../../pep-3100.txt:247
msgid "UserXyz classes, in favour of XyzMixins."
msgstr ""

#: ../../pep-3100.txt:249
msgid "Remove the unreliable empty() and full() methods from Queue.py?"
msgstr ""

#: ../../pep-3100.txt:250
msgid "Remove jumpahead() from the random API?"
msgstr ""

#: ../../pep-3100.txt:251
msgid ""
"Make the primitive for random be something generating random bytes rather"
" than random floats?"
msgstr ""

#: ../../pep-3100.txt:253
msgid "Get rid of Cookie.SerialCookie and Cookie.SmartCookie?"
msgstr ""

#: ../../pep-3100.txt:254
msgid ""
"Modify the heapq.heapreplace() API to compare the new value to the top of"
" the heap?"
msgstr ""

#: ../../pep-3100.txt:258
msgid "Outstanding Issues"
msgstr ""

#: ../../pep-3100.txt:260
msgid ""
"Require C99, so we can use // comments, named initializers, declare "
"variables without introducing a new scope, among other benefits.  (Also "
"better support for IEEE floating point issues like NaN and infinities?)"
msgstr ""

#: ../../pep-3100.txt:264
msgid "Remove support for old systems, including: BeOS, RISCOS, (SGI) Irix, Tru64"
msgstr ""

#: ../../pep-3100.txt:268
msgid "References"
msgstr ""

#: ../../pep-3100.txt:270
msgid ""
"PyCon 2003 State of the Union: "
"http://www.python.org/doc/essays/ppt/pycon2003/pycon2003.ppt"
msgstr ""

#: ../../pep-3100.txt:273
msgid ""
"Python Regrets: "
"http://www.python.org/doc/essays/ppt/regrets/PythonRegrets.pdf"
msgstr ""

#: ../../pep-3100.txt:276
msgid "Python Wiki: http://www.python.org/moin/Python3.0"
msgstr ""

#: ../../pep-3100.txt:279
msgid ""
"python-dev email (\"Constancy of None\") "
"https://mail.python.org/pipermail/python-dev/2004-July/046294.html"
msgstr ""

#: ../../pep-3100.txt:282
msgid ""
"python-dev email (' \"as\" to be a keyword?') "
"https://mail.python.org/pipermail/python-dev/2004-July/046316.html"
msgstr ""

#: ../../pep-3100.txt:285
msgid ""
"python-dev email (\"Comparing heterogeneous types\") "
"https://mail.python.org/pipermail/python-dev/2004-June/045111.html"
msgstr ""

#: ../../pep-3100.txt:288
msgid ""
"python-dev email (\"Let's get rid of unbound methods\") "
"https://mail.python.org/pipermail/python-dev/2005-January/050625.html"
msgstr ""

#: ../../pep-3100.txt:291
msgid ""
"python-dev email (\"Fixing _PyEval_SliceIndex so that integer-like "
"objects can be used\") https://mail.python.org/pipermail/python-"
"dev/2005-February/051674.html"
msgstr ""

#: ../../pep-3100.txt:295
msgid ""
"Guido's blog (\"The fate of reduce() in Python 3000\") "
"http://www.artima.com/weblogs/viewpost.jsp?thread=98196"
msgstr ""

#: ../../pep-3100.txt:298
msgid ""
"Guido's blog (\"Python Optional Typechecking Redux\") "
"http://www.artima.com/weblogs/viewpost.jsp?thread=89161"
msgstr ""

#: ../../pep-3100.txt:301
msgid ""
"python-dev email (\"anonymous blocks\") https://mail.python.org/pipermail"
"/python-dev/2005-April/053060.html"
msgstr ""

#: ../../pep-3100.txt:304
msgid ""
"python-dev email (\"PEP 8: exception style\") "
"https://mail.python.org/pipermail/python-dev/2005-August/055190.html"
msgstr ""

#: ../../pep-3100.txt:307
msgid ""
"python-dev email (Remove str.find in 3.0?) "
"https://mail.python.org/pipermail/python-dev/2005-August/055705.html"
msgstr ""

#: ../../pep-3100.txt:310
msgid ""
"python-dev email (Replacement for print in Python 3.0) "
"https://mail.python.org/pipermail/python-dev/2005-September/056154.html"
msgstr ""

#: ../../pep-3100.txt:313
msgid ""
"python-dev email (\"defaultdict\") https://mail.python.org/pipermail"
"/python-dev/2006-February/061261.html"
msgstr ""

#: ../../pep-3100.txt:316
msgid ""
"python-3000 email "
"https://mail.python.org/pipermail/python-3000/2006-April/000996.html"
msgstr ""

#: ../../pep-3100.txt:319
msgid ""
"python-3000 email (\"Pronouncement on parameter lists\") "
"https://mail.python.org/pipermail/python-3000/2006-April/001175.html"
msgstr ""

#: ../../pep-3100.txt:322
msgid ""
"python-3000 email (\"More wishful thinking\") "
"https://mail.python.org/pipermail/python-3000/2006-April/000810.html"
msgstr ""

#: ../../pep-3100.txt:325
msgid ""
"python-3000 email (\"sets in P3K?\") "
"https://mail.python.org/pipermail/python-3000/2006-April/001286.html"
msgstr ""

#: ../../pep-3100.txt:328
msgid ""
"python-3000 email (\"sets in P3K?\") "
"https://mail.python.org/pipermail/python-3000/2006-May/001666.html"
msgstr ""

#: ../../pep-3100.txt:331
msgid ""
"python-3000 email (\"bug in modulus?\") "
"https://mail.python.org/pipermail/python-3000/2006-May/001735.html"
msgstr ""

#: ../../pep-3100.txt:334
msgid ""
"SF patch \"sys.id() and sys.intern()\" "
"https://bugs.python.org/issue1601678"
msgstr ""

#: ../../pep-3100.txt:337
msgid ""
"python-3000 email (\"__nonzero__ vs. __bool__\") "
"https://mail.python.org/pipermail/python-3000/2006-November/004524.html"
msgstr ""

#: ../../pep-3100.txt:340
msgid ""
"python-3000 email (\"Pre-peps on raise and except changes\") "
"https://mail.python.org/pipermail/python-3000/2007-February/005672.html"
msgstr ""

#: ../../pep-3100.txt:343
msgid ""
"python-3000 email (\"Py3.0 Library Ideas\") "
"https://mail.python.org/pipermail/python-3000/2007-February/005726.html"
msgstr ""

#: ../../pep-3100.txt:346
msgid ""
"python-dev email (\"Should we do away with unbound methods in Py3k?\") "
"https://mail.python.org/pipermail/python-dev/2007-November/075279.html"
msgstr ""

#: ../../pep-3100.txt:349
msgid ""
"python-dev email (\"Mutable sequence .sort() signature\") "
"https://mail.python.org/pipermail/python-dev/2008-February/076818.html"
msgstr ""

#: ../../pep-3100.txt:352
msgid ""
"Python docs (sys -- System-specific parameters and functions) "
"http://docs.python.org/library/sys.html"
msgstr ""

#: ../../pep-3100.txt:355
msgid ""
"Python docs (operator -- Standard operators as functions) "
"http://docs.python.org/library/operator.html"
msgstr ""

#: ../../pep-3100.txt:358
msgid ""
"Python docs (array -- Efficient arrays of numeric values) "
"http://docs.python.org/library/array.html"
msgstr ""

#: ../../pep-3100.txt:361
msgid "Python docs (File objects) http://docs.python.org/library/stdtypes.html"
msgstr ""

#: ../../pep-3100.txt:364
msgid ""
"Python docs (Additional methods for emulation of sequence types) "
"http://docs.python.org/reference/datamodel.html#additional-methods-for-"
"emulation-of-sequence-types"
msgstr ""

#: ../../pep-3100.txt:367
msgid ""
"PEP 4 (\"Deprecation of Standard Modules\") "
"http://www.python.org/dev/peps/pep-0004"
msgstr ""

#: ../../pep-3100.txt:370
msgid ""
"PEP 238 (Changing the Division Operator) "
"http://www.python.org/dev/peps/pep-0238"
msgstr ""

#: ../../pep-3100.txt:373
msgid "PEP 274 (Dict Comprehensions) http://www.python.org/dev/peps/pep-0274"
msgstr ""

#: ../../pep-3100.txt:376
msgid ""
"PEP 289 (\"Generator Expressions\") "
"http://www.python.org/dev/peps/pep-0289"
msgstr ""

#: ../../pep-3100.txt:379
msgid ""
"PEP 299 (\"Special __main__() function in modules\") "
"http://www.python.org/dev/peps/pep-0299"
msgstr ""

#: ../../pep-3100.txt:382
msgid ""
"PEP 308 (\"Conditional Expressions\") "
"http://www.python.org/dev/peps/pep-0308"
msgstr ""

#: ../../pep-3100.txt:385
msgid ""
"PEP 328 (Imports: Multi-Line and Absolute/Relative) "
"http://www.python.org/dev/peps/pep-0328"
msgstr ""

#: ../../pep-3100.txt:388
msgid "PEP 343 (The \"with\" Statement) http://www.python.org/dev/peps/pep-0343"
msgstr ""

#: ../../pep-3100.txt:391
msgid ""
"PEP 352 (Required Superclass for Exceptions) "
"http://www.python.org/dev/peps/pep-0352"
msgstr ""

#: ../../pep-3100.txt:394
msgid ""
"PEP 3001 (Process for reviewing and improving standard library modules) "
"http://www.python.org/dev/peps/pep-3001"
msgstr ""

#: ../../pep-3100.txt:397
msgid ""
"PEP 3099 (Things that will Not Change in Python 3000) "
"http://www.python.org/dev/peps/pep-3099"
msgstr ""

#: ../../pep-3100.txt:400
msgid "PEP 3105 (Make print a function) http://www.python.org/dev/peps/pep-3105"
msgstr ""

#: ../../pep-3100.txt:403
msgid "PEP 3107 (Function Annotations) http://www.python.org/dev/peps/pep-3107"
msgstr ""

#: ../../pep-3100.txt:406
msgid ""
"PEP 3110 (Catching Exceptions in Python 3000) "
"http://www.python.org/dev/peps/pep-3110/#semantic-changes"
msgstr ""

#: ../../pep-3100.txt:409
msgid ""
"Approach to resolving __builtin__ vs __builtins__ "
"https://mail.python.org/pipermail/python-3000/2007-March/006161.html"
msgstr ""

#: ../../pep-3100.txt:412
msgid ""
"New name for __builtins__ https://mail.python.org/pipermail/python-"
"dev/2007-November/075388.html"
msgstr ""

#: ../../pep-3100.txt:415
msgid "Patch to remove sys.exitfunc https://bugs.python.org/issue1680961"
msgstr ""

#: ../../pep-3100.txt:418
msgid ""
"Remove deprecated functions from operator "
"https://bugs.python.org/issue1516309"
msgstr ""

#: ../../pep-3100.txt:422
msgid "Copyright"
msgstr ""

#: ../../pep-3100.txt:424
msgid "This document has been placed in the public domain."
msgstr ""

