# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0309.txt
msgid "PEP"
msgstr ""

#: ../../pep-0309.txt:1
msgid "309"
msgstr ""

#: ../../pep-0309.txt
msgid "Title"
msgstr ""

#: ../../pep-0309.txt:2
msgid "Partial Function Application"
msgstr ""

#: ../../pep-0309.txt
msgid "Author"
msgstr ""

#: ../../pep-0309.txt:5
msgid "Peter Harris <scav@blueyonder.co.uk>"
msgstr ""

#: ../../pep-0309.txt
msgid "Status"
msgstr ""

#: ../../pep-0309.txt:6
msgid "Final"
msgstr ""

#: ../../pep-0309.txt
msgid "Type"
msgstr ""

#: ../../pep-0309.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0309.txt
msgid "Created"
msgstr ""

#: ../../pep-0309.txt:9
msgid "08-Feb-2003"
msgstr ""

#: ../../pep-0309.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0309.txt:10
msgid "2.5"
msgstr ""

#: ../../pep-0309.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0309.txt:11
msgid "10-Feb-2003, 27-Feb-2003, 22-Feb-2004, 28-Apr-2006"
msgstr ""

#: ../../pep-0309.txt:15
msgid "Note"
msgstr ""

#: ../../pep-0309.txt:17
msgid ""
"Following the acceptance of this PEP, further discussion on python-dev "
"and comp.lang.python revealed a desire for several tools that operated on"
" function objects, but were not related to functional programming.  "
"Rather than create a new module for these tools, it was agreed [1]_ that "
"the \"functional\" module be renamed to \"functools\" to reflect its "
"newly-widened focus."
msgstr ""

#: ../../pep-0309.txt:24
msgid ""
"References in this PEP to a \"functional\" module have been left in for "
"historical reasons."
msgstr ""

#: ../../pep-0309.txt:29
msgid "Abstract"
msgstr ""

#: ../../pep-0309.txt:31
msgid ""
"This proposal is for a function or callable class that allows a new "
"callable to be constructed from a callable and a partial argument list "
"(including positional and keyword arguments)."
msgstr ""

#: ../../pep-0309.txt:35
msgid ""
"I propose a standard library module called \"functional\", to hold useful"
" higher-order functions, including the implementation of partial()."
msgstr ""

#: ../../pep-0309.txt:39
msgid "An implementation has been submitted to SourceForge [2]_."
msgstr ""

#: ../../pep-0309.txt:43
msgid "Acceptance"
msgstr ""

#: ../../pep-0309.txt:45
msgid ""
"Patch #941881 was accepted and applied in 2005 for Py2.5.  It is "
"essentially as outlined here, a partial() type constructor binding "
"leftmost positional arguments and any keywords.  The partial object has "
"three read-only attributes func, args, and keywords.  Calls to the "
"partial object can specify keywords that override those in the object "
"itself."
msgstr ""

#: ../../pep-0309.txt:51
msgid ""
"There is a separate and continuing discussion of whether to modify the "
"partial implementation with a __get__ method to more closely emulate the "
"behavior of an equivalent function."
msgstr ""

#: ../../pep-0309.txt:56
msgid "Motivation"
msgstr ""

#: ../../pep-0309.txt:58
msgid ""
"In functional programming, function currying is a way of implementing "
"multi-argument functions in terms of single-argument functions.  A "
"function with N arguments is really a function with 1 argument that "
"returns another function taking (N-1) arguments.  Function application in"
" languages like Haskell and ML works such that a function call::"
msgstr ""

#: ../../pep-0309.txt:66
msgid "actually means::"
msgstr ""

#: ../../pep-0309.txt:70
msgid ""
"This would be only an obscure theoretical issue except that in actual "
"programming it turns out to be very useful.  Expressing a function in "
"terms of partial application of arguments to another function can be both"
" elegant and powerful, and in functional languages it is heavily used."
msgstr ""

#: ../../pep-0309.txt:76
msgid ""
"In some functional languages, (e.g. Miranda) you can use an expression "
"such as ``(+1)`` to mean the equivalent of Python's ``(lambda x: x + "
"1)``."
msgstr ""

#: ../../pep-0309.txt:80
msgid ""
"In general, languages like that are strongly typed, so the compiler "
"always knows the number of arguments expected and can do the right thing "
"when presented with a functor and less arguments than expected."
msgstr ""

#: ../../pep-0309.txt:84
msgid ""
"Python does not implement multi-argument functions by currying, so if you"
" want a function with partially-applied arguments you would probably use "
"a lambda as above, or define a named function for each instance."
msgstr ""

#: ../../pep-0309.txt:89
msgid ""
"However, lambda syntax is not to everyone's taste, so say the least. "
"Furthermore, Python's flexible parameter passing using both positional "
"and keyword presents an opportunity to generalise the idea of partial "
"application and do things that lambda cannot."
msgstr ""

#: ../../pep-0309.txt:96
msgid "Example Implementation"
msgstr ""

#: ../../pep-0309.txt:98
msgid ""
"Here is one way to do a create a callable with partially-applied "
"arguments in Python.  The implementation below is based on improvements "
"provided by Scott David Daniels::"
msgstr ""

#: ../../pep-0309.txt:116
msgid ""
"(A recipe similar to this has been in the Python Cookbook for some time "
"[3]_.)"
msgstr ""

#: ../../pep-0309.txt:119
msgid ""
"Note that when the object is called as though it were a function, "
"positional arguments are appended to those provided to the constructor, "
"and keyword arguments override and augment those provided to the "
"constructor."
msgstr ""

#: ../../pep-0309.txt:124
msgid ""
"Positional arguments, keyword arguments or both can be supplied at when "
"creating the object and when calling it."
msgstr ""

#: ../../pep-0309.txt:129
msgid "Examples of Use"
msgstr ""

#: ../../pep-0309.txt:131
msgid ""
"So ``partial(operator.add, 1)`` is a bit like ``(lambda x: 1 + x)``. Not "
"an example where you see the benefits, of course."
msgstr ""

#: ../../pep-0309.txt:134
msgid ""
"Note too, that you could wrap a class in the same way, since classes "
"themselves are callable factories for objects.  So in some cases, rather "
"than defining a subclass, you can specialise classes by partial "
"application of the arguments to the constructor."
msgstr ""

#: ../../pep-0309.txt:139
msgid ""
"For example, ``partial(Tkinter.Label, fg='blue')`` makes Tkinter Labels "
"that have a blue foreground by default."
msgstr ""

#: ../../pep-0309.txt:142
msgid ""
"Here's a simple example that uses partial application to construct "
"callbacks for Tkinter widgets on the fly::"
msgstr ""

#: ../../pep-0309.txt:162
msgid "Abandoned Syntax Proposal"
msgstr ""

#: ../../pep-0309.txt:164
msgid ""
"I originally suggested the syntax ``fn@(*args, **kw)``, meaning the same "
"as ``partial(fn, *args, **kw)``."
msgstr ""

#: ../../pep-0309.txt:167
msgid ""
"The @ sign is used in some assembly languages to imply register "
"indirection, and the use here is also a kind of indirection. ``f@(x)`` is"
" not ``f(x)``, but a thing that becomes ``f(x)`` when you call it."
msgstr ""

#: ../../pep-0309.txt:172
msgid ""
"It was not well-received, so I have withdrawn this part of the proposal."
"  In any case, @ has been taken for the new decorator syntax."
msgstr ""

#: ../../pep-0309.txt:177
msgid "Feedback from comp.lang.python and python-dev"
msgstr ""

#: ../../pep-0309.txt:179
msgid "Among the opinions voiced were the following (which I summarise):"
msgstr ""

#: ../../pep-0309.txt:181
msgid "Lambda is good enough."
msgstr ""

#: ../../pep-0309.txt:183
msgid "The @ syntax is ugly (unanimous)."
msgstr ""

#: ../../pep-0309.txt:185
msgid ""
"It's really a curry rather than a closure.  There is an almost identical "
"implementation of a curry class on ActiveState's Python Cookbook."
msgstr ""

#: ../../pep-0309.txt:189
msgid "A curry class would indeed be a useful addition to the standard library."
msgstr ""

#: ../../pep-0309.txt:192
msgid ""
"It isn't function currying, but partial application.  Hence the name is "
"now proposed to be partial()."
msgstr ""

#: ../../pep-0309.txt:195
msgid "It maybe isn't useful enough to be in the built-ins."
msgstr ""

#: ../../pep-0309.txt:197
msgid ""
"The idea of a module called ``functional`` was well received, and there "
"are other things that belong there (for example function composition)."
msgstr ""

#: ../../pep-0309.txt:201
msgid ""
"For completeness, another object that appends partial arguments after "
"those supplied in the function call (maybe called ``rightcurry``) has "
"been suggested."
msgstr ""

#: ../../pep-0309.txt:205
msgid ""
"I agree that lambda is usually good enough, just not always.  And I want "
"the possibility of useful introspection and subclassing."
msgstr ""

#: ../../pep-0309.txt:208
msgid ""
"I disagree that @ is particularly ugly, but it may be that I'm just "
"weird.  We have dictionary, list and tuple literals neatly differentiated"
" by special punctuation -- a way of directly expressing partially-applied"
" function literals is not such a stretch.  However, not one single person"
" has said they like it, so as far as I'm concerned it's a dead parrot."
msgstr ""

#: ../../pep-0309.txt:215
msgid ""
"I concur with calling the class partial rather than curry or closure, so "
"I have amended the proposal in this PEP accordingly.  But not throughout:"
" some incorrect references to 'curry' have been left in since that's "
"where the discussion was at the time."
msgstr ""

#: ../../pep-0309.txt:220
msgid ""
"Partially applying arguments from the right, or inserting arguments at "
"arbitrary positions creates its own problems, but pending discovery of a "
"good implementation and non-confusing semantics, I don't think it should "
"be ruled out."
msgstr ""

#: ../../pep-0309.txt:225
msgid "Carl Banks posted an implementation as a real functional closure::"
msgstr ""

#: ../../pep-0309.txt:234
msgid "which he assures me is more efficient."
msgstr ""

#: ../../pep-0309.txt:236
msgid ""
"I also coded the class in Pyrex, to estimate how the performance might be"
" improved by coding it in C::"
msgstr ""

#: ../../pep-0309.txt:256
#, python-format
msgid ""
"The performance gain in Pyrex is less than 100% over the nested function "
"implementation, since to be fully general it has to operate by Python API"
" calls.  For the same reason, a C implementation will be unlikely to be "
"much faster, so the case for a built-in coded in C is not very strong."
msgstr ""

#: ../../pep-0309.txt:264
msgid "Summary"
msgstr ""

#: ../../pep-0309.txt:266
msgid ""
"I prefer that some means to partially-apply functions and other callables"
" should be present in the standard library."
msgstr ""

#: ../../pep-0309.txt:269
msgid ""
"A standard library module ``functional`` should contain an implementation"
" of ``partial``, and any other higher-order functions the community want."
"  Other functions that might belong there fall outside the scope of this "
"PEP though."
msgstr ""

#: ../../pep-0309.txt:274
msgid ""
"Patches for the implementation, documentation and unit tests (SF patches "
"931005_, 931007_, and 931010_ respectively) have been submitted but not "
"yet checked in."
msgstr ""

#: ../../pep-0309.txt:278
msgid ""
"A C implementation by Hye-Shik Chang has also been submitted, although it"
" is not expected to be included until after the Python implementation has"
" proven itself useful enough to be worth optimising."
msgstr ""

#: ../../pep-0309.txt:284
msgid "References"
msgstr ""

#: ../../pep-0309.txt:286
msgid "https://mail.python.org/pipermail/python-dev/2006-March/062290.html"
msgstr ""

#: ../../pep-0309.txt:288
msgid "Patches 931005_, 931007_, and 931010_."
msgstr ""

#: ../../pep-0309.txt:290
msgid "http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/52549"
msgstr ""

#: ../../pep-0309.txt:298
msgid "Copyright"
msgstr ""

#: ../../pep-0309.txt:300
msgid "This document has been placed in the public domain."
msgstr ""

