# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0339.txt
msgid "PEP"
msgstr ""

#: ../../pep-0339.txt:1
msgid "339"
msgstr ""

#: ../../pep-0339.txt
msgid "Title"
msgstr ""

#: ../../pep-0339.txt:2
msgid "Design of the CPython Compiler"
msgstr ""

#: ../../pep-0339.txt
msgid "Author"
msgstr ""

#: ../../pep-0339.txt:5
msgid "Brett Cannon <brett@python.org>"
msgstr ""

#: ../../pep-0339.txt
msgid "Status"
msgstr ""

#: ../../pep-0339.txt:6
msgid "Withdrawn"
msgstr ""

#: ../../pep-0339.txt
msgid "Type"
msgstr ""

#: ../../pep-0339.txt:7
msgid "Informational"
msgstr ""

#: ../../pep-0339.txt
msgid "Created"
msgstr ""

#: ../../pep-0339.txt:9
msgid "02-Feb-2005"
msgstr ""

#: ../../pep-0339.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0339.txt:14
msgid "This PEP has been withdrawn and moved to the Python developer's guide."
msgstr ""

#: ../../pep-0339.txt:19
msgid "Abstract"
msgstr ""

#: ../../pep-0339.txt:21
msgid ""
"Historically (through 2.4), compilation from source code to bytecode "
"involved two steps:"
msgstr ""

#: ../../pep-0339.txt:24
msgid "Parse the source code into a parse tree (Parser/pgen.c)"
msgstr ""

#: ../../pep-0339.txt:25
msgid "Emit bytecode based on the parse tree (Python/compile.c)"
msgstr ""

#: ../../pep-0339.txt:27
msgid ""
"Historically, this is not how a standard compiler works.  The usual steps"
" for compilation are:"
msgstr ""

#: ../../pep-0339.txt:30
msgid "Parse source code into a parse tree (Parser/pgen.c)"
msgstr ""

#: ../../pep-0339.txt:31
msgid "Transform parse tree into an Abstract Syntax Tree (Python/ast.c)"
msgstr ""

#: ../../pep-0339.txt:32
msgid "Transform AST into a Control Flow Graph (Python/compile.c)"
msgstr ""

#: ../../pep-0339.txt:33
msgid "Emit bytecode based on the Control Flow Graph (Python/compile.c)"
msgstr ""

#: ../../pep-0339.txt:35
msgid ""
"Starting with Python 2.5, the above steps are now used.  This change was "
"done to simplify compilation by breaking it into three steps. The purpose"
" of this document is to outline how the latter three steps of the process"
" works."
msgstr ""

#: ../../pep-0339.txt:40
msgid ""
"This document does not touch on how parsing works beyond what is needed "
"to explain what is needed for compilation.  It is also not exhaustive in "
"terms of the how the entire system works.  You will most likely need to "
"read some source to have an exact understanding of all details."
msgstr ""

#: ../../pep-0339.txt:47
msgid "Parse Trees"
msgstr ""

#: ../../pep-0339.txt:49
msgid ""
"Python's parser is an LL(1) parser mostly based on the implementation "
"laid out in the Dragon Book [Aho86]_."
msgstr ""

#: ../../pep-0339.txt:52
msgid ""
"The grammar file for Python can be found in Grammar/Grammar with the "
"numeric value of grammar rules are stored in Include/graminit.h.  The "
"numeric values for types of tokens (literal tokens, such as ``:``, "
"numbers, etc.) are kept in Include/token.h).  The parse tree made up of "
"``node *`` structs (as defined in Include/node.h)."
msgstr ""

#: ../../pep-0339.txt:58
msgid ""
"Querying data from the node structs can be done with the following macros"
" (which are all defined in Include/token.h):"
msgstr ""

#: ../../pep-0339.txt:61
msgid "``CHILD(node *, int)``"
msgstr ""

#: ../../pep-0339.txt:62
msgid "Returns the nth child of the node using zero-offset indexing"
msgstr ""

#: ../../pep-0339.txt:64
msgid "``RCHILD(node *, int)``"
msgstr ""

#: ../../pep-0339.txt:64
msgid ""
"Returns the nth child of the node from the right side; use negative "
"numbers!"
msgstr ""

#: ../../pep-0339.txt:66
msgid "``NCH(node *)``"
msgstr ""

#: ../../pep-0339.txt:67
msgid "Number of children the node has"
msgstr ""

#: ../../pep-0339.txt:69
msgid "``STR(node *)``"
msgstr ""

#: ../../pep-0339.txt:69
msgid ""
"String representation of the node; e.g., will return ``:`` for a COLON "
"token"
msgstr ""

#: ../../pep-0339.txt:71
msgid "``TYPE(node *)``"
msgstr ""

#: ../../pep-0339.txt:72
msgid "The type of node as specified in ``Include/graminit.h``"
msgstr ""

#: ../../pep-0339.txt:73
msgid "``REQ(node *, TYPE)``"
msgstr ""

#: ../../pep-0339.txt:74
msgid "Assert that the node is the type that is expected"
msgstr ""

#: ../../pep-0339.txt:77
msgid "``LINENO(node *)``"
msgstr ""

#: ../../pep-0339.txt:76
msgid ""
"retrieve the line number of the source code that led to the creation of "
"the parse rule; defined in Python/ast.c"
msgstr ""

#: ../../pep-0339.txt:79
msgid "To tie all of this example, consider the rule for 'while'::"
msgstr ""

#: ../../pep-0339.txt:83
msgid ""
"The node representing this will have ``TYPE(node) == while_stmt`` and the"
" number of children can be 4 or 7 depending on if there is an 'else' "
"statement.  To access what should be the first ':' and require it be an "
"actual ':' token, `(REQ(CHILD(node, 2), COLON)``."
msgstr ""

#: ../../pep-0339.txt:90
msgid "Abstract Syntax Trees (AST)"
msgstr ""

#: ../../pep-0339.txt:92
msgid ""
"The abstract syntax tree (AST) is a high-level representation of the "
"program structure without the necessity of containing the source code; it"
" can be thought of as an abstract representation of the source code.  The"
" specification of the AST nodes is specified using the Zephyr Abstract "
"Syntax Definition Language (ASDL) [Wang97]_."
msgstr ""

#: ../../pep-0339.txt:98
msgid ""
"The definition of the AST nodes for Python is found in the file "
"Parser/Python.asdl ."
msgstr ""

#: ../../pep-0339.txt:101
msgid ""
"Each AST node (representing statements, expressions, and several "
"specialized types, like list comprehensions and exception handlers) is "
"defined by the ASDL.  Most definitions in the AST correspond to a "
"particular source construct, such as an 'if' statement or an attribute "
"lookup.  The definition is independent of its realization in any "
"particular programming language."
msgstr ""

#: ../../pep-0339.txt:108
msgid ""
"The following fragment of the Python ASDL construct demonstrates the "
"approach and syntax::"
msgstr ""

#: ../../pep-0339.txt:119
msgid ""
"The preceding example describes three different kinds of statements; "
"function definitions, return statements, and yield statements.  All three"
" kinds are considered of type stmt as shown by '|' separating the various"
" kinds.  They all take arguments of various kinds and amounts."
msgstr ""

#: ../../pep-0339.txt:124
msgid ""
"Modifiers on the argument type specify the number of values needed; '?' "
"means it is optional, '*' means 0 or more, no modifier means only one "
"value for the argument and it is required.  FunctionDef, for instance, "
"takes an identifier for the name, 'arguments' for args, zero or more stmt"
" arguments for 'body', and zero or more expr arguments for 'decorators'."
msgstr ""

#: ../../pep-0339.txt:131
msgid ""
"Do notice that something like 'arguments', which is a node type, is "
"represented as a single AST node and not as a sequence of nodes as with "
"stmt as one might expect."
msgstr ""

#: ../../pep-0339.txt:135
msgid ""
"All three kinds also have an 'attributes' argument; this is shown by the "
"fact that 'attributes' lacks a '|' before it."
msgstr ""

#: ../../pep-0339.txt:138
msgid "The statement definitions above generate the following C structure type::"
msgstr ""

#: ../../pep-0339.txt:162
msgid ""
"Also generated are a series of constructor functions that allocate (in "
"this case) a stmt_ty struct with the appropriate initialization.  The "
"'kind' field specifies which component of the union is initialized.  The "
"FunctionDef() constructor function sets 'kind' to FunctionDef_kind and "
"initializes the 'name', 'args', 'body', and 'attributes' fields."
msgstr ""

#: ../../pep-0339.txt:170
msgid "Memory Management"
msgstr ""

#: ../../pep-0339.txt:172
msgid ""
"Before discussing the actual implementation of the compiler, a discussion"
" of how memory is handled is in order.  To make memory management simple,"
" an arena is used.  This means that a memory is pooled in a single "
"location for easy allocation and removal.  What this gives us is the "
"removal of explicit memory deallocation.  Because memory allocation for "
"all needed memory in the compiler registers that memory with the arena, a"
" single call to free the arena is all that is needed to completely free "
"all memory used by the compiler."
msgstr ""

#: ../../pep-0339.txt:180
msgid ""
"In general, unless you are working on the critical core of the compiler, "
"memory management can be completely ignored.  But if you are working at "
"either the very beginning of the compiler or the end, you need to care "
"about how the arena works.  All code relating to the arena is in either "
"Include/pyarena.h or Python/pyarena.c ."
msgstr ""

#: ../../pep-0339.txt:186
msgid ""
"PyArena_New() will create a new arena.  The returned PyArena structure "
"will store pointers to all memory given to it.  This does the bookkeeping"
" of what memory needs to be freed when the compiler is finished with the "
"memory it used. That freeing is done with PyArena_Free().  This needs to "
"only be called in strategic areas where the compiler exits."
msgstr ""

#: ../../pep-0339.txt:192
msgid ""
"As stated above, in general you should not have to worry about memory "
"management when working on the compiler.  The technical details have been"
" designed to be hidden from you for most cases."
msgstr ""

#: ../../pep-0339.txt:196
msgid ""
"The only exception comes about when managing a PyObject.  Since the rest "
"of Python uses reference counting, there is extra support added to the "
"arena to cleanup each PyObject that was allocated.  These cases are very "
"rare.  However, if you've allocated a PyObject, you must tell the arena "
"about it by calling PyArena_AddPyObject()."
msgstr ""

#: ../../pep-0339.txt:204
msgid "Parse Tree to AST"
msgstr ""

#: ../../pep-0339.txt:206
msgid ""
"The AST is generated from the parse tree (see Python/ast.c) using the "
"function ``PyAST_FromNode()``."
msgstr ""

#: ../../pep-0339.txt:209
msgid ""
"The function begins a tree walk of the parse tree, creating various AST "
"nodes as it goes along.  It does this by allocating all new nodes it "
"needs, calling the proper AST node creation functions for any required "
"supporting functions, and connecting them as needed."
msgstr ""

#: ../../pep-0339.txt:214
msgid ""
"Do realize that there is no automated nor symbolic connection between the"
" grammar specification and the nodes in the parse tree.  No help is "
"directly provided by the parse tree as in yacc."
msgstr ""

#: ../../pep-0339.txt:218
msgid ""
"For instance, one must keep track of which node in the parse tree one is "
"working with (e.g., if you are working with an 'if' statement you need to"
" watch out for the ':' token to find the end of the conditional)."
msgstr ""

#: ../../pep-0339.txt:222
msgid ""
"The functions called to generate AST nodes from the parse tree all have "
"the name ast_for_xx where xx is what the grammar rule that the function "
"handles (alias_for_import_name is the exception to this).  These in turn "
"call the constructor functions as defined by the ASDL grammar and "
"contained in Python/Python-ast.c (which was generated by "
"Parser/asdl_c.py) to create the nodes of the AST.  This all leads to a "
"sequence of AST nodes stored in asdl_seq structs."
msgstr ""

#: ../../pep-0339.txt:231
msgid ""
"Function and macros for creating and using ``asdl_seq *`` types as found "
"in Python/asdl.c and Include/asdl.h:"
msgstr ""

#: ../../pep-0339.txt:234
msgid "``asdl_seq_new()``"
msgstr ""

#: ../../pep-0339.txt:235
msgid "Allocate memory for an asdl_seq for the specified length"
msgstr ""

#: ../../pep-0339.txt:236
msgid "``asdl_seq_GET()``"
msgstr ""

#: ../../pep-0339.txt:237
msgid "Get item held at a specific position in an asdl_seq"
msgstr ""

#: ../../pep-0339.txt:238
msgid "``asdl_seq_SET()``"
msgstr ""

#: ../../pep-0339.txt:239
msgid "Set a specific index in an asdl_seq to the specified value"
msgstr ""

#: ../../pep-0339.txt:241
msgid "``asdl_seq_LEN(asdl_seq *)``"
msgstr ""

#: ../../pep-0339.txt:241
msgid "Return the length of an asdl_seq"
msgstr ""

#: ../../pep-0339.txt:243
msgid ""
"If you are working with statements, you must also worry about keeping "
"track of what line number generated the statement.  Currently the line "
"number is passed as the last parameter to each stmt_ty function."
msgstr ""

#: ../../pep-0339.txt:249
msgid "Control Flow Graphs"
msgstr ""

#: ../../pep-0339.txt:251
msgid ""
"A control flow graph (often referenced by its acronym, CFG) is a directed"
" graph that models the flow of a program using basic blocks that contain "
"the intermediate representation (abbreviated \"IR\", and in this case is "
"Python bytecode) within the blocks.  Basic blocks themselves are a block "
"of IR that has a single entry point but possibly multiple exit points.  "
"The single entry point is the key to basic blocks; it all has to do with "
"jumps.  An entry point is the target of something that changes control "
"flow (such as a function call or a jump) while exit points are "
"instructions that would change the flow of the program (such as jumps and"
" 'return' statements).  What this means is that a basic block is a chunk "
"of code that starts at the entry point and runs to an exit point or the "
"end of the block."
msgstr ""

#: ../../pep-0339.txt:264
msgid ""
"As an example, consider an 'if' statement with an 'else' block.  The "
"guard on the 'if' is a basic block which is pointed to by the basic block"
" containing the code leading to the 'if' statement.  The 'if' statement "
"block contains jumps (which are exit points) to the true body of the 'if'"
" and the 'else' body (which may be NULL), each of which are their own "
"basic blocks.  Both of those blocks in turn point to the basic block "
"representing the code following the entire 'if' statement."
msgstr ""

#: ../../pep-0339.txt:272
msgid ""
"CFGs are usually one step away from final code output.  Code is directly "
"generated from the basic blocks (with jump targets adjusted based on the "
"output order) by doing a post-order depth-first search on the CFG "
"following the edges."
msgstr ""

#: ../../pep-0339.txt:279
msgid "AST to CFG to Bytecode"
msgstr ""

#: ../../pep-0339.txt:281
msgid ""
"With the AST created, the next step is to create the CFG. The first step "
"is to convert the AST to Python bytecode without having jump targets "
"resolved to specific offsets (this is calculated when the CFG goes to "
"final bytecode). Essentially, this transforms the AST into Python "
"bytecode with control flow represented by the edges of the CFG."
msgstr ""

#: ../../pep-0339.txt:287
msgid ""
"Conversion is done in two passes.  The first creates the namespace "
"(variables can be classified as local, free/cell for closures, or "
"global).  With that done, the second pass essentially flattens the CFG "
"into a list and calculates jump offsets for final output of bytecode."
msgstr ""

#: ../../pep-0339.txt:292
msgid ""
"The conversion process is initiated by a call to the function "
"``PyAST_Compile()`` in Python/compile.c .  This function does both the "
"conversion of the AST to a CFG and outputting final bytecode from the "
"CFG.  The AST to CFG step is handled mostly by two functions called by "
"PyAST_Compile(); PySymtable_Build() and compiler_mod() .  The former is "
"in Python/symtable.c while the latter is in Python/compile.c ."
msgstr ""

#: ../../pep-0339.txt:300
msgid ""
"PySymtable_Build() begins by entering the starting code block for the AST"
" (passed-in) and then calling the proper symtable_visit_xx function (with"
" xx being the AST node type).  Next, the AST tree is walked with the "
"various code blocks that delineate the reach of a local variable as "
"blocks are entered and exited using symtable_enter_block() and "
"symtable_exit_block(), respectively."
msgstr ""

#: ../../pep-0339.txt:307
msgid ""
"Once the symbol table is created, it is time for CFG creation, whose code"
" is in Python/compile.c .  This is handled by several functions that "
"break the task down by various AST node types.  The functions are all "
"named compiler_visit_xx where xx is the name of the node type (such as "
"stmt, expr, etc.).  Each function receives a ``struct compiler *`` and "
"xx_ty where xx is the AST node type.  Typically these functions consist "
"of a large 'switch' statement, branching based on the kind of node type "
"passed to it.  Simple things are handled inline in the 'switch' statement"
" with more complex transformations farmed out to other functions named "
"compiler_xx with xx being a descriptive name of what is being handled."
msgstr ""

#: ../../pep-0339.txt:319
msgid ""
"When transforming an arbitrary AST node, use the VISIT() macro. The "
"appropriate compiler_visit_xx function is called, based on the value "
"passed in for <node type> (so ``VISIT(c, expr, node)`` calls "
"``compiler_visit_expr(c, node)``).  The VISIT_SEQ macro is very similar, "
"but is called on AST node sequences (those values that were created as "
"arguments to a node that used the '*' modifier).  There is also "
"VISIT_SLICE() just for handling slices."
msgstr ""

#: ../../pep-0339.txt:327
msgid "Emission of bytecode is handled by the following macros:"
msgstr ""

#: ../../pep-0339.txt:329
msgid "``ADDOP()``"
msgstr ""

#: ../../pep-0339.txt:330
msgid "add a specified opcode"
msgstr ""

#: ../../pep-0339.txt:331
msgid "``ADDOP_I()``"
msgstr ""

#: ../../pep-0339.txt:332
msgid "add an opcode that takes an argument"
msgstr ""

#: ../../pep-0339.txt:338
msgid "``ADDOP_O(struct compiler *c, int op, PyObject *type, PyObject *obj)``"
msgstr ""

#: ../../pep-0339.txt:334
msgid ""
"add an opcode with the proper argument based on the position of the "
"specified PyObject in PyObject sequence object, but with no handling of "
"mangled names; used for when you need to do named lookups of objects such"
" as globals, consts, or parameters where name mangling is not possible "
"and the scope of the name is known"
msgstr ""

#: ../../pep-0339.txt:341
msgid "``ADDOP_NAME()``"
msgstr ""

#: ../../pep-0339.txt:341
msgid ""
"just like ADDOP_O, but name mangling is also handled; used for attribute "
"loading or importing based on name"
msgstr ""

#: ../../pep-0339.txt:343
msgid "``ADDOP_JABS()``"
msgstr ""

#: ../../pep-0339.txt:344
msgid "create an absolute jump to a basic block"
msgstr ""

#: ../../pep-0339.txt:346
msgid "``ADDOP_JREL()``"
msgstr ""

#: ../../pep-0339.txt:346
msgid "create a relative jump to a basic block"
msgstr ""

#: ../../pep-0339.txt:348
msgid ""
"Several helper functions that will emit bytecode and are named "
"compiler_xx() where xx is what the function helps with (list, boolop, "
"etc.).  A rather useful one is compiler_nameop(). This function looks up "
"the scope of a variable and, based on the expression context, emits the "
"proper opcode to load, store, or delete the variable."
msgstr ""

#: ../../pep-0339.txt:355
msgid ""
"As for handling the line number on which a statement is defined, is "
"handled by compiler_visit_stmt() and thus is not a worry."
msgstr ""

#: ../../pep-0339.txt:358
msgid ""
"In addition to emitting bytecode based on the AST node, handling the "
"creation of basic blocks must be done.  Below are the macros and "
"functions used for managing basic blocks:"
msgstr ""

#: ../../pep-0339.txt:362
msgid "``NEW_BLOCK()``"
msgstr ""

#: ../../pep-0339.txt:363
msgid "create block and set it as current"
msgstr ""

#: ../../pep-0339.txt:364
msgid "``NEXT_BLOCK()``"
msgstr ""

#: ../../pep-0339.txt:365
msgid "basically NEW_BLOCK() plus jump from current block"
msgstr ""

#: ../../pep-0339.txt:367
msgid "``compiler_new_block()``"
msgstr ""

#: ../../pep-0339.txt:367
msgid "create a block but don't use it (used for generating jumps)"
msgstr ""

#: ../../pep-0339.txt:369
msgid ""
"Once the CFG is created, it must be flattened and then final emission of "
"bytecode occurs.  Flattening is handled using a post-order depth-first "
"search.  Once flattened, jump offsets are backpatched based on the "
"flattening and then a PyCodeObject file is created.  All of this is "
"handled by calling assemble() ."
msgstr ""

#: ../../pep-0339.txt:377
msgid "Introducing New Bytecode"
msgstr ""

#: ../../pep-0339.txt:379
msgid ""
"Sometimes a new feature requires a new opcode.  But adding new bytecode "
"is not as simple as just suddenly introducing new bytecode in the AST -> "
"bytecode step of the compiler.  Several pieces of code throughout Python "
"depend on having correct information about what bytecode exists."
msgstr ""

#: ../../pep-0339.txt:384
msgid ""
"First, you must choose a name and a unique identifier number.  The "
"official list of bytecode can be found in Include/opcode.h .  If the "
"opcode is to take an argument, it must be given a unique number greater "
"than that assigned to ``HAVE_ARGUMENT`` (as found in Include/opcode.h)."
msgstr ""

#: ../../pep-0339.txt:389
msgid ""
"Once the name/number pair has been chosen and entered in "
"Include/opcode.h, you must also enter it into Lib/opcode.py and "
"Doc/library/dis.rst ."
msgstr ""

#: ../../pep-0339.txt:393
msgid ""
"With a new bytecode you must also change what is called the magic number "
"for .pyc files.  The variable ``MAGIC`` in Python/import.c contains the "
"number. Changing this number will lead to all .pyc files with the old "
"MAGIC to be recompiled by the interpreter on import."
msgstr ""

#: ../../pep-0339.txt:398
msgid ""
"Finally, you need to introduce the use of the new bytecode.  Altering "
"Python/compile.c and Python/ceval.c will be the primary places to change."
" But you will also need to change the 'compiler' package.  The key files "
"to do that are Lib/compiler/pyassem.py and Lib/compiler/pycodegen.py ."
msgstr ""

#: ../../pep-0339.txt:403
msgid ""
"If you make a change here that can affect the output of bytecode that is "
"already in existence and you do not change the magic number constantly, "
"make sure to delete your old .py(c|o) files!  Even though you will end up"
" changing the magic number if you change the bytecode, while you are "
"debugging your work you will be changing the bytecode output without "
"constantly bumping up the magic number.  This means you end up with stale"
" .pyc files that will not be recreated.  Running ``find . -name "
"'*.py[co]' -exec rm -f {} ';'`` should delete all .pyc files you have, "
"forcing new ones to be created and thus allow you test out your new "
"bytecode properly."
msgstr ""

#: ../../pep-0339.txt:416
msgid "Code Objects"
msgstr ""

#: ../../pep-0339.txt:418
msgid ""
"The result of ``PyAST_Compile()`` is a PyCodeObject which is defined in "
"Include/code.h .  And with that you now have executable Python bytecode!"
msgstr ""

#: ../../pep-0339.txt:421
msgid ""
"The code objects (byte code) is executed in Python/ceval.c .  This file "
"will also need a new case statement for the new opcode in the big switch "
"statement in PyEval_EvalFrameEx()."
msgstr ""

#: ../../pep-0339.txt:427
msgid "Important Files"
msgstr ""

#: ../../pep-0339.txt:429
msgid "Parser/"
msgstr ""

#: ../../pep-0339.txt:432
msgid "Python.asdl"
msgstr ""

#: ../../pep-0339.txt:432
msgid "ASDL syntax file"
msgstr ""

#: ../../pep-0339.txt:436
msgid "asdl.py"
msgstr ""

#: ../../pep-0339.txt:435
msgid ""
"\"An implementation of the Zephyr Abstract Syntax Definition Language.\""
"  Uses SPARK_ to parse the ASDL files."
msgstr ""

#: ../../pep-0339.txt:440
msgid "asdl_c.py"
msgstr ""

#: ../../pep-0339.txt:439
msgid ""
"\"Generate C code from an ASDL description.\"  Generates Python/Python-"
"ast.c and Include/Python-ast.h ."
msgstr ""

#: ../../pep-0339.txt:443
msgid "spark.py"
msgstr ""

#: ../../pep-0339.txt:443
msgid "SPARK_ parser generator"
msgstr ""

#: ../../pep-0339.txt:445
msgid "Python/"
msgstr ""

#: ../../pep-0339.txt:453
msgid "Python-ast.c"
msgstr ""

#: ../../pep-0339.txt:448
msgid ""
"Creates C structs corresponding to the ASDL types.  Also contains code "
"for marshaling AST nodes (core ASDL types have marshaling code in "
"asdl.c).  \"File automatically generated by Parser/asdl_c.py\".  This "
"file must be committed separately after every grammar change is committed"
" since the __version__ value is set to the latest grammar change revision"
" number."
msgstr ""

#: ../../pep-0339.txt:458
msgid "asdl.c"
msgstr ""

#: ../../pep-0339.txt:456
msgid ""
"Contains code to handle the ASDL sequence type.  Also has code to handle "
"marshalling the core ASDL types, such as number and identifier.  used by "
"Python-ast.c for marshaling AST nodes."
msgstr ""

#: ../../pep-0339.txt:461
msgid "ast.c"
msgstr ""

#: ../../pep-0339.txt:461
msgid "Converts Python's parse tree into the abstract syntax tree."
msgstr ""

#: ../../pep-0339.txt:464
msgid "ceval.c"
msgstr ""

#: ../../pep-0339.txt:464
msgid "Executes byte code (aka, eval loop)."
msgstr ""

#: ../../pep-0339.txt:467
msgid "compile.c"
msgstr ""

#: ../../pep-0339.txt:467
msgid "Emits bytecode based on the AST."
msgstr ""

#: ../../pep-0339.txt:470
msgid "symtable.c"
msgstr ""

#: ../../pep-0339.txt:470
msgid "Generates a symbol table from AST."
msgstr ""

#: ../../pep-0339.txt:473
msgid "pyarena.c"
msgstr ""

#: ../../pep-0339.txt:473
msgid "Implementation of the arena memory manager."
msgstr ""

#: ../../pep-0339.txt:477
msgid "import.c"
msgstr ""

#: ../../pep-0339.txt:476
msgid "Home of the magic number (named ``MAGIC``) for bytecode versioning"
msgstr ""

#: ../../pep-0339.txt:479
msgid "Include/"
msgstr ""

#: ../../pep-0339.txt:484
msgid "Python-ast.h"
msgstr ""

#: ../../pep-0339.txt:482
msgid ""
"Contains the actual definitions of the C structs as generated by Python"
"/Python-ast.c . \"Automatically generated by Parser/asdl_c.py\"."
msgstr ""

#: ../../pep-0339.txt:487
msgid "asdl.h"
msgstr ""

#: ../../pep-0339.txt:487
msgid "Header for the corresponding Python/ast.c ."
msgstr ""

#: ../../pep-0339.txt:490
msgid "ast.h"
msgstr ""

#: ../../pep-0339.txt:490
msgid "Declares PyAST_FromNode() external (from Python/ast.c)."
msgstr ""

#: ../../pep-0339.txt:494
msgid "code.h"
msgstr ""

#: ../../pep-0339.txt:493
msgid "Header file for Objects/codeobject.c; contains definition of PyCodeObject."
msgstr ""

#: ../../pep-0339.txt:498
msgid "symtable.h"
msgstr ""

#: ../../pep-0339.txt:497
msgid ""
"Header for Python/symtable.c .  struct symtable and PySTEntryObject are "
"defined here."
msgstr ""

#: ../../pep-0339.txt:501
msgid "pyarena.h"
msgstr ""

#: ../../pep-0339.txt:501
msgid "Header file for the corresponding Python/pyarena.c ."
msgstr ""

#: ../../pep-0339.txt:505
msgid "opcode.h"
msgstr ""

#: ../../pep-0339.txt:504
msgid ""
"Master list of bytecode; if this file is modified you must modify several"
" other files accordingly (see \"`Introducing New Bytecode`_\")"
msgstr ""

#: ../../pep-0339.txt:507
msgid "Objects/"
msgstr ""

#: ../../pep-0339.txt:511
msgid "codeobject.c"
msgstr ""

#: ../../pep-0339.txt:510
msgid "Contains PyCodeObject-related code (originally in Python/compile.c)."
msgstr ""

#: ../../pep-0339.txt:513
msgid "Lib/"
msgstr ""

#: ../../pep-0339.txt:516
msgid "opcode.py"
msgstr ""

#: ../../pep-0339.txt:516
msgid "One of the files that must be modified if Include/opcode.h is."
msgstr ""

#: ../../pep-0339.txt:518
msgid "compiler/"
msgstr ""

#: ../../pep-0339.txt:522
msgid "pyassem.py"
msgstr ""

#: ../../pep-0339.txt:521 ../../pep-0339.txt:525
msgid "One of the files that must be modified if Include/opcode.h is changed."
msgstr ""

#: ../../pep-0339.txt:527
msgid "pycodegen.py"
msgstr ""

#: ../../pep-0339.txt:530
msgid "Known Compiler-related Experiments"
msgstr ""

#: ../../pep-0339.txt:532
msgid ""
"This section lists known experiments involving the compiler (including "
"bytecode)."
msgstr ""

#: ../../pep-0339.txt:535
msgid ""
"Skip Montanaro presented a paper at a Python workshop on a peephole "
"optimizer [#skip-peephole]_."
msgstr ""

#: ../../pep-0339.txt:538
msgid ""
"Michael Hudson has a non-active SourceForge project named Bytecodehacks "
"[#Bytecodehacks]_ that provides functionality for playing with bytecode "
"directly."
msgstr ""

#: ../../pep-0339.txt:542
msgid ""
"An opcode to combine the functionality of LOAD_ATTR/CALL_FUNCTION was "
"created named CALL_ATTR [#CALL_ATTR]_.  Currently only works for classic "
"classes and for new-style classes rough benchmarking showed an actual "
"slowdown thanks to having to support both classic and new-style classes."
msgstr ""

#: ../../pep-0339.txt:550
msgid "References"
msgstr ""

#: ../../pep-0339.txt:552
msgid ""
"Alfred V. Aho, Ravi Sethi, Jeffrey D. Ullman. `Compilers: Principles, "
"Techniques, and Tools`, "
"http://www.amazon.com/exec/obidos/tg/detail/-/0201100886/104-0162389-6419108"
msgstr ""

#: ../../pep-0339.txt:556
msgid ""
"Daniel C. Wang, Andrew W. Appel, Jeff L. Korn, and Chris S. Serra.  `The "
"Zephyr Abstract Syntax Description Language.`_ In Proceedings of the "
"Conference on Domain-Specific Languages, pp. 213--227, 1997."
msgstr ""

#: ../../pep-0339.txt:566
msgid ""
"Skip Montanaro's Peephole Optimizer Paper "
"(http://www.foretec.com/python/workshops/1998-11/proceedings/papers/montanaro/montanaro.html)"
msgstr ""

#: ../../pep-0339.txt:569
msgid ""
"Bytecodehacks Project (http://bytecodehacks.sourceforge.net/bch-"
"docs/bch/index.html)"
msgstr ""

#: ../../pep-0339.txt:572
msgid "CALL_ATTR opcode (https://bugs.python.org/issue709744)"
msgstr ""

