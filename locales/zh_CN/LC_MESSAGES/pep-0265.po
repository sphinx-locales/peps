# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0265.txt
msgid "PEP"
msgstr ""

#: ../../pep-0265.txt:1
msgid "265"
msgstr ""

#: ../../pep-0265.txt
msgid "Title"
msgstr ""

#: ../../pep-0265.txt:2
msgid "Sorting Dictionaries by Value"
msgstr ""

#: ../../pep-0265.txt
msgid "Author"
msgstr ""

#: ../../pep-0265.txt:5
msgid "g2@iowegian.com (Grant Griffin)"
msgstr ""

#: ../../pep-0265.txt
msgid "Status"
msgstr ""

#: ../../pep-0265.txt:6
msgid "Rejected"
msgstr ""

#: ../../pep-0265.txt
msgid "Type"
msgstr ""

#: ../../pep-0265.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0265.txt
msgid "Created"
msgstr ""

#: ../../pep-0265.txt:9
msgid "08-Aug-2001"
msgstr ""

#: ../../pep-0265.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0265.txt:10
msgid "2.2"
msgstr ""

#: ../../pep-0265.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0265.txt:15
msgid "Abstract"
msgstr ""

#: ../../pep-0265.txt:17
msgid ""
"This PEP suggests a \"sort by value\" operation for dictionaries. The "
"primary benefit would be in terms of \"batteries included\" support for a"
" common Python idiom which, in its current form, is both difficult for "
"beginners to understand and cumbersome for all to implement."
msgstr ""

#: ../../pep-0265.txt:25
msgid "BDFL Pronouncement"
msgstr ""

#: ../../pep-0265.txt:27
msgid ""
"This PEP is rejected because the need for it has been largely fulfilled "
"by Py2.4's ``sorted()`` builtin function::"
msgstr ""

#: ../../pep-0265.txt:33
msgid "or for just the keys::"
msgstr ""

#: ../../pep-0265.txt:38
msgid ""
"Also, Python 2.5's ``heapq.nlargest()`` function addresses the common use"
" case of finding only a few of the highest valued items::"
msgstr ""

#: ../../pep-0265.txt:46
msgid "Motivation"
msgstr ""

#: ../../pep-0265.txt:48
msgid ""
"A common use of dictionaries is to count occurrences by setting the value"
" of ``d[key]`` to 1 on its first occurrence, then increment the value on "
"each subsequent occurrence.  This can be done several different ways, but"
" the ``get()`` method is the most succinct::"
msgstr ""

#: ../../pep-0265.txt:55
msgid ""
"Once all occurrences have been counted, a common use of the resulting "
"dictionary is to print the occurrences in occurrence-sorted order, often "
"with the largest value first."
msgstr ""

#: ../../pep-0265.txt:59
msgid ""
"This leads to a need to sort a dictionary's items by value.  The "
"canonical method of doing so in Python is to first use ``d.items()`` to "
"get a list of the dictionary's items, then invert the ordering of each "
"item's tuple from (key, value) into (value, key), then sort the list; "
"since Python sorts the list based on the first item of the tuple, the "
"list of (inverted) items is therefore sorted by value.  If desired, the "
"list can then be reversed, and the tuples can be re-inverted back to "
"(key, value).  (However, in my experience, the inverted tuple ordering is"
" fine for most purposes, e.g. printing out the list.)"
msgstr ""

#: ../../pep-0265.txt:70
msgid "For example, given an occurrence count of::"
msgstr ""

#: ../../pep-0265.txt:74
msgid "we might do::"
msgstr ""

#: ../../pep-0265.txt:81
msgid "resulting in::"
msgstr ""

#: ../../pep-0265.txt:86
msgid ""
"which shows the list in by-value order, largest first.  (In this case, "
"``'b'`` was found to have the most occurrences.)"
msgstr ""

#: ../../pep-0265.txt:89
msgid ""
"This works fine, but is \"hard to use\" in two aspects.  First, although "
"this idiom is known to veteran Pythoneers, it is not at all obvious to "
"newbies -- either in terms of its algorithm (inverting the ordering of "
"item tuples) or its implementation (using list comprehensions -- which "
"are an advanced Python feature.)  Second, it requires having to "
"repeatedly type a lot of \"grunge\", resulting in both tedium and "
"mistakes."
msgstr ""

#: ../../pep-0265.txt:97
msgid ""
"We therefore would rather Python provide a method of sorting dictionaries"
" by value which would be both easy for newbies to understand (or, better "
"yet, not to *have to* understand) and easier for all to use."
msgstr ""

#: ../../pep-0265.txt:104
msgid "Rationale"
msgstr ""

#: ../../pep-0265.txt:106
msgid ""
"As Tim Peters has pointed out, this sort of thing brings on the problem "
"of trying to be all things to all people.  Therefore, we will limit its "
"scope to try to hit \"the sweet spot\".  Unusual cases (e.g. sorting via "
"a custom comparison function) can, of course, be handled \"manually\" "
"using present methods."
msgstr ""

#: ../../pep-0265.txt:112
msgid "Here are some simple possibilities:"
msgstr ""

#: ../../pep-0265.txt:114
msgid ""
"The ``items()`` method of dictionaries can be augmented with new "
"parameters having default values that provide for full backwards-"
"compatibility::"
msgstr ""

#: ../../pep-0265.txt:120
msgid "or maybe just::"
msgstr ""

#: ../../pep-0265.txt:124
msgid "since reversing a list is easy enough."
msgstr ""

#: ../../pep-0265.txt:126
msgid ""
"Alternatively, ``items()`` could simply let us control the (key, value) "
"order::"
msgstr ""

#: ../../pep-0265.txt:131
msgid ""
"Again, this is fully backwards-compatible.  It does less work than the "
"others, but it at least eases the most complicated/tricky part of the "
"sort-by-value problem: inverting the order of item tuples. Using this is "
"very simple::"
msgstr ""

#: ../../pep-0265.txt:140
msgid ""
"The primary drawback of the preceding three approaches is the additional "
"overhead for the parameter-less ``items()`` case, due to having to "
"process default parameters.  (However, if one assumes that ``items()`` "
"gets used primarily for creating sort-by-value lists, this is not really "
"a drawback in practice.)"
msgstr ""

#: ../../pep-0265.txt:146
msgid ""
"Alternatively, we might add a new dictionary method which somehow "
"embodies \"sorting\".  This approach offers two advantages.  First, it "
"avoids adding overhead to the ``items()`` method.  Second, it is perhaps "
"more accessible to newbies: when they go looking for a method for sorting"
" dictionaries, they hopefully run into this one, and they will not have "
"to understand the finer points of tuple inversion and list sorting to "
"achieve sort-by-value."
msgstr ""

#: ../../pep-0265.txt:154
msgid ""
"To allow the four basic possibilities of sorting by key/value and in "
"forward/reverse order, we could add this method::"
msgstr ""

#: ../../pep-0265.txt:159
msgid ""
"I believe the most common case would actually be ``by_value=1, "
"reversed=1``, but the defaults values given here might lead to fewer "
"surprises by users: ``sorted_items()`` would be the same as ``items()`` "
"followed by ``sort()``."
msgstr ""

#: ../../pep-0265.txt:164
msgid "Finally (as a last resort), we could use::"
msgstr ""

#: ../../pep-0265.txt:170
msgid "Implementation"
msgstr ""

#: ../../pep-0265.txt:172
msgid ""
"The proposed dictionary methods would necessarily be implemented in C.  "
"Presumably, the implementation would be fairly simple since it involves "
"just adding a few calls to Python's existing machinery."
msgstr ""

#: ../../pep-0265.txt:179
msgid "Concerns"
msgstr ""

#: ../../pep-0265.txt:181
msgid ""
"Aside from the run-time overhead already addressed in possibilities 1 "
"through 3, concerns with this proposal probably will fall into the "
"categories of \"feature bloat\" and/or \"code bloat\".  However, I "
"believe that several of the suggestions made here will result in quite "
"minimal bloat, resulting in a good tradeoff between bloat and \"value "
"added\"."
msgstr ""

#: ../../pep-0265.txt:188
msgid ""
"Tim Peters has noted that implementing this in C might not be "
"significantly faster than implementing it in Python today. However, the "
"major benefits intended here are \"accessibility\" and \"ease of use\", "
"not \"speed\".  Therefore, as long as it is not noticeably slower (in the"
" case of plain ``items()``, speed need not be a consideration."
msgstr ""

#: ../../pep-0265.txt:197
msgid "References"
msgstr ""

#: ../../pep-0265.txt:199
msgid ""
"A related thread called \"counting occurrences\" appeared on "
"comp.lang.python in August, 2001.  This included examples of approaches "
"to systematizing the sort-by-value problem by implementing it as reusable"
" Python functions and classes."
msgstr ""

#: ../../pep-0265.txt:206
msgid "Copyright"
msgstr ""

#: ../../pep-0265.txt:208
msgid "This document has been placed in the public domain."
msgstr ""

