# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0279.txt
msgid "PEP"
msgstr ""

#: ../../pep-0279.txt:1
msgid "279"
msgstr ""

#: ../../pep-0279.txt
msgid "Title"
msgstr ""

#: ../../pep-0279.txt:2
msgid "The enumerate() built-in function"
msgstr ""

#: ../../pep-0279.txt
msgid "Author"
msgstr ""

#: ../../pep-0279.txt:5
msgid "python@rcn.com (Raymond Hettinger)"
msgstr ""

#: ../../pep-0279.txt
msgid "Status"
msgstr ""

#: ../../pep-0279.txt:6
msgid "Final"
msgstr ""

#: ../../pep-0279.txt
msgid "Type"
msgstr ""

#: ../../pep-0279.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0279.txt
msgid "Created"
msgstr ""

#: ../../pep-0279.txt:9
msgid "30-Jan-2002"
msgstr ""

#: ../../pep-0279.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0279.txt:10
msgid "2.3"
msgstr ""

#: ../../pep-0279.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0279.txt:15
msgid "Abstract"
msgstr ""

#: ../../pep-0279.txt:17
msgid ""
"This PEP introduces a new built-in function, ``enumerate()`` to simplify "
"a commonly used looping idiom.  It provides all iterable collections with"
" the same advantage that ``iteritems()`` affords to dictionaries -- a "
"compact, readable, reliable index notation."
msgstr ""

#: ../../pep-0279.txt:24
msgid "Rationale"
msgstr ""

#: ../../pep-0279.txt:26
msgid ""
"Python 2.2 introduced the concept of an iterable interface as proposed in"
" PEP 234 [3]_.  The ``iter()`` factory function was provided as common "
"calling convention and deep changes were made to use iterators as a "
"unifying theme throughout Python.  The unification came in the form of "
"establishing a common iterable interface for mappings, sequences, and "
"file objects."
msgstr ""

#: ../../pep-0279.txt:33
msgid ""
"Generators, as proposed in PEP 255 [1]_, were introduced as a means for "
"making it easier to create iterators, especially ones with complex "
"internal execution or variable states.  The availability of generators "
"makes it possible to improve on the loop counter ideas in PEP 212 [2]_.  "
"Those ideas provided a clean syntax for iteration with indices and "
"values, but did not apply to all iterable objects.  Also, that approach "
"did not have the memory friendly benefit provided by generators which do "
"not evaluate the entire sequence all at once."
msgstr ""

#: ../../pep-0279.txt:43
msgid ""
"The new proposal is to add a built-in function, ``enumerate()`` which was"
" made possible once iterators and generators became available. It "
"provides all iterables with the same advantage that ``iteritems()`` "
"affords to dictionaries -- a compact, readable, reliable index notation."
"  Like ``zip()``, it is expected to become a commonly used looping idiom."
msgstr ""

#: ../../pep-0279.txt:50
msgid ""
"This suggestion is designed to take advantage of the existing "
"implementation and require little additional effort to incorporate.  It "
"is backwards compatible and requires no new keywords.  The proposal will "
"go into Python 2.3 when generators become final and are not imported from"
" ``__future__``."
msgstr ""

#: ../../pep-0279.txt:58
msgid "BDFL Pronouncements"
msgstr ""

#: ../../pep-0279.txt:60
msgid "The new built-in function is ACCEPTED."
msgstr ""

#: ../../pep-0279.txt:64
msgid "Specification for a new built-in"
msgstr ""

#: ../../pep-0279.txt:76
msgid ""
"Note A: PEP 212 Loop Counter Iteration [2]_ discussed several proposals "
"for achieving indexing.  Some of the proposals only work for lists unlike"
" the above function which works for any generator, xrange, sequence, or "
"iterable object.  Also, those proposals were presented and evaluated in "
"the world prior to Python 2.2 which did not include generators.  As a "
"result, the non-generator version in PEP 212 had the disadvantage of "
"consuming memory with a giant list of tuples.  The generator version "
"presented here is fast and light, works with all iterables, and allows "
"users to abandon the sequence in mid-stream with no loss of computation "
"effort."
msgstr ""

#: ../../pep-0279.txt:87
msgid ""
"There are other PEPs which touch on related issues: integer iterators, "
"integer for-loops, and one for modifying the arguments to ``range`` and "
"``xrange``.  The ``enumerate()`` proposal does not preclude the other "
"proposals and it still meets an important need even if those are adopted "
"-- the need to count items in any iterable.  The other proposals give a "
"means of producing an index but not the corresponding value.  This is "
"especially problematic if a sequence is given which doesn't support "
"random access such as a file object, generator, or sequence defined with "
"``__getitem__``."
msgstr ""

#: ../../pep-0279.txt:97
msgid ""
"Note B: Almost all of the PEP reviewers welcomed the function but were "
"divided as to whether there should be any built-ins.  The main argument "
"for a separate module was to slow the rate of language inflation.  The "
"main argument for a built-in was that the function is destined to be part"
" of a core programming style, applicable to any object with an iterable "
"interface.  Just as ``zip()`` solves the problem of looping over multiple"
" sequences, the ``enumerate()`` function solves the loop counter problem."
msgstr ""

#: ../../pep-0279.txt:106
msgid ""
"If only one built-in is allowed, then ``enumerate()`` is the most "
"important general purpose tool, solving the broadest class of problems "
"while improving program brevity, clarity and reliability."
msgstr ""

#: ../../pep-0279.txt:110
msgid "Note C:  Various alternative names were discussed:"
msgstr ""

#: ../../pep-0279.txt:113
msgid "``iterindexed()``"
msgstr ""

#: ../../pep-0279.txt:113
msgid "five syllables is a mouthful"
msgstr ""

#: ../../pep-0279.txt:114
msgid "``index()``"
msgstr ""

#: ../../pep-0279.txt:114
msgid "nice verb but could be confused the ``.index()`` method"
msgstr ""

#: ../../pep-0279.txt:115
msgid "``indexed()``"
msgstr ""

#: ../../pep-0279.txt:115
msgid "widely liked however adjectives should be avoided"
msgstr ""

#: ../../pep-0279.txt:116
msgid "``indexer()``"
msgstr ""

#: ../../pep-0279.txt:116
msgid "noun did not read well in a for-loop"
msgstr ""

#: ../../pep-0279.txt:117
msgid "``count()``"
msgstr ""

#: ../../pep-0279.txt:117
msgid "direct and explicit but often used in other contexts"
msgstr ""

#: ../../pep-0279.txt:118
msgid "``itercount()``"
msgstr ""

#: ../../pep-0279.txt:118
msgid "direct, explicit and hated by more than one person"
msgstr ""

#: ../../pep-0279.txt:119
msgid "``iteritems()``"
msgstr ""

#: ../../pep-0279.txt:119
msgid "conflicts with key:value concept for dictionaries"
msgstr ""

#: ../../pep-0279.txt:120
msgid "``itemize()``"
msgstr ""

#: ../../pep-0279.txt:120
msgid "confusing because ``amap.items()`` != ``list(itemize(amap))``"
msgstr ""

#: ../../pep-0279.txt:121
msgid "``enum()``"
msgstr ""

#: ../../pep-0279.txt:121
msgid ""
"pithy; less clear than enumerate; too similar to enum in other languages "
"where it has a different meaning"
msgstr ""

#: ../../pep-0279.txt:125
msgid ""
"All of the names involving 'count' had the further disadvantage of "
"implying that the count would begin from one instead of zero."
msgstr ""

#: ../../pep-0279.txt:128
msgid ""
"All of the names involving 'index' clashed with usage in database "
"languages where indexing implies a sorting operation rather than linear "
"sequencing."
msgstr ""

#: ../../pep-0279.txt:132
msgid ""
"Note D: This function was originally proposed with optional start and "
"stop arguments.  GvR pointed out that the function call "
"``enumerate(seqn,4,6)`` had an alternate, plausible interpretation as a "
"slice that would return the fourth and fifth elements of the sequence.  "
"To avoid the ambiguity, the optional arguments were dropped even though "
"it meant losing flexibility as a loop counter. That flexibility was most "
"important for the common case of counting from one, as in::"
msgstr ""

#: ../../pep-0279.txt:156
msgid "Comments from GvR:"
msgstr ""

#: ../../pep-0279.txt:145
msgid ""
"``filter`` and ``map`` should die and be subsumed into list "
"comprehensions, not grow more variants. I'd rather introduce built-ins "
"that do iterator algebra (e.g. the iterzip that I've often used as an "
"example)."
msgstr ""

#: ../../pep-0279.txt:150
msgid ""
"I like the idea of having some way to iterate over a sequence and its "
"index set in parallel.  It's fine for this to be a built-in."
msgstr ""

#: ../../pep-0279.txt:154
msgid ""
"I don't like the name \"indexed\"; adjectives do not make good function "
"names.  Maybe ``iterindexed()``?"
msgstr ""

#: ../../pep-0279.txt:162
msgid "Comments from Ka-Ping Yee:"
msgstr ""

#: ../../pep-0279.txt:159
msgid ""
"I'm also quite happy with everything  you proposed ... and the extra "
"built-ins (really 'indexed' in particular) are things I have wanted for a"
" long time."
msgstr ""

#: ../../pep-0279.txt:170
msgid "Comments from Neil Schemenauer:"
msgstr ""

#: ../../pep-0279.txt:165
msgid ""
"The new built-ins sound okay.  Guido may be concerned with increasing the"
" number of built-ins too much.  You might be better off selling them as "
"part of a module.  If you use a module then you can add lots of useful "
"functions (Haskell has lots of them that we could steal)."
msgstr ""

#: ../../pep-0279.txt:178
msgid "Comments for Magnus Lie Hetland:"
msgstr ""

#: ../../pep-0279.txt:173
msgid ""
"I think indexed would be a useful and natural built-in function. I would "
"certainly use it a lot.  I like ``indexed()`` a lot; +1. I'm quite happy "
"to have it make PEP 281 obsolete. Adding a separate module for iterator "
"utilities seems like a good idea."
msgstr ""

#: ../../pep-0279.txt:184
msgid "Comments from the Community:"
msgstr ""

#: ../../pep-0279.txt:181
#, python-format
msgid ""
"The response to the ``enumerate()`` proposal has been close to 100% "
"favorable.  Almost everyone loves the idea."
msgstr ""

#: ../../pep-0279.txt:198
msgid "Author response:"
msgstr ""

#: ../../pep-0279.txt:187
msgid ""
"Prior to these comments, four built-ins were proposed. After the "
"comments, ``xmap``, ``xfilter`` and ``xzip`` were withdrawn.  The one "
"that remains is vital for the language and is proposed by itself.  "
"``Indexed()`` is trivially easy to implement and can be documented in "
"minutes.  More importantly, it is useful in everyday programming which "
"does not otherwise involve explicit use of generators."
msgstr ""

#: ../../pep-0279.txt:195
msgid ""
"This proposal originally included another function ``iterzip()``. That "
"was subsequently implemented as the ``izip()`` function in the "
"``itertools`` module."
msgstr ""

#: ../../pep-0279.txt:201
msgid "References"
msgstr ""

#: ../../pep-0279.txt:203
msgid "PEP 255 Simple Generators http://www.python.org/dev/peps/pep-0255/"
msgstr ""

#: ../../pep-0279.txt:206
msgid "PEP 212 Loop Counter Iteration http://www.python.org/dev/peps/pep-0212/"
msgstr ""

#: ../../pep-0279.txt:209
msgid "PEP 234 Iterators http://www.python.org/dev/peps/pep-0234/"
msgstr ""

#: ../../pep-0279.txt:214
msgid "Copyright"
msgstr ""

#: ../../pep-0279.txt:216
msgid "This document has been placed in the public domain."
msgstr ""

