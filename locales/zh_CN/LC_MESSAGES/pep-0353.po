# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0353.txt
msgid "PEP"
msgstr ""

#: ../../pep-0353.txt:1
msgid "353"
msgstr ""

#: ../../pep-0353.txt
msgid "Title"
msgstr ""

#: ../../pep-0353.txt:2
msgid "Using ssize_t as the index type"
msgstr ""

#: ../../pep-0353.txt
msgid "Author"
msgstr ""

#: ../../pep-0353.txt:5
msgid "Martin von LÃ¶wis <martin@v.loewis.de>"
msgstr ""

#: ../../pep-0353.txt
msgid "Status"
msgstr ""

#: ../../pep-0353.txt:6
msgid "Final"
msgstr ""

#: ../../pep-0353.txt
msgid "Type"
msgstr ""

#: ../../pep-0353.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0353.txt
msgid "Created"
msgstr ""

#: ../../pep-0353.txt:9
msgid "18-Dec-2005"
msgstr ""

#: ../../pep-0353.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0353.txt:14
msgid "Abstract"
msgstr ""

#: ../../pep-0353.txt:16
msgid ""
"In Python 2.4, indices of sequences are restricted to the C type int. On "
"64-bit machines, sequences therefore cannot use the full address space, "
"and are restricted to 2**31 elements. This PEP proposes to change this, "
"introducing a platform-specific index type Py_ssize_t. An implementation "
"of the proposed change is in "
"http://svn.python.org/projects/python/branches/ssize_t."
msgstr ""

#: ../../pep-0353.txt:25
msgid "Rationale"
msgstr ""

#: ../../pep-0353.txt:27
msgid ""
"64-bit machines are becoming more popular, and the size of main memory "
"increases beyond 4GiB. On such machines, Python currently is limited, in "
"that sequences (strings, unicode objects, tuples, lists, array.arrays, "
"...)  cannot contain more than 2GiElements."
msgstr ""

#: ../../pep-0353.txt:32
msgid ""
"Today, very few machines have memory to represent larger lists: as each "
"pointer is 8B (in a 64-bit machine), one needs 16GiB to just hold the "
"pointers of such a list; with data in the list, the memory consumption "
"grows even more.  However, there are three container types for which "
"users request improvements today:"
msgstr ""

#: ../../pep-0353.txt:38
msgid "strings (currently restricted to 2GiB)"
msgstr ""

#: ../../pep-0353.txt:39
msgid ""
"mmap objects (likewise; plus the system typically won't keep the whole "
"object in memory concurrently)"
msgstr ""

#: ../../pep-0353.txt:41
msgid "Numarray objects (from Numerical Python)"
msgstr ""

#: ../../pep-0353.txt:43
msgid ""
"As the proposed change will cause incompatibilities on 64-bit machines, "
"it should be carried out while such machines are not in wide use (IOW, as"
" early as possible)."
msgstr ""

#: ../../pep-0353.txt:49
msgid "Specification"
msgstr ""

#: ../../pep-0353.txt:51
msgid ""
"A new type Py_ssize_t is introduced, which has the same size as the "
"compiler's size_t type, but is signed. It will be a typedef for ssize_t "
"where available."
msgstr ""

#: ../../pep-0353.txt:55
msgid ""
"The internal representation of the length fields of all container types "
"is changed from int to ssize_t, for all types included in the standard "
"distribution.  In particular, PyObject_VAR_HEAD is changed to use "
"Py_ssize_t, affecting all extension modules that use that macro."
msgstr ""

#: ../../pep-0353.txt:60
msgid ""
"All occurrences of index and length parameters and results are changed to"
" use Py_ssize_t, including the sequence slots in type objects, and the "
"buffer interface."
msgstr ""

#: ../../pep-0353.txt:64
msgid ""
"New conversion functions PyInt_FromSsize_t and PyInt_AsSsize_t, are "
"introduced. PyInt_FromSsize_t will transparently return a long int object"
" if the value exceeds the LONG_MAX; PyInt_AsSsize_t will transparently "
"process long int objects."
msgstr ""

#: ../../pep-0353.txt:69
msgid ""
"New function pointer typedefs ssizeargfunc, ssizessizeargfunc, "
"ssizeobjargproc, ssizessizeobjargproc, and lenfunc are introduced. The "
"buffer interface function types are now called readbufferproc, "
"writebufferproc, segcountproc, and charbufferproc."
msgstr ""

#: ../../pep-0353.txt:74
msgid ""
"A new conversion code 'n' is introduced for PyArg_ParseTuple "
"Py_BuildValue, PyObject_CallFunction and PyObject_CallMethod. This code "
"operates on Py_ssize_t."
msgstr ""

#: ../../pep-0353.txt:78
msgid ""
"The conversion codes 's#' and 't#' will output Py_ssize_t if the macro "
"PY_SSIZE_T_CLEAN is defined before Python.h is included, and continue to "
"output int if that macro isn't defined."
msgstr ""

#: ../../pep-0353.txt:83
msgid ""
"At places where a conversion from size_t/Py_ssize_t to int is necessary, "
"the strategy for conversion is chosen on a case-by-case basis (see next "
"section)."
msgstr ""

#: ../../pep-0353.txt:87
msgid ""
"To prevent loading extension modules that assume a 32-bit size type into "
"an interpreter that has a 64-bit size type, Py_InitModule4 is renamed to "
"Py_InitModule4_64."
msgstr ""

#: ../../pep-0353.txt:93
msgid "Conversion guidelines"
msgstr ""

#: ../../pep-0353.txt:95
msgid ""
"Module authors have the choice whether they support this PEP in their "
"code or not; if they support it, they have the choice of different levels"
" of compatibility."
msgstr ""

#: ../../pep-0353.txt:99
msgid ""
"If a module is not converted to support this PEP, it will continue to "
"work unmodified on a 32-bit system.  On a 64-bit system, compile-time "
"errors and warnings might be issued, and the module might crash the "
"interpreter if the warnings are ignored."
msgstr ""

#: ../../pep-0353.txt:104
msgid ""
"Conversion of a module can either attempt to continue using int indices, "
"or use Py_ssize_t indices throughout."
msgstr ""

#: ../../pep-0353.txt:107
msgid ""
"If the module should continue to use int indices, care must be taken when"
" calling functions that return Py_ssize_t or size_t, in particular, for "
"functions that return the length of an object (this includes the strlen "
"function and the sizeof operator). A good compiler will warn when a "
"Py_ssize_t/size_t value is truncated into an int. In these cases, three "
"strategies are available:"
msgstr ""

#: ../../pep-0353.txt:114
msgid ""
"statically determine that the size can never exceed an int (e.g. when "
"taking the sizeof a struct, or the strlen of a file pathname). In this "
"case, write::"
msgstr ""

#: ../../pep-0353.txt:120
msgid ""
"This will add an assertion in debug mode that the value really fits into "
"an int, and just add a cast otherwise."
msgstr ""

#: ../../pep-0353.txt:123
msgid ""
"statically determine that the value shouldn't overflow an int unless "
"there is a bug in the C code somewhere. Test whether the value is smaller"
" than INT_MAX, and raise an InternalError if it isn't."
msgstr ""

#: ../../pep-0353.txt:127
msgid ""
"otherwise, check whether the value fits an int, and raise a ValueError if"
" it doesn't."
msgstr ""

#: ../../pep-0353.txt:130
msgid ""
"The same care must be taken for tp_as_sequence slots, in addition, the "
"signatures of these slots change, and the slots must be explicitly recast"
" (e.g. from intargfunc to ssizeargfunc). Compatibility with previous "
"Python versions can be achieved with the test::"
msgstr ""

#: ../../pep-0353.txt:142
msgid ""
"and then using Py_ssize_t in the rest of the code. For the tp_as_sequence"
" slots, additional typedefs might be necessary; alternatively, by "
"replacing::"
msgstr ""

#: ../../pep-0353.txt:151
msgid "with::"
msgstr ""

#: ../../pep-0353.txt:159
msgid ""
"it becomes possible to drop the cast entirely; the type of foo_item "
"should then match the sq_item slot in all Python versions."
msgstr ""

#: ../../pep-0353.txt:163
msgid ""
"If the module should be extended to use Py_ssize_t indices, all usages of"
" the type int should be reviewed, to see whether it should be changed to "
"Py_ssize_t. The compiler will help in finding the spots, but a manual "
"review is still necessary."
msgstr ""

#: ../../pep-0353.txt:168
msgid ""
"Particular care must be taken for PyArg_ParseTuple calls: they need all "
"be checked for s# and t# converters, and PY_SSIZE_T_CLEAN must be defined"
" before including Python.h if the calls have been updated accordingly."
msgstr ""

#: ../../pep-0353.txt:173
msgid ""
"Fredrik Lundh has written a scanner_ which checks the code of a C module "
"for usage of APIs whose signature has changed."
msgstr ""

#: ../../pep-0353.txt:180
msgid "Discussion"
msgstr ""

#: ../../pep-0353.txt:183
msgid "Why not size_t"
msgstr ""

#: ../../pep-0353.txt:185
msgid ""
"An initial attempt to implement this feature tried to use size_t. It "
"quickly turned out that this cannot work: Python uses negative indices in"
" many places (to indicate counting from the end). Even in places where "
"size_t would be usable, too many reformulations of code where necessary, "
"e.g. in loops like::"
msgstr ""

#: ../../pep-0353.txt:194
msgid "This loop will never terminate if index is changed from int to size_t."
msgstr ""

#: ../../pep-0353.txt:198
msgid "Why not Py_intptr_t"
msgstr ""

#: ../../pep-0353.txt:200
msgid ""
"Conceptually, Py_intptr_t and Py_ssize_t are different things: "
"Py_intptr_t needs to be the same size as void*, and Py_ssize_t the same "
"size as size_t. These could differ, e.g. on machines where pointers have "
"segment and offset. On current flat-address space machines, there is no "
"difference, so for all practical purposes, Py_intptr_t would have worked "
"as well."
msgstr ""

#: ../../pep-0353.txt:208
msgid "Doesn't this break much code?"
msgstr ""

#: ../../pep-0353.txt:210
msgid ""
"With the changes proposed, code breakage is fairly minimal. On a 32-bit "
"system, no code will break, as Py_ssize_t is just a typedef for int."
msgstr ""

#: ../../pep-0353.txt:214
msgid ""
"On a 64-bit system, the compiler will warn in many places. If these "
"warnings are ignored, the code will continue to work as long as the "
"container sizes don't exceed 2**31, i.e. it will work nearly as good as "
"it does currently. There are two exceptions to this statement: if the "
"extension module implements the sequence protocol, it must be updated, or"
" the calling conventions will be wrong. The other exception is the places"
" where Py_ssize_t is output through a pointer (rather than a return "
"value); this applies most notably to codecs and slice objects."
msgstr ""

#: ../../pep-0353.txt:226
msgid ""
"If the conversion of the code is made, the same code can continue to work"
" on earlier Python releases."
msgstr ""

#: ../../pep-0353.txt:230
msgid "Doesn't this consume too much memory?"
msgstr ""

#: ../../pep-0353.txt:232
msgid ""
"One might think that using Py_ssize_t in all tuples, strings, lists, etc."
" is a waste of space. This is not true, though: on a 32-bit machine, "
"there is no change. On a 64-bit machine, the size of many containers "
"doesn't change, e.g."
msgstr ""

#: ../../pep-0353.txt:238
msgid ""
"in lists and tuples, a pointer immediately follows the ob_size member. "
"This means that the compiler currently inserts a 4 padding bytes; with "
"the change, these padding bytes become part of the size."
msgstr ""

#: ../../pep-0353.txt:242
msgid ""
"in strings, the ob_shash field follows ob_size. This field is of type "
"long, which is a 64-bit type on most 64-bit systems (except Win64), so "
"the compiler inserts padding before it as well."
msgstr ""

#: ../../pep-0353.txt:248
msgid "Open Issues"
msgstr ""

#: ../../pep-0353.txt:250
msgid ""
"Marc-Andre Lemburg commented that complete backwards compatibility with "
"existing source code should be preserved. In particular, functions that "
"have Py_ssize_t* output arguments should continue to run correctly even "
"if the callers pass int*."
msgstr ""

#: ../../pep-0353.txt:256
msgid "It is not clear what strategy could be used to implement that requirement."
msgstr ""

#: ../../pep-0353.txt:261
msgid "Copyright"
msgstr ""

#: ../../pep-0353.txt:263
msgid "This document has been placed in the public domain."
msgstr ""

