# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0473.txt
msgid "PEP"
msgstr ""

#: ../../pep-0473.txt:1
msgid "473"
msgstr ""

#: ../../pep-0473.txt
msgid "Title"
msgstr ""

#: ../../pep-0473.txt:2
msgid "Adding structured data to built-in exceptions"
msgstr ""

#: ../../pep-0473.txt
msgid "Author"
msgstr ""

#: ../../pep-0473.txt:5
msgid "Sebastian Kreft <skreft@deezer.com>"
msgstr ""

#: ../../pep-0473.txt
msgid "Status"
msgstr ""

#: ../../pep-0473.txt:6
msgid "Rejected"
msgstr ""

#: ../../pep-0473.txt
msgid "Type"
msgstr ""

#: ../../pep-0473.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0473.txt
msgid "Created"
msgstr ""

#: ../../pep-0473.txt:9
msgid "29-Mar-2014"
msgstr ""

#: ../../pep-0473.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0473.txt
msgid "Resolution"
msgstr ""

#: ../../pep-0473.txt:11
msgid "https://mail.python.org/pipermail/python-dev/2019-March/156692.html"
msgstr ""

#: ../../pep-0473.txt:15
msgid "Abstract"
msgstr ""

#: ../../pep-0473.txt:17
msgid ""
"Exceptions like ``AttributeError``, ``IndexError``, ``KeyError``, "
"``LookupError``, ``NameError``, ``TypeError``, and ``ValueError`` do not "
"provide all information required by programmers to debug and better "
"understand what caused them. Furthermore, in some cases the messages even"
" have slightly different formats, which makes it really difficult for "
"tools to automatically provide additional information to diagnose the "
"problem. To tackle the former and to lay ground for the latter, it is "
"proposed to expand these exceptions so to hold both the offending and "
"affected entities."
msgstr ""

#: ../../pep-0473.txt:29
msgid "Rationale"
msgstr ""

#: ../../pep-0473.txt:31
msgid ""
"The main issue this PEP aims to solve is the fact that currently error "
"messages are not that expressive and lack some key information to resolve"
" the exceptions. Additionally, the information present on the error "
"message is not always in the same format, which makes it very difficult "
"for third-party libraries to provide automated diagnosis of the error."
msgstr ""

#: ../../pep-0473.txt:37
msgid ""
"These automated tools could, for example, detect typos or display or log "
"extra debug information. These could be particularly useful when running "
"tests or in a long running application."
msgstr ""

#: ../../pep-0473.txt:41
msgid ""
"Although it is in theory possible to have such libraries, they need to "
"resort to hacks in order to achieve the goal. One such example is python-"
"improved-exceptions [1]_, which modifies the byte-code to keep references"
" to the possibly interesting objects and also parses the error messages "
"to extract information like types or names. Unfortunately, such approach "
"is extremely fragile and not portable."
msgstr ""

#: ../../pep-0473.txt:48
msgid ""
"A similar proposal [2]_ has been implemented for ``ImportError`` and in "
"the same fashion this idea has received support [3]_. Additionally, "
"almost 10 years ago Guido asked in [11]_ to have a clean API to access "
"the affected objects in Exceptions like ``KeyError``, ``AttributeError``,"
" ``NameError``, and ``IndexError``. Similar issues and proposals ideas "
"have been written in the last year. Some other issues have been created, "
"but despite receiving support they finally get abandoned. References to "
"the created issues are listed below:"
msgstr ""

#: ../../pep-0473.txt:56
msgid "``AttributeError``: [11]_, [10]_, [5]_, [4]_, [3]_"
msgstr ""

#: ../../pep-0473.txt:58
msgid "``IndexError``: [11]_, [6]_, [3]_"
msgstr ""

#: ../../pep-0473.txt:60
msgid "``KeyError``: [11]_, [7]_, [3]_"
msgstr ""

#: ../../pep-0473.txt:62
msgid "``LookupError``: [11]_"
msgstr ""

#: ../../pep-0473.txt:64
msgid "``NameError``: [11]_, [10]_, [3]_"
msgstr ""

#: ../../pep-0473.txt:66
msgid "``TypeError``: [8]_"
msgstr ""

#: ../../pep-0473.txt:68
msgid "``ValueError``: [9]_"
msgstr ""

#: ../../pep-0473.txt:71
msgid ""
"To move forward with the development and to centralize the information "
"and discussion, this PEP aims to be a meta-issue summarizing all the "
"above discussions and ideas."
msgstr ""

#: ../../pep-0473.txt:77
msgid "Examples"
msgstr ""

#: ../../pep-0473.txt:80
msgid "IndexError"
msgstr ""

#: ../../pep-0473.txt:82
msgid "The error message does not reference the list's length nor the index used."
msgstr ""

#: ../../pep-0473.txt:92
msgid "KeyError"
msgstr ""

#: ../../pep-0473.txt:94
msgid ""
"By convention the key is the first element of the error's argument, but "
"there's no other information regarding the affected dictionary (keys "
"types, size, etc.)"
msgstr ""

#: ../../pep-0473.txt:105
msgid "AttributeError"
msgstr ""

#: ../../pep-0473.txt:107
msgid ""
"The object's type and the offending attribute are part of the error "
"message. However, there are some different formats and the information is"
" not always available. Furthermore, although the object type is useful in"
" some cases, given the dynamic nature of Python, it would be much more "
"useful to have a reference to the object itself. Additionally the "
"reference to the type is not fully qualified and in some cases the type "
"is just too generic to provide useful information, for example in case of"
" accessing a module's attribute."
msgstr ""

#: ../../pep-0473.txt:131
msgid "NameError"
msgstr ""

#: ../../pep-0473.txt:133
msgid "The error message provides typically the name."
msgstr ""

#: ../../pep-0473.txt:143
msgid "Other Cases"
msgstr ""

#: ../../pep-0473.txt:145
msgid ""
"Issues are even harder to debug when the target object is the result of "
"another expression, for example:"
msgstr ""

#: ../../pep-0473.txt:152
msgid ""
"This issue is also related to the fact that opcodes only have line number"
" information and not the offset. This proposal would help in this case "
"but not as much as having offsets."
msgstr ""

#: ../../pep-0473.txt:158
msgid "Proposal"
msgstr ""

#: ../../pep-0473.txt:160
msgid ""
"Extend the exceptions ``AttributeError``, ``IndexError``, ``KeyError``, "
"``LookupError``, ``NameError``, ``TypeError``, and ``ValueError`` with "
"the following:"
msgstr ""

#: ../../pep-0473.txt:164
msgid "``AttributeError``: target :sup:`w`, attribute"
msgstr ""

#: ../../pep-0473.txt:166
msgid ""
"``IndexError``: target :sup:`w`, key :sup:`w`, index (just an alias to "
"key)"
msgstr ""

#: ../../pep-0473.txt:169
msgid "``KeyError``: target :sup:`w`, key :sup:`w`"
msgstr ""

#: ../../pep-0473.txt:171
msgid "``LookupError``: target :sup:`w`, key :sup:`w`"
msgstr ""

#: ../../pep-0473.txt:173
msgid "``NameError``: name, scope?"
msgstr ""

#: ../../pep-0473.txt:175
msgid "``TypeError``: unexpected_type"
msgstr ""

#: ../../pep-0473.txt:177
msgid "``ValueError``: unexpected_value :sup:`w`"
msgstr ""

#: ../../pep-0473.txt:179
msgid ""
"Attributes with the superscript :sup:`w` may need to be weak references "
"[12]_ to prevent any memory cycles. However, this may add an unnecessary "
"extra complexity as noted by R. David Murray [13]_. This is specially "
"true given that builtin types do not support being weak referenced."
msgstr ""

#: ../../pep-0473.txt:184
msgid "TODO(skreft): expand this with examples of corner cases."
msgstr ""

#: ../../pep-0473.txt:186
msgid ""
"To remain backwards compatible these new attributes will be optional and "
"keyword only."
msgstr ""

#: ../../pep-0473.txt:189
msgid ""
"It is proposed to add this information, rather than just improve the "
"error, as the former would allow new debugging frameworks and tools and "
"also in the future to switch to a lazy generated message. Generated "
"messages are discussed in [2]_, although they are not implemented at the "
"moment. They would not only save some resources, but also uniform the "
"messages."
msgstr ""

#: ../../pep-0473.txt:195
msgid ""
"The stdlib will be then gradually changed so to start using these new "
"attributes."
msgstr ""

#: ../../pep-0473.txt:200
msgid "Potential Uses"
msgstr ""

#: ../../pep-0473.txt:202
msgid ""
"An automated tool could for example search for similar keys within the "
"object, allowing to display the following:::"
msgstr ""

#: ../../pep-0473.txt:213
msgid "See [3]_ for the output a TestRunner could display."
msgstr ""

#: ../../pep-0473.txt:217
msgid "Performance"
msgstr ""

#: ../../pep-0473.txt:219
msgid ""
"Filling these new attributes would only require two extra parameters with"
" data already available so the impact should be marginal. However, it may"
" need special care for ``KeyError`` as the following pattern is already "
"widespread."
msgstr ""

#: ../../pep-0473.txt:230
msgid ""
"Note as well that storing these objects into the error itself would allow"
" the lazy generation of the error message, as discussed in [2]_."
msgstr ""

#: ../../pep-0473.txt:235
msgid "References"
msgstr ""

#: ../../pep-0473.txt:237
msgid ""
"Python Exceptions Improved (https://www.github.com/sk-/python-exceptions-"
"improved)"
msgstr ""

#: ../../pep-0473.txt:240
msgid ""
"ImportError needs attributes for module and file name "
"(http://bugs.python.org/issue1559549)"
msgstr ""

#: ../../pep-0473.txt:243
msgid ""
"Enhance exceptions by attaching some more information to them "
"(https://mail.python.org/pipermail/python-"
"ideas/2014-February/025601.html)"
msgstr ""

#: ../../pep-0473.txt:246
msgid ""
"Specificity in AttributeError (https://mail.python.org/pipermail/python-"
"ideas/2013-April/020308.html)"
msgstr ""

#: ../../pep-0473.txt:249
msgid ""
"Add an 'attr' attribute to AttributeError "
"(http://bugs.python.org/issue18156)"
msgstr ""

#: ../../pep-0473.txt:252
msgid "Add index attribute to IndexError (http://bugs.python.org/issue18162)"
msgstr ""

#: ../../pep-0473.txt:255
msgid "Add a 'key' attribute to KeyError (http://bugs.python.org/issue18163)"
msgstr ""

#: ../../pep-0473.txt:258
msgid "Add 'unexpected_type' to TypeError (http://bugs.python.org/issue18165)"
msgstr ""

#: ../../pep-0473.txt:261
msgid "'value' attribute for ValueError (http://bugs.python.org/issue18166)"
msgstr ""

#: ../../pep-0473.txt:264
msgid ""
"making builtin exceptions more informative "
"(http://bugs.python.org/issue1182143)"
msgstr ""

#: ../../pep-0473.txt:267
msgid ""
"LookupError etc. need API to get the key "
"(http://bugs.python.org/issue614557)"
msgstr ""

#: ../../pep-0473.txt:270
msgid "weakref - Weak References (https://docs.python.org/3/library/weakref.html)"
msgstr ""

#: ../../pep-0473.txt:273
msgid ""
"Message by R.   David Murray: Weak refs on exceptions? "
"(http://bugs.python.org/issue18163#msg190791)"
msgstr ""

#: ../../pep-0473.txt:278
msgid "Copyright"
msgstr ""

#: ../../pep-0473.txt:280
msgid "This document has been placed in the public domain."
msgstr ""

