# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-3126.txt
msgid "PEP"
msgstr ""

#: ../../pep-3126.txt:1
msgid "3126"
msgstr ""

#: ../../pep-3126.txt
msgid "Title"
msgstr ""

#: ../../pep-3126.txt:2
msgid "Remove Implicit String Concatenation"
msgstr ""

#: ../../pep-3126.txt
msgid "Author"
msgstr ""

#: ../../pep-3126.txt:5
msgid "Jim J. Jewett <JimJJewett@gmail.com>, Raymond Hettinger <python@rcn.com>"
msgstr ""

#: ../../pep-3126.txt
msgid "Status"
msgstr ""

#: ../../pep-3126.txt:7
msgid "Rejected"
msgstr ""

#: ../../pep-3126.txt
msgid "Type"
msgstr ""

#: ../../pep-3126.txt:8
msgid "Standards Track"
msgstr ""

#: ../../pep-3126.txt
msgid "Created"
msgstr ""

#: ../../pep-3126.txt:10
msgid "29-Apr-2007"
msgstr ""

#: ../../pep-3126.txt
msgid "Post-History"
msgstr ""

#: ../../pep-3126.txt:11
msgid "29-Apr-2007, 30-Apr-2007, 07-May-2007"
msgstr ""

#: ../../pep-3126.txt:15
msgid "Rejection Notice"
msgstr ""

#: ../../pep-3126.txt:17
msgid ""
"This PEP is rejected.  There wasn't enough support in favor, the feature "
"to be removed isn't all that harmful, and there are some use cases that "
"would become harder."
msgstr ""

#: ../../pep-3126.txt:23
msgid "Abstract"
msgstr ""

#: ../../pep-3126.txt:25
msgid ""
"Python inherited many of its parsing rules from C.  While this has been "
"generally useful, there are some individual rules which are less useful "
"for python, and should be eliminated."
msgstr ""

#: ../../pep-3126.txt:29
msgid ""
"This PEP proposes to eliminate implicit string concatenation based only "
"on the adjacency of literals."
msgstr ""

#: ../../pep-3126.txt:32
msgid "Instead of::"
msgstr ""

#: ../../pep-3126.txt:36
msgid "authors will need to be explicit, and either add the strings::"
msgstr ""

#: ../../pep-3126.txt:40
msgid "or join them::"
msgstr ""

#: ../../pep-3126.txt:46
msgid "Motivation"
msgstr ""

#: ../../pep-3126.txt:48
msgid ""
"One goal for Python 3000 should be to simplify the language by removing "
"unnecessary features.  Implicit string concatenation should be dropped in"
" favor of existing techniques. This will simplify the grammar and "
"simplify a user's mental picture of Python.  The latter is important for "
"letting the language \"fit in your head\".  A large group of current "
"users do not even know about implicit concatenation.  Of those who do "
"know about it, a large portion never use it or habitually avoid it. Of "
"those who both know about it and use it, very few could state with "
"confidence the implicit operator precedence and under what circumstances "
"it is computed when the definition is compiled versus when it is run."
msgstr ""

#: ../../pep-3126.txt:62
msgid "History or Future"
msgstr ""

#: ../../pep-3126.txt:64
msgid ""
"Many Python parsing rules are intentionally compatible with C.  This is a"
" useful default, but Special Cases need to be justified based on their "
"utility in Python.  We should no longer assume that python programmers "
"will also be familiar with C, so compatibility between languages should "
"be treated as a tie-breaker, rather than a justification."
msgstr ""

#: ../../pep-3126.txt:71
msgid ""
"In C, implicit concatenation is the only way to join strings without "
"using a (run-time) function call to store into a variable.  In Python, "
"the strings can be joined (and still recognized as immutable) using more "
"standard Python idioms, such ``+`` or ``\"\".join``."
msgstr ""

#: ../../pep-3126.txt:78
msgid "Problem"
msgstr ""

#: ../../pep-3126.txt:80
msgid ""
"Implicit String concatenation leads to tuples and lists which are shorter"
" than they appear; this is turn can lead to confusing, or even silent, "
"errors.  For example, given a function which accepts several parameters, "
"but offers a default value for some of them::"
msgstr ""

#: ../../pep-3126.txt:88
msgid "This looks like a valid call, but isn't::"
msgstr ""

#: ../../pep-3126.txt:102
msgid "Calls to this function can silently do the wrong thing::"
msgstr ""

#: ../../pep-3126.txt:112
msgid "To quote Jason Orendorff [#Orendorff]"
msgstr ""

#: ../../pep-3126.txt:114
msgid ""
"Oh.  I just realized this happens a lot out here.  Where I work, we use "
"scons, and each SConscript has a long list of filenames::"
msgstr ""

#: ../../pep-3126.txt:123
msgid ""
"It's a common mistake to leave off a comma, and then scons complains that"
" it can't find 'foo.cbar.c'.  This is pretty bewildering behavior even if"
" you *are* a Python programmer, and not everyone here is."
msgstr ""

#: ../../pep-3126.txt:130
msgid "Solution"
msgstr ""

#: ../../pep-3126.txt:132
msgid ""
"In Python, strings are objects and they support the __add__ operator, so "
"it is possible to write::"
msgstr ""

#: ../../pep-3126.txt:137
msgid ""
"Because these are literals, this addition can still be optimized away by "
"the compiler; the CPython compiler already does so. [#rcn-constantfold]_"
msgstr ""

#: ../../pep-3126.txt:141
msgid ""
"Other existing alternatives include multiline (triple-quoted) strings, "
"and the join method::"
msgstr ""

#: ../../pep-3126.txt:165
msgid "Concerns"
msgstr ""

#: ../../pep-3126.txt:169
msgid "Operator Precedence"
msgstr ""

#: ../../pep-3126.txt:171
#, python-format
msgid ""
"Guido indicated [#rcn-constantfold]_ that this change should be handled "
"by PEP, because there were a few edge cases with other string operators, "
"such as the %.  (Assuming that str % stays -- it may be eliminated in "
"favor of PEP 3101 -- Advanced String Formatting. [#PEP3101]_ "
"[#elimpercent]_)"
msgstr ""

#: ../../pep-3126.txt:177
msgid ""
"The resolution is to use parentheses to enforce precedence -- the same "
"solution that can be used today::"
msgstr ""

#: ../../pep-3126.txt:188
msgid "as opposed to::"
msgstr ""

#: ../../pep-3126.txt:204
msgid "Long Commands"
msgstr ""

#: ../../pep-3126.txt:206
msgid "... build up (what I consider to be) readable SQL queries [#skipSQL]_::"
msgstr ""

#: ../../pep-3126.txt:217
msgid "Alternatives again include triple-quoted strings, ``+``, and ``.join``::"
msgstr ""

#: ../../pep-3126.txt:250
msgid "Regular Expressions"
msgstr ""

#: ../../pep-3126.txt:252
msgid ""
"Complex regular expressions are sometimes stated in terms of several "
"implicitly concatenated strings with each regex component on a different "
"line and followed by a comment.  The plus operator can be inserted here "
"but it does make the regex harder to read.  One alternative is to use the"
" re.VERBOSE option.  Another alternative is to build-up the regex with a "
"series of += lines::"
msgstr ""

#: ../../pep-3126.txt:280
msgid "Internationalization"
msgstr ""

#: ../../pep-3126.txt:282
msgid ""
"Some internationalization tools -- notably xgettext -- have already been "
"special-cased for implicit concatenation, but not for Python's explicit "
"concatenation. [#barryi8]_"
msgstr ""

#: ../../pep-3126.txt:286
msgid "These tools will fail to extract the (already legal)::"
msgstr ""

#: ../../pep-3126.txt:291
msgid "but often have a special case for::"
msgstr ""

#: ../../pep-3126.txt:296
msgid ""
"It should also be possible to just use an overly long line (xgettext "
"limits messages to 2048 characters [#xgettext2048]_, which is less than "
"Python's enforced limit) or triple-quoted strings, but these solutions "
"sacrifice some readability in the code::"
msgstr ""

#: ../../pep-3126.txt:312
msgid "I do not see a good short-term resolution for this."
msgstr ""

#: ../../pep-3126.txt:316
msgid "Transition"
msgstr ""

#: ../../pep-3126.txt:318
msgid ""
"The proposed new constructs are already legal in current Python, and can "
"be used immediately."
msgstr ""

#: ../../pep-3126.txt:321
msgid "The 2 to 3 translator can be made to mechanically change::"
msgstr ""

#: ../../pep-3126.txt:327
msgid "into::"
msgstr ""

#: ../../pep-3126.txt:333
msgid ""
"If users want to use one of the other idioms, they can; as these idioms "
"are all already legal in python 2, the edits can be made to the original "
"source, rather than patching up the translator."
msgstr ""

#: ../../pep-3126.txt:339
msgid "Open Issues"
msgstr ""

#: ../../pep-3126.txt:341
msgid ""
"Is there a better way to support external text extraction tools, or at "
"least ``xgettext`` [#gettext]_ in particular?"
msgstr ""

#: ../../pep-3126.txt:346
msgid "References"
msgstr ""

#: ../../pep-3126.txt:348
msgid ""
"Implicit String Concatenation, Orendorff "
"https://mail.python.org/pipermail/python-ideas/2007-April/000397.html"
msgstr ""

#: ../../pep-3126.txt:351
msgid ""
"Reminder: Py3k PEPs due by April, Hettinger, van Rossum "
"https://mail.python.org/pipermail/python-3000/2007-April/006563.html"
msgstr ""

#: ../../pep-3126.txt:355
msgid ""
"PEP 3101, Advanced String Formatting, Talin "
"http://www.python.org/dev/peps/pep-3101/"
msgstr ""

#: ../../pep-3126.txt:358
msgid ""
"ps to question Re: Need help completing ABC pep, van Rossum "
"https://mail.python.org/pipermail/python-3000/2007-April/006737.html"
msgstr ""

#: ../../pep-3126.txt:362
msgid ""
"(email Subject) PEP 30XZ: Simplified Parsing, Skip, "
"https://mail.python.org/pipermail/python-3000/2007-May/007261.html"
msgstr ""

#: ../../pep-3126.txt:365
msgid ""
"(email Subject) PEP 30XZ: Simplified Parsing "
"https://mail.python.org/pipermail/python-3000/2007-May/007305.html"
msgstr ""

#: ../../pep-3126.txt:368
msgid "GNU gettext manual http://www.gnu.org/software/gettext/"
msgstr ""

#: ../../pep-3126.txt:371
msgid ""
"Unix man page for xgettext -- Notes section http://www.scit.wlv.ac.uk"
"/cgi-bin/mansec?1+xgettext"
msgstr ""

#: ../../pep-3126.txt:376
msgid "Copyright"
msgstr ""

#: ../../pep-3126.txt:378
msgid "This document has been placed in the public domain."
msgstr ""

