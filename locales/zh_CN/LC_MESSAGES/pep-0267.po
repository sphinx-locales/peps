# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0267.txt
msgid "PEP"
msgstr ""

#: ../../pep-0267.txt:1
msgid "267"
msgstr ""

#: ../../pep-0267.txt
msgid "Title"
msgstr ""

#: ../../pep-0267.txt:2
msgid "Optimized Access to Module Namespaces"
msgstr ""

#: ../../pep-0267.txt
msgid "Author"
msgstr ""

#: ../../pep-0267.txt:5
msgid "jeremy@alum.mit.edu (Jeremy Hylton)"
msgstr ""

#: ../../pep-0267.txt
msgid "Status"
msgstr ""

#: ../../pep-0267.txt:6
msgid "Deferred"
msgstr ""

#: ../../pep-0267.txt
msgid "Type"
msgstr ""

#: ../../pep-0267.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0267.txt
msgid "Created"
msgstr ""

#: ../../pep-0267.txt:9
msgid "23-May-2001"
msgstr ""

#: ../../pep-0267.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0267.txt:10
msgid "2.2"
msgstr ""

#: ../../pep-0267.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0267.txt:15
msgid "Deferral"
msgstr ""

#: ../../pep-0267.txt:17
msgid ""
"While this PEP is a nice idea, no-one has yet emerged to do the work of "
"hashing out the differences between this PEP, PEP 266 and PEP 280. Hence,"
" it is being deferred."
msgstr ""

#: ../../pep-0267.txt:23
msgid "Abstract"
msgstr ""

#: ../../pep-0267.txt:25
msgid ""
"This PEP proposes a new implementation of global module namespaces and "
"the builtin namespace that speeds name resolution.  The implementation "
"would use an array of object pointers for most operations in these "
"namespaces.  The compiler would assign indices for global variables and "
"module attributes at compile time."
msgstr ""

#: ../../pep-0267.txt:31
msgid ""
"The current implementation represents these namespaces as dictionaries.  "
"A global name incurs a dictionary lookup each time it is used; a builtin "
"name incurs two dictionary lookups, a failed lookup in the global "
"namespace and a second lookup in the builtin namespace."
msgstr ""

#: ../../pep-0267.txt:37
msgid ""
"This implementation should speed Python code that uses module-level "
"functions and variables.  It should also eliminate awkward coding styles "
"that have evolved to speed access to these names."
msgstr ""

#: ../../pep-0267.txt:42
msgid ""
"The implementation is complicated because the global and builtin "
"namespaces can be modified dynamically in ways that are impossible for "
"the compiler to detect.  (Example: A module's namespace is modified by a "
"script after the module is imported.)  As a result, the implementation "
"must maintain several auxiliary data structures to preserve these dynamic"
" features."
msgstr ""

#: ../../pep-0267.txt:51
msgid "Introduction"
msgstr ""

#: ../../pep-0267.txt:53
msgid ""
"This PEP proposes a new implementation of attribute access for module "
"objects that optimizes access to module variables known at compile time."
"  The module will store these variables in an array and provide an "
"interface to lookup attributes using array offsets. For globals, "
"builtins, and attributes of imported modules, the compiler will generate "
"code that uses the array offsets for fast access."
msgstr ""

#: ../../pep-0267.txt:61
msgid ""
"[describe the key parts of the design: dlict, compiler support, stupid "
"name trick workarounds, optimization of other module's globals]"
msgstr ""

#: ../../pep-0267.txt:65
msgid ""
"The implementation will preserve existing semantics for module "
"namespaces, including the ability to modify module namespaces at runtime "
"in ways that affect the visibility of builtin names."
msgstr ""

#: ../../pep-0267.txt:71
msgid "DLict design"
msgstr ""

#: ../../pep-0267.txt:73
msgid ""
"The namespaces are implemented using a data structure that has sometimes "
"gone under the name ``dlict``.  It is a dictionary that has numbered "
"slots for some dictionary entries.  The type must be implemented in C to "
"achieve acceptable performance.  The new type-class unification work "
"should make this fairly easy.  The ``DLict`` will presumably be a "
"subclass of dictionary with an alternate storage module for some keys."
msgstr ""

#: ../../pep-0267.txt:81
msgid "A Python implementation is included here to illustrate the basic design::"
msgstr ""

#: ../../pep-0267.txt:192
msgid "Compiler issues"
msgstr ""

#: ../../pep-0267.txt:194
msgid ""
"The compiler currently collects the names of all global variables in a "
"module.  These are names bound at the module level or bound in a class or"
" function body that declares them to be global."
msgstr ""

#: ../../pep-0267.txt:198
msgid ""
"The compiler would assign indices for each global name and add the names "
"and indices of the globals to the module's code object. Each code object "
"would then be bound irrevocably to the module it was defined in.  (Not "
"sure if there are some subtle problems with this.)"
msgstr ""

#: ../../pep-0267.txt:204
msgid ""
"For attributes of imported modules, the module will store an indirection "
"record.  Internally, the module will store a pointer to the defining "
"module and the offset of the attribute in the defining module's global "
"variable array.  The offset would be initialized the first time the name "
"is looked up."
msgstr ""

#: ../../pep-0267.txt:212
msgid "Runtime model"
msgstr ""

#: ../../pep-0267.txt:214
msgid ""
"The PythonVM will be extended with new opcodes to access globals and "
"module attributes via a module-level array."
msgstr ""

#: ../../pep-0267.txt:217
msgid ""
"A function object would need to point to the module that defined it in "
"order to provide access to the module-level global array."
msgstr ""

#: ../../pep-0267.txt:220
msgid ""
"For module attributes stored in the ``dlict`` (call them static "
"attributes), the get/delattr implementation would need to track access to"
" these attributes using the old by-name interface.  If a static attribute"
" is updated dynamically, e.g.::"
msgstr ""

#: ../../pep-0267.txt:227
msgid ""
"The implementation would need to update the array slot instead of the "
"backup dict."
msgstr ""

#: ../../pep-0267.txt:232
msgid "Backwards compatibility"
msgstr ""

#: ../../pep-0267.txt:234
msgid ""
"The ``dlict`` will need to maintain meta-information about whether a slot"
" is currently used or not.  It will also need to maintain a pointer to "
"the builtin namespace.  When a name is not currently used in the global "
"namespace, the lookup will have to fail over to the builtin namespace."
msgstr ""

#: ../../pep-0267.txt:240
msgid ""
"In the reverse case, each module may need a special accessor function for"
" the builtin namespace that checks to see if a global shadowing the "
"builtin has been added dynamically.  This check would only occur if there"
" was a dynamic change to the module's ``dlict``, i.e. when a name is "
"bound that wasn't discovered at compile-time."
msgstr ""

#: ../../pep-0267.txt:247
msgid ""
"These mechanisms would have little if any cost for the common case "
"whether a module's global namespace is not modified in strange ways at "
"runtime.  They would add overhead for modules that did unusual things "
"with global names, but this is an uncommon practice and probably one "
"worth discouraging."
msgstr ""

#: ../../pep-0267.txt:253
msgid ""
"It may be desirable to disable dynamic additions to the global namespace "
"in some future version of Python.  If so, the new implementation could "
"provide warnings."
msgstr ""

#: ../../pep-0267.txt:259
msgid "Related PEPs"
msgstr ""

#: ../../pep-0267.txt:261
msgid ""
"PEP 266, Optimizing Global Variable/Attribute Access, proposes a "
"different mechanism for optimizing access to global variables as well as "
"attributes of objects.  The mechanism uses two new opcodes "
"``TRACK_OBJECT`` and ``UNTRACK_OBJECT`` to create a slot in the local "
"variables array that aliases the global or object attribute.  If the "
"object being aliases is rebound, the rebind operation is responsible for "
"updating the aliases."
msgstr ""

#: ../../pep-0267.txt:269
msgid ""
"The objecting tracking approach applies to a wider range of objects than "
"just module.  It may also have a higher runtime cost, because each "
"function that uses a global or object attribute must execute extra "
"opcodes to register its interest in an object and unregister on exit; the"
" cost of registration is unclear, but presumably involves a dynamically "
"resizable data structure to hold a list of callbacks."
msgstr ""

#: ../../pep-0267.txt:277
msgid ""
"The implementation proposed here avoids the need for registration, "
"because it does not create aliases.  Instead it allows functions that "
"reference a global variable or module attribute to retain a pointer to "
"the location where the original binding is stored.  A second advantage is"
" that the initial lookup is performed once per module rather than once "
"per function call."
msgstr ""

#: ../../pep-0267.txt:286
msgid "Copyright"
msgstr ""

#: ../../pep-0267.txt:288
msgid "This document has been placed in the public domain."
msgstr ""

