# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-14 00:59+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0663.txt
msgid "PEP"
msgstr ""

#: ../../pep-0663.txt:1
msgid "663"
msgstr ""

#: ../../pep-0663.txt
msgid "Title"
msgstr ""

#: ../../pep-0663.txt:2
msgid "Standardizing Enum str(), repr(), and format() behaviors"
msgstr ""

#: ../../pep-0663.txt
msgid "Author"
msgstr ""

#: ../../pep-0663.txt:5
msgid "Ethan Furman <ethan@stoneleaf.us>"
msgstr ""

#: ../../pep-0663.txt
msgid "Discussions-To"
msgstr ""

#: ../../pep-0663.txt:6
msgid "python-dev@python.org"
msgstr ""

#: ../../pep-0663.txt
msgid "Status"
msgstr ""

#: ../../pep-0663.txt:7
msgid "Draft"
msgstr ""

#: ../../pep-0663.txt
msgid "Type"
msgstr ""

#: ../../pep-0663.txt:8
msgid "Informational"
msgstr ""

#: ../../pep-0663.txt
msgid "Created"
msgstr ""

#: ../../pep-0663.txt:10
msgid "30-Jun-2021"
msgstr ""

#: ../../pep-0663.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0663.txt:11
msgid "3.11"
msgstr ""

#: ../../pep-0663.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0663.txt:12
msgid "20-Jul-2021, 02-Nov-2021"
msgstr ""

#: ../../pep-0663.txt
msgid "Resolution"
msgstr ""

#: ../../pep-0663.txt:17
msgid "Abstract"
msgstr ""

#: ../../pep-0663.txt:19
msgid ""
"Update the ``repr()``, ``str()``, and ``format()`` of the various Enum "
"types to better match their intended purpose.  For example, ``IntEnum`` "
"will have its ``str()`` change to match its ``format()``, while a user-"
"mixed int-enum will have its ``format()`` match its ``str()``.  In all "
"cases, an enum's ``str()`` and ``format()`` will be the same (unless the "
"user overrides ``format()``)."
msgstr ""

#: ../../pep-0663.txt:26
msgid ""
"Add a global enum decorator which changes the ``str()`` and ``repr()``  "
"(and ``format()``) of the decorated enum to be a valid global reference: "
"i.e. ``re.IGNORECASE`` instead of ``<RegexFlag.IGNORECASE: 2>``."
msgstr ""

#: ../../pep-0663.txt:32
msgid "Motivation"
msgstr ""

#: ../../pep-0663.txt:34
msgid ""
"Having the ``str()`` of ``IntEnum`` and ``IntFlag`` not be the value "
"causes bugs and extra work when replacing existing constants."
msgstr ""

#: ../../pep-0663.txt:37
msgid ""
"Having the ``str()`` and ``format()`` of an enum member be different can "
"be confusing."
msgstr ""

#: ../../pep-0663.txt:40
msgid ""
"The addition of ``StrEnum`` with its requirement to have its ``str()`` be"
" its ``value`` is inconsistent with other provided Enum's ``str``."
msgstr ""

#: ../../pep-0663.txt:43
msgid ""
"The iteration of ``Flag`` members, which directly affects their "
"``repr()``, is inelegant at best, and buggy at worst."
msgstr ""

#: ../../pep-0663.txt:48
msgid "Rationale"
msgstr ""

#: ../../pep-0663.txt:50
msgid ""
"Enums are becoming more common in the standard library; being able to "
"recognize enum members by their ``repr()``, and having that ``repr()`` be"
" easy to parse, is useful and can save time and effort in understanding "
"and debugging code."
msgstr ""

#: ../../pep-0663.txt:54
msgid ""
"However, the enums with mixed-in data types (``IntEnum``, ``IntFlag``, "
"and the new ``StrEnum``) need to be more backwards compatible with the "
"constants they are replacing -- specifically, "
"``str(replacement_enum_member) == str(original_constant)`` should be true"
" (and the same for ``format()``)."
msgstr ""

#: ../../pep-0663.txt:59
msgid ""
"IntEnum, IntFlag, and StrEnum should be as close to a drop-in replacement"
" of existing integer and string constants as is possible.  Towards that "
"goal, the ``str()`` output of each should be its inherent value; e.g. if "
"``Color`` is an ``IntEnum``::"
msgstr ""

#: ../../pep-0663.txt:71
msgid ""
"Note that ``format()`` already produces the correct output, only "
"``str()`` needs updating."
msgstr ""

#: ../../pep-0663.txt:74
msgid ""
"As much as possible, the ``str()``, ``repr()``, and ``format()`` of enum "
"members should be standardized across the standard library.  However, up "
"to Python 3.10 several enums in the standard library have a custom "
"``str()`` and/or ``repr()``."
msgstr ""

#: ../../pep-0663.txt:78
msgid ""
"The ``repr()`` of Flag currently includes aliases, which it should not; "
"fixing that will, of course, already change its ``repr()`` in certain "
"cases."
msgstr ""

#: ../../pep-0663.txt:83
msgid "Specification"
msgstr ""

#: ../../pep-0663.txt:85
msgid "There are three broad categories of enum usage:"
msgstr ""

#: ../../pep-0663.txt:87
msgid ""
"simple: ``Enum`` or ``Flag`` a new enum class is created with no data "
"type mixins"
msgstr ""

#: ../../pep-0663.txt:90
msgid ""
"drop-in replacement: ``IntEnum``, ``IntFlag``, ``StrEnum`` a new enum "
"class is created which also subclasses ``int`` or ``str`` and uses "
"``int.__str__`` or ``str.__str__``"
msgstr ""

#: ../../pep-0663.txt:94
msgid ""
"user-mixed enums and flags the user creates their own integer-, float-, "
"str-, whatever-enums instead of using enum.IntEnum, etc."
msgstr ""

#: ../../pep-0663.txt:98
msgid "There are also two styles:"
msgstr ""

#: ../../pep-0663.txt:100
msgid ""
"normal: the enumeration members remain in their classes and are accessed "
"as ``classname.membername``, and the class name shows in their ``repr()``"
" and ``str()`` (where appropriate)"
msgstr ""

#: ../../pep-0663.txt:104
msgid ""
"global: the enumeration members are copied into their module's global "
"namespace, and their module name shows in their ``repr()`` and ``str()`` "
"(where appropriate)"
msgstr ""

#: ../../pep-0663.txt:108
msgid "Some sample enums::"
msgstr ""

#: ../../pep-0663.txt:126
msgid ""
"Using the above enumerations, the following two tables show the old and "
"new output (blank cells indicate no change):"
msgstr ""

#: ../../pep-0663.txt:130 ../../pep-0663.txt:158 ../../pep-0663.txt:188
#: ../../pep-0663.txt:204
msgid "style"
msgstr ""

#: ../../pep-0663.txt:130 ../../pep-0663.txt:158 ../../pep-0663.txt:188
#: ../../pep-0663.txt:204
msgid "category"
msgstr ""

#: ../../pep-0663.txt:130 ../../pep-0663.txt:188
msgid "enum repr()"
msgstr ""

#: ../../pep-0663.txt:130 ../../pep-0663.txt:188
msgid "enum str()"
msgstr ""

#: ../../pep-0663.txt:130 ../../pep-0663.txt:188
msgid "enum format()"
msgstr ""

#: ../../pep-0663.txt:132 ../../pep-0663.txt:160 ../../pep-0663.txt:190
#: ../../pep-0663.txt:206
msgid "normal"
msgstr ""

#: ../../pep-0663.txt:132 ../../pep-0663.txt:144 ../../pep-0663.txt:160
#: ../../pep-0663.txt:172 ../../pep-0663.txt:190 ../../pep-0663.txt:196
#: ../../pep-0663.txt:206 ../../pep-0663.txt:212
msgid "simple"
msgstr ""

#: ../../pep-0663.txt:132 ../../pep-0663.txt:136 ../../pep-0663.txt:140
#: ../../pep-0663.txt:144 ../../pep-0663.txt:148 ../../pep-0663.txt:152
#: ../../pep-0663.txt:160 ../../pep-0663.txt:164 ../../pep-0663.txt:168
#: ../../pep-0663.txt:172 ../../pep-0663.txt:176 ../../pep-0663.txt:180
msgid "3.10"
msgstr ""

#: ../../pep-0663.txt:134 ../../pep-0663.txt:138 ../../pep-0663.txt:142
#: ../../pep-0663.txt:146 ../../pep-0663.txt:150 ../../pep-0663.txt:154
#: ../../pep-0663.txt:162 ../../pep-0663.txt:166 ../../pep-0663.txt:170
#: ../../pep-0663.txt:174 ../../pep-0663.txt:178 ../../pep-0663.txt:182
msgid "new"
msgstr ""

#: ../../pep-0663.txt:136 ../../pep-0663.txt:148 ../../pep-0663.txt:164
#: ../../pep-0663.txt:176 ../../pep-0663.txt:192 ../../pep-0663.txt:198
#: ../../pep-0663.txt:208 ../../pep-0663.txt:214
msgid "user mixed"
msgstr ""

#: ../../pep-0663.txt:136 ../../pep-0663.txt:164 ../../pep-0663.txt:176
msgid "1"
msgstr ""

#: ../../pep-0663.txt:138 ../../pep-0663.txt:148 ../../pep-0663.txt:166
#: ../../pep-0663.txt:176 ../../pep-0663.txt:192 ../../pep-0663.txt:208
msgid "Grey.WHITE"
msgstr ""

#: ../../pep-0663.txt:140 ../../pep-0663.txt:152 ../../pep-0663.txt:168
#: ../../pep-0663.txt:180 ../../pep-0663.txt:194 ../../pep-0663.txt:200
#: ../../pep-0663.txt:210 ../../pep-0663.txt:216
msgid "int drop-in"
msgstr ""

#: ../../pep-0663.txt:140 ../../pep-0663.txt:144 ../../pep-0663.txt:152
#: ../../pep-0663.txt:190
msgid "Hue.LIGHT"
msgstr ""

#: ../../pep-0663.txt:142 ../../pep-0663.txt:154 ../../pep-0663.txt:194
#: ../../pep-0663.txt:200
msgid "-1"
msgstr ""

#: ../../pep-0663.txt:144 ../../pep-0663.txt:172 ../../pep-0663.txt:196
#: ../../pep-0663.txt:212
msgid "global"
msgstr ""

#: ../../pep-0663.txt:144 ../../pep-0663.txt:152 ../../pep-0663.txt:190
#: ../../pep-0663.txt:194
msgid "<Hue.LIGHT: -1>"
msgstr ""

#: ../../pep-0663.txt:146 ../../pep-0663.txt:154 ../../pep-0663.txt:196
#: ../../pep-0663.txt:200
msgid "tools.LIGHT"
msgstr ""

#: ../../pep-0663.txt:146 ../../pep-0663.txt:196
msgid "LIGHT"
msgstr ""

#: ../../pep-0663.txt:148
msgid "<Grey.WHITE: 1"
msgstr ""

#: ../../pep-0663.txt:150 ../../pep-0663.txt:178 ../../pep-0663.txt:198
#: ../../pep-0663.txt:214
msgid "tools.WHITE"
msgstr ""

#: ../../pep-0663.txt:150 ../../pep-0663.txt:178 ../../pep-0663.txt:198
#: ../../pep-0663.txt:214
msgid "WHITE"
msgstr ""

#: ../../pep-0663.txt:158 ../../pep-0663.txt:204
msgid "flag repr()"
msgstr ""

#: ../../pep-0663.txt:158 ../../pep-0663.txt:204
msgid "flag str()"
msgstr ""

#: ../../pep-0663.txt:158 ../../pep-0663.txt:204
msgid "flag format()"
msgstr ""

#: ../../pep-0663.txt:160 ../../pep-0663.txt:168 ../../pep-0663.txt:172
#: ../../pep-0663.txt:180
msgid "<Color.RED|GREEN: 3>"
msgstr ""

#: ../../pep-0663.txt:160 ../../pep-0663.txt:168 ../../pep-0663.txt:172
#: ../../pep-0663.txt:180
msgid "Color.RED|GREEN"
msgstr ""

#: ../../pep-0663.txt:162 ../../pep-0663.txt:170 ../../pep-0663.txt:206
#: ../../pep-0663.txt:210
msgid "<Color(3): RED|GREEN>"
msgstr ""

#: ../../pep-0663.txt:162 ../../pep-0663.txt:206
msgid "Color.RED|Color.GREEN"
msgstr ""

#: ../../pep-0663.txt:164 ../../pep-0663.txt:176 ../../pep-0663.txt:192
msgid "<Grey.WHITE: 1>"
msgstr ""

#: ../../pep-0663.txt:166 ../../pep-0663.txt:208
msgid "<Grey(1): WHITE>"
msgstr ""

#: ../../pep-0663.txt:170 ../../pep-0663.txt:182 ../../pep-0663.txt:210
#: ../../pep-0663.txt:216
msgid "3"
msgstr ""

#: ../../pep-0663.txt:174 ../../pep-0663.txt:182 ../../pep-0663.txt:212
#: ../../pep-0663.txt:216
msgid "tools.RED|tools.GREEN"
msgstr ""

#: ../../pep-0663.txt:174 ../../pep-0663.txt:212
msgid "RED|GREEN"
msgstr ""

#: ../../pep-0663.txt:185
msgid "These two tables show the final result:"
msgstr ""

#: ../../pep-0663.txt:219
msgid ""
"As can be seen, ``repr()`` is primarily affected by whether the members "
"are global, while ``str()`` is affected by being global or by being a "
"drop-in replacement, with the drop-in replacement status having a higher "
"priority. Also, the basic ``repr()`` and ``str()`` have changed for flags"
" as the old style was flawed."
msgstr ""

#: ../../pep-0663.txt:227
msgid "Backwards Compatibility"
msgstr ""

#: ../../pep-0663.txt:229
msgid ""
"Backwards compatibility of stringified objects is not guaranteed across "
"major Python versions, and there will be backwards compatibility breaks "
"where software uses the ``repr()``, ``str()``, and ``format()`` output of"
" enums in tests, documentation, data structures, and/or code generation."
msgstr ""

#: ../../pep-0663.txt:234
msgid ""
"Normal usage of enum members will not change: ``re.ASCII`` can still be "
"used as ``re.ASCII`` and will still compare equal to ``256``."
msgstr ""

#: ../../pep-0663.txt:237
msgid ""
"If the previous output needs to be maintained, for example to ensure "
"compatibility between different Python versions, software projects will "
"need to create their own enum base class with the appropriate methods "
"overridden."
msgstr ""

#: ../../pep-0663.txt:241
msgid ""
"Note that by changing the ``str()`` of the drop-in category, we will "
"actually prevent future breakage when ``IntEnum``, et al, are used to "
"replace existing constants."
msgstr ""

#: ../../pep-0663.txt:247
msgid "Copyright"
msgstr ""

#: ../../pep-0663.txt:249
msgid ""
"This document is placed in the public domain or under the "
"CC0-1.0-Universal license, whichever is more permissive."
msgstr ""

#~ msgid "Standardizing Enum str(), repr(), and format() behaviors"
#~ msgstr ""

#~ msgid "30-Jun-2021"
#~ msgstr ""

#~ msgid "20-Jul-2021, 02-Nov-2021"
#~ msgstr ""

#~ msgid ""
#~ "Update the ``repr()``, ``str()``, and "
#~ "``format()`` of the various Enum types"
#~ " to better match their intended "
#~ "purpose.  For example, ``IntEnum`` will "
#~ "have its ``str()`` change to match "
#~ "its ``format()``, while a user-mixed "
#~ "int-enum will have its ``format()`` "
#~ "match its ``str()``.  In all cases, "
#~ "an enum's ``str()`` and ``format()`` "
#~ "will be the same (unless the user"
#~ " overrides ``format()``)."
#~ msgstr ""

#~ msgid ""
#~ "Add a global enum decorator which "
#~ "changes the ``str()`` and ``repr()``  "
#~ "(and ``format()``) of the decorated enum"
#~ " to be a valid global reference: "
#~ "i.e. ``re.IGNORECASE`` instead of "
#~ "``<RegexFlag.IGNORECASE: 2>``."
#~ msgstr ""

#~ msgid ""
#~ "IntEnum, IntFlag, and StrEnum should be"
#~ " as close to a drop-in "
#~ "replacement of existing integer and "
#~ "string constants as is possible.  "
#~ "Towards that goal, the ``str()`` output"
#~ " of each should be its inherent "
#~ "value; e.g. if ``Color`` is an "
#~ "``IntEnum``::"
#~ msgstr ""

#~ msgid ""
#~ "Note that ``format()`` already produces "
#~ "the correct output, only ``str()`` needs"
#~ " updating."
#~ msgstr ""

#~ msgid ""
#~ "As much as possible, the ``str()``, "
#~ "``repr()``, and ``format()`` of enum "
#~ "members should be standardized across "
#~ "the standard library.  However, up to"
#~ " Python 3.10 several enums in the "
#~ "standard library have a custom ``str()``"
#~ " and/or ``repr()``."
#~ msgstr ""

#~ msgid ""
#~ "The ``repr()`` of Flag currently "
#~ "includes aliases, which it should not;"
#~ " fixing that will, of course, already"
#~ " change its ``repr()`` in certain "
#~ "cases."
#~ msgstr ""

#~ msgid "There are three broad categories of enum usage:"
#~ msgstr ""

#~ msgid ""
#~ "simple: ``Enum`` or ``Flag`` a new "
#~ "enum class is created with no data"
#~ " type mixins"
#~ msgstr ""

#~ msgid ""
#~ "drop-in replacement: ``IntEnum``, ``IntFlag``,"
#~ " ``StrEnum`` a new enum class is "
#~ "created which also subclasses ``int`` or"
#~ " ``str`` and uses ``int.__str__`` or "
#~ "``str.__str__``"
#~ msgstr ""

#~ msgid ""
#~ "global: the enumeration members are "
#~ "copied into their module's global "
#~ "namespace, and their module name shows"
#~ " in their ``repr()`` and ``str()`` "
#~ "(where appropriate)"
#~ msgstr ""

#~ msgid ""
#~ "Using the above enumerations, the "
#~ "following two tables show the old "
#~ "and new output (blank cells indicate "
#~ "no change):"
#~ msgstr ""

#~ msgid ""
#~ "As can be seen, ``repr()`` is "
#~ "primarily affected by whether the "
#~ "members are global, while ``str()`` is"
#~ " affected by being global or by "
#~ "being a drop-in replacement, with "
#~ "the drop-in replacement status having"
#~ " a higher priority. Also, the basic"
#~ " ``repr()`` and ``str()`` have changed "
#~ "for flags as the old style was "
#~ "flawed."
#~ msgstr ""

#~ msgid "Improving and Standardizing Enum str(), repr(), and format() behaviors"
#~ msgstr ""

#~ msgid "23-Feb-2013"
#~ msgstr ""

#~ msgid "20-Jul-2021"
#~ msgstr ""

#~ msgid ""
#~ "Update the ``repr()``, ``str()``, and "
#~ "``format()`` of the various Enum types"
#~ " for consistency and to better match"
#~ " their intended purpose."
#~ msgstr ""

#~ msgid ""
#~ "IntEnum, IntFlag, and StrEnum should be"
#~ " as close to a drop-in "
#~ "replacement of existing integer and "
#~ "string constants as is possible.  "
#~ "Towards that goal, the str() output "
#~ "of each should be its inherent "
#~ "value; e.g. if ``Color`` is an "
#~ "``IntEnum``::"
#~ msgstr ""

#~ msgid ""
#~ "Note that format() already produces the"
#~ " correct output in 3.10, only str()"
#~ " needs updating."
#~ msgstr ""

#~ msgid ""
#~ "As much as possible, the ``str()``, "
#~ "``repr()``, and ``format()`` of enum "
#~ "members should be standardized across "
#~ "the standard library."
#~ msgstr ""

#~ msgid ""
#~ "The repr() of Flag currently includes"
#~ " aliases, which it should not; fixing"
#~ " that will, of course, already change"
#~ " its ``repr()`` in certain cases."
#~ msgstr ""

#~ msgid "There a three broad categories of enum usage:"
#~ msgstr ""

#~ msgid ""
#~ "simple: Enum or Flag a new enum"
#~ " class is created with no data "
#~ "type mixins"
#~ msgstr ""

#~ msgid ""
#~ "drop-in replacement: IntEnum, IntFlag, "
#~ "StrEnum a new enum class is "
#~ "created which also subclasses ``int`` or"
#~ " ``str`` and uses ``int.__str__`` or "
#~ "``str.__str__``"
#~ msgstr ""

#~ msgid ""
#~ "global: the enumeration members are "
#~ "copied into their module's global "
#~ "namespcae, and their module name shows"
#~ " in their ``repr()`` and ``str()`` "
#~ "(where appropriate)"
#~ msgstr ""

#~ msgid ""
#~ "Using the above enumerations, the "
#~ "following two tables show the old "
#~ "and new behavior (blank cells indicate"
#~ " no behavioral change):"
#~ msgstr ""

#~ msgid ""
#~ "As can be seen, ``repr()`` is "
#~ "primarily affected by whether the "
#~ "members are global, while ``str()`` is"
#~ " affected by being global or by "
#~ "being a drop-in replacement, with "
#~ "the drop-in replacement status having"
#~ " a higher priority. Also, the basic"
#~ " ``repr()`` and ``str()`` have changed "
#~ "for flags as the old style was "
#~ "very clunky."
#~ msgstr ""

