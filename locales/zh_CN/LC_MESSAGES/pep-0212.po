# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0212.txt
msgid "PEP"
msgstr ""

#: ../../pep-0212.txt:1
msgid "212"
msgstr ""

#: ../../pep-0212.txt
msgid "Title"
msgstr ""

#: ../../pep-0212.txt:2
msgid "Loop Counter Iteration"
msgstr ""

#: ../../pep-0212.txt
msgid "Author"
msgstr ""

#: ../../pep-0212.txt:5
msgid "nowonder@nowonder.de (Peter Schneider-Kamp)"
msgstr ""

#: ../../pep-0212.txt
msgid "Status"
msgstr ""

#: ../../pep-0212.txt:6
msgid "Rejected"
msgstr ""

#: ../../pep-0212.txt
msgid "Type"
msgstr ""

#: ../../pep-0212.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0212.txt
msgid "Created"
msgstr ""

#: ../../pep-0212.txt:9
msgid "22-Aug-2000"
msgstr ""

#: ../../pep-0212.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0212.txt:10
msgid "2.1"
msgstr ""

#: ../../pep-0212.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0212.txt:15
msgid "Rejection Notice"
msgstr ""

#: ../../pep-0212.txt:17
msgid ""
"This PEP has been rejected.  ``enumerate()``, introduced in PEP 279 [6]_,"
" covers the use-case proposed in this PEP, and the PEP author has been "
"unreachable."
msgstr ""

#: ../../pep-0212.txt:23
msgid "Introduction"
msgstr ""

#: ../../pep-0212.txt:25
msgid ""
"This PEP describes the often proposed feature of exposing the loop "
"counter in for-loops.  This PEP tracks the status and ownership of this "
"feature.  It contains a description of the feature and outlines changes "
"necessary to support the feature.  This PEP summarizes discussions held "
"in mailing list forums, and provides URLs for further information, where "
"appropriate.  The CVS revision history of this file contains the "
"definitive historical record."
msgstr ""

#: ../../pep-0212.txt:35
msgid "Motivation"
msgstr ""

#: ../../pep-0212.txt:37
msgid ""
"Standard for-loops in Python iterate over the elements of a sequence "
"[1]_.  Often it is desirable to loop over the indices or both the "
"elements and the indices instead."
msgstr ""

#: ../../pep-0212.txt:41
msgid ""
"The common idioms used to accomplish this are unintuitive.  This PEP "
"proposes two different ways of exposing the indices."
msgstr ""

#: ../../pep-0212.txt:46
msgid "Loop counter iteration"
msgstr ""

#: ../../pep-0212.txt:48
msgid ""
"The current idiom for looping over the indices makes use of the built-in "
"``range`` function::"
msgstr ""

#: ../../pep-0212.txt:54
msgid ""
"Looping over both elements and indices can be achieved either by the old "
"idiom or by using the new ``zip`` built-in function [2]_::"
msgstr ""

#: ../../pep-0212.txt:61
msgid "or::"
msgstr ""

#: ../../pep-0212.txt:68
msgid "The Proposed Solutions"
msgstr ""

#: ../../pep-0212.txt:70
msgid ""
"There are three solutions that have been discussed.  One adds a non-"
"reserved keyword, the other adds two built-in functions. A third solution"
" adds methods to sequence objects."
msgstr ""

#: ../../pep-0212.txt:76
msgid "Non-reserved keyword ``indexing``"
msgstr ""

#: ../../pep-0212.txt:78
msgid ""
"This solution would extend the syntax of the for-loop by adding an "
"optional ``<variable> indexing`` clause which can also be used instead of"
" the ``<variable> in`` clause."
msgstr ""

#: ../../pep-0212.txt:82
msgid "Looping over the indices of a sequence would thus become::"
msgstr ""

#: ../../pep-0212.txt:87
msgid "Looping over both indices and elements would similarly be::"
msgstr ""

#: ../../pep-0212.txt:94
msgid "Built-in functions ``indices`` and ``irange``"
msgstr ""

#: ../../pep-0212.txt:96
msgid ""
"This solution adds two built-in functions ``indices`` and ``irange``. The"
" semantics of these can be described as follows::"
msgstr ""

#: ../../pep-0212.txt:105
msgid ""
"These functions could be implemented either eagerly or lazily and should "
"be easy to extend in order to accept more than one sequence argument."
msgstr ""

#: ../../pep-0212.txt:109
msgid ""
"The use of these functions would simplify the idioms for looping over the"
" indices and over both elements and indices::"
msgstr ""

#: ../../pep-0212.txt:120
msgid "Methods for sequence objects"
msgstr ""

#: ../../pep-0212.txt:122
msgid ""
"This solution proposes the addition of ``indices``, ``items`` and "
"``values`` methods to sequences, which enable looping over indices only, "
"both indices and elements, and elements only respectively."
msgstr ""

#: ../../pep-0212.txt:127
msgid ""
"This would immensely simplify the idioms for looping over indices and for"
" looping over both elements and indices::"
msgstr ""

#: ../../pep-0212.txt:136
msgid ""
"Additionally it would allow to do looping over the elements of sequences "
"and dictionaries in a consistent way::"
msgstr ""

#: ../../pep-0212.txt:144
msgid "Implementations"
msgstr ""

#: ../../pep-0212.txt:146
msgid ""
"For all three solutions some more or less rough patches exist as patches "
"at SourceForge:"
msgstr ""

#: ../../pep-0212.txt:149
msgid "``for i indexing a in l``: exposing the for-loop counter [3]_"
msgstr ""

#: ../../pep-0212.txt:150
msgid "add ``indices()`` and ``irange()`` to built-ins [4]_"
msgstr ""

#: ../../pep-0212.txt:151
msgid "add ``items()`` method to listobject [5]_"
msgstr ""

#: ../../pep-0212.txt:153
msgid "All of them have been pronounced on and rejected by the BDFL."
msgstr ""

#: ../../pep-0212.txt:155
msgid ""
"Note that the ``indexing`` keyword is only a ``NAME`` in the grammar and "
"so does not hinder the general use of ``indexing``."
msgstr ""

#: ../../pep-0212.txt:160
msgid "Backward Compatibility Issues"
msgstr ""

#: ../../pep-0212.txt:162
msgid ""
"As no keywords are added and the semantics of existing code remains "
"unchanged, all three solutions can be implemented without breaking "
"existing code."
msgstr ""

#: ../../pep-0212.txt:168
msgid "Copyright"
msgstr ""

#: ../../pep-0212.txt:170
msgid "This document has been placed in the public domain."
msgstr ""

#: ../../pep-0212.txt:174
msgid "References"
msgstr ""

#: ../../pep-0212.txt:176
msgid "http://docs.python.org/reference/compound_stmts.html#for"
msgstr ""

#: ../../pep-0212.txt:178
msgid "Lockstep Iteration, PEP 201"
msgstr ""

#: ../../pep-0212.txt:180
msgid "http://sourceforge.net/patch/download.php?id=101138"
msgstr ""

#: ../../pep-0212.txt:182
msgid "http://sourceforge.net/patch/download.php?id=101129"
msgstr ""

#: ../../pep-0212.txt:184
msgid "http://sourceforge.net/patch/download.php?id=101178"
msgstr ""

#: ../../pep-0212.txt:186
msgid ""
"PEP 279, The enumerate() built-in function, Hettinger "
"https://www.python.org/dev/peps/pep-0279/"
msgstr ""

