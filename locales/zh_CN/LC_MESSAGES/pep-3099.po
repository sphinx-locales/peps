# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-3099.txt
msgid "PEP"
msgstr ""

#: ../../pep-3099.txt:1
msgid "3099"
msgstr ""

#: ../../pep-3099.txt
msgid "Title"
msgstr ""

#: ../../pep-3099.txt:2
msgid "Things that will Not Change in Python 3000"
msgstr ""

#: ../../pep-3099.txt
msgid "Author"
msgstr ""

#: ../../pep-3099.txt:5
msgid "Georg Brandl <georg@python.org>"
msgstr ""

#: ../../pep-3099.txt
msgid "Status"
msgstr ""

#: ../../pep-3099.txt:6
msgid "Final"
msgstr ""

#: ../../pep-3099.txt
msgid "Type"
msgstr ""

#: ../../pep-3099.txt:7
msgid "Process"
msgstr ""

#: ../../pep-3099.txt
msgid "Created"
msgstr ""

#: ../../pep-3099.txt:9
msgid "04-Apr-2006"
msgstr ""

#: ../../pep-3099.txt
msgid "Post-History"
msgstr ""

#: ../../pep-3099.txt:14
msgid "Abstract"
msgstr ""

#: ../../pep-3099.txt:16
msgid ""
"Some ideas are just bad.  While some thoughts on Python evolution are "
"constructive, some go against the basic tenets of Python so egregiously "
"that it would be like asking someone to run in a circle: it gets you "
"nowhere, even for Python 3000, where extraordinary proposals are allowed."
"  This PEP tries to list all BDFL pronouncements on Python 3000 that "
"refer to changes that will not happen and new features that will not be "
"introduced, sorted by topics, along with a short explanation or a "
"reference to the relevant thread on the python-3000 mailing list."
msgstr ""

#: ../../pep-3099.txt:26
msgid ""
"If you think you should suggest any of the listed ideas it would be "
"better to just step away from the computer, go outside, and enjoy "
"yourself.  Being active outdoors by napping in a nice patch of grass is "
"more productive than bringing up a beating-a-dead-horse idea and having "
"people tell you how dead the idea is.  Consider yourself warned."
msgstr ""

#: ../../pep-3099.txt:34
msgid "Core language"
msgstr ""

#: ../../pep-3099.txt:36
msgid "Python 3000 will not be case-insensitive."
msgstr ""

#: ../../pep-3099.txt:38
msgid "Python 3000 will not be a rewrite from scratch."
msgstr ""

#: ../../pep-3099.txt:40
msgid ""
"It will also not use C++ or another language different from C as "
"implementation language.  Rather, there will be a gradual "
"transmogrification of the codebase.  There's an excellent essay by Joel "
"Spolsky explaining why: "
"http://www.joelonsoftware.com/articles/fog0000000069.html"
msgstr ""

#: ../../pep-3099.txt:46
msgid "``self`` will not become implicit."
msgstr ""

#: ../../pep-3099.txt:48
msgid ""
"Having ``self`` be explicit is a *good thing*.  It makes the code clear "
"by removing ambiguity about how a variable resolves.  It also makes the "
"difference between functions and methods small."
msgstr ""

#: ../../pep-3099.txt:52
msgid ""
"Thread: \"Draft proposal: Implicit self in Python 3.0\" "
"https://mail.python.org/pipermail/python-dev/2006-January/059468.html"
msgstr ""

#: ../../pep-3099.txt:55
msgid "``lambda`` will not be renamed."
msgstr ""

#: ../../pep-3099.txt:57
msgid ""
"At one point lambda was slated for removal in Python 3000. Unfortunately "
"no one was able to come up with a better way of providing anonymous "
"functions.  And so lambda is here to stay."
msgstr ""

#: ../../pep-3099.txt:61
msgid ""
"But it is here to stay as-is.  Adding support for statements is a non-"
"starter.  It would require allowing multi-line lambda expressions which "
"would mean a multi-line expression could suddenly exist.  That would "
"allow for multi-line arguments to function calls, for instance.  That is "
"just plain ugly."
msgstr ""

#: ../../pep-3099.txt:67
msgid ""
"Thread: \"genexp syntax / lambda\", "
"https://mail.python.org/pipermail/python-3000/2006-April/001042.html"
msgstr ""

#: ../../pep-3099.txt:70
msgid "Python will not have programmable syntax."
msgstr ""

#: ../../pep-3099.txt:72
msgid ""
"Thread: \"It's a statement! It's a function! It's BOTH!\", "
"https://mail.python.org/pipermail/python-3000/2006-April/000286.html"
msgstr ""

#: ../../pep-3099.txt:75
msgid "There won't be a syntax for ``zip()``-style parallel iteration."
msgstr ""

#: ../../pep-3099.txt:77
msgid ""
"Thread: \"Parallel iteration syntax\", "
"https://mail.python.org/pipermail/python-3000/2006-March/000210.html"
msgstr ""

#: ../../pep-3099.txt:80
msgid "Strings will stay iterable."
msgstr ""

#: ../../pep-3099.txt:82
msgid ""
"Thread: \"Making strings non-iterable\", "
"https://mail.python.org/pipermail/python-3000/2006-April/000759.html"
msgstr ""

#: ../../pep-3099.txt:85
msgid ""
"There will be no syntax to sort the result of a generator expression or "
"list comprehension.  ``sorted()`` covers all use cases."
msgstr ""

#: ../../pep-3099.txt:88
msgid ""
"Thread: \"Adding sorting to generator comprehension\", "
"https://mail.python.org/pipermail/python-3000/2006-April/001295.html"
msgstr ""

#: ../../pep-3099.txt:91
msgid ""
"Slices and extended slices won't go away (even if the __getslice__ and "
"__setslice__ APIs may be replaced) nor will they return views for the "
"standard object types."
msgstr ""

#: ../../pep-3099.txt:95
msgid ""
"Thread: Future of slices "
"https://mail.python.org/pipermail/python-3000/2006-May/001563.html"
msgstr ""

#: ../../pep-3099.txt:98
msgid "It will not be forbidden to reuse a loop variable inside the loop's suite."
msgstr ""

#: ../../pep-3099.txt:101
msgid ""
"Thread: elimination of scope bleeding of iteration variables "
"https://mail.python.org/pipermail/python-dev/2006-May/064761.html"
msgstr ""

#: ../../pep-3099.txt:104
msgid "The parser won't be more complex than LL(1)."
msgstr ""

#: ../../pep-3099.txt:106
msgid ""
"Simple is better than complex.  This idea extends to the parser. "
"Restricting Python's grammar to an LL(1) parser is a blessing, not a "
"curse.  It puts us in handcuffs that prevent us from going overboard and "
"ending up with funky grammar rules like some other dynamic languages that"
" will go unnamed, such as Perl."
msgstr ""

#: ../../pep-3099.txt:112
msgid "No braces."
msgstr ""

#: ../../pep-3099.txt:114
msgid ""
"This is so obvious that it doesn't need a reference to a mailing list. Do"
" ``from __future__ import braces`` to get a definitive answer on this "
"subject."
msgstr ""

#: ../../pep-3099.txt:118
msgid "No more backticks."
msgstr ""

#: ../../pep-3099.txt:120
msgid ""
"Backticks (\\`) will no longer be used as shorthand for ``repr`` -- but "
"that doesn't mean they are available for other uses.  Even ignoring the "
"backwards compatibility confusion, the character itself causes too many "
"problems (in some fonts, on some keyboards, when typesetting a book, "
"etc)."
msgstr ""

#: ../../pep-3099.txt:126
msgid ""
"Thread: \"new operators via backquoting\", "
"https://mail.python.org/pipermail/python-ideas/2007-January/000054.html"
msgstr ""

#: ../../pep-3099.txt:129
msgid ""
"Referencing the global name ``foo`` will not be spelled ``globals.foo``. "
"The ``global`` statement will stay."
msgstr ""

#: ../../pep-3099.txt:132
msgid ""
"Threads: \"replace globals() and global statement with global builtin "
"object\", "
"https://mail.python.org/pipermail/python-3000/2006-July/002485.html, "
"\"Explicit Lexical Scoping (pre-PEP?)\", "
"https://mail.python.org/pipermail/python-dev/2006-July/067111.html"
msgstr ""

#: ../../pep-3099.txt:138
msgid "There will be no alternative binding operators such as ``:=``."
msgstr ""

#: ../../pep-3099.txt:140
msgid ""
"Thread: \"Explicit Lexical Scoping (pre-PEP?)\", "
"https://mail.python.org/pipermail/python-dev/2006-July/066995.html"
msgstr ""

#: ../../pep-3099.txt:143
msgid ""
"We won't be removing container literals. That is, {expr: expr, ...}, "
"[expr, ...] and (expr, ...) will stay."
msgstr ""

#: ../../pep-3099.txt:146
msgid ""
"Thread: \"No Container Literals\", "
"https://mail.python.org/pipermail/python-3000/2006-July/002550.html"
msgstr ""

#: ../../pep-3099.txt:149
msgid ""
"The ``else`` clause in ``while`` and ``for`` loops will not change "
"semantics, or be removed."
msgstr ""

#: ../../pep-3099.txt:152
msgid ""
"Thread: \"for/except/else syntax\" https://mail.python.org/pipermail"
"/python-ideas/2009-October/006083.html"
msgstr ""

#: ../../pep-3099.txt:157
msgid "Builtins"
msgstr ""

#: ../../pep-3099.txt:159
msgid ""
"``zip()`` won't grow keyword arguments or other mechanisms to prevent it "
"from stopping at the end of the shortest sequence."
msgstr ""

#: ../../pep-3099.txt:162
msgid ""
"Thread: \"have zip() raise exception for sequences of different "
"lengths\", "
"https://mail.python.org/pipermail/python-3000/2006-August/003338.html"
msgstr ""

#: ../../pep-3099.txt:165
msgid ""
"``hash()`` won't become an attribute since attributes should be cheap to "
"compute, which isn't necessarily the case for a hash."
msgstr ""

#: ../../pep-3099.txt:168
msgid ""
"Thread: \"hash as attribute/property\", "
"https://mail.python.org/pipermail/python-3000/2006-April/000362.html"
msgstr ""

#: ../../pep-3099.txt:173
msgid "Standard types"
msgstr ""

#: ../../pep-3099.txt:175
msgid "Iterating over a dictionary will continue to yield the keys."
msgstr ""

#: ../../pep-3099.txt:177
msgid ""
"Thread: \"Iterating over a dict\", "
"https://mail.python.org/pipermail/python-3000/2006-April/000283.html"
msgstr ""

#: ../../pep-3099.txt:180
msgid ""
"Thread: have iter(mapping) generate (key, value) pairs "
"https://mail.python.org/pipermail/python-3000/2006-June/002368.html"
msgstr ""

#: ../../pep-3099.txt:183
msgid "There will be no ``frozenlist`` type."
msgstr ""

#: ../../pep-3099.txt:185
msgid ""
"Thread: \"Immutable lists\", "
"https://mail.python.org/pipermail/python-3000/2006-May/002219.html"
msgstr ""

#: ../../pep-3099.txt:188
msgid "``int`` will not support subscripts yielding a range."
msgstr ""

#: ../../pep-3099.txt:190
msgid ""
"Thread: \"xrange vs. int.__getslice__\", "
"https://mail.python.org/pipermail/python-3000/2006-June/002450.html"
msgstr ""

#: ../../pep-3099.txt:195
msgid "Coding style"
msgstr ""

#: ../../pep-3099.txt:197
msgid ""
"The (recommended) maximum line width will remain 80 characters, for both "
"C and Python code."
msgstr ""

#: ../../pep-3099.txt:200
msgid ""
"Thread: \"C style guide\", "
"https://mail.python.org/pipermail/python-3000/2006-March/000131.html"
msgstr ""

#: ../../pep-3099.txt:205
msgid "Interactive Interpreter"
msgstr ""

#: ../../pep-3099.txt:207
msgid ""
"The interpreter prompt (``>>>``) will not change. It gives Guido warm "
"fuzzy feelings."
msgstr ""

#: ../../pep-3099.txt:210
msgid ""
"Thread: \"Low-hanging fruit: change interpreter prompt?\", "
"https://mail.python.org/pipermail/python-3000/2006-November/004891.html"
msgstr ""

#: ../../pep-3099.txt:215
msgid "Copyright"
msgstr ""

#: ../../pep-3099.txt:217
msgid "This document has been placed in the public domain."
msgstr ""

