# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0377.txt
msgid "PEP"
msgstr ""

#: ../../pep-0377.txt:1
msgid "377"
msgstr ""

#: ../../pep-0377.txt
msgid "Title"
msgstr ""

#: ../../pep-0377.txt:2
msgid "Allow __enter__() methods to skip the statement body"
msgstr ""

#: ../../pep-0377.txt
msgid "Author"
msgstr ""

#: ../../pep-0377.txt:5
msgid "Nick Coghlan <ncoghlan@gmail.com>"
msgstr ""

#: ../../pep-0377.txt
msgid "Status"
msgstr ""

#: ../../pep-0377.txt:6
msgid "Rejected"
msgstr ""

#: ../../pep-0377.txt
msgid "Type"
msgstr ""

#: ../../pep-0377.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0377.txt
msgid "Created"
msgstr ""

#: ../../pep-0377.txt:9 ../../pep-0377.txt:11
msgid "08-Mar-2009"
msgstr ""

#: ../../pep-0377.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0377.txt:10
msgid "2.7, 3.1"
msgstr ""

#: ../../pep-0377.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0377.txt:15
msgid "Abstract"
msgstr ""

#: ../../pep-0377.txt:17
msgid ""
"This PEP proposes a backwards compatible mechanism that allows "
"``__enter__()`` methods to skip the body of the associated ``with`` "
"statement. The lack of this ability currently means the "
"``contextlib.contextmanager`` decorator is unable to fulfil its "
"specification of being able to turn arbitrary code into a context manager"
" by moving it into a generator function with a yield in the appropriate "
"location. One symptom of this is that ``contextlib.nested`` will "
"currently raise ``RuntimeError`` in situations where writing out the "
"corresponding nested ``with`` statements would not [1]_."
msgstr ""

#: ../../pep-0377.txt:27
msgid ""
"The proposed change is to introduce a new flow control exception "
"``SkipStatement``, and skip the execution of the ``with`` statement body "
"if ``__enter__()`` raises this exception."
msgstr ""

#: ../../pep-0377.txt:33
msgid "PEP Rejection"
msgstr ""

#: ../../pep-0377.txt:35
msgid ""
"This PEP was rejected by Guido [4]_ as it imposes too great an increase "
"in complexity without a proportional increase in expressiveness and "
"correctness. In the absence of compelling use cases that need the more "
"complex semantics proposed by this PEP the existing behaviour is "
"considered acceptable."
msgstr ""

#: ../../pep-0377.txt:43
msgid "Proposed Change"
msgstr ""

#: ../../pep-0377.txt:45
msgid ""
"The semantics of the ``with`` statement will be changed to include a new "
"``try``/``except``/``else`` block around the call to ``__enter__()``. If "
"``SkipStatement`` is raised by the ``__enter__()`` method, then the main "
"section of the ``with`` statement (now located in the ``else`` clause) "
"will not be executed. To avoid leaving the names in any ``as`` clause "
"unbound in this case, a new ``StatementSkipped`` singleton (similar to "
"the existing ``NotImplemented`` singleton) will be assigned to all names "
"that appear in the ``as`` clause."
msgstr ""

#: ../../pep-0377.txt:54
msgid ""
"The components of the ``with`` statement remain as described in PEP 343 "
"[2]_::"
msgstr ""

#: ../../pep-0377.txt:59
msgid ""
"After the modification, the ``with`` statement semantics would be as "
"follows::"
msgstr ""

#: ../../pep-0377.txt:89
msgid ""
"With the above change in place for the ``with`` statement semantics, "
"``contextlib.contextmanager()`` will then be modified to raise "
"``SkipStatement`` instead of ``RuntimeError`` when the underlying "
"generator doesn't yield."
msgstr ""

#: ../../pep-0377.txt:96
msgid "Rationale for Change"
msgstr ""

#: ../../pep-0377.txt:98
msgid ""
"Currently, some apparently innocuous context managers may raise "
"``RuntimeError`` when executed. This occurs when the context manager's "
"``__enter__()`` method encounters a situation where the written out "
"version of the code corresponding to the context manager would skip the "
"code that is now the body of the ``with`` statement. Since the "
"``__enter__()`` method has no mechanism available to signal this to the "
"interpreter, it is instead forced to raise an exception that not only "
"skips the body of the ``with`` statement, but also jumps over all code "
"until the nearest exception handler. This goes against one of the design "
"goals of the ``with`` statement, which was to be able to factor out "
"arbitrary common exception handling code into a single context manager by"
" putting into a generator function and replacing the variant part of the "
"code with a ``yield`` statement."
msgstr ""

#: ../../pep-0377.txt:114
msgid ""
"Specifically, the following examples behave differently if "
"``cmB().__enter__()`` raises an exception which ``cmA().__exit__()`` then"
" handles and suppresses::"
msgstr ""

#: ../../pep-0377.txt:181
msgid ""
"With the proposed semantic change in place, the contextlib based examples"
" above would then \"just work\", but the class based version would need a"
" small adjustment to take advantage of the new semantics::"
msgstr ""

#: ../../pep-0377.txt:224
msgid ""
"There is currently a tentative suggestion [3]_ to add import-style syntax"
" to the ``with`` statement to allow multiple context managers to be "
"included in a single ``with`` statement without needing to use "
"``contextlib.nested``. In that case the compiler has the option of simply"
" emitting multiple ``with`` statements at the AST level, thus allowing "
"the semantics of actual nested ``with`` statements to be reproduced "
"accurately. However, such a change would highlight rather than alleviate "
"the problem the current PEP aims to address: it would not be possible to "
"use ``contextlib.contextmanager`` to reliably factor out such ``with`` "
"statements, as they would exhibit exactly the same semantic differences "
"as are seen with the ``combined()`` context manager in the above example."
msgstr ""

#: ../../pep-0377.txt:238
msgid "Performance Impact"
msgstr ""

#: ../../pep-0377.txt:240
msgid ""
"Implementing the new semantics makes it necessary to store the references"
" to the ``__enter__`` and ``__exit__`` methods in temporary variables "
"instead of on the stack. This results in a slight regression in ``with`` "
"statement speed relative to Python 2.6/3.1. However, implementing a "
"custom ``SETUP_WITH`` opcode would negate any differences between the two"
" approaches (as well as dramatically improving speed by eliminating more "
"than a dozen unnecessary trips around the eval loop)."
msgstr ""

#: ../../pep-0377.txt:250
msgid "Reference Implementation"
msgstr ""

#: ../../pep-0377.txt:252
msgid ""
"Patch attached to Issue 5251 [1]_. That patch uses only existing opcodes "
"(i.e. no ``SETUP_WITH``)."
msgstr ""

#: ../../pep-0377.txt:257
msgid "Acknowledgements"
msgstr ""

#: ../../pep-0377.txt:259
msgid ""
"James William Pye both raised the issue and suggested the basic outline "
"of the solution described in this PEP."
msgstr ""

#: ../../pep-0377.txt:264
msgid "References"
msgstr ""

#: ../../pep-0377.txt:266
msgid ""
"Issue 5251: contextlib.nested inconsistent with nested with statements "
"(http://bugs.python.org/issue5251)"
msgstr ""

#: ../../pep-0377.txt:269
msgid "PEP 343: The \"with\" Statement (http://www.python.org/dev/peps/pep-0343/)"
msgstr ""

#: ../../pep-0377.txt:272
msgid ""
"Import-style syntax to reduce indentation of nested with statements "
"(https://mail.python.org/pipermail/python-ideas/2009-March/003188.html)"
msgstr ""

#: ../../pep-0377.txt:275
msgid ""
"Guido's rejection of the PEP (https://mail.python.org/pipermail/python-"
"dev/2009-March/087263.html)"
msgstr ""

#: ../../pep-0377.txt:280
msgid "Copyright"
msgstr ""

#: ../../pep-0377.txt:282
msgid "This document has been placed in the public domain."
msgstr ""

