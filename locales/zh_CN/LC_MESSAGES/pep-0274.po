# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0274.txt
msgid "PEP"
msgstr ""

#: ../../pep-0274.txt:1
msgid "274"
msgstr ""

#: ../../pep-0274.txt
msgid "Title"
msgstr ""

#: ../../pep-0274.txt:2
msgid "Dict Comprehensions"
msgstr ""

#: ../../pep-0274.txt
msgid "Author"
msgstr ""

#: ../../pep-0274.txt:5
msgid "Barry Warsaw <barry@python.org>"
msgstr ""

#: ../../pep-0274.txt
msgid "Status"
msgstr ""

#: ../../pep-0274.txt:6
msgid "Final"
msgstr ""

#: ../../pep-0274.txt
msgid "Type"
msgstr ""

#: ../../pep-0274.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0274.txt
msgid "Created"
msgstr ""

#: ../../pep-0274.txt:9
msgid "25-Oct-2001"
msgstr ""

#: ../../pep-0274.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0274.txt:10
msgid "2.7, 3.0 (originally 2.3)"
msgstr ""

#: ../../pep-0274.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0274.txt:11
msgid "29-Oct-2001"
msgstr ""

#: ../../pep-0274.txt:15
msgid "Abstract"
msgstr ""

#: ../../pep-0274.txt:17
msgid ""
"PEP 202 introduces a syntactical extension to Python called the \"list "
"comprehension\".  This PEP proposes a similar syntactical extension "
"called the \"dictionary comprehension\" or \"dict comprehension\" for "
"short.  You can use dict comprehensions in ways very similar to list "
"comprehensions, except that they produce Python dictionary objects "
"instead of list objects."
msgstr ""

#: ../../pep-0274.txt:26
msgid "Resolution"
msgstr ""

#: ../../pep-0274.txt:28
msgid ""
"This PEP was originally written for inclusion in Python 2.3.  It was "
"withdrawn after observation that substantially all of its benefits were "
"subsumed by generator expressions coupled with the ``dict()`` "
"constructor."
msgstr ""

#: ../../pep-0274.txt:33
msgid ""
"However, Python 2.7 and 3.0 introduces this exact feature, as well as the"
" closely related set comprehensions.  On 2012-04-09, the PEP was changed "
"to reflect this reality by updating its Status to Accepted, and updating "
"the Python-Version field.  The Open Questions section was also removed "
"since these have been long resolved by the current implementation."
msgstr ""

#: ../../pep-0274.txt:42
msgid "Proposed Solution"
msgstr ""

#: ../../pep-0274.txt:44
msgid ""
"Dict comprehensions are just like list comprehensions, except that you "
"group the expression using curly braces instead of square braces.  Also, "
"the left part before the ``for`` keyword expresses both a key and a "
"value, separated by a colon.  The notation is specifically designed to "
"remind you of list comprehensions as applied to dictionaries."
msgstr ""

#: ../../pep-0274.txt:53
msgid "Rationale"
msgstr ""

#: ../../pep-0274.txt:55
msgid ""
"There are times when you have some data arranged as a sequences of "
"length-2 sequences, and you want to turn that into a dictionary. In "
"Python 2.2, the ``dict()`` constructor accepts an argument that is a "
"sequence of length-2 sequences, used as (key, value) pairs to initialize "
"a new dictionary object."
msgstr ""

#: ../../pep-0274.txt:61
msgid ""
"However, the act of turning some data into a sequence of length-2 "
"sequences can be inconvenient or inefficient from a memory or performance"
" standpoint.  Also, for some common operations, such as turning a list of"
" things into a set of things for quick duplicate removal or set inclusion"
" tests, a better syntax can help code clarity."
msgstr ""

#: ../../pep-0274.txt:68
msgid ""
"As with list comprehensions, an explicit for loop can always be used (and"
" in fact was the only way to do it in earlier versions of Python).  But "
"as with list comprehensions, dict comprehensions can provide a more "
"syntactically succinct idiom that the traditional for loop."
msgstr ""

#: ../../pep-0274.txt:76
msgid "Semantics"
msgstr ""

#: ../../pep-0274.txt:78
msgid ""
"The semantics of dict comprehensions can actually be demonstrated in "
"stock Python 2.2, by passing a list comprehension to the built-in "
"dictionary constructor::"
msgstr ""

#: ../../pep-0274.txt:84
msgid "is semantically equivalent to::"
msgstr ""

#: ../../pep-0274.txt:88
msgid ""
"The dictionary constructor approach has two distinct disadvantages from "
"the proposed syntax though.  First, it isn't as legible as a dict "
"comprehension.  Second, it forces the programmer to create an in-core "
"list object first, which could be expensive."
msgstr ""

#: ../../pep-0274.txt:95
msgid "Examples"
msgstr ""

#: ../../pep-0274.txt:131
msgid "Implementation"
msgstr ""

#: ../../pep-0274.txt:133
msgid ""
"All implementation details were resolved in the Python 2.7 and 3.0 time-"
"frame."
msgstr ""

#: ../../pep-0274.txt:138
msgid "Copyright"
msgstr ""

#: ../../pep-0274.txt:140
msgid "This document has been placed in the public domain."
msgstr ""

