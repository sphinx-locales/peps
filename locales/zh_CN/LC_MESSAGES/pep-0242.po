# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0242.txt
msgid "PEP"
msgstr ""

#: ../../pep-0242.txt:1
msgid "242"
msgstr ""

#: ../../pep-0242.txt
msgid "Title"
msgstr ""

#: ../../pep-0242.txt:2
msgid "Numeric Kinds"
msgstr ""

#: ../../pep-0242.txt
msgid "Author"
msgstr ""

#: ../../pep-0242.txt:5
msgid "paul@pfdubois.com (Paul F. Dubois)"
msgstr ""

#: ../../pep-0242.txt
msgid "Status"
msgstr ""

#: ../../pep-0242.txt:6
msgid "Rejected"
msgstr ""

#: ../../pep-0242.txt
msgid "Type"
msgstr ""

#: ../../pep-0242.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0242.txt
msgid "Created"
msgstr ""

#: ../../pep-0242.txt:9
msgid "17-Mar-2001"
msgstr ""

#: ../../pep-0242.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0242.txt:10
msgid "2.2"
msgstr ""

#: ../../pep-0242.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0242.txt:11
msgid "17-Apr-2001"
msgstr ""

#: ../../pep-0242.txt:15
msgid "Abstract"
msgstr ""

#: ../../pep-0242.txt:17
msgid ""
"This proposal gives the user optional control over the precision and "
"range of numeric computations so that a computation can be written once "
"and run anywhere with at least the desired precision and range.  It is "
"backward compatible with existing code.  The meaning of decimal literals "
"is clarified."
msgstr ""

#: ../../pep-0242.txt:25
msgid "Rationale"
msgstr ""

#: ../../pep-0242.txt:27
msgid ""
"Currently it is impossible in every language except Fortran 90 to write a"
" program in a portable way that uses floating point and gets roughly the "
"same answer regardless of platform -- or refuses to compile if that is "
"not possible.  Python currently has only one floating point type, equal "
"to a C double in the C implementation."
msgstr ""

#: ../../pep-0242.txt:33
msgid ""
"No type exists corresponding to single or quad floats.  It would "
"complicate the language to try to introduce such types directly and their"
" subsequent use would not be portable.  This proposal is similar to the "
"Fortran 90 \"kind\" solution, adapted to the Python environment.  With "
"this facility an entire calculation can be switched from one level of "
"precision to another by changing a single line.  If the desired precision"
" does not exist on a particular machine, the program will fail rather "
"than get the wrong answer.  Since coding in this style would involve an "
"early call to the routine that will fail, this is the next best thing to "
"not compiling."
msgstr ""

#: ../../pep-0242.txt:47
msgid "Supported Kinds of Ints and Floats"
msgstr ""

#: ../../pep-0242.txt:49
msgid ""
"Complex numbers are treated separately below, since Python can be built "
"without them."
msgstr ""

#: ../../pep-0242.txt:52
msgid ""
"Each Python compiler may define as many \"kinds\" of integer and floating"
" point numbers as it likes, except that it must support at least two "
"kinds of integer corresponding to the existing int and long, and must "
"support at least one kind of floating point number, equivalent to the "
"present float."
msgstr ""

#: ../../pep-0242.txt:58
msgid ""
"The range and precision of these required kinds are processor dependent, "
"as at present, except for the \"long integer\" kind, which can hold an "
"arbitrary integer."
msgstr ""

#: ../../pep-0242.txt:62
msgid ""
"The built-in functions ``int()``, ``long()``, and ``float()`` convert "
"inputs to these default kinds as they do at present.  (Note that a "
"Unicode string is actually a different \"kind\" of string and that a "
"sufficiently knowledgeable person might be able to expand this PEP to "
"cover that case.)"
msgstr ""

#: ../../pep-0242.txt:68
msgid ""
"Within each type (integer, floating) the compiler supports a linearly-"
"ordered set of kinds, with the ordering determined by the ability to hold"
" numbers of an increased range and/or precision."
msgstr ""

#: ../../pep-0242.txt:74
msgid "Kind Objects"
msgstr ""

#: ../../pep-0242.txt:76
msgid ""
"Two new standard functions are defined in a module named \"kinds\". They "
"return callable objects called kind objects.  Each int or floating kind "
"object f has the signature ``result = f(x)``, and each complex kind "
"object has the signature ``result = f(x, y=0.)``."
msgstr ""

#: ../../pep-0242.txt:86
msgid "``int_kind(n)``"
msgstr ""

#: ../../pep-0242.txt:82
msgid ""
"For an integer argument ``n >= 1``, return a callable object whose result"
" is an integer kind that will hold an integer number in the open interval"
" (``-10**n``, ``10**n``).  The kind object accepts arguments that are "
"integers including longs.  If ``n == 0``, returns the kind object "
"corresponding to the Python literal 0."
msgstr ""

#: ../../pep-0242.txt:96
msgid "``float_kind(nd, n)``"
msgstr ""

#: ../../pep-0242.txt:89
msgid ""
"For ``nd >= 0`` and ``n >= 1``, return a callable object whose result is "
"a floating point kind that will hold a floating-point number with at "
"least nd digits of precision and a base-10 exponent in the closed "
"interval ``[-n, n]``.  The kind object accepts arguments that are integer"
" or float."
msgstr ""

#: ../../pep-0242.txt:95
msgid ""
"If nd and n are both zero, returns the kind object corresponding to the "
"Python literal 0.0."
msgstr ""

#: ../../pep-0242.txt:98
msgid ""
"The compiler will return a kind object corresponding to the least of its "
"available set of kinds for that type that has the desired properties.  If"
" no kind with the desired qualities exists in a given implementation an "
"``OverflowError`` exception is thrown.  A kind function converts its "
"argument to the target kind, but if the result does not fit in the target"
" kind's range, an ``OverflowError`` exception is thrown."
msgstr ""

#: ../../pep-0242.txt:106
msgid ""
"Besides their callable behavior, kind objects have attributes giving the "
"traits of the kind in question."
msgstr ""

#: ../../pep-0242.txt:109
msgid ""
"``name`` is the name of the kind.  The standard kinds are called int, "
"long, double."
msgstr ""

#: ../../pep-0242.txt:112
msgid ""
"``typecode`` is a single-letter string that would be appropriate for use "
"with ``Numeric`` or module ``array`` to form an array of this kind.  The "
"standard types' typecodes are 'i', 'O', 'd' respectively."
msgstr ""

#: ../../pep-0242.txt:117
msgid ""
"Integer kinds have these additional attributes: ``MAX``, equal to the "
"maximum permissible integer of this kind, or ``None`` for the long kind. "
"``MIN``, equal to the most negative permissible integer of this kind, or "
"``None`` for the long kind."
msgstr ""

#: ../../pep-0242.txt:122
msgid ""
"Float kinds have these additional attributes whose properties are equal "
"to the corresponding value for the corresponding C type in the standard "
"header file \"float.h\".  ``MAX``, ``MIN``, ``DIG``, ``MANT_DIG``, "
"``EPSILON``, ``MAX_EXP``, ``MAX_10_EXP``, ``MIN_EXP``, ``MIN_10_EXP``, "
"``RADIX``, ``ROUNDS`` (== ``FLT_RADIX``, ``FLT_ROUNDS`` in float.h).  "
"These values are of type integer except for ``MAX``, ``MIN``, and "
"``EPSILON``, which are of the Python floating type to which the kind "
"corresponds."
msgstr ""

#: ../../pep-0242.txt:134
msgid "Attributes of Module kinds"
msgstr ""

#: ../../pep-0242.txt:136
msgid ""
"``int_kinds`` is a list of the available integer kinds, sorted from "
"lowest to highest kind.  By definition, ``int_kinds[-1]`` is the long "
"kind."
msgstr ""

#: ../../pep-0242.txt:139
msgid ""
"``float_kinds`` is a list of the available floating point kinds, sorted "
"from lowest to highest kind."
msgstr ""

#: ../../pep-0242.txt:142
msgid ""
"``default_int_kind`` is the kind object corresponding to the Python "
"literal 0"
msgstr ""

#: ../../pep-0242.txt:145
msgid ""
"``default_long_kind`` is the kind object corresponding to the Python "
"literal 0L"
msgstr ""

#: ../../pep-0242.txt:148
msgid ""
"``default_float_kind`` is the kind object corresponding to the Python "
"literal 0.0"
msgstr ""

#: ../../pep-0242.txt:153
msgid "Complex Numbers"
msgstr ""

#: ../../pep-0242.txt:155
msgid ""
"If supported, complex numbers have real and imaginary parts that are "
"floating-point numbers with the same kind.  A Python compiler must "
"support a complex analog of each floating point kind it supports, if it "
"supports complex numbers at all."
msgstr ""

#: ../../pep-0242.txt:160
msgid ""
"If complex numbers are supported, the following are available in module "
"kinds:"
msgstr ""

#: ../../pep-0242.txt:168
msgid "``complex_kind(nd, n)``"
msgstr ""

#: ../../pep-0242.txt:164
msgid ""
"Return a callable object whose result is a complex kind that will hold a "
"complex number each of whose components (.real, .imag) is of kind "
"``float_kind(nd, n)``.  The kind object will accept one argument that is "
"of any integer, real, or complex kind, or two arguments, each integer or "
"real."
msgstr ""

#: ../../pep-0242.txt:170
msgid ""
"``complex_kinds`` is a list of the available complex kinds, sorted from "
"lowest to highest kind."
msgstr ""

#: ../../pep-0242.txt:173
msgid ""
"``default_complex_kind`` is the kind object corresponding to the Python "
"literal 0.0j.  The name of this kind is doublecomplex, and its typecode "
"is 'D'."
msgstr ""

#: ../../pep-0242.txt:177
msgid "Complex kind objects have these addition attributes:"
msgstr ""

#: ../../pep-0242.txt:179
msgid "``floatkind`` is the kind object of the corresponding float type."
msgstr ""

#: ../../pep-0242.txt:183
msgid "Examples"
msgstr ""

#: ../../pep-0242.txt:185
msgid "In module myprecision.py::"
msgstr ""

#: ../../pep-0242.txt:193
msgid "In the rest of my code::"
msgstr ""

#: ../../pep-0242.txt:207
msgid ""
"Note how that entire code can then be changed to a higher precision by "
"changing the arguments in myprecision.py."
msgstr ""

#: ../../pep-0242.txt:210
msgid ""
"Comment: note that you aren't promised that single != double; but you are"
" promised that ``double(1.e20)`` will hold a number with 15 decimal "
"digits of precision and a range up to ``10**300`` or that the "
"``float_kind`` call will fail."
msgstr ""

#: ../../pep-0242.txt:217
msgid "Open Issues"
msgstr ""

#: ../../pep-0242.txt:219
msgid "No open issues have been raised at this time."
msgstr ""

#: ../../pep-0242.txt:223
msgid "Rejection"
msgstr ""

#: ../../pep-0242.txt:225
msgid ""
"This PEP has been closed by the author.  The kinds module will not be "
"added to the standard library."
msgstr ""

#: ../../pep-0242.txt:228
msgid ""
"There was no opposition to the proposal but only mild interest in using "
"it, not enough to justify adding the module to the standard library.  "
"Instead, it will be made available as a separate distribution item at the"
" Numerical Python site.  At the next release of Numerical Python, it will"
" no longer be a part of the Numeric distribution."
msgstr ""

#: ../../pep-0242.txt:237
msgid "Copyright"
msgstr ""

#: ../../pep-0242.txt:239
msgid "This document has been placed in the public domain."
msgstr ""

