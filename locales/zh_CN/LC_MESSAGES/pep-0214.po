# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0214.txt
msgid "PEP"
msgstr ""

#: ../../pep-0214.txt:1
msgid "214"
msgstr ""

#: ../../pep-0214.txt
msgid "Title"
msgstr ""

#: ../../pep-0214.txt:2
msgid "Extended Print Statement"
msgstr ""

#: ../../pep-0214.txt
msgid "Author"
msgstr ""

#: ../../pep-0214.txt:5
msgid "barry@python.org (Barry Warsaw)"
msgstr ""

#: ../../pep-0214.txt
msgid "Status"
msgstr ""

#: ../../pep-0214.txt:6
msgid "Final"
msgstr ""

#: ../../pep-0214.txt
msgid "Type"
msgstr ""

#: ../../pep-0214.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0214.txt
msgid "Created"
msgstr ""

#: ../../pep-0214.txt:9
msgid "24-Jul-2000"
msgstr ""

#: ../../pep-0214.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0214.txt:10
msgid "2.0"
msgstr ""

#: ../../pep-0214.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0214.txt:11
msgid "16-Aug-2000"
msgstr ""

#: ../../pep-0214.txt:15
msgid "Introduction"
msgstr ""

#: ../../pep-0214.txt:17
msgid ""
"This PEP describes a syntax to extend the standard 'print' statement so "
"that it can be used to print to any file-like object, instead of the "
"default ``sys.stdout``.  This PEP tracks the status and ownership of this"
" feature.  It contains a description of the feature and outlines changes "
"necessary to support the feature. This PEP summarizes discussions held in"
" mailing list forums, and provides URLs for further information, where "
"appropriate.  The CVS revision history of this file contains the "
"definitive historical record."
msgstr ""

#: ../../pep-0214.txt:29
msgid "Proposal"
msgstr ""

#: ../../pep-0214.txt:31
msgid ""
"This proposal introduces a syntax extension to the print statement, which"
" allows the programmer to optionally specify the output file target.  An "
"example usage is as follows::"
msgstr ""

#: ../../pep-0214.txt:37
msgid "Formally, the syntax of the extended print statement is::"
msgstr ""

#: ../../pep-0214.txt:41
msgid ""
"where the ellipsis indicates the original print_stmt syntax unchanged.  "
"In the extended form, the expression just after >> must yield an object "
"with a ``write()`` method (i.e. a file-like object).  Thus these two "
"statements are equivalent::"
msgstr ""

#: ../../pep-0214.txt:49
msgid "As are these two statements::"
msgstr ""

#: ../../pep-0214.txt:54
msgid "These two statements are syntax errors::"
msgstr ""

#: ../../pep-0214.txt:61
msgid "Justification"
msgstr ""

#: ../../pep-0214.txt:63
msgid ""
"'print' is a Python keyword and introduces the print statement as "
"described in section 6.6 of the language reference manual [1]_. The print"
" statement has a number of features:"
msgstr ""

#: ../../pep-0214.txt:67
msgid "it auto-converts the items to strings"
msgstr ""

#: ../../pep-0214.txt:68
msgid "it inserts spaces between items automatically"
msgstr ""

#: ../../pep-0214.txt:69
msgid "it appends a newline unless the statement ends in a comma"
msgstr ""

#: ../../pep-0214.txt:71
msgid ""
"The formatting that the print statement performs is limited; for more "
"control over the output, a combination of ``sys.stdout.write()``, and "
"string interpolation can be used."
msgstr ""

#: ../../pep-0214.txt:75
msgid ""
"The print statement by definition outputs to ``sys.stdout``.  More "
"specifically, ``sys.stdout`` must be a file-like object with a "
"``write()`` method, but it can be rebound to redirect output to files "
"other than specifically standard output.  A typical idiom is::"
msgstr ""

#: ../../pep-0214.txt:87
msgid ""
"The problem with this approach is that the binding is global, and so "
"affects every statement inside the try: clause.  For example, if we added"
" a call to a function that actually did want to print to stdout, this "
"output too would get redirected to the logfile."
msgstr ""

#: ../../pep-0214.txt:92
msgid ""
"This approach is also very inconvenient for interleaving prints to "
"various output streams, and complicates coding in the face of legitimate "
"try/except or try/finally clauses."
msgstr ""

#: ../../pep-0214.txt:98
msgid "Reference Implementation"
msgstr ""

#: ../../pep-0214.txt:100
msgid ""
"A reference implementation, in the form of a patch against the Python 2.0"
" source tree, is available on SourceForge's patch manager [2]_.  This "
"approach adds two new opcodes, ``PRINT_ITEM_TO`` and "
"``PRINT_NEWLINE_TO``, which simply pop the file like object off the top "
"of the stack and use it instead of ``sys.stdout`` as the output stream."
msgstr ""

#: ../../pep-0214.txt:107
msgid "(This reference implementation has been adopted in Python 2.0.)"
msgstr ""

#: ../../pep-0214.txt:111
msgid "Alternative Approaches"
msgstr ""

#: ../../pep-0214.txt:113
msgid ""
"An alternative to this syntax change has been proposed (originally by "
"Moshe Zadka) which requires no syntax changes to Python.  A ``writeln()``"
" function could be provided (possibly as a builtin), that would act much "
"like extended print, with a few additional features::"
msgstr ""

#: ../../pep-0214.txt:138
msgid ""
"``writeln()`` takes a three optional keyword arguments.  In the context "
"of this proposal, the relevant argument is 'file' which can be set to a "
"file-like object with a ``write()`` method.  Thus::"
msgstr ""

#: ../../pep-0214.txt:144
msgid "would be written as::"
msgstr ""

#: ../../pep-0214.txt:148
msgid ""
"``writeln()`` has the additional functionality that the keyword argument "
"'nl' is a flag specifying whether to append a newline or not, and an "
"argument 'sep' which specifies the separator to output in between each "
"item."
msgstr ""

#: ../../pep-0214.txt:155
msgid "More Justification by the BDFL"
msgstr ""

#: ../../pep-0214.txt:157
msgid ""
"The proposal has been challenged on the newsgroup.  One series of "
"challenges doesn't like '>>' and would rather see some other symbol."
msgstr ""

#: ../../pep-0214.txt:161
msgid "Challenge: Why not one of these?"
msgstr ""

#: ../../pep-0214.txt:170
msgid ""
"Response: If we want to use a special symbol (``print <symbol>`` "
"expression), the Python parser requires that it is not already a symbol "
"that can start an expression -- otherwise it can't decide which form of "
"print statement is used.  (The Python parser is a simple LL(1) or "
"recursive descent parser.)"
msgstr ""

#: ../../pep-0214.txt:176
msgid ""
"This means that we can't use the \"keyword only in context trick\" that "
"was used for \"import as\", because an identifier can start an "
"expression.  This rules out +stderr, \\[sterr\\], and to stderr.  It "
"leaves us with binary operator symbols and other miscellaneous symbols "
"that are currently illegal here, such as 'import'."
msgstr ""

#: ../../pep-0214.txt:182
msgid ""
"If I had to choose between 'print in file' and 'print >> file' I would "
"definitely choose '>>'.  In part because 'in' would be a new invention (I"
" know of no other language that uses it, while '>>' is used in sh, awk, "
"Perl, and C++), in part because '>>', being non-alphabetic, stands out "
"more so is more likely to catch the reader's attention."
msgstr ""

#: ../../pep-0214.txt:189
msgid ""
"Challenge: Why does there have to be a comma between the file and the "
"rest?"
msgstr ""

#: ../../pep-0214.txt:192
msgid ""
"Response: The comma separating the file from the following expression is "
"necessary!  Of course you want the file to be an arbitrary expression, "
"not just a single word.  (You definitely want to be able to write ``print"
" >>sys.stderr``.)  Without the expression the parser wouldn't be able to "
"distinguish where that expression ends and where the next one begins, "
"e.g."
msgstr ""

#: ../../pep-0214.txt:205
msgid ""
"Challenge: Why do you need a syntax extension?  Why not writeln(file, "
"item, ...)?"
msgstr ""

#: ../../pep-0214.txt:208
msgid ""
"Response: First of all, this is lacking a feature of the print statement:"
" the trailing comma to print which suppresses the final newline.  Note "
"that 'print a,' still isn't equivalent to 'sys.stdout.write(a)' -- print "
"inserts a space between items, and takes arbitrary objects as arguments; "
"``write()`` doesn't insert a space and requires a single string."
msgstr ""

#: ../../pep-0214.txt:215
msgid ""
"When you are considering an extension for the print statement, it's not "
"right to add a function or method that adds a new feature in one "
"dimension (where the output goes) but takes away in another dimension "
"(spaces between items, and the choice of trailing newline or not).  We "
"could add a whole slew of methods or functions to deal with the various "
"cases but that seems to add more confusion than necessary, and would only"
" make sense if we were to deprecate the print statement altogether."
msgstr ""

#: ../../pep-0214.txt:224
msgid ""
"I feel that this debate is really about whether print should have been a "
"function or method rather than a statement.  If you are in the function "
"camp, of course adding special syntax to the existing print statement is "
"not something you like.  I suspect the objection to the new syntax comes "
"mostly from people who already think that the print statement was a bad "
"idea.  Am I right?"
msgstr ""

#: ../../pep-0214.txt:231
msgid ""
"About 10 years ago I debated with myself whether to make the most basic "
"from of output a function or a statement; basically I was trying to "
"decide between \"print(item, ...)\" and \"print item, ...\". I chose to "
"make it a statement because printing needs to be taught very early on, "
"and is very important in the programs that beginners write.  Also, "
"because ABC, which lead the way for so many things, made it a statement."
"  In a move that's typical for the interaction between ABC and Python, I "
"changed the name from WRITE to print, and reversed the convention for "
"adding newlines from requiring extra syntax to add a newline (ABC used "
"trailing slashes to indicate newlines) to requiring extra syntax (the "
"trailing comma) to suppress the newline.  I kept the feature that items "
"are separated by whitespace on output."
msgstr ""

#: ../../pep-0214.txt:245
msgid "Full example: in ABC,"
msgstr ""

#: ../../pep-0214.txt:252
msgid "has the same effect as::"
msgstr ""

#: ../../pep-0214.txt:257
msgid "has in Python, outputting in effect \"1 2\\n\"."
msgstr ""

#: ../../pep-0214.txt:259
#, python-format
msgid ""
"I'm not 100% sure that the choice for a statement was right (ABC had the "
"compelling reason that it used statement syntax for anything with side "
"effects, but Python doesn't have this convention), but I'm also not "
"convinced that it's wrong.  I certainly like the economy of the print "
"statement.  (I'm a rabid Lisp-hater -- syntax-wise, not semantics-wise! "
"-- and excessive parentheses in syntax annoy me.  Don't ever write "
"``return(i) or if(x==y):`` in your Python code! :-)"
msgstr ""

#: ../../pep-0214.txt:268
msgid ""
"Anyway, I'm not ready to deprecate the print statement, and over the "
"years we've had many requests for an option to specify the file."
msgstr ""

#: ../../pep-0214.txt:272
msgid "Challenge: Why not > instead of >>?"
msgstr ""

#: ../../pep-0214.txt:274
msgid ""
"Response: To DOS and Unix users, >> suggests \"append\", while > suggests"
" \"overwrite\"; the semantics are closest to append.  Also, for C++ "
"programmers, >> and << are I/O operators."
msgstr ""

#: ../../pep-0214.txt:278
msgid "Challenge: But in C++, >> is input and << is output!"
msgstr ""

#: ../../pep-0214.txt:280
msgid ""
"Response: doesn't matter; C++ clearly took it from Unix and reversed the "
"arrows.  The important thing is that for output, the arrow points to the "
"file."
msgstr ""

#: ../../pep-0214.txt:284
msgid ""
"Challenge: Surely you can design a ``println()`` function can do all what"
" ``print>>file`` can do; why isn't that enough?"
msgstr ""

#: ../../pep-0214.txt:287
msgid ""
"Response: I think of this in terms of a simple programming exercise.  "
"Suppose a beginning programmer is asked to write a function that prints "
"the tables of multiplication.  A reasonable solution is::"
msgstr ""

#: ../../pep-0214.txt:298
msgid ""
"Now suppose the second exercise is to add printing to a different file.  "
"With the new syntax, the programmer only needs to learn one new thing: "
"``print >> file``, and the answer can be like this::"
msgstr ""

#: ../../pep-0214.txt:308
msgid ""
"With only a print statement and a ``println()`` function, the programmer "
"first has to learn about ``println()``, transforming the original program"
" to using ``println()``::"
msgstr ""

#: ../../pep-0214.txt:318
msgid "and **then** about the file keyword argument::"
msgstr ""

#: ../../pep-0214.txt:326
msgid "Thus, the transformation path is longer::"
msgstr ""

#: ../../pep-0214.txt:331
msgid "vs."
msgstr ""

#: ../../pep-0214.txt:339
msgid ""
"Note: defaulting the file argument to ``sys.stdout`` at compile time is "
"wrong, because it doesn't work right when the caller assigns to "
"``sys.stdout`` and then uses ``tables()`` without specifying the file. "
"This is a common problem (and would occur with a ``println()`` function "
"too).  The standard solution so far has been::"
msgstr ""

#: ../../pep-0214.txt:353
msgid ""
"I've added a feature to the implementation (which I would also recommend "
"to ``println()``) whereby if the file argument is ``None``, "
"``sys.stdout`` is automatically used.  Thus,"
msgstr ""

#: ../../pep-0214.txt:361
msgid ""
"(or, of course, ``print >> x`` where x is a variable whose value is None)"
" means the same as"
msgstr ""

#: ../../pep-0214.txt:368
msgid "and the ``tables()`` function can be written as follows::"
msgstr ""

#: ../../pep-0214.txt:380
msgid "References"
msgstr ""

#: ../../pep-0214.txt:382
msgid "http://docs.python.org/reference/simple_stmts.html#print"
msgstr ""

#: ../../pep-0214.txt:383
msgid "http://sourceforge.net/patch/download.php?id=100970"
msgstr ""

