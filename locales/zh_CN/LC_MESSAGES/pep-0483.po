# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0483.txt
msgid "PEP"
msgstr ""

#: ../../pep-0483.txt:1
msgid "483"
msgstr ""

#: ../../pep-0483.txt
msgid "Title"
msgstr ""

#: ../../pep-0483.txt:2
msgid "The Theory of Type Hints"
msgstr ""

#: ../../pep-0483.txt
msgid "Author"
msgstr ""

#: ../../pep-0483.txt:5
msgid ""
"Guido van Rossum <guido@python.org>, Ivan Levkivskyi "
"<levkivskyi@gmail.com>"
msgstr ""

#: ../../pep-0483.txt
msgid "Discussions-To"
msgstr ""

#: ../../pep-0483.txt:6
msgid "Python-Ideas <python-ideas@python.org>"
msgstr ""

#: ../../pep-0483.txt
msgid "Status"
msgstr ""

#: ../../pep-0483.txt:7
msgid "Final"
msgstr ""

#: ../../pep-0483.txt
msgid "Type"
msgstr ""

#: ../../pep-0483.txt:8
msgid "Informational"
msgstr ""

#: ../../pep-0483.txt
msgid "Created"
msgstr ""

#: ../../pep-0483.txt:10
msgid "19-Dec-2014"
msgstr ""

#: ../../pep-0483.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0483.txt:15
msgid "Abstract"
msgstr ""

#: ../../pep-0483.txt:17
msgid "This PEP lays out the theory referenced by PEP 484."
msgstr ""

#: ../../pep-0483.txt:21
msgid "Introduction"
msgstr ""

#: ../../pep-0483.txt:23
msgid ""
"This document lays out the theory of the new type hinting proposal for "
"Python 3.5. It's not quite a full proposal or specification because there"
" are many details that need to be worked out, but it lays out the theory "
"without which it is hard to discuss more detailed specifications. We "
"start by recalling basic concepts of type theory; then we explain gradual"
" typing; then we state some general rules and define the new special "
"types (such as ``Union``) that can be used in annotations; and finally we"
" define the approach to generic types and pragmatic aspects of type "
"hinting."
msgstr ""

#: ../../pep-0483.txt:35
msgid "Notational conventions"
msgstr ""

#: ../../pep-0483.txt:37
msgid ""
"``t1``, ``t2``, etc. and ``u1``, ``u2``, etc. are types. Sometimes we "
"write ``ti`` or ``tj`` to refer to \"any of ``t1``, ``t2``, etc.\""
msgstr ""

#: ../../pep-0483.txt:39
msgid ""
"``T``, ``U`` etc. are type variables (defined with ``TypeVar()``, see "
"below)."
msgstr ""

#: ../../pep-0483.txt:40
msgid ""
"Objects, classes defined with a class statement, and instances are "
"denoted using standard PEP 8 conventions."
msgstr ""

#: ../../pep-0483.txt:42
msgid ""
"the symbol ``==`` applied to types in the context of this PEP means that "
"two expressions represent the same type."
msgstr ""

#: ../../pep-0483.txt:44
msgid ""
"Note that PEP 484 makes a distinction between types and classes (a type "
"is a concept for the type checker, while a class is a runtime concept).  "
"In this PEP we clarify this distinction but avoid unnecessary strictness "
"to allow more flexibility in the implementation of type checkers."
msgstr ""

#: ../../pep-0483.txt:52
msgid "Background"
msgstr ""

#: ../../pep-0483.txt:54
msgid ""
"There are many definitions of the concept of type in the literature. Here"
" we assume that type is a set of values and a set of functions that one "
"can apply to these values."
msgstr ""

#: ../../pep-0483.txt:58
msgid "There are several ways to define a particular type:"
msgstr ""

#: ../../pep-0483.txt:60
msgid ""
"By explicitly listing all values.  E.g., ``True`` and ``False`` form the "
"type ``bool``."
msgstr ""

#: ../../pep-0483.txt:62
msgid ""
"By specifying functions which can be used with variables of a type.  E.g."
" all objects that have a ``__len__`` method form the type ``Sized``.  "
"Both ``[1, 2, 3]`` and ``'abc'`` belong to this type, since one can call "
"``len`` on them::"
msgstr ""

#: ../../pep-0483.txt:71
msgid "By a simple class definition, for example if one defines a class::"
msgstr ""

#: ../../pep-0483.txt:76
msgid "then all instances of this class also form a type."
msgstr ""

#: ../../pep-0483.txt:77
msgid ""
"There are also more complex types.  E.g., one can define the type "
"``FancyList`` as all lists containing only instances of ``int``, ``str`` "
"or their subclasses.  The value ``[1, 'abc', UserID(42)]`` has this type."
msgstr ""

#: ../../pep-0483.txt:81
msgid ""
"It is important for the user to be able to define types in a form that "
"can be understood by type checkers. The goal of this PEP is to propose "
"such a systematic way of defining types for type annotations of variables"
" and functions using PEP 3107 syntax. These annotations can be used to "
"avoid many kind of bugs, for documentation purposes, or maybe even to "
"increase speed of program execution. Here we only focus on avoiding bugs "
"by using a static type checker."
msgstr ""

#: ../../pep-0483.txt:91
msgid "Subtype relationships"
msgstr ""

#: ../../pep-0483.txt:93
msgid ""
"A crucial notion for static type checker is the subtype relationship. It "
"arises from the question: If ``first_var`` has type ``first_type``, and "
"``second_var`` has type ``second_type``, is it safe to assign ``first_var"
" = second_var``?"
msgstr ""

#: ../../pep-0483.txt:98
msgid "A strong criterion for when it *should* be safe is:"
msgstr ""

#: ../../pep-0483.txt:100
msgid ""
"every value from ``second_type`` is also in the set of values of "
"``first_type``; and"
msgstr ""

#: ../../pep-0483.txt:102
msgid ""
"every function from ``first_type`` is also in the set of functions of "
"``second_type``."
msgstr ""

#: ../../pep-0483.txt:105
msgid "The relation defined thus is called a subtype relation."
msgstr ""

#: ../../pep-0483.txt:107
msgid "By this definition:"
msgstr ""

#: ../../pep-0483.txt:109
msgid "Every type is a subtype of itself."
msgstr ""

#: ../../pep-0483.txt:110
msgid ""
"The set of values becomes smaller in the process of subtyping, while the "
"set of functions becomes larger."
msgstr ""

#: ../../pep-0483.txt:113
msgid ""
"An intuitive example: Every ``Dog`` is an ``Animal``, also ``Dog`` has "
"more functions, for example it can bark, therefore ``Dog`` is a subtype "
"of ``Animal``.  Conversely, ``Animal`` is not a subtype of ``Dog``."
msgstr ""

#: ../../pep-0483.txt:117
msgid ""
"A more formal example: Integers are subtype of real numbers. Indeed, "
"every integer is of course also a real number, and integers support more "
"operations, such as, e.g., bitwise shifts ``<<`` and ``>>``::"
msgstr ""

#: ../../pep-0483.txt:130
msgid ""
"Let us also consider a tricky example: If ``List[int]`` denotes the type "
"formed by all lists containing only integer numbers, then it is *not* a "
"subtype of ``List[float]``, formed by all lists that contain only real "
"numbers. The first condition of subtyping holds, but appending a real "
"number only works with ``List[float]`` so that the second condition "
"fails::"
msgstr ""

#: ../../pep-0483.txt:146
msgid ""
"There are two widespread approaches to *declare* subtype information to "
"type checker."
msgstr ""

#: ../../pep-0483.txt:149
msgid ""
"In nominal subtyping, the type tree is based on the class tree, i.e., "
"``UserID`` is considered a subtype of ``int``. This approach should be "
"used under control of the type checker, because in Python one can "
"override attributes in an incompatible way::"
msgstr ""

#: ../../pep-0483.txt:160
msgid ""
"In structural subtyping the subtype relation is deduced from the declared"
" methods, i.e., ``UserID`` and ``int`` would be considered the same type."
" While this may occasionally cause confusion, structural subtyping is "
"considered more flexible. We strive to provide support for both "
"approaches, so that structural information can be used in addition to "
"nominal subtyping."
msgstr ""

#: ../../pep-0483.txt:169
msgid "Summary of gradual typing"
msgstr ""

#: ../../pep-0483.txt:171
msgid ""
"Gradual typing allows one to annotate only part of a program, thus "
"leverage desirable aspects of both dynamic and static typing."
msgstr ""

#: ../../pep-0483.txt:174
msgid ""
"We define a new relationship, is-consistent-with, which is similar to is-"
"subtype-of, except it is not transitive when the new type ``Any`` is "
"involved. (Neither relationship is symmetric.) Assigning ``a_value`` to "
"``a_variable`` is OK if the type of ``a_value`` is consistent with the "
"type of ``a_variable``. (Compare this to \"... if the type of ``a_value``"
" is a subtype of the type of ``a_variable``\", which states one of the "
"fundamentals of OO programming.) The is-consistent-with relationship is "
"defined by three rules:"
msgstr ""

#: ../../pep-0483.txt:183
msgid ""
"A type ``t1`` is consistent with a type ``t2`` if ``t1`` is a subtype of "
"``t2``. (But not the other way around.)"
msgstr ""

#: ../../pep-0483.txt:185
msgid ""
"``Any`` is consistent with every type. (But ``Any`` is not a subtype of "
"every type.)"
msgstr ""

#: ../../pep-0483.txt:187
msgid ""
"Every type is consistent with ``Any``. (But every type is not a subtype "
"of ``Any``.)"
msgstr ""

#: ../../pep-0483.txt:190
msgid ""
"That's all! See Jeremy Siek's blog post `What is Gradual Typing "
"<http://wphomes.soic.indiana.edu/jsiek/what-is-gradual-typing/>`_ for a "
"longer explanation and motivation. ``Any`` can be considered a type that "
"has all values and all methods. Combined with the definition of subtyping"
" above, this places ``Any`` partially at the top (it has all values) and "
"bottom (it has all methods) of the type hierarchy. Contrast this to "
"``object`` -- it is not consistent with most types (e.g. you can't use an"
" ``object()`` instance where an ``int`` is expected). IOW both ``Any`` "
"and ``object`` mean \"any type is allowed\" when used to annotate an "
"argument, but only ``Any`` can be passed no matter what type is expected "
"(in essence, ``Any`` declares a fallback to dynamic typing and shuts up "
"complaints from the static checker)."
msgstr ""

#: ../../pep-0483.txt:204
msgid "Here's an example showing how these rules work out in practice:"
msgstr ""

#: ../../pep-0483.txt:206
msgid "Say we have an ``Employee`` class, and a subclass ``Manager``::"
msgstr ""

#: ../../pep-0483.txt:211
msgid "Let's say variable ``worker`` is declared with type ``Employee``::"
msgstr ""

#: ../../pep-0483.txt:215
msgid "Now it's okay to assign a ``Manager`` instance to ``worker`` (rule 1)::"
msgstr ""

#: ../../pep-0483.txt:219
msgid ""
"It's not okay to assign an ``Employee`` instance to a variable declared "
"with type ``Manager``::"
msgstr ""

#: ../../pep-0483.txt:225
msgid "However, suppose we have a variable whose type is ``Any``::"
msgstr ""

#: ../../pep-0483.txt:229
msgid "Now it's okay to assign ``something`` to ``worker`` (rule 2)::"
msgstr ""

#: ../../pep-0483.txt:233
msgid ""
"Of course it's also okay to assign ``worker`` to ``something`` (rule 3), "
"but we didn't need the concept of consistency for that::"
msgstr ""

#: ../../pep-0483.txt:240
msgid "Types vs. Classes"
msgstr ""

#: ../../pep-0483.txt:242
msgid ""
"In Python, classes are object factories defined by the ``class`` "
"statement, and returned by the ``type(obj)`` built-in function. Class is "
"a dynamic, runtime concept."
msgstr ""

#: ../../pep-0483.txt:246
msgid ""
"Type concept is described above, types appear in variable and function "
"type annotations, can be constructed from building blocks described "
"below, and are used by static type checkers."
msgstr ""

#: ../../pep-0483.txt:250
msgid ""
"Every class is a type as discussed above. But it is tricky and error "
"prone to implement a class that exactly represents semantics of a given "
"type, and it is not a goal of PEP 484. *The static types described in PEP"
" 484, should not be confused with the runtime classes.* Examples:"
msgstr ""

#: ../../pep-0483.txt:256
msgid "``int`` is a class and a type."
msgstr ""

#: ../../pep-0483.txt:257
msgid "``UserID`` is a class and a type."
msgstr ""

#: ../../pep-0483.txt:258
msgid "``Union[str, int]`` is a type but not a proper class::"
msgstr ""

#: ../../pep-0483.txt:264
msgid ""
"Typing interface is implemented with classes, i.e., at runtime it is "
"possible to evaluate, e.g., ``Generic[T].__bases__``. But to emphasize "
"the distinction between classes and types the following general rules "
"apply:"
msgstr ""

#: ../../pep-0483.txt:268
msgid ""
"No types defined below (i.e. ``Any``, ``Union``, etc.) can be "
"instantiated, an attempt to do so will raise ``TypeError``. (But non-"
"abstract subclasses of ``Generic`` can be.)"
msgstr ""

#: ../../pep-0483.txt:271
msgid ""
"No types defined below can be subclassed, except for ``Generic`` and "
"classes derived from it."
msgstr ""

#: ../../pep-0483.txt:273
msgid ""
"All of these will raise ``TypeError`` if they appear in ``isinstance`` or"
" ``issubclass`` (except for unparameterized generics)."
msgstr ""

#: ../../pep-0483.txt:278
msgid "Fundamental building blocks"
msgstr ""

#: ../../pep-0483.txt:280
msgid ""
"**Any**. Every type is consistent with ``Any``; and it is also consistent"
" with every type (see above)."
msgstr ""

#: ../../pep-0483.txt:282
msgid ""
"**Union[t1, t2, ...]**. Types that are subtype of at least one of ``t1`` "
"etc. are subtypes of this."
msgstr ""

#: ../../pep-0483.txt:285
msgid ""
"Unions whose components are all subtypes of ``t1`` etc. are subtypes of "
"this. Example: ``Union[int, str]`` is a subtype of ``Union[int, float, "
"str]``."
msgstr ""

#: ../../pep-0483.txt:288
msgid ""
"The order of the arguments doesn't matter. Example: ``Union[int, str] == "
"Union[str, int]``."
msgstr ""

#: ../../pep-0483.txt:290
msgid ""
"If ``ti`` is itself a ``Union`` the result is flattened. Example: "
"``Union[int, Union[float, str]] == Union[int, float, str]``."
msgstr ""

#: ../../pep-0483.txt:292
msgid ""
"If ``ti`` and ``tj`` have a subtype relationship, the less specific type "
"survives. Example: ``Union[Employee, Manager] == Union[Employee]``."
msgstr ""

#: ../../pep-0483.txt:295
msgid ""
"``Union[t1]`` returns just ``t1``. ``Union[]`` is illegal, so is "
"``Union[()]``"
msgstr ""

#: ../../pep-0483.txt:297
msgid "Corollary: ``Union[..., object, ...]`` returns ``object``."
msgstr ""

#: ../../pep-0483.txt:299
msgid ""
"**Optional[t1]**. Alias for ``Union[t1, None]``, i.e. ``Union[t1, "
"type(None)]``."
msgstr ""

#: ../../pep-0483.txt:301
msgid ""
"**Tuple[t1, t2, ..., tn]**. A tuple whose items are instances of ``t1``, "
"etc. Example: ``Tuple[int, float]`` means a tuple of two items, the first"
" is an ``int``, the second is a ``float``; e.g., ``(42, 3.14)``."
msgstr ""

#: ../../pep-0483.txt:305
msgid ""
"``Tuple[u1, u2, ..., um]`` is a subtype of ``Tuple[t1, t2, ..., tn]`` if "
"they have the same length ``n==m`` and each ``ui`` is a subtype of "
"``ti``."
msgstr ""

#: ../../pep-0483.txt:308
msgid "To spell the type of the empty tuple, use ``Tuple[()]``."
msgstr ""

#: ../../pep-0483.txt:309
msgid ""
"A variadic homogeneous tuple type can be written ``Tuple[t1, ...]``. "
"(That's three dots, a literal ellipsis; and yes, that's a valid token in "
"Python's syntax.)"
msgstr ""

#: ../../pep-0483.txt:313
msgid ""
"**Callable[[t1, t2, ..., tn], tr]**. A function with positional argument "
"types ``t1`` etc., and return type ``tr``. The argument list may be empty"
" ``n==0``. There is no way to indicate optional or keyword arguments, nor"
" varargs, but you can say the argument list is entirely unchecked by "
"writing ``Callable[..., tr]`` (again, a literal ellipsis)."
msgstr ""

#: ../../pep-0483.txt:319
msgid "We might add:"
msgstr ""

#: ../../pep-0483.txt:321
msgid ""
"**Intersection[t1, t2, ...]**. Types that are subtype of *each* of "
"``t1``, etc are subtypes of this. (Compare to ``Union``, which has *at "
"least one* instead of *each* in its definition.)"
msgstr ""

#: ../../pep-0483.txt:325
msgid ""
"The order of the arguments doesn't matter. Nested intersections are "
"flattened, e.g. ``Intersection[int, Intersection[float, str]] == "
"Intersection[int, float, str]``."
msgstr ""

#: ../../pep-0483.txt:328
msgid ""
"An intersection of fewer types is a supertype of an intersection of more "
"types, e.g. ``Intersection[int, str]`` is a supertype of "
"``Intersection[int, float, str]``."
msgstr ""

#: ../../pep-0483.txt:331
msgid ""
"An intersection of one argument is just that argument, e.g. "
"``Intersection[int]`` is ``int``."
msgstr ""

#: ../../pep-0483.txt:333
msgid ""
"When argument have a subtype relationship, the more specific type "
"survives, e.g. ``Intersection[str, Employee, Manager]`` is "
"``Intersection[str, Manager]``."
msgstr ""

#: ../../pep-0483.txt:336
msgid "``Intersection[]`` is illegal, so is ``Intersection[()]``."
msgstr ""

#: ../../pep-0483.txt:337
msgid ""
"Corollary: ``Any`` disappears from the argument list, e.g. "
"``Intersection[int, str, Any] == Intersection[int, str]``. "
"``Intersection[Any, object]`` is ``object``."
msgstr ""

#: ../../pep-0483.txt:340
msgid ""
"The interaction between ``Intersection`` and ``Union`` is complex but "
"should be no surprise if you understand the interaction between "
"intersections and unions of regular sets (note that sets of types can be "
"infinite in size, since there is no limit on the number of new "
"subclasses)."
msgstr ""

#: ../../pep-0483.txt:348
msgid "Generic types"
msgstr ""

#: ../../pep-0483.txt:350
msgid ""
"The fundamental building blocks defined above allow to construct new "
"types in a generic manner. For example, ``Tuple`` can take a concrete "
"type ``float`` and make a concrete type ``Vector = Tuple[float, ...]``, "
"or it can take another type ``UserID`` and make another concrete type "
"``Registry = Tuple[UserID, ...]``. Such semantics is known as generic "
"type constructor, it is similar to semantics of functions, but a function"
" takes a value and returns a value, while generic type constructor takes "
"a type and \"returns\" a type."
msgstr ""

#: ../../pep-0483.txt:359
msgid ""
"It is common when a particular class or a function behaves in such a type"
" generic manner. Consider two examples:"
msgstr ""

#: ../../pep-0483.txt:362
msgid ""
"Container classes, such as ``list`` or ``dict``, typically contain only "
"values of a particular type. Therefore, a user might want to type "
"annotate them as such::"
msgstr ""

#: ../../pep-0483.txt:374
msgid ""
"The following function can take two arguments of type ``int`` and return "
"an ``int``, or take two arguments of type ``float`` and return a "
"``float``, etc.::"
msgstr ""

#: ../../pep-0483.txt:385
msgid ""
"To allow type annotations in situations from the first example, built-in "
"containers and container abstract base classes are extended with type "
"parameters, so that they behave as generic type constructors. Classes, "
"that behave as generic type constructors are called *generic types*. "
"Example::"
msgstr ""

#: ../../pep-0483.txt:399
msgid ""
"Here ``Iterable`` is a generic type that takes a concrete type ``Task`` "
"and returns a concrete type ``Iterable[Task]``."
msgstr ""

#: ../../pep-0483.txt:402
msgid ""
"Functions that behave in the type generic manner (as in second example) "
"are called *generic functions*. Type annotations of generic functions are"
" allowed by *type variables*. Their semantics with respect to generic "
"types is somewhat similar to semantics of parameters in functions. But "
"one does not assign concrete types to type variables, it is the task of a"
" static type checker to find their possible values and warn the user if "
"it cannot find. Example::"
msgstr ""

#: ../../pep-0483.txt:419
msgid ""
"Type variables are used extensively in type annotations, also internal "
"machinery of the type inference in type checkers is typically build on "
"type variables. Therefore, let us consider them in detail."
msgstr ""

#: ../../pep-0483.txt:425
msgid "Type variables"
msgstr ""

#: ../../pep-0483.txt:427
msgid ""
"``X = TypeVar('X')`` declares a unique type variable. The name must match"
" the variable name. By default, a type variable ranges over all possible "
"types. Example::"
msgstr ""

#: ../../pep-0483.txt:437
msgid ""
"``Y = TypeVar('Y', t1, t2, ...)``. Ditto, constrained to ``t1``, etc. "
"Behaves similar to ``Union[t1, t2, ...]``. A constrained type variable "
"ranges only over constrains ``t1``, etc. *exactly*; subclasses of the "
"constrains are replaced by the most-derived base class among ``t1``, etc."
" Examples:"
msgstr ""

#: ../../pep-0483.txt:442
msgid "Function type annotation with a constrained type variable::"
msgstr ""

#: ../../pep-0483.txt:453
msgid ""
"In this example, both arguments to ``longest()`` must have the same type "
"(``str`` or ``bytes``), and moreover, even if the arguments are instances"
" of a common ``str`` subclass, the return type is still ``str``, not that"
" subclass (see next example)."
msgstr ""

#: ../../pep-0483.txt:458
msgid ""
"For comparison, if the type variable was unconstrained, the common "
"subclass would be chosen as the return type, e.g.::"
msgstr ""

#: ../../pep-0483.txt:470
msgid ""
"The inferred type of ``result`` is ``MyStr`` (whereas in the ``AnyStr`` "
"example it would be ``str``)."
msgstr ""

#: ../../pep-0483.txt:473
msgid ""
"Also for comparison, if a ``Union`` is used, the return type also has to "
"be a ``Union``::"
msgstr ""

#: ../../pep-0483.txt:483
msgid ""
"The inferred type of ``result`` is still ``Union[str, bytes]``, even "
"though both arguments are ``str``."
msgstr ""

#: ../../pep-0483.txt:486
msgid "Note that the type checker will reject this function::"
msgstr ""

#: ../../pep-0483.txt:491
msgid ""
"For such cases where parameters could change their types only "
"simultaneously one should use constrained type variables."
msgstr ""

#: ../../pep-0483.txt:496
msgid "Defining and using generic types"
msgstr ""

#: ../../pep-0483.txt:498
msgid ""
"Users can declare their classes as generic types using the special "
"building block ``Generic``. The definition ``class MyGeneric(Generic[X, "
"Y, ...]): ...`` defines a generic type ``MyGeneric`` over type variables "
"``X``, etc. ``MyGeneric`` itself becomes parameterizable, e.g. "
"``MyGeneric[int, str, ...]`` is a specific type with substitutions ``X ->"
" int``, etc. Example::"
msgstr ""

#: ../../pep-0483.txt:515
msgid ""
"Classes that derive from generic types become generic. A class can "
"subclass multiple generic types. However, classes derived from specific "
"types returned by generics are not generic. Examples::"
msgstr ""

#: ../../pep-0483.txt:534
msgid ""
"Subclassing a generic type imposes the subtype relation on the "
"corresponding specific types, so that ``TodoList[t1]`` is a subtype of "
"``Iterable[t1]`` in the above example."
msgstr ""

#: ../../pep-0483.txt:538
msgid ""
"Generic types can be specialized (indexed) in several steps. Every type "
"variable could be substituted by a specific type or by another generic "
"type. If ``Generic`` appears in the base class list, then it should "
"contain all type variables, and the order of type parameters is "
"determined by the order in which they appear in ``Generic``. Examples::"
msgstr ""

#: ../../pep-0483.txt:560
msgid ""
"If a generic type appears in a type annotation with a type variable "
"omitted, it is assumed to be ``Any``. Such form could be used as a "
"fallback to dynamic typing and is allowed for use with ``issubclass`` and"
" ``isinstance``. All type information in instances is erased at runtime. "
"Examples::"
msgstr ""

#: ../../pep-0483.txt:586
msgid "Covariance and Contravariance"
msgstr ""

#: ../../pep-0483.txt:588
msgid ""
"If ``t2`` is a subtype of ``t1``, then a generic type constructor "
"``GenType`` is called:"
msgstr ""

#: ../../pep-0483.txt:591
msgid ""
"Covariant, if ``GenType[t2]`` is a subtype of ``GenType[t1]`` for all "
"such ``t1`` and ``t2``."
msgstr ""

#: ../../pep-0483.txt:593
msgid ""
"Contravariant,  if ``GenType[t1]`` is a subtype of ``GenType[t2]`` for "
"all such ``t1`` and ``t2``."
msgstr ""

#: ../../pep-0483.txt:595
msgid "Invariant, if neither of the above is true."
msgstr ""

#: ../../pep-0483.txt:597
msgid ""
"To better understand this definition, let us make an analogy with "
"ordinary functions. Assume that we have::"
msgstr ""

#: ../../pep-0483.txt:609
msgid ""
"If ``x1 < x2``, then *always* ``cov(x1) < cov(x2)``, and ``contra(x2) < "
"contra(x1)``, while nothing could be said about ``inv``. Replacing ``<`` "
"with is-subtype-of, and functions with generic type constructor we get "
"examples of covariant, contravariant, and invariant behavior. Let us now "
"consider practical examples:"
msgstr ""

#: ../../pep-0483.txt:615
msgid ""
"``Union`` behaves covariantly in all its arguments. Indeed, as discussed "
"above, ``Union[t1, t2, ...]`` is a subtype of ``Union[u1, u2, ...]``, if "
"``t1`` is a subtype of ``u1``, etc."
msgstr ""

#: ../../pep-0483.txt:618
msgid ""
"``FrozenSet[T]`` is also covariant. Let us consider ``int`` and ``float``"
" in place of ``T``. First, ``int`` is a subtype of ``float``. Second, set"
" of values of ``FrozenSet[int]`` is clearly a subset of values of "
"``FrozenSet[float]``, while set of functions from ``FrozenSet[float]`` is"
" a subset of set of functions from ``FrozenSet[int]``. Therefore, by "
"definition ``FrozenSet[int]`` is a subtype of ``FrozenSet[float]``."
msgstr ""

#: ../../pep-0483.txt:625
msgid ""
"``List[T]`` is invariant. Indeed, although set of values of ``List[int]``"
" is a subset of values of ``List[float]``, only ``int`` could be appended"
" to a ``List[int]``, as discussed in section \"Background\". Therefore, "
"``List[int]`` is not a subtype of ``List[float]``. This is a typical "
"situation with mutable types, they are typically invariant."
msgstr ""

#: ../../pep-0483.txt:631
msgid ""
"One of the best examples to illustrate (somewhat counterintuitive) "
"contravariant behavior is the callable type. It is covariant in the "
"return type, but contravariant in the arguments. For two callable types "
"that differ only in the return type, the subtype relationship for the "
"callable types follows that of the return types. Examples:"
msgstr ""

#: ../../pep-0483.txt:638
msgid "``Callable[[], int]`` is a subtype of ``Callable[[], float]``."
msgstr ""

#: ../../pep-0483.txt:639
msgid "``Callable[[], Manager]`` is a subtype of ``Callable[[], Employee]``."
msgstr ""

#: ../../pep-0483.txt:641
msgid ""
"While for two callable types that differ only in the type of one "
"argument, the subtype relationship for the callable types goes *in the "
"opposite direction* as for the argument types. Examples:"
msgstr ""

#: ../../pep-0483.txt:646
msgid "``Callable[[float], None]`` is a subtype of ``Callable[[int], None]``."
msgstr ""

#: ../../pep-0483.txt:647
msgid ""
"``Callable[[Employee], None]`` is a subtype of ``Callable[[Manager], "
"None]``."
msgstr ""

#: ../../pep-0483.txt:649
msgid ""
"Yes, you read that right. Indeed, if a function that can calculate the "
"salary for a manager is expected::"
msgstr ""

#: ../../pep-0483.txt:655
msgid ""
"then ``Callable[[Employee], Decimal]`` that can calculate a salary for "
"any employee is also acceptable."
msgstr ""

#: ../../pep-0483.txt:658
msgid ""
"The example with ``Callable`` shows how to make more precise type "
"annotations for functions: choose the most general type for every "
"argument, and the most specific type for the return value."
msgstr ""

#: ../../pep-0483.txt:662
msgid ""
"It is possible to *declare* the variance for user defined generic types "
"by using special keywords ``covariant`` and ``contravariant`` in the "
"definition of type variables used as parameters. Types are invariant by "
"default. Examples::"
msgstr ""

#: ../../pep-0483.txt:687
msgid ""
"Note, that although the variance is defined via type variables, it is not"
" a property of type variables, but a property of generic types. In "
"complex definitions of derived generics, variance *only* determined from "
"type variables used. A complex example::"
msgstr ""

#: ../../pep-0483.txt:701
msgid ""
"A type checker finds from the second declaration that "
"``Derived[Manager]`` is a subtype of ``Derived[Employee]``, and "
"``Derived[t1]`` is a subtype of ``Base[t1]``. If we denote the is-"
"subtype-of relationship with ``<``, then the full diagram of subtyping "
"for this case will be::"
msgstr ""

#: ../../pep-0483.txt:711
msgid ""
"so that a type checker will also find that, e.g., ``Derived[Manager]`` is"
" a subtype of ``Base[Employee]``."
msgstr ""

#: ../../pep-0483.txt:714
#, python-format
msgid ""
"For more information on type variables, generic types, and variance, see "
"PEP 484, the `mypy docs on generics "
"<http://mypy.readthedocs.io/en/latest/generics.html>`_, and `Wikipedia "
"<http://en.wikipedia.org/wiki/ "
"Covariance_and_contravariance_%28computer_science%29>`_."
msgstr ""

#: ../../pep-0483.txt:722
msgid "Pragmatics"
msgstr ""

#: ../../pep-0483.txt:724
msgid ""
"Some things are irrelevant to the theory but make practical use more "
"convenient. (This is not a full list; I probably missed a few and some "
"are still controversial or not fully specified.)"
msgstr ""

#: ../../pep-0483.txt:728
msgid ""
"Where a type is expected, ``None`` can be substituted for ``type(None)``;"
" e.g. ``Union[t1, None] == Union[t1, type(None)]``."
msgstr ""

#: ../../pep-0483.txt:731
msgid "Type aliases, e.g.::"
msgstr ""

#: ../../pep-0483.txt:736
msgid "Forward references via strings, e.g.::"
msgstr ""

#: ../../pep-0483.txt:741
msgid ""
"Type variables can be declared in unconstrained, constrained, or bounded "
"form. The variance of a generic type can also be indicated using a type "
"variable declared with special keyword arguments, thus avoiding any "
"special syntax, e.g.::"
msgstr ""

#: ../../pep-0483.txt:755
msgid "Type declaration in comments, e.g.::"
msgstr ""

#: ../../pep-0483.txt:759
msgid "Casts using ``cast(T, obj)``, e.g.::"
msgstr ""

#: ../../pep-0483.txt:763
msgid "Other things, e.g. overloading and stub modules, see PEP 484."
msgstr ""

#: ../../pep-0483.txt:767
msgid "Predefined generic types and Protocols in typing.py"
msgstr ""

#: ../../pep-0483.txt:769
msgid ""
"(See also the `typing.py module "
"<https://github.com/python/typing/blob/master/src/typing.py>`_.)"
msgstr ""

#: ../../pep-0483.txt:772
msgid ""
"Everything from ``collections.abc`` (but ``Set`` renamed to "
"``AbstractSet``)."
msgstr ""

#: ../../pep-0483.txt:773
msgid "``Dict``, ``List``, ``Set``, ``FrozenSet``, a few more."
msgstr ""

#: ../../pep-0483.txt:774
msgid "``re.Pattern[AnyStr]``, ``re.Match[AnyStr]``."
msgstr ""

#: ../../pep-0483.txt:775
msgid ""
"``io.IO[AnyStr]``, ``io.TextIO ~ io.IO[str]``, ``io.BinaryIO ~ "
"io.IO[bytes]``."
msgstr ""

#: ../../pep-0483.txt:779
msgid "Copyright"
msgstr ""

#: ../../pep-0483.txt:781
msgid "This document is licensed under the `Open Publication License`_."
msgstr ""

#: ../../pep-0483.txt:785
msgid "References and Footnotes"
msgstr ""

