# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0276.txt
msgid "PEP"
msgstr ""

#: ../../pep-0276.txt:1
msgid "276"
msgstr ""

#: ../../pep-0276.txt
msgid "Title"
msgstr ""

#: ../../pep-0276.txt:2
msgid "Simple Iterator for ints"
msgstr ""

#: ../../pep-0276.txt
msgid "Author"
msgstr ""

#: ../../pep-0276.txt:5
msgid "james_althoff@i2.com (Jim Althoff)"
msgstr ""

#: ../../pep-0276.txt
msgid "Status"
msgstr ""

#: ../../pep-0276.txt:6
msgid "Rejected"
msgstr ""

#: ../../pep-0276.txt
msgid "Type"
msgstr ""

#: ../../pep-0276.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0276.txt
msgid "Created"
msgstr ""

#: ../../pep-0276.txt:9
msgid "12-Nov-2001"
msgstr ""

#: ../../pep-0276.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0276.txt:10
msgid "2.3"
msgstr ""

#: ../../pep-0276.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0276.txt:15
msgid "Abstract"
msgstr ""

#: ../../pep-0276.txt:17
msgid ""
"Python 2.1 added new functionality to support iterators [1]_. Iterators "
"have proven to be useful and convenient in many coding situations.  It is"
" noted that the implementation of Python's for-loop control structure "
"uses the iterator protocol as of release 2.1.  It is also noted that "
"Python provides iterators for the following builtin types: lists, tuples,"
" dictionaries, strings, and files.  This PEP proposes the addition of an "
"iterator for the builtin type int (``types.IntType``).  Such an iterator "
"would simplify the coding of certain for-loops in Python."
msgstr ""

#: ../../pep-0276.txt:28
msgid "BDFL Pronouncement"
msgstr ""

#: ../../pep-0276.txt:30
msgid "This PEP was rejected on 17 June 2005 with a note to python-dev."
msgstr ""

#: ../../pep-0276.txt:32
msgid ""
"Much of the original need was met by the ``enumerate()`` function which "
"was accepted for Python 2.3."
msgstr ""

#: ../../pep-0276.txt:35
msgid "Also, the proposal both allowed and encouraged misuses such as::"
msgstr ""

#: ../../pep-0276.txt:42
msgid ""
"Likewise, it was not helpful that the proposal would disable the syntax "
"error in statements like::"
msgstr ""

#: ../../pep-0276.txt:48
msgid "Specification"
msgstr ""

#: ../../pep-0276.txt:50
msgid ""
"Define an iterator for types.intType (i.e., the builtin type \"int\") "
"that is returned from the builtin function \"iter\" when called with an "
"instance of types.intType as the argument."
msgstr ""

#: ../../pep-0276.txt:54
msgid "The returned iterator has the following behavior:"
msgstr ""

#: ../../pep-0276.txt:56
msgid ""
"Assume that object i is an instance of ``types.intType`` (the builtin "
"type int) and that i > 0"
msgstr ""

#: ../../pep-0276.txt:59
msgid "``iter(i)`` returns an iterator object"
msgstr ""

#: ../../pep-0276.txt:61
msgid "said iterator object iterates through the sequence of ints 0,1,2,...,i-1"
msgstr ""

#: ../../pep-0276.txt:64
msgid "Example:"
msgstr ""

#: ../../pep-0276.txt:66
msgid ""
"``iter(5)`` returns an iterator object that iterates through the sequence"
" of ints 0,1,2,3,4"
msgstr ""

#: ../../pep-0276.txt:69
msgid ""
"if i <= 0, ``iter(i)`` returns an \"empty\" iterator, i.e., one that "
"throws StopIteration upon the first call of its \"next\" method"
msgstr ""

#: ../../pep-0276.txt:72
msgid ""
"In other words, the conditions and semantics of said iterator is "
"consistent with the conditions and semantics of the ``range()`` and "
"``xrange()`` functions."
msgstr ""

#: ../../pep-0276.txt:76
msgid ""
"Note that the sequence 0,1,2,...,i-1 associated with the int i is "
"considered \"natural\" in the context of Python programming because it is"
" consistent with the builtin indexing protocol of sequences in Python.  "
"Python lists and tuples, for example, are indexed starting at 0 and "
"ending at len(object)-1 (when using positive indices).  In other words, "
"such objects are indexed with the sequence 0,1,2,...,len(object)-1"
msgstr ""

#: ../../pep-0276.txt:86
msgid "Rationale"
msgstr ""

#: ../../pep-0276.txt:88
msgid ""
"A common programming idiom is to take a collection of objects and apply "
"some operation to each item in the collection in some established "
"sequential order.  Python provides the \"for in\" looping control "
"structure for handling this common idiom.  Cases arise, however, where it"
" is necessary (or more convenient) to access each item in an \"indexed\" "
"collection by iterating through each index and accessing each item in the"
" collection using the corresponding index."
msgstr ""

#: ../../pep-0276.txt:97
msgid ""
"For example, one might have a two-dimensional \"table\" object where one "
"requires the application of some operation to the first column of each "
"row in the table.  Depending on the implementation of the table it might "
"not be possible to access first each row and then each column as "
"individual objects.  It might, rather, be possible to access a cell in "
"the table using a row index and a column index. In such a case it is "
"necessary to use an idiom where one iterates through a sequence of "
"indices (indexes) in order to access the desired items in the table.  "
"(Note that the commonly used DefaultTableModel class in Java-Swing-Jython"
" has this very protocol)."
msgstr ""

#: ../../pep-0276.txt:108
msgid ""
"Another common example is where one needs to process two or more "
"collections in parallel.  Another example is where one needs to access, "
"say, every second item in a collection."
msgstr ""

#: ../../pep-0276.txt:112
msgid ""
"There are many other examples where access to items in a collection is "
"facilitated by a computation on an index thus necessitating access to the"
" indices rather than direct access to the items themselves."
msgstr ""

#: ../../pep-0276.txt:117
msgid ""
"Let's call this idiom the \"indexed for-loop\" idiom.  Some programming "
"languages provide builtin syntax for handling this idiom.  In Python the "
"common convention for implementing the indexed for-loop idiom is to use "
"the builtin ``range()`` or ``xrange()`` function to generate a sequence "
"of indices as in, for example::"
msgstr ""

#: ../../pep-0276.txt:126
msgid "or"
msgstr ""

#: ../../pep-0276.txt:133
msgid ""
"From time to time there are discussions in the Python community about the"
" indexed for-loop idiom.  It is sometimes argued that the need for using "
"the ``range()`` or ``xrange()`` function for this design idiom is:"
msgstr ""

#: ../../pep-0276.txt:138
msgid "Not obvious (to new-to-Python programmers),"
msgstr ""

#: ../../pep-0276.txt:140
msgid "Error prone (easy to forget, even for experienced Python programmers)"
msgstr ""

#: ../../pep-0276.txt:143
msgid ""
"Confusing and distracting for those who feel compelled to understand the "
"differences and recommended usage of ``xrange()`` vis-a-vis ``range()``"
msgstr ""

#: ../../pep-0276.txt:146
msgid ""
"Unwieldy, especially when combined with the ``len()`` function, i.e., "
"``xrange(len(sequence))``"
msgstr ""

#: ../../pep-0276.txt:149
msgid "Not as convenient as equivalent mechanisms in other languages,"
msgstr ""

#: ../../pep-0276.txt:151
msgid "Annoying, a \"wart\", etc."
msgstr ""

#: ../../pep-0276.txt:153
msgid ""
"And from time to time proposals are put forth for ways in which Python "
"could provide a better mechanism for this idiom.  Recent examples include"
" PEP 204, \"Range Literals\", and PEP 212, \"Loop Counter Iteration\"."
msgstr ""

#: ../../pep-0276.txt:158
msgid ""
"Most often, such proposal include changes to Python's syntax and other "
"\"heavyweight\" changes."
msgstr ""

#: ../../pep-0276.txt:161
msgid ""
"Part of the difficulty here is that advocating new syntax implies a "
"comprehensive solution for \"general indexing\" that has to include "
"aspects like:"
msgstr ""

#: ../../pep-0276.txt:165
msgid "starting index value"
msgstr ""

#: ../../pep-0276.txt:167
msgid "ending index value"
msgstr ""

#: ../../pep-0276.txt:169
msgid "step value"
msgstr ""

#: ../../pep-0276.txt:171
msgid "open intervals versus closed intervals versus half opened intervals"
msgstr ""

#: ../../pep-0276.txt:173
msgid ""
"Finding a new syntax that is comprehensive, simple, general, Pythonic, "
"appealing to many, easy to implement, not in conflict with existing "
"structures, not excessively overloading of existing structures, etc. has "
"proven to be more difficult than one might anticipate."
msgstr ""

#: ../../pep-0276.txt:179
msgid ""
"The proposal outlined in this PEP tries to address the problem by "
"suggesting a simple \"lightweight\" solution that helps the most common "
"case by using a proven mechanism that is already available (as of Python "
"2.1): namely, iterators."
msgstr ""

#: ../../pep-0276.txt:184
msgid ""
"Because for-loops already use \"iterator\" protocol as of Python 2.1, "
"adding an iterator for types.IntType as proposed in this PEP would enable"
" by default the following shortcut for the indexed for-loop idiom::"
msgstr ""

#: ../../pep-0276.txt:192
msgid ""
"The following benefits for this approach vis-a-vis the current mechanism "
"of using the ``range()`` or ``xrange()`` functions are claimed to be:"
msgstr ""

#: ../../pep-0276.txt:196
msgid "Simpler,"
msgstr ""

#: ../../pep-0276.txt:198
msgid "Less cluttered,"
msgstr ""

#: ../../pep-0276.txt:200
msgid ""
"Focuses on the problem at hand without the need to resort to secondary "
"implementation-oriented functions (``range()`` and ``xrange()``)"
msgstr ""

#: ../../pep-0276.txt:204
msgid "And compared to other proposals for change:"
msgstr ""

#: ../../pep-0276.txt:206
msgid "Requires no new syntax"
msgstr ""

#: ../../pep-0276.txt:208
msgid "Requires no new keywords"
msgstr ""

#: ../../pep-0276.txt:210
msgid "Takes advantage of the new and well-established iterator mechanism"
msgstr ""

#: ../../pep-0276.txt:212
msgid "And generally:"
msgstr ""

#: ../../pep-0276.txt:214
msgid ""
"Is consistent with iterator-based \"convenience\" changes already "
"included (as of Python 2.1) for other builtin types such as: lists, "
"tuples, dictionaries, strings, and files."
msgstr ""

#: ../../pep-0276.txt:220
msgid "Backwards Compatibility"
msgstr ""

#: ../../pep-0276.txt:222
msgid ""
"The proposed mechanism is generally backwards compatible as it calls for "
"neither new syntax nor new keywords.  All existing, valid Python programs"
" should continue to work unmodified."
msgstr ""

#: ../../pep-0276.txt:226
msgid ""
"However, this proposal is not perfectly backwards compatible in the sense"
" that certain statements that are currently invalid would, under the "
"current proposal, become valid."
msgstr ""

#: ../../pep-0276.txt:230
msgid "Tim Peters has pointed out two such examples:"
msgstr ""

#: ../../pep-0276.txt:232
msgid ""
"The common case where one forgets to include ``range()`` or ``xrange()``,"
" for example::"
msgstr ""

#: ../../pep-0276.txt:238
msgid "in Python 2.2 raises a TypeError exception."
msgstr ""

#: ../../pep-0276.txt:240
msgid ""
"Under the current proposal, the above statement would be valid and would "
"work as (presumably) intended.  Presumably, this is a good thing."
msgstr ""

#: ../../pep-0276.txt:244
msgid ""
"As noted by Tim, this is the common case of the \"forgotten range\" "
"mistake (which one currently corrects by adding a call to ``range()`` or "
"``xrange()``)."
msgstr ""

#: ../../pep-0276.txt:248
msgid ""
"The (hopefully) very uncommon case where one makes a typing mistake when "
"using tuple unpacking.  For example::"
msgstr ""

#: ../../pep-0276.txt:253
msgid "in Python 2.2 raises a ``TypeError`` exception."
msgstr ""

#: ../../pep-0276.txt:255
msgid ""
"Under the current proposal, the above statement would be valid and would "
"set x to 0.  The PEP author has no data as to how common this typing "
"error is nor how difficult it would be to catch such an error under the "
"current proposal.  He imagines that it does not occur frequently and that"
" it would be relatively easy to correct should it happen."
msgstr ""

#: ../../pep-0276.txt:264
msgid "Issues"
msgstr ""

#: ../../pep-0276.txt:266
msgid ""
"Extensive discussions concerning PEP 276 on the Python interest mailing "
"list suggests a range of opinions: some in favor, some neutral, some "
"against.  Those in favor tend to agree with the claims above of the "
"usefulness, convenience, ease of learning, and simplicity of a simple "
"iterator for integers."
msgstr ""

#: ../../pep-0276.txt:272
msgid "Issues with PEP 276 include:"
msgstr ""

#: ../../pep-0276.txt:274
msgid "Using range/xrange is fine as is."
msgstr ""

#: ../../pep-0276.txt:276
msgid "Response: Some posters feel this way.  Other disagree."
msgstr ""

#: ../../pep-0276.txt:278
msgid ""
"Some feel that iterating over the sequence \"0, 1, 2, ..., n-1\" for an "
"integer n is not intuitive.  \"for i in 5:\" is considered (by some) to "
"be \"non-obvious\", for example.  Some dislike this usage because it "
"doesn't have \"the right feel\".  Some dislike it because they believe "
"that this type of usage forces one to view integers as a sequences and "
"this seems wrong to them.  Some dislike it because they prefer to view "
"for-loops as dealing with explicit sequences rather than with arbitrary "
"iterators."
msgstr ""

#: ../../pep-0276.txt:287
msgid ""
"Response: Some like the proposed idiom and see it as simple, elegant, "
"easy to learn, and easy to use.  Some are neutral on this issue.  Others,"
" as noted, dislike it."
msgstr ""

#: ../../pep-0276.txt:291
msgid "Is it obvious that ``iter(5)`` maps to the sequence 0,1,2,3,4?"
msgstr ""

#: ../../pep-0276.txt:293
msgid ""
"Response: Given, as noted above, that Python has a strong convention for "
"indexing sequences starting at 0 and stopping at (inclusively) the index "
"whose value is one less than the length of the sequence, it is argued "
"that the proposed sequence is reasonably intuitive to the Python "
"programmer while being useful and practical.  More importantly, it is "
"argued that once learned this convention is very easy to remember.  Note "
"that the doc string for the range function makes a reference to the "
"natural and useful association between ``range(n)`` and the indices for a"
" list whose length is n."
msgstr ""

#: ../../pep-0276.txt:304
msgid "Possible ambiguity"
msgstr ""

#: ../../pep-0276.txt:310
msgid "might be mistaken for"
msgstr ""

#: ../../pep-0276.txt:316
msgid ""
"Response: This is exactly the same situation with strings in current "
"Python (replace 10 with 'spam' in the above, for example)."
msgstr ""

#: ../../pep-0276.txt:320
msgid ""
"Too general: in the newest releases of Python there are contexts -- as "
"with for-loops -- where iterators are called implicitly.  Some fear that "
"having an iterator invoked for an integer in one of the context "
"(excluding for-loops) might lead to unexpected behavior and bugs.  The "
"\"x, = 1\" example noted above is an a case in point."
msgstr ""

#: ../../pep-0276.txt:327
msgid ""
"Response: From the author's perspective the examples of the above that "
"were identified in the PEP 276 discussions did not appear to be ones that"
" would be accidentally misused in ways that would lead to subtle and "
"hard-to-detect errors."
msgstr ""

#: ../../pep-0276.txt:332
msgid ""
"In addition, it seems that there is a way to deal with this issue by "
"using a variation of what is outlined in the specification section of "
"this proposal.  Instead of adding an ``__iter__`` method to class int, "
"change the for-loop handling code to convert (in essence) from"
msgstr ""

#: ../../pep-0276.txt:342
msgid "to"
msgstr ""

#: ../../pep-0276.txt:348
msgid ""
"This approach gives the same results in a for-loop as an ``__iter__`` "
"method would but would prevent iteration on integer values in any other "
"context.  Lists and tuples, for example, don't have ``__iter__`` and are "
"handled with special code. Integer values would be one more special case."
msgstr ""

#: ../../pep-0276.txt:354
msgid "\"i in n\" seems very unnatural."
msgstr ""

#: ../../pep-0276.txt:356
msgid ""
"Response: Some feel that \"i in len(mylist)\" would be easily "
"understandable and useful.  Some don't like it, particularly when a "
"literal is used as in \"i in 5\".  If the variant mentioned in the "
"response to the previous issue is implemented, this issue is moot.  If "
"not, then one could also address this issue by defining a "
"``__contains__`` method in class int that would always raise a TypeError."
"  This would then make the behavior of \"i in n\" identical to that of "
"current Python."
msgstr ""

#: ../../pep-0276.txt:365
msgid ""
"Might dissuade newbies from using the indexed for-loop idiom when the "
"standard \"for item in collection:\" idiom is clearly better."
msgstr ""

#: ../../pep-0276.txt:368
msgid ""
"Response: The standard idiom is so nice when it fits that it needs "
"neither extra \"carrot\" nor \"stick\".  On the other hand, one does "
"notice cases of overuse/misuse of the standard idiom (due, most likely, "
"to the awkwardness of the indexed for-loop idiom), as in::"
msgstr ""

#: ../../pep-0276.txt:377
msgid "Why not propose even bigger changes?"
msgstr ""

#: ../../pep-0276.txt:379
msgid ""
"The majority of disagreement with PEP 276 came from those who favor much "
"larger changes to Python to address the more general problem of "
"specifying a sequence of integers where such a specification is general "
"enough to handle the starting value, ending value, and stepping value of "
"the sequence and also addresses variations of open, closed, and half-open"
" (half-closed) integer intervals.  Many suggestions of such were "
"discussed."
msgstr ""

#: ../../pep-0276.txt:387
msgid "These include:"
msgstr ""

#: ../../pep-0276.txt:389
msgid ""
"adding Haskell-like notation for specifying a sequence of integers in a "
"literal list,"
msgstr ""

#: ../../pep-0276.txt:392
msgid "various uses of slicing notation to specify sequences,"
msgstr ""

#: ../../pep-0276.txt:394
msgid ""
"changes to the syntax of for-in loops to allow the use of relational "
"operators in the loop header,"
msgstr ""

#: ../../pep-0276.txt:397
msgid ""
"creation of an integer-interval class along with methods that overload "
"relational operators or division operators to provide \"slicing\" on "
"integer-interval objects,"
msgstr ""

#: ../../pep-0276.txt:401
msgid "and more."
msgstr ""

#: ../../pep-0276.txt:403
msgid ""
"It should be noted that there was much debate but not an overwhelming "
"consensus for any of these larger-scale suggestions."
msgstr ""

#: ../../pep-0276.txt:406
msgid ""
"Clearly, PEP 276 does not propose such a large-scale change and instead "
"focuses on a specific problem area.  Towards the end of the discussion "
"period, several posters expressed favor for the narrow focus and "
"simplicity of PEP 276 vis-a-vis the more ambitious suggestions that were "
"advanced.  There did appear to be consensus for the need for a PEP for "
"any such larger-scale, alternative suggestion.  In light of this "
"recognition, details of the various alternative suggestions are not "
"discussed here further."
msgstr ""

#: ../../pep-0276.txt:417
msgid "Implementation"
msgstr ""

#: ../../pep-0276.txt:419
msgid ""
"An implementation is not available at this time but is expected to be "
"straightforward.  The author has implemented a subclass of int with an "
"``__iter__`` method (written in Python) as a means to test out the ideas "
"in this proposal, however."
msgstr ""

#: ../../pep-0276.txt:426
msgid "References"
msgstr ""

#: ../../pep-0276.txt:428
msgid "PEP 234, Iterators http://www.python.org/dev/peps/pep-0234/"
msgstr ""

#: ../../pep-0276.txt:431
msgid "PEP 204, Range Literals http://www.python.org/dev/peps/pep-0204/"
msgstr ""

#: ../../pep-0276.txt:434
msgid "PEP 212, Loop Counter Iteration http://www.python.org/dev/peps/pep-0212/"
msgstr ""

#: ../../pep-0276.txt:439
msgid "Copyright"
msgstr ""

#: ../../pep-0276.txt:441
msgid "This document has been placed in the public domain."
msgstr ""

