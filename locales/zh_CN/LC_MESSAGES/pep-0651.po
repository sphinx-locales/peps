# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0651.rst
msgid "PEP"
msgstr ""

#: ../../pep-0651.rst:1
msgid "651"
msgstr ""

#: ../../pep-0651.rst
msgid "Title"
msgstr ""

#: ../../pep-0651.rst:2
msgid "Robust Stack Overflow Handling"
msgstr ""

#: ../../pep-0651.rst
msgid "Author"
msgstr ""

#: ../../pep-0651.rst:3
msgid "Mark Shannon <mark@hotpy.org>"
msgstr ""

#: ../../pep-0651.rst
msgid "Status"
msgstr ""

#: ../../pep-0651.rst:4
msgid "Rejected"
msgstr ""

#: ../../pep-0651.rst
msgid "Type"
msgstr ""

#: ../../pep-0651.rst:5
msgid "Standards Track"
msgstr ""

#: ../../pep-0651.rst
msgid "Created"
msgstr ""

#: ../../pep-0651.rst:7
msgid "18-Jan-2021"
msgstr ""

#: ../../pep-0651.rst
msgid "Post-History"
msgstr ""

#: ../../pep-0651.rst:8
msgid "19-Jan-2021"
msgstr ""

#: ../../pep-0651.rst:12
msgid "Rejection Notice"
msgstr ""

#: ../../pep-0651.rst:14
msgid ""
"This PEP has been `rejected by the Python Steering Council "
"<https://mail.python.org/archives/list/python-"
"dev@python.org/thread/75BFSBM5AJWXOF5OSPLMJQSTP3TDOKRP/>`_."
msgstr ""

#: ../../pep-0651.rst:19
msgid "Abstract"
msgstr ""

#: ../../pep-0651.rst:21
msgid ""
"This PEP proposes that Python should treat machine stack overflow "
"differently from runaway recursion."
msgstr ""

#: ../../pep-0651.rst:23
msgid ""
"This would allow programs to set the maximum recursion depth to fit their"
" needs and provide additional safety guarantees."
msgstr ""

#: ../../pep-0651.rst:26
msgid ""
"If this PEP is accepted, then the following program will run safely to "
"completion::"
msgstr ""

#: ../../pep-0651.rst:36
msgid ""
"and the following program will raise a ``StackOverflow``, without causing"
" a VM crash::"
msgstr ""

#: ../../pep-0651.rst:47
msgid "Motivation"
msgstr ""

#: ../../pep-0651.rst:49
msgid ""
"CPython uses a single recursion depth counter to prevent both runaway "
"recursion and C stack overflow. However, runaway recursion and machine "
"stack overflow are two different things. Allowing machine stack overflow "
"is a potential security vulnerability, but limiting recursion depth can "
"prevent the use of some algorithms in Python."
msgstr ""

#: ../../pep-0651.rst:54
msgid ""
"Currently, if a program needs to deeply recurse it must manage the "
"maximum recursion depth allowed, hopefully managing to set it in the "
"region between the minimum needed to run correctly and the maximum that "
"is safe to avoid a memory protection error."
msgstr ""

#: ../../pep-0651.rst:58
msgid ""
"By separating the checks for C stack overflow from checks for recursion "
"depth, pure Python programs can run safely, using whatever level of "
"recursion they require."
msgstr ""

#: ../../pep-0651.rst:62
msgid "Rationale"
msgstr ""

#: ../../pep-0651.rst:64
msgid ""
"CPython currently relies on a single limit to guard against potentially "
"dangerous stack overflow in the virtual machine and to guard against run "
"away recursion in the Python program."
msgstr ""

#: ../../pep-0651.rst:67
msgid ""
"This is a consequence of the implementation which couples the C and "
"Python call stacks. By breaking this coupling, we can improve both the "
"usability of CPython and its safety."
msgstr ""

#: ../../pep-0651.rst:70
msgid ""
"The recursion limit exists to protect against runaway recursion, the "
"integrity of the virtual machine should not depend on it. Similarly, "
"recursion should not be limited by implementation details."
msgstr ""

#: ../../pep-0651.rst:74
msgid "Specification"
msgstr ""

#: ../../pep-0651.rst:76
msgid ""
"Two new exception classes will be added, ``StackOverflow`` and "
"``RecursionOverflow``, both of which will be sub-classes of "
"``RecursionError``"
msgstr ""

#: ../../pep-0651.rst:80
msgid "StackOverflow exception"
msgstr ""

#: ../../pep-0651.rst:82
msgid ""
"A ``StackOverflow`` exception will be raised whenever the interpreter or "
"builtin module code determines that the C stack is at or nearing a limit "
"of safety. ``StackOverflow`` is a sub-class of ``RecursionError``, so any"
" code that handles ``RecursionError`` will handle ``StackOverflow``"
msgstr ""

#: ../../pep-0651.rst:88
msgid "RecursionOverflow exception"
msgstr ""

#: ../../pep-0651.rst:90
msgid ""
"A ``RecursionOverflow`` exception will be raised when a call to a Python "
"function causes the recursion limit to be exceeded. This is a slight "
"change from current behavior which raises a ``RecursionError``. "
"``RecursionOverflow`` is a sub-class of ``RecursionError``, so any code "
"that handles ``RecursionError`` will continue to work as before."
msgstr ""

#: ../../pep-0651.rst:97
msgid "Decoupling the Python stack from the C stack"
msgstr ""

#: ../../pep-0651.rst:99
msgid ""
"In order to provide the above guarantees and ensure that any program that"
" worked previously continues to do so, the Python and C stack will need "
"to be separated. That is, calls to Python functions from Python "
"functions, should not consume space on the C stack. Calls to and from "
"builtin functions will continue to consume space on the C stack."
msgstr ""

#: ../../pep-0651.rst:104
msgid ""
"The size of the C stack will be implementation defined, and may vary from"
" machine to machine. It may even differ between threads. However, there "
"is an expectation that any code that could run with the recursion limit "
"set to the previous default value, will continue to run."
msgstr ""

#: ../../pep-0651.rst:108
msgid ""
"Many operations in Python perform some sort of call at the C level. Most "
"of these will continue to consume C stack, and will result in a "
"``StackOverflow`` exception if uncontrolled recursion occurs."
msgstr ""

#: ../../pep-0651.rst:114
msgid "Other Implementations"
msgstr ""

#: ../../pep-0651.rst:116
msgid ""
"Other implementations are required to fail safely regardless of what "
"value the recursion limit is set to."
msgstr ""

#: ../../pep-0651.rst:118
msgid ""
"If the implementation couples the Python stack to the underlying VM or "
"hardware stack, then it should raise a ``RecursionOverflow`` exception "
"when the recursion limit is exceeded, but the underlying stack does not "
"overflow. If the underlying stack overflows, or is near to overflow, then"
" a ``StackOverflow`` exception should be raised."
msgstr ""

#: ../../pep-0651.rst:125
msgid "C-API"
msgstr ""

#: ../../pep-0651.rst:127
msgid ""
"A new function, ``Py_CheckStackDepth()`` will be added, and the behavior "
"of ``Py_EnterRecursiveCall()`` will be modified slightly."
msgstr ""

#: ../../pep-0651.rst:130
msgid "Py_CheckStackDepth()"
msgstr ""

#: ../../pep-0651.rst:132
msgid ""
"``int Py_CheckStackDepth(const char *where)`` will return 0 if there is "
"no immediate danger of C stack overflow. It will return -1 and set an "
"exception, if the C stack is near to overflowing. The ``where`` parameter"
" is used in the exception message, in the same fashion as the ``where`` "
"parameter of ``Py_EnterRecursiveCall()``."
msgstr ""

#: ../../pep-0651.rst:139
msgid "Py_EnterRecursiveCall()"
msgstr ""

#: ../../pep-0651.rst:141
msgid ""
"``Py_EnterRecursiveCall()`` will be modified to call "
"``Py_CheckStackDepth()`` before performing its current function."
msgstr ""

#: ../../pep-0651.rst:144
msgid "PyLeaveRecursiveCall()"
msgstr ""

#: ../../pep-0651.rst:146
msgid "``Py_LeaveRecursiveCall()`` will remain unchanged."
msgstr ""

#: ../../pep-0651.rst:149
msgid "Backwards Compatibility"
msgstr ""

#: ../../pep-0651.rst:151
msgid ""
"This feature is fully backwards compatible at the Python level. Some low-"
"level tools, such as machine-code debuggers, will need to be modified. "
"For example, the gdb scripts for Python will need to be aware that there "
"may be more than one Python frame per C frame."
msgstr ""

#: ../../pep-0651.rst:156
msgid ""
"C code that uses the ``Py_EnterRecursiveCall()``, "
"``PyLeaveRecursiveCall()`` pair of functions will continue to work "
"correctly. In addition, ``Py_EnterRecursiveCall()`` may raise a "
"``StackOverflow`` exception."
msgstr ""

#: ../../pep-0651.rst:160
msgid ""
"New code should use the ``Py_CheckStackDepth()`` function, unless the "
"code wants to count as a Python function call with regard to the "
"recursion limit."
msgstr ""

#: ../../pep-0651.rst:163
msgid ""
"We recommend that \"python-like\" code, such as Cython-generated "
"functions, use ``Py_EnterRecursiveCall()``, but other code use "
"``Py_CheckStackDepth()``."
msgstr ""

#: ../../pep-0651.rst:168
msgid "Security Implications"
msgstr ""

#: ../../pep-0651.rst:170
msgid ""
"It will no longer be possible to crash the CPython virtual machine "
"through recursion."
msgstr ""

#: ../../pep-0651.rst:173
msgid "Performance Impact"
msgstr ""

#: ../../pep-0651.rst:175
msgid "It is unlikely that the performance impact will be significant."
msgstr ""

#: ../../pep-0651.rst:177
msgid ""
"The additional logic required will probably have a very small negative "
"impact on performance. The improved locality of reference from reduced C "
"stack use should have some small positive impact."
msgstr ""

#: ../../pep-0651.rst:180
msgid ""
"It is hard to predict whether the overall effect will be positive or "
"negative, but it is quite likely that the net effect will be too small to"
" be measured."
msgstr ""

#: ../../pep-0651.rst:185
msgid "Implementation"
msgstr ""

#: ../../pep-0651.rst:188
msgid "Monitoring C stack consumption"
msgstr ""

#: ../../pep-0651.rst:190
msgid ""
"Gauging whether a C stack overflow is imminent is difficult. So we need "
"to be conservative. We need to determine a safe bounds for the stack, "
"which is not something possible in portable C code."
msgstr ""

#: ../../pep-0651.rst:193
msgid ""
"For major platforms, the platform specific API will be used to provide an"
" accurate stack bounds. However, for minor platforms some amount of "
"guessing may be required. While this might sound bad, it is no worse than"
" the current situation, where we guess that the size of the C stack is at"
" least 1000 times the stack space required for the chain of calls from "
"``_PyEval_EvalFrameDefault`` to ``_PyEval_EvalFrameDefault``."
msgstr ""

#: ../../pep-0651.rst:199
msgid ""
"This means that in some cases the amount of recursion possible may be "
"reduced. In general, however, the amount of recursion possible should be "
"increased, as many calls will use no C stack."
msgstr ""

#: ../../pep-0651.rst:202
msgid ""
"Our general approach to determining a limit for the C stack is to get an "
"address within the current C frame, as early as possible in the call "
"chain. The limit can then be guessed by adding some constant to that."
msgstr ""

#: ../../pep-0651.rst:206
msgid "Making Python-to-Python calls without consuming the C stack"
msgstr ""

#: ../../pep-0651.rst:208
msgid ""
"Calls in the interpreter are handled by the ``CALL_FUNCTION``, "
"``CALL_FUNCTION_KW``, ``CALL_FUNCTION_EX`` and ``CALL_METHOD`` "
"instructions. The code for those instructions will be modified so that "
"when a Python function or method is called, instead of making a call in "
"C, the interpreter will setup the callee's frame and continue "
"interpretation as normal."
msgstr ""

#: ../../pep-0651.rst:214
msgid ""
"The ``RETURN_VALUE`` instruction will perform the reverse operation, "
"except when the current frame is the entry frame of the interpreter when "
"it will return as normal."
msgstr ""

#: ../../pep-0651.rst:220
msgid "Rejected Ideas"
msgstr ""

#: ../../pep-0651.rst:222 ../../pep-0651.rst:228
msgid "None, as yet."
msgstr ""

#: ../../pep-0651.rst:226
msgid "Open Issues"
msgstr ""

#: ../../pep-0651.rst:231
msgid "Copyright"
msgstr ""

#: ../../pep-0651.rst:233
msgid ""
"This document is placed in the public domain or under the "
"CC0-1.0-Universal license, whichever is more permissive."
msgstr ""

