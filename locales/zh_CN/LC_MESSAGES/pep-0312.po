# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0312.txt
msgid "PEP"
msgstr ""

#: ../../pep-0312.txt:1
msgid "312"
msgstr ""

#: ../../pep-0312.txt
msgid "Title"
msgstr ""

#: ../../pep-0312.txt:2
msgid "Simple Implicit Lambda"
msgstr ""

#: ../../pep-0312.txt
msgid "Author"
msgstr ""

#: ../../pep-0312.txt:5
msgid "Roman Suzi <rnd@onego.ru>, Alex Martelli <aleaxit@gmail.com>"
msgstr ""

#: ../../pep-0312.txt
msgid "Status"
msgstr ""

#: ../../pep-0312.txt:6
msgid "Deferred"
msgstr ""

#: ../../pep-0312.txt
msgid "Type"
msgstr ""

#: ../../pep-0312.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0312.txt
msgid "Created"
msgstr ""

#: ../../pep-0312.txt:9
msgid "11-Feb-2003"
msgstr ""

#: ../../pep-0312.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0312.txt:10
msgid "2.4"
msgstr ""

#: ../../pep-0312.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0312.txt:15
msgid "Abstract"
msgstr ""

#: ../../pep-0312.txt:17
msgid ""
"This PEP proposes to make argumentless lambda keyword optional in some "
"cases where it is not grammatically ambiguous."
msgstr ""

#: ../../pep-0312.txt:22
msgid "Deferral"
msgstr ""

#: ../../pep-0312.txt:24
msgid ""
"The BDFL hates the unary colon syntax.  This PEP needs to go back to the "
"drawing board and find a more Pythonic syntax (perhaps an alternative "
"unary operator).  See python-dev discussion on 17 June 2005 [1]_."
msgstr ""

#: ../../pep-0312.txt:29
msgid ""
"Also, it is probably a good idea to eliminate the alternative "
"propositions which have no chance at all.  The examples section is good "
"and highlights the readability improvements.  It would carry more weight "
"with additional examples and with real-world referents (instead of the "
"abstracted dummy calls to ``:A`` and ``:B``)."
msgstr ""

#: ../../pep-0312.txt:37
msgid "Motivation"
msgstr ""

#: ../../pep-0312.txt:39
msgid ""
"Lambdas are useful for defining anonymous functions, e.g. for use as "
"callbacks or (pseudo)-lazy evaluation schemes.  Often, lambdas are not "
"used when they would be appropriate, just because the keyword \"lambda\" "
"makes code look complex.  Omitting lambda in some special cases is "
"possible, with small and backwards compatible changes to the grammar, and"
" provides a cheap cure against such \"lambdaphobia\"."
msgstr ""

#: ../../pep-0312.txt:49
msgid "Rationale"
msgstr ""

#: ../../pep-0312.txt:51
msgid ""
"Sometimes people do not use lambdas because they fear to introduce a term"
" with a theory behind it.  This proposal makes introducing argumentless "
"lambdas easier, by omitting the \"lambda\" keyword. itself.  "
"Implementation can be done simply changing grammar so it lets the "
"\"lambda\" keyword be implied in a few well-known cases. In particular, "
"adding surrounding brackets lets you specify nullary lambda anywhere."
msgstr ""

#: ../../pep-0312.txt:61
msgid "Syntax"
msgstr ""

#: ../../pep-0312.txt:63
msgid "An argumentless \"lambda\" keyword can be omitted in the following cases:"
msgstr ""

#: ../../pep-0312.txt:66
msgid ""
"immediately after \"=\" in named parameter assignment or default value "
"assignment;"
msgstr ""

#: ../../pep-0312.txt:69
msgid "immediately after \"(\" in any expression;"
msgstr ""

#: ../../pep-0312.txt:71
msgid "immediately after a \",\" in a function argument list;"
msgstr ""

#: ../../pep-0312.txt:73
msgid "immediately after a \":\" in a dictionary literal; (not implemented)"
msgstr ""

#: ../../pep-0312.txt:76
msgid "in an assignment statement; (not implemented)"
msgstr ""

#: ../../pep-0312.txt:80
msgid "Examples of Use"
msgstr ""

#: ../../pep-0312.txt:82
msgid "Inline ``if``::"
msgstr ""

#: ../../pep-0312.txt:99
msgid "Locking::"
msgstr ""

#: ../../pep-0312.txt:112
msgid "Implementation"
msgstr ""

#: ../../pep-0312.txt:114
msgid ""
"Implementation requires some tweaking of the ``Grammar/Grammar`` file in "
"the Python sources, and some adjustment of ``Modules/parsermodule.c`` to "
"make syntactic and pragmatic changes."
msgstr ""

#: ../../pep-0312.txt:118
msgid "(Some grammar/parser guru is needed to make a full implementation.)"
msgstr ""

#: ../../pep-0312.txt:121
msgid "Here are the changes needed to ``Grammar`` to allow implicit lambda::"
msgstr ""

#: ../../pep-0312.txt:138
msgid ""
"Three new non-terminals are needed: ``imptest`` for the place where "
"implicit lambda may occur, ``implambdef`` for the implicit lambda "
"definition itself, ``imptestlist`` for a place where ``imptest``'s may "
"occur."
msgstr ""

#: ../../pep-0312.txt:143
msgid ""
"This implementation is not complete. First, because some files in Parser "
"module need to be updated. Second, some additional places aren't "
"implemented, see Syntax section above."
msgstr ""

#: ../../pep-0312.txt:149
msgid "Discussion"
msgstr ""

#: ../../pep-0312.txt:151
msgid ""
"This feature is not a high-visibility one (the only novel part is the "
"absence of lambda). The feature is intended to make null-ary lambdas more"
" appealing syntactically, to provide lazy evaluation of expressions in "
"some simple cases. This proposal is not targeted at more advanced cases "
"(demanding arguments for the lambda)."
msgstr ""

#: ../../pep-0312.txt:157
msgid ""
"There is an alternative proposition for implicit lambda: implicit lambda "
"with unused arguments. In this case the function defined by such lambda "
"can accept any parameters, i.e. be equivalent to: ``lambda *args: expr``."
" This form would be more powerful.  Grep in the standard library revealed"
" that such lambdas are indeed in use."
msgstr ""

#: ../../pep-0312.txt:163
msgid ""
"One more extension can provide a way to have a list of parameters passed "
"to a function defined by implicit lambda. However, such parameters need "
"some special name to be accessed and are unlikely to be included in the "
"language. Possible local names for such parameters are: ``_``, "
"``__args__``, ``__``. For example::"
msgstr ""

#: ../../pep-0312.txt:173
msgid ""
"These forms do not look very nice, and in the PEP author's opinion do not"
" justify the removal of the lambda keyword in such cases."
msgstr ""

#: ../../pep-0312.txt:178
msgid "Credits"
msgstr ""

#: ../../pep-0312.txt:180
msgid ""
"The idea of dropping lambda was first coined by Paul Rubin at 08 Feb 2003"
" 16:39:30 -0800 in comp.lang.python while discussing the thread \"For "
"review: PEP 308 - If-then-else expression\" [2]_."
msgstr ""

#: ../../pep-0312.txt:186
msgid "References"
msgstr ""

#: ../../pep-0312.txt:188
msgid ""
"Guido van Rossum, Recommend accepting PEP 312 -- Simple Implicit Lambda "
"https://mail.python.org/pipermail/python-dev/2005-June/054304.html"
msgstr ""

#: ../../pep-0312.txt:191
msgid ""
"Guido van Rossum, For review: PEP 308 - If-then-else expression "
"https://mail.python.org/pipermail/python-dev/2003-February/033178.html"
msgstr ""

#: ../../pep-0312.txt:197
msgid "Copyright"
msgstr ""

#: ../../pep-0312.txt:199
msgid "This document has been placed in the public domain."
msgstr ""

