# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0754.txt
msgid "PEP"
msgstr ""

#: ../../pep-0754.txt:1
msgid "754"
msgstr ""

#: ../../pep-0754.txt
msgid "Title"
msgstr ""

#: ../../pep-0754.txt:2
msgid "IEEE 754 Floating Point Special Values"
msgstr ""

#: ../../pep-0754.txt
msgid "Author"
msgstr ""

#: ../../pep-0754.txt:5
msgid "Gregory R. Warnes <gregory_r_warnes@groton.pfizer.com> (Pfizer, Inc.)"
msgstr ""

#: ../../pep-0754.txt
msgid "Status"
msgstr ""

#: ../../pep-0754.txt:6
msgid "Rejected"
msgstr ""

#: ../../pep-0754.txt
msgid "Type"
msgstr ""

#: ../../pep-0754.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0754.txt
msgid "Created"
msgstr ""

#: ../../pep-0754.txt:9
msgid "28-Mar-2003"
msgstr ""

#: ../../pep-0754.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0754.txt:10
msgid "2.3"
msgstr ""

#: ../../pep-0754.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0754.txt:15
msgid "Rejection Notice"
msgstr ""

#: ../../pep-0754.txt:17
msgid ""
"This PEP has been rejected. After sitting open for four years, it has "
"failed to generate sufficient community interest."
msgstr ""

#: ../../pep-0754.txt:20
msgid ""
"Several ideas of this PEP were implemented for Python 2.6. "
"``float('inf')`` and ``repr(float('inf'))`` are now guaranteed to work on"
" every supported platform with IEEE 754 semantics. However the "
"``eval(repr(float('inf')))`` roundtrip is still not supported unless you "
"define inf and nan yourself::"
msgstr ""

#: ../../pep-0754.txt:35
msgid ""
"The math and the sys module also have gained additional features, "
"``sys.float_info``, ``math.isinf``, ``math.isnan``, ``math.copysign``."
msgstr ""

#: ../../pep-0754.txt:40
msgid "Abstract"
msgstr ""

#: ../../pep-0754.txt:42
msgid ""
"This PEP proposes an API and a provides a reference module that generates"
" and tests for IEEE 754 double-precision special values: positive "
"infinity, negative infinity, and not-a-number (NaN)."
msgstr ""

#: ../../pep-0754.txt:48
msgid "Rationale"
msgstr ""

#: ../../pep-0754.txt:50
msgid ""
"The IEEE 754 standard defines a set of binary representations and "
"algorithmic rules for floating point arithmetic.  Included in the "
"standard is a set of constants for representing special values, including"
" positive infinity, negative infinity, and indeterminate or non-numeric "
"results (NaN).  Most modern CPUs implement the IEEE 754 standard, "
"including the (Ultra)SPARC, PowerPC, and x86 processor series."
msgstr ""

#: ../../pep-0754.txt:58
msgid ""
"Currently, the handling of IEEE 754 special values in Python depends on "
"the underlying C library.  Unfortunately, there is little consistency "
"between C libraries in how or whether these values are handled.  For "
"instance, on some systems \"float('Inf')\" will properly return the IEEE "
"754 constant for positive infinity.  On many systems, however, this "
"expression will instead generate an error message."
msgstr ""

#: ../../pep-0754.txt:65
msgid ""
"The output string representation for an IEEE 754 special value also "
"varies by platform.  For example, the expression \"float(1e3000)\", which"
" is large enough to generate an overflow, should return a string "
"representation corresponding to IEEE 754 positive infinity.  Python 2.1.3"
" on x86 Debian Linux returns \"inf\".  On Sparc Solaris 8 with Python "
"2.2.1, this same expression returns \"Infinity\", and on MS-Windows 2000 "
"with Active Python 2.2.1, it returns \"1.#INF\"."
msgstr ""

#: ../../pep-0754.txt:73
msgid ""
"Adding to the confusion, some platforms generate one string on conversion"
" from floating point and accept a different string for conversion to "
"floating point.  On these systems ::"
msgstr ""

#: ../../pep-0754.txt:79
msgid "will generate an error when \"x\" is an IEEE special value."
msgstr ""

#: ../../pep-0754.txt:81
msgid "In the past, some have recommended that programmers use expressions like::"
msgstr ""

#: ../../pep-0754.txt:87
msgid ""
"to obtain positive infinity and not-a-number constants.  However, the "
"first expression generates an error on current Python interpreters.  A "
"possible alternative is to use::"
msgstr ""

#: ../../pep-0754.txt:94
msgid ""
"While this does not generate an error with current Python interpreters, "
"it is still an ugly and potentially non-portable hack. In addition, "
"defining NaN in this way does solve the problem of detecting such values."
"  First, the IEEE 754 standard provides for an entire set of constant "
"values for Not-a-Number.  Second, the standard requires that ::"
msgstr ""

#: ../../pep-0754.txt:103
msgid "for all possible values of X, including NaN.  As a consequence ::"
msgstr ""

#: ../../pep-0754.txt:107
msgid ""
"should always evaluate to false.  However, this behavior also is not "
"consistently implemented.  [e.g. Cygwin Python 2.2.2]"
msgstr ""

#: ../../pep-0754.txt:110
msgid ""
"Due to the many platform and library inconsistencies in handling IEEE "
"special values, it is impossible to consistently set or detect IEEE 754 "
"floating point values in normal Python code without resorting to directly"
" manipulating bit-patterns."
msgstr ""

#: ../../pep-0754.txt:115
msgid ""
"This PEP proposes a standard Python API and provides a reference module "
"implementation which allows for consistent handling of IEEE 754 special "
"values on all supported platforms."
msgstr ""

#: ../../pep-0754.txt:121
msgid "API Definition"
msgstr ""

#: ../../pep-0754.txt:124
msgid "Constants"
msgstr ""

#: ../../pep-0754.txt:127
msgid "NaN"
msgstr ""

#: ../../pep-0754.txt:127
msgid "Non-signalling IEEE 754 \"Not a Number\" value"
msgstr ""

#: ../../pep-0754.txt:130
msgid "PosInf"
msgstr ""

#: ../../pep-0754.txt:130
msgid "IEEE 754 Positive Infinity value"
msgstr ""

#: ../../pep-0754.txt:134
msgid "NegInf"
msgstr ""

#: ../../pep-0754.txt:133
msgid "IEEE 754 Negative Infinity value"
msgstr ""

#: ../../pep-0754.txt:137
msgid "Functions"
msgstr ""

#: ../../pep-0754.txt:140
msgid "isNaN(value)"
msgstr ""

#: ../../pep-0754.txt:140
msgid "Determine if the argument is an IEEE 754 NaN (Not a Number) value."
msgstr ""

#: ../../pep-0754.txt:143
msgid "isPosInf(value)"
msgstr ""

#: ../../pep-0754.txt:143
msgid "Determine if the argument is an IEEE 754 positive infinity value."
msgstr ""

#: ../../pep-0754.txt:146
msgid "isNegInf(value)"
msgstr ""

#: ../../pep-0754.txt:146
msgid "Determine if the argument is an IEEE 754 negative infinity value."
msgstr ""

#: ../../pep-0754.txt:150
msgid "isFinite(value)"
msgstr ""

#: ../../pep-0754.txt:149
msgid ""
"Determine if the argument is a finite IEEE 754 value (i.e., is not NaN, "
"positive, or negative infinity)."
msgstr ""

#: ../../pep-0754.txt:155
msgid "isInf(value)"
msgstr ""

#: ../../pep-0754.txt:153
msgid ""
"Determine if the argument is an infinite IEEE 754 value (positive or "
"negative infinity)"
msgstr ""

#: ../../pep-0754.txt:158
msgid "Example"
msgstr ""

#: ../../pep-0754.txt:160
msgid "(Run under Python 2.2.1 on Solaris 8.)"
msgstr ""

#: ../../pep-0754.txt:180
msgid "Implementation"
msgstr ""

#: ../../pep-0754.txt:182
msgid ""
"The reference implementation is provided in the module \"fpconst\" [1]_, "
"which is written in pure Python by taking advantage of the \"struct\" "
"standard module to directly set or test for the bit patterns that define "
"IEEE 754 special values.  Care has been taken to generate proper results "
"on both big-endian and little-endian machines.  The current "
"implementation is pure Python, but some efficiency could be gained by "
"translating the core routines into C."
msgstr ""

#: ../../pep-0754.txt:190
msgid ""
"Patch 1151323 \"New fpconst module\" [2]_ on SourceForge adds the fpconst"
" module to the Python standard library."
msgstr ""

#: ../../pep-0754.txt:195
msgid "References"
msgstr ""

#: ../../pep-0754.txt:197
msgid ""
"See http://babbage.cs.qc.edu/courses/cs341/IEEE-754references.html for "
"reference material on the IEEE 754 floating point standard."
msgstr ""

#: ../../pep-0754.txt:200
msgid ""
"Further information on the reference package is available at "
"http://research.warnes.net/projects/rzope/fpconst/"
msgstr ""

#: ../../pep-0754.txt:203
msgid "http://sourceforge.net/tracker/?func=detail&aid=1151323&group_id=5470&atid=305470"
msgstr ""

#: ../../pep-0754.txt:208
msgid "Copyright"
msgstr ""

#: ../../pep-0754.txt:210
msgid "This document has been placed in the public domain."
msgstr ""

