# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0008.txt
msgid "PEP"
msgstr ""

#: ../../pep-0008.txt:1
msgid "8"
msgstr ""

#: ../../pep-0008.txt
msgid "Title"
msgstr ""

#: ../../pep-0008.txt:2
msgid "Style Guide for Python Code"
msgstr "Python 代码的风格指南"

#: ../../pep-0008.txt
msgid "Author"
msgstr ""

#: ../../pep-0008.txt:5
msgid ""
"Guido van Rossum <guido@python.org>, Barry Warsaw <barry@python.org>, "
"Nick Coghlan <ncoghlan@gmail.com>"
msgstr ""

#: ../../pep-0008.txt
msgid "Status"
msgstr ""

#: ../../pep-0008.txt:8
msgid "Active"
msgstr ""

#: ../../pep-0008.txt
msgid "Type"
msgstr ""

#: ../../pep-0008.txt:9
msgid "Process"
msgstr ""

#: ../../pep-0008.txt
msgid "Created"
msgstr ""

#: ../../pep-0008.txt:11
msgid "05-Jul-2001"
msgstr ""

#: ../../pep-0008.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0008.txt:12
msgid "05-Jul-2001, 01-Aug-2013"
msgstr ""

#: ../../pep-0008.txt:16
msgid "Introduction"
msgstr "介绍"

#: ../../pep-0008.txt:18
msgid ""
"This document gives coding conventions for the Python code comprising the"
" standard library in the main Python distribution.  Please see the "
"companion informational PEP describing style guidelines for the C code in"
" the C implementation of Python [1]_."
msgstr ""
"这份文件给出了构成 Python 主发行版中标准库的 Python 代码的编码规则。"
"请参阅与之配套的信息性 PEP，它描述了 Python 的 C 实现中 C 代码的风格指南 [1]_。"

#: ../../pep-0008.txt:23
msgid ""
"This document and PEP 257 (Docstring Conventions) were adapted from "
"Guido's original Python Style Guide essay, with some additions from "
"Barry's style guide [2]_."
msgstr ""
"本文档和 PEP 257（文档字符串公约）改编自 Guido 最初的 Python 风格指南文章，并从 Barry 的风格指南中补充了一些内容 [2]_。"

#: ../../pep-0008.txt:27
msgid ""
"This style guide evolves over time as additional conventions are "
"identified and past conventions are rendered obsolete by changes in the "
"language itself."
msgstr ""
"本风格指南随着时间的推移而发展，因为更多的惯例被确定，而过去的惯例因语言本身的变化而变得过时。"

#: ../../pep-0008.txt:31
msgid ""
"Many projects have their own coding style guidelines. In the event of any"
" conflicts, such project-specific guides take precedence for that "
"project."
msgstr ""
"许多项目都有自己的编码风格指南。在有任何冲突的情况下，这种项目特有的指南对该项目来说是优先的。"

#: ../../pep-0008.txt:36
msgid "A Foolish Consistency is the Hobgoblin of Little Minds"
msgstr "愚蠢的一致性是小脑袋里的恶棍"

#: ../../pep-0008.txt:38
msgid ""
"One of Guido's key insights is that code is read much more often than it "
"is written.  The guidelines provided here are intended to improve the "
"readability of code and make it consistent across the wide spectrum of "
"Python code.  As PEP 20 says, \"Readability counts\"."
msgstr ""
"Guido的关键见解之一是，代码被阅读的次数远远多于它被写的次数。"
"这里提供的指南是为了提高代码的可读性，并使其在广泛的 Python 代码中保持一致。"
"正如 PEP 20 所说，“可读性是重要的”。"

#: ../../pep-0008.txt:43
msgid ""
"A style guide is about consistency.  Consistency with this style guide is"
" important.  Consistency within a project is more important. Consistency "
"within one module or function is the most important."
msgstr ""
"风格指南是关于一致性的。与本风格指南保持一致是很重要的。"
"一个项目中的一致性更为重要。一个模块或函数内的一致性是最重要的。"

#: ../../pep-0008.txt:47
msgid ""
"However, know when to be inconsistent -- sometimes style guide "
"recommendations just aren't applicable.  When in doubt, use your best "
"judgment.  Look at other examples and decide what looks best.  And don't "
"hesitate to ask!"
msgstr ""
"然而，要知道什么时候应该不一致 -- 有时风格指南的建议就是不适用。"
"当有疑问时，使用你的最佳判断。看看其他的例子，决定什么看起来最好。而且不要犹豫，要问！"

#: ../../pep-0008.txt:52
msgid ""
"In particular: do not break backwards compatibility just to comply with "
"this PEP!"
msgstr ""
"特别是：不要为了遵守这个 PEP 而破坏向后的兼容性！"

#: ../../pep-0008.txt:55
msgid "Some other good reasons to ignore a particular guideline:"
msgstr "其他一些忽略某项准则的好理由："

#: ../../pep-0008.txt:57
msgid ""
"When applying the guideline would make the code less readable, even for "
"someone who is used to reading code that follows this PEP."
msgstr ""

#: ../../pep-0008.txt:60
msgid ""
"To be consistent with surrounding code that also breaks it (maybe for "
"historic reasons) -- although this is also an opportunity to clean up "
"someone else's mess (in true XP style)."
msgstr ""

#: ../../pep-0008.txt:64
msgid ""
"Because the code in question predates the introduction of the guideline "
"and there is no other reason to be modifying that code."
msgstr ""

#: ../../pep-0008.txt:67
msgid ""
"When the code needs to remain compatible with older versions of Python "
"that don't support the feature recommended by the style guide."
msgstr ""

#: ../../pep-0008.txt:72
msgid "Code Lay-out"
msgstr ""

#: ../../pep-0008.txt:75
msgid "Indentation"
msgstr ""

#: ../../pep-0008.txt:77
msgid "Use 4 spaces per indentation level."
msgstr ""

#: ../../pep-0008.txt:79
msgid ""
"Continuation lines should align wrapped elements either vertically using "
"Python's implicit line joining inside parentheses, brackets and braces, "
"or using a *hanging indent* [#fn-hi]_.  When using a hanging indent the "
"following should be considered; there should be no arguments on the first"
" line and further indentation should be used to clearly distinguish "
"itself as a continuation line::"
msgstr ""

#: ../../pep-0008.txt:117
msgid "The 4-space rule is optional for continuation lines."
msgstr ""

#: ../../pep-0008.txt:119
msgid "Optional::"
msgstr ""

#: ../../pep-0008.txt:128
msgid ""
"When the conditional part of an ``if``-statement is long enough to "
"require that it be written across multiple lines, it's worth noting that "
"the combination of a two character keyword (i.e. ``if``), plus a single "
"space, plus an opening parenthesis creates a natural 4-space indent for "
"the subsequent lines of the multiline conditional.  This can produce a "
"visual conflict with the indented suite of code nested inside the "
"``if``-statement, which would also naturally be indented to 4 spaces.  "
"This PEP takes no explicit position on how (or whether) to further "
"visually distinguish such conditional lines from the nested suite inside "
"the ``if``-statement. Acceptable options in this situation include, but "
"are not limited to::"
msgstr ""

#: ../../pep-0008.txt:156
msgid ""
"(Also see the discussion of whether to break before or after binary "
"operators below.)"
msgstr ""

#: ../../pep-0008.txt:159
msgid ""
"The closing brace/bracket/parenthesis on multiline constructs may either "
"line up under the first non-whitespace character of the last line of "
"list, as in::"
msgstr ""

#: ../../pep-0008.txt:172
msgid ""
"or it may be lined up under the first character of the line that starts "
"the multiline construct, as in::"
msgstr ""

#: ../../pep-0008.txt:185
msgid "Tabs or Spaces?"
msgstr ""

#: ../../pep-0008.txt:187
msgid "Spaces are the preferred indentation method."
msgstr ""

#: ../../pep-0008.txt:189
msgid ""
"Tabs should be used solely to remain consistent with code that is already"
" indented with tabs."
msgstr ""

#: ../../pep-0008.txt:192
msgid "Python disallows mixing tabs and spaces for indentation."
msgstr ""

#: ../../pep-0008.txt:196
msgid "Maximum Line Length"
msgstr ""

#: ../../pep-0008.txt:198
msgid "Limit all lines to a maximum of 79 characters."
msgstr ""

#: ../../pep-0008.txt:200
msgid ""
"For flowing long blocks of text with fewer structural restrictions "
"(docstrings or comments), the line length should be limited to 72 "
"characters."
msgstr ""

#: ../../pep-0008.txt:204
msgid ""
"Limiting the required editor window width makes it possible to have "
"several files open side by side, and works well when using code review "
"tools that present the two versions in adjacent columns."
msgstr ""

#: ../../pep-0008.txt:208
msgid ""
"The default wrapping in most tools disrupts the visual structure of the "
"code, making it more difficult to understand. The limits are chosen to "
"avoid wrapping in editors with the window width set to 80, even if the "
"tool places a marker glyph in the final column when wrapping lines. Some "
"web based tools may not offer dynamic line wrapping at all."
msgstr ""

#: ../../pep-0008.txt:214
msgid ""
"Some teams strongly prefer a longer line length.  For code maintained "
"exclusively or primarily by a team that can reach agreement on this "
"issue, it is okay to increase the line length limit up to 99 characters, "
"provided that comments and docstrings are still wrapped at 72 characters."
msgstr ""

#: ../../pep-0008.txt:220
msgid ""
"The Python standard library is conservative and requires limiting lines "
"to 79 characters (and docstrings/comments to 72)."
msgstr ""

#: ../../pep-0008.txt:223
msgid ""
"The preferred way of wrapping long lines is by using Python's implied "
"line continuation inside parentheses, brackets and braces.  Long lines "
"can be broken over multiple lines by wrapping expressions in parentheses."
" These should be used in preference to using a backslash for line "
"continuation."
msgstr ""

#: ../../pep-0008.txt:229
msgid ""
"Backslashes may still be appropriate at times.  For example, long, "
"multiple ``with``-statements cannot use implicit continuation, so "
"backslashes are acceptable::"
msgstr ""

#: ../../pep-0008.txt:237
msgid ""
"(See the previous discussion on `multiline if-statements`_ for further "
"thoughts on the indentation of such multiline ``with``-statements.)"
msgstr ""

#: ../../pep-0008.txt:240
msgid "Another such case is with ``assert`` statements."
msgstr ""

#: ../../pep-0008.txt:242
msgid "Make sure to indent the continued line appropriately."
msgstr ""

#: ../../pep-0008.txt:245
msgid "Should a Line Break Before or After a Binary Operator?"
msgstr ""

#: ../../pep-0008.txt:247
msgid ""
"For decades the recommended style was to break after binary operators. "
"But this can hurt readability in two ways: the operators tend to get "
"scattered across different columns on the screen, and each operator is "
"moved away from its operand and onto the previous line.  Here, the eye "
"has to do extra work to tell which items are added and which are "
"subtracted::"
msgstr ""

#: ../../pep-0008.txt:262
msgid ""
"To solve this readability problem, mathematicians and their publishers "
"follow the opposite convention.  Donald Knuth explains the traditional "
"rule in his *Computers and Typesetting* series: \"Although formulas "
"within a paragraph always break after binary operations and relations, "
"displayed formulas always break before binary operations\" [3]_."
msgstr ""

#: ../../pep-0008.txt:268
msgid ""
"Following the tradition from mathematics usually results in more readable"
" code::"
msgstr ""

#: ../../pep-0008.txt:279
msgid ""
"In Python code, it is permissible to break before or after a binary "
"operator, as long as the convention is consistent locally.  For new code "
"Knuth's style is suggested."
msgstr ""

#: ../../pep-0008.txt:284
msgid "Blank Lines"
msgstr ""

#: ../../pep-0008.txt:286
msgid "Surround top-level function and class definitions with two blank lines."
msgstr ""

#: ../../pep-0008.txt:289
msgid "Method definitions inside a class are surrounded by a single blank line."
msgstr ""

#: ../../pep-0008.txt:292
msgid ""
"Extra blank lines may be used (sparingly) to separate groups of related "
"functions.  Blank lines may be omitted between a bunch of related one-"
"liners (e.g. a set of dummy implementations)."
msgstr ""

#: ../../pep-0008.txt:296
msgid "Use blank lines in functions, sparingly, to indicate logical sections."
msgstr ""

#: ../../pep-0008.txt:298
msgid ""
"Python accepts the control-L (i.e. ^L) form feed character as whitespace;"
" Many tools treat these characters as page separators, so you may use "
"them to separate pages of related sections of your file. Note, some "
"editors and web-based code viewers may not recognize control-L as a form "
"feed and will show another glyph in its place."
msgstr ""

#: ../../pep-0008.txt:305
msgid "Source File Encoding"
msgstr ""

#: ../../pep-0008.txt:307
msgid ""
"Code in the core Python distribution should always use UTF-8, and should "
"not have an encoding declaration."
msgstr ""

#: ../../pep-0008.txt:310
msgid ""
"In the standard library, non-UTF-8 encodings should be used only for test"
" purposes. Use non-ASCII characters sparingly, preferably only to denote "
"places and human names. If using non-ASCII characters as data, avoid "
"noisy Unicode characters like z̯̯͡a̧͎̺l̡͓̫g̹̲o̡̼̘ and byte order marks."
msgstr ""

#: ../../pep-0008.txt:316
msgid ""
"All identifiers in the Python standard library MUST use ASCII-only "
"identifiers, and SHOULD use English words wherever feasible (in many "
"cases, abbreviations and technical terms are used which aren't English)."
msgstr ""

#: ../../pep-0008.txt:321
msgid ""
"Open source projects with a global audience are encouraged to adopt a "
"similar policy."
msgstr ""

#: ../../pep-0008.txt:325
msgid "Imports"
msgstr ""

#: ../../pep-0008.txt:327
msgid "Imports should usually be on separate lines::"
msgstr ""

#: ../../pep-0008.txt:339
msgid "It's okay to say this though::"
msgstr ""

#: ../../pep-0008.txt:344
msgid ""
"Imports are always put at the top of the file, just after any module "
"comments and docstrings, and before module globals and constants."
msgstr ""

#: ../../pep-0008.txt:347
msgid "Imports should be grouped in the following order:"
msgstr ""

#: ../../pep-0008.txt:349
msgid "Standard library imports."
msgstr ""

#: ../../pep-0008.txt:350
msgid "Related third party imports."
msgstr ""

#: ../../pep-0008.txt:351
msgid "Local application/library specific imports."
msgstr ""

#: ../../pep-0008.txt:353
msgid "You should put a blank line between each group of imports."
msgstr ""

#: ../../pep-0008.txt:355
msgid ""
"Absolute imports are recommended, as they are usually more readable and "
"tend to be better behaved (or at least give better error messages) if the"
" import system is incorrectly configured (such as when a directory inside"
" a package ends up on ``sys.path``)::"
msgstr ""

#: ../../pep-0008.txt:364
msgid ""
"However, explicit relative imports are an acceptable alternative to "
"absolute imports, especially when dealing with complex package layouts "
"where using absolute imports would be unnecessarily verbose::"
msgstr ""

#: ../../pep-0008.txt:371
msgid ""
"Standard library code should avoid complex package layouts and always use"
" absolute imports."
msgstr ""

#: ../../pep-0008.txt:374
msgid ""
"When importing a class from a class-containing module, it's usually okay "
"to spell this::"
msgstr ""

#: ../../pep-0008.txt:380
msgid "If this spelling causes local name clashes, then spell them explicitly::"
msgstr ""

#: ../../pep-0008.txt:385
msgid "and use \"myclass.MyClass\" and \"foo.bar.yourclass.YourClass\"."
msgstr ""

#: ../../pep-0008.txt:387
msgid ""
"Wildcard imports (``from <module> import *``) should be avoided, as they "
"make it unclear which names are present in the namespace, confusing both "
"readers and many automated tools. There is one defensible use case for a "
"wildcard import, which is to republish an internal interface as part of a"
" public API (for example, overwriting a pure Python implementation of an "
"interface with the definitions from an optional accelerator module and "
"exactly which definitions will be overwritten isn't known in advance)."
msgstr ""

#: ../../pep-0008.txt:396
msgid ""
"When republishing names this way, the guidelines below regarding public "
"and internal interfaces still apply."
msgstr ""

#: ../../pep-0008.txt:400
msgid "Module Level Dunder Names"
msgstr ""

#: ../../pep-0008.txt:402
msgid ""
"Module level \"dunders\" (i.e. names with two leading and two trailing "
"underscores) such as ``__all__``, ``__author__``, ``__version__``, etc. "
"should be placed after the module docstring but before any import "
"statements *except* ``from __future__`` imports.  Python mandates that "
"future-imports must appear in the module before any other code except "
"docstrings::"
msgstr ""

#: ../../pep-0008.txt:425
msgid "String Quotes"
msgstr ""

#: ../../pep-0008.txt:427
msgid ""
"In Python, single-quoted strings and double-quoted strings are the same."
"  This PEP does not make a recommendation for this.  Pick a rule and "
"stick to it.  When a string contains single or double quote characters, "
"however, use the other one to avoid backslashes in the string. It "
"improves readability."
msgstr ""

#: ../../pep-0008.txt:433
msgid ""
"For triple-quoted strings, always use double quote characters to be "
"consistent with the docstring convention in PEP 257."
msgstr ""

#: ../../pep-0008.txt:438
msgid "Whitespace in Expressions and Statements"
msgstr ""

#: ../../pep-0008.txt:441
msgid "Pet Peeves"
msgstr ""

#: ../../pep-0008.txt:443
msgid "Avoid extraneous whitespace in the following situations:"
msgstr ""

#: ../../pep-0008.txt:445
msgid "Immediately inside parentheses, brackets or braces::"
msgstr ""

#: ../../pep-0008.txt:455
msgid "Between a trailing comma and a following close parenthesis::"
msgstr ""

#: ../../pep-0008.txt:465
msgid "Immediately before a comma, semicolon, or colon::"
msgstr ""

#: ../../pep-0008.txt:475
msgid ""
"However, in a slice the colon acts like a binary operator, and should "
"have equal amounts on either side (treating it as the operator with the "
"lowest priority).  In an extended slice, both colons must have the same "
"amount of spacing applied.  Exception: when a slice parameter is omitted,"
" the space is omitted::"
msgstr ""

#: ../../pep-0008.txt:496
msgid ""
"Immediately before the open parenthesis that starts the argument list of "
"a function call::"
msgstr ""

#: ../../pep-0008.txt:507
msgid ""
"Immediately before the open parenthesis that starts an indexing or "
"slicing::"
msgstr ""

#: ../../pep-0008.txt:518
msgid ""
"More than one space around an assignment (or other) operator to align it "
"with another::"
msgstr ""

#: ../../pep-0008.txt:534
msgid "Other Recommendations"
msgstr ""

#: ../../pep-0008.txt:536
msgid ""
"Avoid trailing whitespace anywhere.  Because it's usually invisible, it "
"can be confusing: e.g. a backslash followed by a space and a newline does"
" not count as a line continuation marker.  Some editors don't preserve it"
" and many projects (like CPython itself) have pre-commit hooks that "
"reject it."
msgstr ""

#: ../../pep-0008.txt:542
msgid ""
"Always surround these binary operators with a single space on either "
"side: assignment (``=``), augmented assignment (``+=``, ``-=`` etc.), "
"comparisons (``==``, ``<``, ``>``, ``!=``, ``<>``, ``<=``, ``>=``, "
"``in``, ``not in``, ``is``, ``is not``), Booleans (``and``, ``or``, "
"``not``)."
msgstr ""

#: ../../pep-0008.txt:548
msgid ""
"If operators with different priorities are used, consider adding "
"whitespace around the operators with the lowest priority(ies). Use your "
"own judgment; however, never use more than one space, and always have the"
" same amount of whitespace on both sides of a binary operator::"
msgstr ""

#: ../../pep-0008.txt:570
msgid ""
"Function annotations should use the normal rules for colons and always "
"have spaces around the ``->`` arrow if present.  (See `Function "
"Annotations`_ below for more about function annotations.)::"
msgstr ""

#: ../../pep-0008.txt:584
msgid ""
"Don't use spaces around the ``=`` sign when used to indicate a keyword "
"argument, or when used to indicate a default value for an *unannotated* "
"function parameter::"
msgstr ""

#: ../../pep-0008.txt:599
msgid ""
"When combining an argument annotation with a default value, however, do "
"use spaces around the ``=`` sign::"
msgstr ""

#: ../../pep-0008.txt:612
msgid ""
"Compound statements (multiple statements on the same line) are generally "
"discouraged::"
msgstr ""

#: ../../pep-0008.txt:622 ../../pep-0008.txt:632
msgid "Rather not::"
msgstr ""

#: ../../pep-0008.txt:628
msgid ""
"While sometimes it's okay to put an if/for/while with a small body on the"
" same line, never do this for multi-clause statements.  Also avoid "
"folding such long lines!"
msgstr ""

#: ../../pep-0008.txt:639
msgid "Definitely not::"
msgstr ""

#: ../../pep-0008.txt:655
msgid "When to Use Trailing Commas"
msgstr ""

#: ../../pep-0008.txt:657
msgid ""
"Trailing commas are usually optional, except they are mandatory when "
"making a tuple of one element.  For clarity, it is recommended to "
"surround the latter in (technically redundant) parentheses::"
msgstr ""

#: ../../pep-0008.txt:669
msgid ""
"When trailing commas are redundant, they are often helpful when a version"
" control system is used, when a list of values, arguments or imported "
"items is expected to be extended over time.  The pattern is to put each "
"value (etc.) on a line by itself, always adding a trailing comma, and add"
" the close parenthesis/bracket/brace on the next line. However it does "
"not make sense to have a trailing comma on the same line as the closing "
"delimiter (except in the above case of singleton tuples)::"
msgstr ""

#: ../../pep-0008.txt:695
msgid "Comments"
msgstr ""

#: ../../pep-0008.txt:697
msgid ""
"Comments that contradict the code are worse than no comments.  Always "
"make a priority of keeping the comments up-to-date when the code changes!"
msgstr ""

#: ../../pep-0008.txt:701
msgid ""
"Comments should be complete sentences.  The first word should be "
"capitalized, unless it is an identifier that begins with a lower case "
"letter (never alter the case of identifiers!)."
msgstr ""

#: ../../pep-0008.txt:705
msgid ""
"Block comments generally consist of one or more paragraphs built out of "
"complete sentences, with each sentence ending in a period."
msgstr ""

#: ../../pep-0008.txt:708
msgid ""
"You should use two spaces after a sentence-ending period in multi- "
"sentence comments, except after the final sentence."
msgstr ""

#: ../../pep-0008.txt:711
msgid ""
"Ensure that your comments are clear and easily understandable to other "
"speakers of the language you are writing in."
msgstr ""

#: ../../pep-0008.txt:714
#, python-format
msgid ""
"Python coders from non-English speaking countries: please write your "
"comments in English, unless you are 120% sure that the code will never be"
" read by people who don't speak your language."
msgstr ""

#: ../../pep-0008.txt:719
msgid "Block Comments"
msgstr ""

#: ../../pep-0008.txt:721
msgid ""
"Block comments generally apply to some (or all) code that follows them, "
"and are indented to the same level as that code.  Each line of a block "
"comment starts with a ``#`` and a single space (unless it is indented "
"text inside the comment)."
msgstr ""

#: ../../pep-0008.txt:726
msgid ""
"Paragraphs inside a block comment are separated by a line containing a "
"single ``#``."
msgstr ""

#: ../../pep-0008.txt:730
msgid "Inline Comments"
msgstr ""

#: ../../pep-0008.txt:732
msgid "Use inline comments sparingly."
msgstr ""

#: ../../pep-0008.txt:734
msgid ""
"An inline comment is a comment on the same line as a statement. Inline "
"comments should be separated by at least two spaces from the statement.  "
"They should start with a # and a single space."
msgstr ""

#: ../../pep-0008.txt:738
msgid ""
"Inline comments are unnecessary and in fact distracting if they state the"
" obvious.  Don't do this::"
msgstr ""

#: ../../pep-0008.txt:743
msgid "But sometimes, this is useful::"
msgstr ""

#: ../../pep-0008.txt:748
msgid "Documentation Strings"
msgstr ""

#: ../../pep-0008.txt:750
msgid ""
"Conventions for writing good documentation strings (a.k.a. "
"\"docstrings\") are immortalized in PEP 257."
msgstr ""

#: ../../pep-0008.txt:753
msgid ""
"Write docstrings for all public modules, functions, classes, and methods."
"  Docstrings are not necessary for non-public methods, but you should "
"have a comment that describes what the method does.  This comment should "
"appear after the ``def`` line."
msgstr ""

#: ../../pep-0008.txt:758
msgid ""
"PEP 257 describes good docstring conventions.  Note that most "
"importantly, the ``\"\"\"`` that ends a multiline docstring should be on "
"a line by itself::"
msgstr ""

#: ../../pep-0008.txt:767
msgid ""
"For one liner docstrings, please keep the closing ``\"\"\"`` on the same "
"line::"
msgstr ""

#: ../../pep-0008.txt:774
msgid "Naming Conventions"
msgstr ""

#: ../../pep-0008.txt:776
msgid ""
"The naming conventions of Python's library are a bit of a mess, so we'll "
"never get this completely consistent -- nevertheless, here are the "
"currently recommended naming standards.  New modules and packages "
"(including third party frameworks) should be written to these standards, "
"but where an existing library has a different style, internal consistency"
" is preferred."
msgstr ""

#: ../../pep-0008.txt:784
msgid "Overriding Principle"
msgstr ""

#: ../../pep-0008.txt:786
msgid ""
"Names that are visible to the user as public parts of the API should "
"follow conventions that reflect usage rather than implementation."
msgstr ""

#: ../../pep-0008.txt:790
msgid "Descriptive: Naming Styles"
msgstr ""

#: ../../pep-0008.txt:792
msgid ""
"There are a lot of different naming styles.  It helps to be able to "
"recognize what naming style is being used, independently from what they "
"are used for."
msgstr ""

#: ../../pep-0008.txt:796
msgid "The following naming styles are commonly distinguished:"
msgstr ""

#: ../../pep-0008.txt:798
msgid "``b`` (single lowercase letter)"
msgstr ""

#: ../../pep-0008.txt:799
msgid "``B`` (single uppercase letter)"
msgstr ""

#: ../../pep-0008.txt:800
msgid "``lowercase``"
msgstr ""

#: ../../pep-0008.txt:801
msgid "``lower_case_with_underscores``"
msgstr ""

#: ../../pep-0008.txt:802
msgid "``UPPERCASE``"
msgstr ""

#: ../../pep-0008.txt:803
msgid "``UPPER_CASE_WITH_UNDERSCORES``"
msgstr ""

#: ../../pep-0008.txt:804
msgid ""
"``CapitalizedWords`` (or CapWords, or CamelCase -- so named because of "
"the bumpy look of its letters [4]_).  This is also sometimes known as "
"StudlyCaps."
msgstr ""

#: ../../pep-0008.txt:808
msgid ""
"Note: When using acronyms in CapWords, capitalize all the letters of the "
"acronym.  Thus HTTPServerError is better than HttpServerError."
msgstr ""

#: ../../pep-0008.txt:811
msgid ""
"``mixedCase`` (differs from CapitalizedWords by initial lowercase "
"character!)"
msgstr ""

#: ../../pep-0008.txt:813
msgid "``Capitalized_Words_With_Underscores`` (ugly!)"
msgstr ""

#: ../../pep-0008.txt:815
msgid ""
"There's also the style of using a short unique prefix to group related "
"names together.  This is not used much in Python, but it is mentioned for"
" completeness.  For example, the ``os.stat()`` function returns a tuple "
"whose items traditionally have names like ``st_mode``, ``st_size``, "
"``st_mtime`` and so on.  (This is done to emphasize the correspondence "
"with the fields of the POSIX system call struct, which helps programmers "
"familiar with that.)"
msgstr ""

#: ../../pep-0008.txt:823
msgid ""
"The X11 library uses a leading X for all its public functions.  In "
"Python, this style is generally deemed unnecessary because attribute and "
"method names are prefixed with an object, and function names are prefixed"
" with a module name."
msgstr ""

#: ../../pep-0008.txt:828
msgid ""
"In addition, the following special forms using leading or trailing "
"underscores are recognized (these can generally be combined with any case"
" convention):"
msgstr ""

#: ../../pep-0008.txt:832
msgid ""
"``_single_leading_underscore``: weak \"internal use\" indicator. E.g. "
"``from M import *`` does not import objects whose names start with an "
"underscore."
msgstr ""

#: ../../pep-0008.txt:836
msgid ""
"``single_trailing_underscore_``: used by convention to avoid conflicts "
"with Python keyword, e.g. ::"
msgstr ""

#: ../../pep-0008.txt:841
msgid ""
"``__double_leading_underscore``: when naming a class attribute, invokes "
"name mangling (inside class FooBar, ``__boo`` becomes ``_FooBar__boo``; "
"see below)."
msgstr ""

#: ../../pep-0008.txt:845
msgid ""
"``__double_leading_and_trailing_underscore__``: \"magic\" objects or "
"attributes that live in user-controlled namespaces. E.g. ``__init__``, "
"``__import__`` or ``__file__``.  Never invent such names; only use them "
"as documented."
msgstr ""

#: ../../pep-0008.txt:851
msgid "Prescriptive: Naming Conventions"
msgstr ""

#: ../../pep-0008.txt:854
msgid "Names to Avoid"
msgstr ""

#: ../../pep-0008.txt:856
msgid ""
"Never use the characters 'l' (lowercase letter el), 'O' (uppercase letter"
" oh), or 'I' (uppercase letter eye) as single character variable names."
msgstr ""

#: ../../pep-0008.txt:860
msgid ""
"In some fonts, these characters are indistinguishable from the numerals "
"one and zero.  When tempted to use 'l', use 'L' instead."
msgstr ""

#: ../../pep-0008.txt:864
msgid "ASCII Compatibility"
msgstr ""

#: ../../pep-0008.txt:866
msgid ""
"Identifiers used in the standard library must be ASCII compatible as "
"described in the `policy section "
"<https://www.python.org/dev/peps/pep-3131/#policy-specification>`_ of PEP"
" 3131."
msgstr ""

#: ../../pep-0008.txt:872
msgid "Package and Module Names"
msgstr ""

#: ../../pep-0008.txt:874
msgid ""
"Modules should have short, all-lowercase names.  Underscores can be used "
"in the module name if it improves readability.  Python packages should "
"also have short, all-lowercase names, although the use of underscores is "
"discouraged."
msgstr ""

#: ../../pep-0008.txt:879
msgid ""
"When an extension module written in C or C++ has an accompanying Python "
"module that provides a higher level (e.g. more object oriented) "
"interface, the C/C++ module has a leading underscore (e.g. ``_socket``)."
msgstr ""

#: ../../pep-0008.txt:885
msgid "Class Names"
msgstr ""

#: ../../pep-0008.txt:887
msgid "Class names should normally use the CapWords convention."
msgstr ""

#: ../../pep-0008.txt:889
msgid ""
"The naming convention for functions may be used instead in cases where "
"the interface is documented and used primarily as a callable."
msgstr ""

#: ../../pep-0008.txt:892
msgid ""
"Note that there is a separate convention for builtin names: most builtin "
"names are single words (or two words run together), with the CapWords "
"convention used only for exception names and builtin constants."
msgstr ""

#: ../../pep-0008.txt:897
msgid "Type Variable Names"
msgstr ""

#: ../../pep-0008.txt:899
msgid ""
"Names of type variables introduced in PEP 484 should normally use "
"CapWords preferring short names: ``T``, ``AnyStr``, ``Num``. It is "
"recommended to add suffixes ``_co`` or ``_contra`` to the variables used "
"to declare covariant or contravariant behavior correspondingly::"
msgstr ""

#: ../../pep-0008.txt:910
msgid "Exception Names"
msgstr ""

#: ../../pep-0008.txt:912
msgid ""
"Because exceptions should be classes, the class naming convention applies"
" here.  However, you should use the suffix \"Error\" on your exception "
"names (if the exception actually is an error)."
msgstr ""

#: ../../pep-0008.txt:917
msgid "Global Variable Names"
msgstr ""

#: ../../pep-0008.txt:919
msgid ""
"(Let's hope that these variables are meant for use inside one module "
"only.)  The conventions are about the same as those for functions."
msgstr ""

#: ../../pep-0008.txt:922
msgid ""
"Modules that are designed for use via ``from M import *`` should use the "
"``__all__`` mechanism to prevent exporting globals, or use the older "
"convention of prefixing such globals with an underscore (which you might "
"want to do to indicate these globals are \"module non-public\")."
msgstr ""

#: ../../pep-0008.txt:929
msgid "Function and Variable Names"
msgstr ""

#: ../../pep-0008.txt:931
msgid ""
"Function names should be lowercase, with words separated by underscores "
"as necessary to improve readability."
msgstr ""

#: ../../pep-0008.txt:934
msgid "Variable names follow the same convention as function names."
msgstr ""

#: ../../pep-0008.txt:936
msgid ""
"mixedCase is allowed only in contexts where that's already the prevailing"
" style (e.g. threading.py), to retain backwards compatibility."
msgstr ""

#: ../../pep-0008.txt:941
msgid "Function and Method Arguments"
msgstr ""

#: ../../pep-0008.txt:943
msgid "Always use ``self`` for the first argument to instance methods."
msgstr ""

#: ../../pep-0008.txt:945
msgid "Always use ``cls`` for the first argument to class methods."
msgstr ""

#: ../../pep-0008.txt:947
msgid ""
"If a function argument's name clashes with a reserved keyword, it is "
"generally better to append a single trailing underscore rather than use "
"an abbreviation or spelling corruption.  Thus ``class_`` is better than "
"``clss``.  (Perhaps better is to avoid such clashes by using a synonym.)"
msgstr ""

#: ../../pep-0008.txt:954
msgid "Method Names and Instance Variables"
msgstr ""

#: ../../pep-0008.txt:956
msgid ""
"Use the function naming rules: lowercase with words separated by "
"underscores as necessary to improve readability."
msgstr ""

#: ../../pep-0008.txt:959
msgid ""
"Use one leading underscore only for non-public methods and instance "
"variables."
msgstr ""

#: ../../pep-0008.txt:962
msgid ""
"To avoid name clashes with subclasses, use two leading underscores to "
"invoke Python's name mangling rules."
msgstr ""

#: ../../pep-0008.txt:965
msgid ""
"Python mangles these names with the class name: if class Foo has an "
"attribute named ``__a``, it cannot be accessed by ``Foo.__a``.  (An "
"insistent user could still gain access by calling ``Foo._Foo__a``.) "
"Generally, double leading underscores should be used only to avoid name "
"conflicts with attributes in classes designed to be subclassed."
msgstr ""

#: ../../pep-0008.txt:971
msgid "Note: there is some controversy about the use of __names (see below)."
msgstr ""

#: ../../pep-0008.txt:974
msgid "Constants"
msgstr ""

#: ../../pep-0008.txt:976
msgid ""
"Constants are usually defined on a module level and written in all "
"capital letters with underscores separating words.  Examples include "
"``MAX_OVERFLOW`` and ``TOTAL``."
msgstr ""

#: ../../pep-0008.txt:981
msgid "Designing for Inheritance"
msgstr ""

#: ../../pep-0008.txt:983
msgid ""
"Always decide whether a class's methods and instance variables "
"(collectively: \"attributes\") should be public or non-public.  If in "
"doubt, choose non-public; it's easier to make it public later than to "
"make a public attribute non-public."
msgstr ""

#: ../../pep-0008.txt:988
msgid ""
"Public attributes are those that you expect unrelated clients of your "
"class to use, with your commitment to avoid backwards incompatible "
"changes.  Non-public attributes are those that are not intended to be "
"used by third parties; you make no guarantees that non-public attributes "
"won't change or even be removed."
msgstr ""

#: ../../pep-0008.txt:994
msgid ""
"We don't use the term \"private\" here, since no attribute is really "
"private in Python (without a generally unnecessary amount of work)."
msgstr ""

#: ../../pep-0008.txt:997
msgid ""
"Another category of attributes are those that are part of the \"subclass "
"API\" (often called \"protected\" in other languages).  Some classes are "
"designed to be inherited from, either to extend or modify aspects of the "
"class's behavior.  When designing such a class, take care to make "
"explicit decisions about which attributes are public, which are part of "
"the subclass API, and which are truly only to be used by your base class."
msgstr ""

#: ../../pep-0008.txt:1005
msgid "With this in mind, here are the Pythonic guidelines:"
msgstr ""

#: ../../pep-0008.txt:1007
msgid "Public attributes should have no leading underscores."
msgstr ""

#: ../../pep-0008.txt:1009
msgid ""
"If your public attribute name collides with a reserved keyword, append a "
"single trailing underscore to your attribute name.  This is preferable to"
" an abbreviation or corrupted spelling.  (However, notwithstanding this "
"rule, 'cls' is the preferred spelling for any variable or argument which "
"is known to be a class, especially the first argument to a class method.)"
msgstr ""

#: ../../pep-0008.txt:1016
msgid "Note 1: See the argument name recommendation above for class methods."
msgstr ""

#: ../../pep-0008.txt:1018
msgid ""
"For simple public data attributes, it is best to expose just the "
"attribute name, without complicated accessor/mutator methods.  Keep in "
"mind that Python provides an easy path to future enhancement, should you "
"find that a simple data attribute needs to grow functional behavior.  In "
"that case, use properties to hide functional implementation behind simple"
" data attribute access syntax."
msgstr ""

#: ../../pep-0008.txt:1026
msgid ""
"Note 1: Try to keep the functional behavior side-effect free, although "
"side-effects such as caching are generally fine."
msgstr ""

#: ../../pep-0008.txt:1029
msgid ""
"Note 2: Avoid using properties for computationally expensive operations; "
"the attribute notation makes the caller believe that access is "
"(relatively) cheap."
msgstr ""

#: ../../pep-0008.txt:1033
msgid ""
"If your class is intended to be subclassed, and you have attributes that "
"you do not want subclasses to use, consider naming them with double "
"leading underscores and no trailing underscores.  This invokes Python's "
"name mangling algorithm, where the name of the class is mangled into the "
"attribute name.  This helps avoid attribute name collisions should "
"subclasses inadvertently contain attributes with the same name."
msgstr ""

#: ../../pep-0008.txt:1041
msgid ""
"Note 1: Note that only the simple class name is used in the mangled name,"
" so if a subclass chooses both the same class name and attribute name, "
"you can still get name collisions."
msgstr ""

#: ../../pep-0008.txt:1045
msgid ""
"Note 2: Name mangling can make certain uses, such as debugging and "
"``__getattr__()``, less convenient.  However the name mangling algorithm "
"is well documented and easy to perform manually."
msgstr ""

#: ../../pep-0008.txt:1049
msgid ""
"Note 3: Not everyone likes name mangling.  Try to balance the need to "
"avoid accidental name clashes with potential use by advanced callers."
msgstr ""

#: ../../pep-0008.txt:1054
msgid "Public and Internal Interfaces"
msgstr ""

#: ../../pep-0008.txt:1056
msgid ""
"Any backwards compatibility guarantees apply only to public interfaces. "
"Accordingly, it is important that users be able to clearly distinguish "
"between public and internal interfaces."
msgstr ""

#: ../../pep-0008.txt:1060
msgid ""
"Documented interfaces are considered public, unless the documentation "
"explicitly declares them to be provisional or internal interfaces exempt "
"from the usual backwards compatibility guarantees. All undocumented "
"interfaces should be assumed to be internal."
msgstr ""

#: ../../pep-0008.txt:1065
msgid ""
"To better support introspection, modules should explicitly declare the "
"names in their public API using the ``__all__`` attribute. Setting "
"``__all__`` to an empty list indicates that the module has no public API."
msgstr ""

#: ../../pep-0008.txt:1069
msgid ""
"Even with ``__all__`` set appropriately, internal interfaces (packages, "
"modules, classes, functions, attributes or other names) should still be "
"prefixed with a single leading underscore."
msgstr ""

#: ../../pep-0008.txt:1073
msgid ""
"An interface is also considered internal if any containing namespace "
"(package, module or class) is considered internal."
msgstr ""

#: ../../pep-0008.txt:1076
msgid ""
"Imported names should always be considered an implementation detail. "
"Other modules must not rely on indirect access to such imported names "
"unless they are an explicitly documented part of the containing module's "
"API, such as ``os.path`` or a package's ``__init__`` module that exposes "
"functionality from submodules."
msgstr ""

#: ../../pep-0008.txt:1084
msgid "Programming Recommendations"
msgstr ""

#: ../../pep-0008.txt:1086
msgid ""
"Code should be written in a way that does not disadvantage other "
"implementations of Python (PyPy, Jython, IronPython, Cython, Psyco, and "
"such)."
msgstr ""

#: ../../pep-0008.txt:1090
msgid ""
"For example, do not rely on CPython's efficient implementation of in-"
"place string concatenation for statements in the form ``a += b`` or ``a ="
" a + b``.  This optimization is fragile even in CPython (it only works "
"for some types) and isn't present at all in implementations that don't "
"use refcounting.  In performance sensitive parts of the library, the "
"``''.join()`` form should be used instead.  This will ensure that "
"concatenation occurs in linear time across various implementations."
msgstr ""

#: ../../pep-0008.txt:1099
msgid ""
"Comparisons to singletons like None should always be done with ``is`` or "
"``is not``, never the equality operators."
msgstr ""

#: ../../pep-0008.txt:1102
msgid ""
"Also, beware of writing ``if x`` when you really mean ``if x is not "
"None`` -- e.g. when testing whether a variable or argument that defaults "
"to None was set to some other value.  The other value might have a type "
"(such as a container) that could be false in a boolean context!"
msgstr ""

#: ../../pep-0008.txt:1108
msgid ""
"Use ``is not`` operator rather than ``not ... is``.  While both "
"expressions are functionally identical, the former is more readable and "
"preferred::"
msgstr ""

#: ../../pep-0008.txt:1120
msgid ""
"When implementing ordering operations with rich comparisons, it is best "
"to implement all six operations (``__eq__``, ``__ne__``, ``__lt__``, "
"``__le__``, ``__gt__``, ``__ge__``) rather than relying on other code to "
"only exercise a particular comparison."
msgstr ""

#: ../../pep-0008.txt:1125
msgid ""
"To minimize the effort involved, the ``functools.total_ordering()`` "
"decorator provides a tool to generate missing comparison methods."
msgstr ""

#: ../../pep-0008.txt:1128
msgid ""
"PEP 207 indicates that reflexivity rules *are* assumed by Python. Thus, "
"the interpreter may swap ``y > x`` with ``x < y``, ``y >= x`` with ``x <="
" y``, and may swap the arguments of ``x == y`` and ``x != y``.  The "
"``sort()`` and ``min()`` operations are guaranteed to use the ``<`` "
"operator and the ``max()`` function uses the ``>`` operator.  However, it"
" is best to implement all six operations so that confusion doesn't arise "
"in other contexts."
msgstr ""

#: ../../pep-0008.txt:1136
msgid ""
"Always use a def statement instead of an assignment statement that binds "
"a lambda expression directly to an identifier::"
msgstr ""

#: ../../pep-0008.txt:1147
msgid ""
"The first form means that the name of the resulting function object is "
"specifically 'f' instead of the generic '<lambda>'. This is more useful "
"for tracebacks and string representations in general. The use of the "
"assignment statement eliminates the sole benefit a lambda expression can "
"offer over an explicit def statement (i.e. that it can be embedded inside"
" a larger expression)"
msgstr ""

#: ../../pep-0008.txt:1154
msgid ""
"Derive exceptions from ``Exception`` rather than ``BaseException``. "
"Direct inheritance from ``BaseException`` is reserved for exceptions "
"where catching them is almost always the wrong thing to do."
msgstr ""

#: ../../pep-0008.txt:1158
msgid ""
"Design exception hierarchies based on the distinctions that code "
"*catching* the exceptions is likely to need, rather than the locations "
"where the exceptions are raised. Aim to answer the question \"What went "
"wrong?\" programmatically, rather than only stating that \"A problem "
"occurred\" (see PEP 3151 for an example of this lesson being learned for "
"the builtin exception hierarchy)"
msgstr ""

#: ../../pep-0008.txt:1165
msgid ""
"Class naming conventions apply here, although you should add the suffix "
"\"Error\" to your exception classes if the exception is an error.  Non-"
"error exceptions that are used for non-local flow control or other forms "
"of signaling need no special suffix."
msgstr ""

#: ../../pep-0008.txt:1170
msgid ""
"Use exception chaining appropriately. ``raise X from Y`` should be used "
"to indicate explicit replacement without losing the original traceback."
msgstr ""

#: ../../pep-0008.txt:1174
msgid ""
"When deliberately replacing an inner exception (using ``raise X from "
"None``), ensure that relevant details are transferred to the new "
"exception (such as preserving the attribute name when converting KeyError"
" to AttributeError, or embedding the text of the original exception in "
"the new exception message)."
msgstr ""

#: ../../pep-0008.txt:1180
msgid ""
"When catching exceptions, mention specific exceptions whenever possible "
"instead of using a bare ``except:`` clause::"
msgstr ""

#: ../../pep-0008.txt:1188
msgid ""
"A bare ``except:`` clause will catch SystemExit and KeyboardInterrupt "
"exceptions, making it harder to interrupt a program with Control-C, and "
"can disguise other problems.  If you want to catch all exceptions that "
"signal program errors, use ``except Exception:`` (bare except is "
"equivalent to ``except BaseException:``)."
msgstr ""

#: ../../pep-0008.txt:1195
msgid ""
"A good rule of thumb is to limit use of bare 'except' clauses to two "
"cases:"
msgstr ""

#: ../../pep-0008.txt:1198
msgid ""
"If the exception handler will be printing out or logging the traceback; "
"at least the user will be aware that an error has occurred."
msgstr ""

#: ../../pep-0008.txt:1202
msgid ""
"If the code needs to do some cleanup work, but then lets the exception "
"propagate upwards with ``raise``.  ``try...finally`` can be a better way "
"to handle this case."
msgstr ""

#: ../../pep-0008.txt:1206
msgid ""
"When catching operating system errors, prefer the explicit exception "
"hierarchy introduced in Python 3.3 over introspection of ``errno`` "
"values."
msgstr ""

#: ../../pep-0008.txt:1210
msgid ""
"Additionally, for all try/except clauses, limit the ``try`` clause to the"
" absolute minimum amount of code necessary.  Again, this avoids masking "
"bugs::"
msgstr ""

#: ../../pep-0008.txt:1232
msgid ""
"When a resource is local to a particular section of code, use a ``with`` "
"statement to ensure it is cleaned up promptly and reliably after use. A "
"try/finally statement is also acceptable."
msgstr ""

#: ../../pep-0008.txt:1236
msgid ""
"Context managers should be invoked through separate functions or methods "
"whenever they do something other than acquire and release resources::"
msgstr ""

#: ../../pep-0008.txt:1249
msgid ""
"The latter example doesn't provide any information to indicate that the "
"``__enter__`` and ``__exit__`` methods are doing something other than "
"closing the connection after a transaction.  Being explicit is important "
"in this case."
msgstr ""

#: ../../pep-0008.txt:1254
msgid ""
"Be consistent in return statements.  Either all return statements in a "
"function should return an expression, or none of them should.  If any "
"return statement returns an expression, any return statements where no "
"value is returned should explicitly state this as ``return None``, and an"
" explicit return statement should be present at the end of the function "
"(if reachable)::"
msgstr ""

#: ../../pep-0008.txt:1287
msgid ""
"Use ``''.startswith()`` and ``''.endswith()`` instead of string slicing "
"to check for prefixes or suffixes."
msgstr ""

#: ../../pep-0008.txt:1290
msgid "startswith() and endswith() are cleaner and less error prone::"
msgstr ""

#: ../../pep-0008.txt:1300
msgid ""
"Object type comparisons should always use isinstance() instead of "
"comparing types directly::"
msgstr ""

#: ../../pep-0008.txt:1311
msgid ""
"For sequences, (strings, lists, tuples), use the fact that empty "
"sequences are false::"
msgstr ""

#: ../../pep-0008.txt:1324
msgid ""
"Don't write string literals that rely on significant trailing whitespace."
"  Such trailing whitespace is visually indistinguishable and some editors"
" (or more recently, reindent.py) will trim them."
msgstr ""

#: ../../pep-0008.txt:1328
msgid "Don't compare boolean values to True or False using ``==``::"
msgstr ""

#: ../../pep-0008.txt:1338
msgid "Worse::"
msgstr ""

#: ../../pep-0008.txt:1343
msgid ""
"Use of the flow control statements ``return``/``break``/``continue`` "
"within the finally suite of a ``try...finally``, where the flow control "
"statement would jump outside the finally suite, is discouraged.  This is "
"because such statements will implicitly cancel any active exception that "
"is propagating through the finally suite::"
msgstr ""

#: ../../pep-0008.txt:1357
msgid "Function Annotations"
msgstr ""

#: ../../pep-0008.txt:1359
msgid ""
"With the acceptance of PEP 484, the style rules for function annotations "
"have changed."
msgstr ""

#: ../../pep-0008.txt:1362
msgid ""
"Function annotations should use PEP 484 syntax (There are some formatting"
" recommendations for annotations in the previous section)."
msgstr ""

#: ../../pep-0008.txt:1365
msgid ""
"The experimentation with annotation styles that was recommended "
"previously in this PEP is no longer encouraged."
msgstr ""

#: ../../pep-0008.txt:1368
msgid ""
"However, outside the stdlib, experiments within the rules of PEP 484 are "
"now encouraged.  For example, marking up a large third party library or "
"application with PEP 484 style type annotations, reviewing how easy it "
"was to add those annotations, and observing whether their presence "
"increases code understandability."
msgstr ""

#: ../../pep-0008.txt:1374
msgid ""
"The Python standard library should be conservative in adopting such "
"annotations, but their use is allowed for new code and for big "
"refactorings."
msgstr ""

#: ../../pep-0008.txt:1378
msgid ""
"For code that wants to make a different use of function annotations it is"
" recommended to put a comment of the form::"
msgstr ""

#: ../../pep-0008.txt:1383
msgid ""
"near the top of the file; this tells type checkers to ignore all "
"annotations.  (More fine-grained ways of disabling complaints from type "
"checkers can be found in PEP 484.)"
msgstr ""

#: ../../pep-0008.txt:1387
msgid ""
"Like linters, type checkers are optional, separate tools.  Python "
"interpreters by default should not issue any messages due to type "
"checking and should not alter their behavior based on annotations."
msgstr ""

#: ../../pep-0008.txt:1391
msgid ""
"Users who don't want to use type checkers are free to ignore them. "
"However, it is expected that users of third party library packages may "
"want to run type checkers over those packages.  For this purpose PEP 484 "
"recommends the use of stub files: .pyi files that are read by the type "
"checker in preference of the corresponding .py files. Stub files can be "
"distributed with a library, or separately (with the library author's "
"permission) through the typeshed repo [5]_."
msgstr ""

#: ../../pep-0008.txt:1401
msgid "Variable Annotations"
msgstr ""

#: ../../pep-0008.txt:1403
msgid ""
"PEP 526 introduced variable annotations. The style recommendations for "
"them are similar to those on function annotations described above:"
msgstr ""

#: ../../pep-0008.txt:1406
msgid ""
"Annotations for module level variables, class and instance variables, and"
" local variables should have a single space after the colon."
msgstr ""

#: ../../pep-0008.txt:1409
msgid "There should be no space before the colon."
msgstr ""

#: ../../pep-0008.txt:1411
msgid ""
"If an assignment has a right hand side, then the equality sign should "
"have exactly one space on both sides::"
msgstr ""

#: ../../pep-0008.txt:1432
msgid ""
"Although the PEP 526 is accepted for Python 3.6, the variable annotation "
"syntax is the preferred syntax for stub files on all versions of Python "
"(see PEP 484 for details)."
msgstr ""

#: ../../pep-0008.txt:1437
msgid "Footnotes"
msgstr ""

#: ../../pep-0008.txt:1438
msgid ""
"*Hanging indentation* is a type-setting style where all the lines in a "
"paragraph are indented except the first line.  In the context of Python, "
"the term is used to describe a style where the opening parenthesis of a "
"parenthesized statement is the last non-whitespace character of the line,"
" with subsequent lines being indented until the closing parenthesis."
msgstr ""

#: ../../pep-0008.txt:1447
msgid "References"
msgstr ""

#: ../../pep-0008.txt:1449
msgid "PEP 7, Style Guide for C Code, van Rossum"
msgstr ""

#: ../../pep-0008.txt:1451
msgid ""
"Barry's GNU Mailman style guide "
"http://barry.warsaw.us/software/STYLEGUIDE.txt"
msgstr ""

#: ../../pep-0008.txt:1454
msgid "Donald Knuth's *The TeXBook*, pages 195 and 196."
msgstr ""

#: ../../pep-0008.txt:1456
msgid "http://www.wikipedia.com/wiki/CamelCase"
msgstr ""

#: ../../pep-0008.txt:1458
msgid "Typeshed repo https://github.com/python/typeshed"
msgstr ""

#: ../../pep-0008.txt:1464
msgid "Copyright"
msgstr "版权声明"

#: ../../pep-0008.txt:1466
msgid "This document has been placed in the public domain."
msgstr "本文档已被置于公共领域。"

