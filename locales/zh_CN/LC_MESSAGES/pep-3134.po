# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-3134.txt
msgid "PEP"
msgstr ""

#: ../../pep-3134.txt:1
msgid "3134"
msgstr ""

#: ../../pep-3134.txt
msgid "Title"
msgstr ""

#: ../../pep-3134.txt:2
msgid "Exception Chaining and Embedded Tracebacks"
msgstr ""

#: ../../pep-3134.txt
msgid "Author"
msgstr ""

#: ../../pep-3134.txt:5
msgid "Ka-Ping Yee"
msgstr ""

#: ../../pep-3134.txt
msgid "Status"
msgstr ""

#: ../../pep-3134.txt:6
msgid "Final"
msgstr ""

#: ../../pep-3134.txt
msgid "Type"
msgstr ""

#: ../../pep-3134.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-3134.txt
msgid "Created"
msgstr ""

#: ../../pep-3134.txt:9
msgid "12-May-2005"
msgstr ""

#: ../../pep-3134.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-3134.txt:10
msgid "3.0"
msgstr ""

#: ../../pep-3134.txt
msgid "Post-History"
msgstr ""

#: ../../pep-3134.txt:15
msgid "Numbering Note"
msgstr ""

#: ../../pep-3134.txt:17
msgid ""
"This PEP started its life as PEP 344.  Since it is now targeted for "
"Python 3000, it has been moved into the 3xxx space."
msgstr ""

#: ../../pep-3134.txt:22
msgid "Abstract"
msgstr ""

#: ../../pep-3134.txt:24
msgid ""
"This PEP proposes three standard attributes on exception instances: the "
"``__context__`` attribute for implicitly chained exceptions, the "
"``__cause__`` attribute for explicitly chained exceptions, and the "
"``__traceback__`` attribute for the traceback.  A new ``raise ... from`` "
"statement sets the ``__cause__`` attribute."
msgstr ""

#: ../../pep-3134.txt:32
msgid "Motivation"
msgstr ""

#: ../../pep-3134.txt:34
msgid ""
"During the handling of one exception (exception A), it is possible that "
"another exception (exception B) may occur.  In today's Python (version "
"2.4), if this happens, exception B is propagated outward and exception A "
"is lost.  In order to debug the problem, it is useful to know about both "
"exceptions.  The ``__context__`` attribute retains this information "
"automatically."
msgstr ""

#: ../../pep-3134.txt:40
msgid ""
"Sometimes it can be useful for an exception handler to intentionally re-"
"raise an exception, either to provide extra information or to translate "
"an exception to another type.  The ``__cause__`` attribute provides an "
"explicit way to record the direct cause of an exception."
msgstr ""

#: ../../pep-3134.txt:45
msgid ""
"In today's Python implementation, exceptions are composed of three parts:"
" the type, the value, and the traceback.  The ``sys`` module, exposes the"
" current exception in three parallel variables, ``exc_type``, "
"``exc_value``, and ``exc_traceback``, the ``sys.exc_info()`` function "
"returns a tuple of these three parts, and the ``raise`` statement has a "
"three-argument form accepting these three parts.  Manipulating exceptions"
" often requires passing these three things in parallel, which can be "
"tedious and error-prone.  Additionally, the ``except`` statement can only"
" provide access to the value, not the traceback. Adding the "
"``__traceback__`` attribute to exception values makes all the exception "
"information accessible from a single place."
msgstr ""

#: ../../pep-3134.txt:58
msgid "History"
msgstr ""

#: ../../pep-3134.txt:60
msgid ""
"Raymond Hettinger [1]_ raised the issue of masked exceptions on Python-"
"Dev in January 2003 and proposed a ``PyErr_FormatAppend()`` function that"
" C modules could use to augment the currently active exception with more "
"information. Brett Cannon [2]_ brought up chained exceptions again in "
"June 2003, prompting a long discussion."
msgstr ""

#: ../../pep-3134.txt:66
msgid ""
"Greg Ewing [3]_ identified the case of an exception occurring in a "
"``finally`` block during unwinding triggered by an original exception, as"
" distinct from the case of an exception occurring in an ``except`` block "
"that is handling the original exception."
msgstr ""

#: ../../pep-3134.txt:71
msgid ""
"Greg Ewing [4]_ and Guido van Rossum [5]_, and probably others, have "
"previously mentioned adding a traceback attribute to Exception instances."
" This is noted in PEP 3000."
msgstr ""

#: ../../pep-3134.txt:75
msgid ""
"This PEP was motivated by yet another recent Python-Dev reposting of the "
"same ideas [6]_ [7]_."
msgstr ""

#: ../../pep-3134.txt:80
msgid "Rationale"
msgstr ""

#: ../../pep-3134.txt:82
msgid ""
"The Python-Dev discussions revealed interest in exception chaining for "
"two quite different purposes.  To handle the unexpected raising of a "
"secondary exception, the exception must be retained implicitly. To "
"support intentional translation of an exception, there must be a way to "
"chain exceptions explicitly.  This PEP addresses both."
msgstr ""

#: ../../pep-3134.txt:88
msgid ""
"Several attribute names for chained exceptions have been suggested on "
"Python-Dev [2]_, including ``cause``, ``antecedent``, ``reason``, "
"``original``, ``chain``, ``chainedexc``, ``exc_chain``, ``excprev``, "
"``previous``, and ``precursor``.  For an explicitly chained exception, "
"this PEP suggests ``__cause__`` because of its specific meaning.  For an "
"implicitly chained exception, this PEP proposes the name ``__context__`` "
"because the intended meaning is more specific than temporal precedence "
"but less specific than causation: an exception occurs in the context of "
"handling another exception."
msgstr ""

#: ../../pep-3134.txt:97
msgid ""
"This PEP suggests names with leading and trailing double-underscores for "
"these three attributes because they are set by the Python VM. Only in "
"very special cases should they be set by normal assignment."
msgstr ""

#: ../../pep-3134.txt:101
msgid ""
"This PEP handles exceptions that occur during ``except`` blocks and "
"``finally`` blocks in the same way.  Reading the traceback makes it clear"
" where the exceptions occurred, so additional mechanisms for "
"distinguishing the two cases would only add unnecessary complexity."
msgstr ""

#: ../../pep-3134.txt:106
msgid ""
"This PEP proposes that the outermost exception object (the one exposed "
"for matching by ``except`` clauses) be the most recently raised exception"
" for compatibility with current behaviour."
msgstr ""

#: ../../pep-3134.txt:110
msgid ""
"This PEP proposes that tracebacks display the outermost exception last, "
"because this would be consistent with the chronological order of "
"tracebacks (from oldest to most recent frame) and because the actual "
"thrown exception is easier to find on the last line."
msgstr ""

#: ../../pep-3134.txt:115
msgid ""
"To keep things simpler, the C API calls for setting an exception will not"
" automatically set the exception's ``__context__``.  Guido van Rossum has"
" expressed concerns with making such changes [8]_."
msgstr ""

#: ../../pep-3134.txt:119
msgid ""
"As for other languages, Java and Ruby both discard the original exception"
" when another exception occurs in a ``catch``/``rescue`` or "
"``finally``/``ensure`` clause.  Perl 5 lacks built-in structured "
"exception handling.  For Perl 6, RFC number 88 [9]_ proposes an exception"
" mechanism that implicitly retains chained exceptions in an array named "
"``@@``.  In that RFC, the most recently raised exception is exposed for "
"matching, as in this PEP; also, arbitrary expressions (possibly involving"
" ``@@``) can be evaluated for exception matching."
msgstr ""

#: ../../pep-3134.txt:127
msgid ""
"Exceptions in C# contain a read-only ``InnerException`` property that may"
" point to another exception.  Its documentation [10]_ says that \"When an"
" exception X is thrown as a direct result of a previous exception Y, the "
"``InnerException`` property of X should contain a reference to Y.\"  This"
" property is not set by the VM automatically; rather, all exception "
"constructors take an optional ``innerException`` argument to set it "
"explicitly.  The ``__cause__`` attribute fulfills the same purpose as "
"``InnerException``, but this PEP proposes a new form of ``raise`` rather "
"than extending the constructors of all exceptions. C# also provides a "
"``GetBaseException`` method that jumps directly to the end of the "
"``InnerException`` chain; this PEP proposes no analog."
msgstr ""

#: ../../pep-3134.txt:138
msgid ""
"The reason all three of these attributes are presented together in one "
"proposal is that the ``__traceback__`` attribute provides convenient "
"access to the traceback on chained exceptions."
msgstr ""

#: ../../pep-3134.txt:144
msgid "Implicit Exception Chaining"
msgstr ""

#: ../../pep-3134.txt:146
msgid "Here is an example to illustrate the ``__context__`` attribute::"
msgstr ""

#: ../../pep-3134.txt:159
msgid ""
"Calling ``compute(0, 0)`` causes a ``ZeroDivisionError``.  The "
"``compute()`` function catches this exception and calls ``log(exc)``, but"
" the ``log()`` function also raises an exception when it tries to write "
"to a file that wasn't opened for writing."
msgstr ""

#: ../../pep-3134.txt:164
msgid ""
"In today's Python, the caller of ``compute()`` gets thrown an "
"``IOError``. The ``ZeroDivisionError`` is lost.  With the proposed "
"change, the instance of ``IOError`` has an additional ``__context__`` "
"attribute that retains the ``ZeroDivisionError``."
msgstr ""

#: ../../pep-3134.txt:169
msgid ""
"The following more elaborate example demonstrates the handling of a "
"mixture of ``finally`` and ``except`` clauses::"
msgstr ""

#: ../../pep-3134.txt:194
msgid ""
"Calling ``main()`` with the name of an existing file will trigger four "
"exceptions.  The ultimate result will be an ``AttributeError`` due to the"
" misspelling of ``clos``, whose ``__context__`` points to a ``NameError``"
" due to the misspelling of ``ex``, whose ``__context__`` points to an "
"``IOError`` due to the file being read-only, whose ``__context__`` points"
" to a ``ZeroDivisionError``, whose ``__context__`` attribute is ``None``."
msgstr ""

#: ../../pep-3134.txt:201 ../../pep-3134.txt:284
msgid "The proposed semantics are as follows:"
msgstr ""

#: ../../pep-3134.txt:203
msgid "Each thread has an exception context initially set to ``None``."
msgstr ""

#: ../../pep-3134.txt:205
msgid ""
"Whenever an exception is raised, if the exception instance does not "
"already have a ``__context__`` attribute, the interpreter sets it equal "
"to the thread's exception context."
msgstr ""

#: ../../pep-3134.txt:209
msgid ""
"Immediately after an exception is raised, the thread's exception context "
"is set to the exception."
msgstr ""

#: ../../pep-3134.txt:212
msgid ""
"Whenever the interpreter exits an ``except`` block by reaching the end or"
" executing a ``return``, ``yield``, ``continue``, or ``break`` statement,"
" the thread's exception context is set to ``None``."
msgstr ""

#: ../../pep-3134.txt:218
msgid "Explicit Exception Chaining"
msgstr ""

#: ../../pep-3134.txt:220
msgid ""
"The ``__cause__`` attribute on exception objects is always initialized to"
" ``None``.  It is set by a new form of the ``raise`` statement::"
msgstr ""

#: ../../pep-3134.txt:225
msgid "which is equivalent to::"
msgstr ""

#: ../../pep-3134.txt:231
msgid ""
"In the following example, a database provides implementations for a few "
"different kinds of storage, with file storage as one kind.  The database "
"designer wants errors to propagate as ``DatabaseError`` objects so that "
"the client doesn't have to be aware of the storage-specific details, but "
"doesn't want to lose the underlying error information."
msgstr ""

#: ../../pep-3134.txt:249
msgid ""
"If the call to ``open()`` raises an exception, the problem will be "
"reported as a ``DatabaseError``, with a ``__cause__`` attribute that "
"reveals the ``IOError`` as the original cause."
msgstr ""

#: ../../pep-3134.txt:255
msgid "Traceback Attribute"
msgstr ""

#: ../../pep-3134.txt:257
msgid "The following example illustrates the ``__traceback__`` attribute."
msgstr ""

#: ../../pep-3134.txt:278
msgid ""
"In today's Python, the ``do_logged()`` function would have to extract the"
" traceback from ``sys.exc_traceback`` or ``sys.exc_info()`` [2]_ and pass"
" both the value and the traceback to ``write_exception()``.  With the "
"proposed change, ``write_exception()`` simply gets one argument and "
"obtains the exception using the ``__traceback__`` attribute."
msgstr ""

#: ../../pep-3134.txt:286
msgid ""
"Whenever an exception is caught, if the exception instance does not "
"already have a ``__traceback__`` attribute, the interpreter sets it to "
"the newly caught traceback."
msgstr ""

#: ../../pep-3134.txt:292
msgid "Enhanced Reporting"
msgstr ""

#: ../../pep-3134.txt:294
msgid ""
"The default exception handler will be modified to report chained "
"exceptions. The chain of exceptions is traversed by following the "
"``__cause__`` and ``__context__`` attributes, with ``__cause__`` taking "
"priority.  In keeping with the chronological order of tracebacks, the "
"most recently raised exception is displayed last; that is, the display "
"begins with the description of the innermost exception and backs up the "
"chain to the outermost exception.  The tracebacks are formatted as usual,"
" with one of the lines::"
msgstr ""

#: ../../pep-3134.txt:304
msgid "or"
msgstr ""

#: ../../pep-3134.txt:310
msgid ""
"between tracebacks, depending whether they are linked by ``__cause__`` or"
" ``__context__`` respectively.  Here is a sketch of the procedure::"
msgstr ""

#: ../../pep-3134.txt:322
msgid ""
"In the ``traceback`` module, the ``format_exception``, "
"``print_exception``, ``print_exc``, and ``print_last`` functions will be "
"updated to accept an optional ``chain`` argument, ``True`` by default.  "
"When this argument is ``True``, these functions will format or display "
"the entire chain of exceptions as just described.  When it is ``False``, "
"these functions will format or display only the outermost exception."
msgstr ""

#: ../../pep-3134.txt:329
msgid ""
"The ``cgitb`` module should also be updated to display the entire chain "
"of exceptions."
msgstr ""

#: ../../pep-3134.txt:334
msgid "C API"
msgstr ""

#: ../../pep-3134.txt:336
msgid ""
"The ``PyErr_Set*`` calls for setting exceptions will not set the "
"``__context__`` attribute on exceptions.  ``PyErr_NormalizeException`` "
"will always set the ``traceback`` attribute to its ``tb`` argument and "
"the ``__context__`` and ``__cause__`` attributes to ``None``."
msgstr ""

#: ../../pep-3134.txt:341
msgid ""
"A new API function, ``PyErr_SetContext(context)``, will help C "
"programmers provide chained exception information.  This function will "
"first normalize the current exception so it is an instance, then set its "
"``__context__`` attribute. A similar API function, "
"``PyErr_SetCause(cause)``, will set the ``__cause__`` attribute."
msgstr ""

#: ../../pep-3134.txt:349
msgid "Compatibility"
msgstr ""

#: ../../pep-3134.txt:351
msgid ""
"Chained exceptions expose the type of the most recent exception, so they "
"will still match the same ``except`` clauses as they do now."
msgstr ""

#: ../../pep-3134.txt:354
msgid ""
"The proposed changes should not break any code unless it sets or uses "
"attributes named ``__context__``, ``__cause__``, or ``__traceback__`` on "
"exception instances.  As of 2005-05-12, the Python standard library "
"contains no mention of such attributes."
msgstr ""

#: ../../pep-3134.txt:361
msgid "Open Issue:  Extra Information"
msgstr ""

#: ../../pep-3134.txt:363
msgid ""
"Walter Dörwald [11]_ expressed a desire to attach extra information to an"
" exception during its upward propagation without changing its type.  This"
" could be a useful feature, but it is not addressed by this PEP.  It "
"could conceivably be addressed by a separate PEP establishing conventions"
" for other informational attributes on exceptions."
msgstr ""

#: ../../pep-3134.txt:371
msgid "Open Issue:  Suppressing Context"
msgstr ""

#: ../../pep-3134.txt:373
msgid ""
"As written, this PEP makes it impossible to suppress ``__context__``, "
"since setting ``exc.__context__`` to ``None`` in an ``except`` or "
"``finally`` clause will only result in it being set again when ``exc`` is"
" raised."
msgstr ""

#: ../../pep-3134.txt:379
msgid "Open Issue:  Limiting Exception Types"
msgstr ""

#: ../../pep-3134.txt:381
msgid ""
"To improve encapsulation, library implementors may want to wrap all "
"implementation-level exceptions with an application-level exception. One "
"could try to wrap exceptions by writing this::"
msgstr ""

#: ../../pep-3134.txt:391
msgid "or this::"
msgstr ""

#: ../../pep-3134.txt:398
msgid ""
"but both are somewhat flawed.  It would be nice to be able to name the "
"current exception in a catch-all ``except`` clause, but that isn't "
"addressed here. Such a feature would allow something like this::"
msgstr ""

#: ../../pep-3134.txt:409
msgid "Open Issue:  yield"
msgstr ""

#: ../../pep-3134.txt:411
msgid ""
"The exception context is lost when a ``yield`` statement is executed; "
"resuming the frame after the ``yield`` does not restore the context. "
"Addressing this problem is out of the scope of this PEP; it is not a new "
"problem, as demonstrated by the following example::"
msgstr ""

#: ../../pep-3134.txt:432
msgid "Open Issue:  Garbage Collection"
msgstr ""

#: ../../pep-3134.txt:434
msgid ""
"The strongest objection to this proposal has been that it creates cycles "
"between exceptions and stack frames [12]_.  Collection of cyclic garbage "
"(and therefore resource release) can be greatly delayed."
msgstr ""

#: ../../pep-3134.txt:445
msgid ""
"will introduce a cycle from err -> traceback -> stack frame -> err, "
"keeping all locals in the same scope alive until the next GC happens."
msgstr ""

#: ../../pep-3134.txt:448
msgid ""
"Today, these locals would go out of scope.  There is lots of code which "
"assumes that \"local\" resources -- particularly open files -- will be "
"closed quickly. If closure has to wait for the next GC, a program (which "
"runs fine today) may run out of file handles."
msgstr ""

#: ../../pep-3134.txt:453
msgid ""
"Making the ``__traceback__`` attribute a weak reference would avoid the "
"problems with cyclic garbage.  Unfortunately, it would make saving the "
"``Exception`` for later (as ``unittest`` does) more awkward, and it would"
" not allow as much cleanup of the ``sys`` module."
msgstr ""

#: ../../pep-3134.txt:458
msgid ""
"A possible alternate solution, suggested by Adam Olsen, would be to "
"instead turn the reference from the stack frame to the ``err`` variable "
"into a weak reference when the variable goes out of scope [13]_."
msgstr ""

#: ../../pep-3134.txt:464
msgid "Possible Future Compatible Changes"
msgstr ""

#: ../../pep-3134.txt:466
msgid ""
"These changes are consistent with the appearance of exceptions as a "
"single object rather than a triple at the interpreter level."
msgstr ""

#: ../../pep-3134.txt:469
msgid ""
"If PEP 340 or PEP 343 is accepted, replace the three (``type``, "
"``value``, ``traceback``) arguments to ``__exit__`` with a single "
"exception argument."
msgstr ""

#: ../../pep-3134.txt:472
msgid ""
"Deprecate ``sys.exc_type``, ``sys.exc_value``, ``sys.exc_traceback``, and"
" ``sys.exc_info()`` in favour of a single member, ``sys.exception``."
msgstr ""

#: ../../pep-3134.txt:475
msgid ""
"Deprecate ``sys.last_type``, ``sys.last_value``, and "
"``sys.last_traceback`` in favour of a single member, "
"``sys.last_exception``."
msgstr ""

#: ../../pep-3134.txt:478
msgid ""
"Deprecate the three-argument form of the ``raise`` statement in favour of"
" the one-argument form."
msgstr ""

#: ../../pep-3134.txt:481
msgid ""
"Upgrade ``cgitb.html()`` to accept a single value as its first argument "
"as an alternative to a ``(type, value, traceback)`` tuple."
msgstr ""

#: ../../pep-3134.txt:486
msgid "Possible Future Incompatible Changes"
msgstr ""

#: ../../pep-3134.txt:488
msgid "These changes might be worth considering for Python 3000."
msgstr ""

#: ../../pep-3134.txt:490
msgid ""
"Remove ``sys.exc_type``, ``sys.exc_value``, ``sys.exc_traceback``, and "
"``sys.exc_info()``."
msgstr ""

#: ../../pep-3134.txt:493
msgid "Remove ``sys.last_type``, ``sys.last_value``, and ``sys.last_traceback``."
msgstr ""

#: ../../pep-3134.txt:495
msgid ""
"Replace the three-argument ``sys.excepthook`` with a one-argument API, "
"and changing the ``cgitb`` module to match."
msgstr ""

#: ../../pep-3134.txt:498
msgid "Remove the three-argument form of the ``raise`` statement."
msgstr ""

#: ../../pep-3134.txt:500
msgid ""
"Upgrade ``traceback.print_exception`` to accept an ``exception`` argument"
" instead of the ``type``, ``value``, and ``traceback`` arguments."
msgstr ""

#: ../../pep-3134.txt:505
msgid "Implementation"
msgstr ""

#: ../../pep-3134.txt:507
msgid ""
"The ``__traceback__`` and ``__cause__`` attributes and the new raise "
"syntax were implemented in revision 57783 [14]_."
msgstr ""

#: ../../pep-3134.txt:512
msgid "Acknowledgements"
msgstr ""

#: ../../pep-3134.txt:514
msgid ""
"Brett Cannon, Greg Ewing, Guido van Rossum, Jeremy Hylton, Phillip J. "
"Eby, Raymond Hettinger, Walter Dörwald, and others."
msgstr ""

#: ../../pep-3134.txt:519
msgid "References"
msgstr ""

#: ../../pep-3134.txt:521
msgid ""
"Raymond Hettinger, \"Idea for avoiding exception masking\" "
"https://mail.python.org/pipermail/python-dev/2003-January/032492.html"
msgstr ""

#: ../../pep-3134.txt:524
msgid ""
"Brett Cannon explains chained exceptions "
"https://mail.python.org/pipermail/python-dev/2003-June/036063.html"
msgstr ""

#: ../../pep-3134.txt:527
msgid ""
"Greg Ewing points out masking caused by exceptions during finally "
"https://mail.python.org/pipermail/python-dev/2003-June/036290.html"
msgstr ""

#: ../../pep-3134.txt:530
msgid ""
"Greg Ewing suggests storing the traceback in the exception object "
"https://mail.python.org/pipermail/python-dev/2003-June/036092.html"
msgstr ""

#: ../../pep-3134.txt:533
msgid ""
"Guido van Rossum mentions exceptions having a traceback attribute "
"https://mail.python.org/pipermail/python-dev/2005-April/053060.html"
msgstr ""

#: ../../pep-3134.txt:536
msgid ""
"Ka-Ping Yee, \"Tidier Exceptions\" https://mail.python.org/pipermail"
"/python-dev/2005-May/053671.html"
msgstr ""

#: ../../pep-3134.txt:539
msgid ""
"Ka-Ping Yee, \"Chained Exceptions\" https://mail.python.org/pipermail"
"/python-dev/2005-May/053672.html"
msgstr ""

#: ../../pep-3134.txt:542
msgid ""
"Guido van Rossum discusses automatic chaining in ``PyErr_Set*`` "
"https://mail.python.org/pipermail/python-dev/2003-June/036180.html"
msgstr ""

#: ../../pep-3134.txt:545
msgid ""
"Tony Olensky, \"Omnibus Structured Exception/Error Handling Mechanism\" "
"http://dev.perl.org/perl6/rfc/88.html"
msgstr ""

#: ../../pep-3134.txt:548
msgid ""
"MSDN .NET Framework Library, \"Exception.InnerException Property\" "
"http://msdn.microsoft.com/library/en-"
"us/cpref/html/frlrfsystemexceptionclassinnerexceptiontopic.asp"
msgstr ""

#: ../../pep-3134.txt:551
msgid ""
"Walter Dörwald suggests wrapping exceptions to add details "
"https://mail.python.org/pipermail/python-dev/2003-June/036148.html"
msgstr ""

#: ../../pep-3134.txt:554
msgid ""
"Guido van Rossum restates the objection to cyclic trash "
"https://mail.python.org/pipermail/python-3000/2007-January/005322.html"
msgstr ""

#: ../../pep-3134.txt:557
msgid ""
"Adam Olsen suggests using a weakref from stack frame to exception "
"https://mail.python.org/pipermail/python-3000/2007-January/005363.html"
msgstr ""

#: ../../pep-3134.txt:560
msgid ""
"Patch to implement the bulk of the PEP "
"http://svn.python.org/view/python/branches/py3k/Include/?rev=57783&view=rev"
msgstr ""

#: ../../pep-3134.txt:566
msgid "Copyright"
msgstr ""

#: ../../pep-3134.txt:568
msgid "This document has been placed in the public domain."
msgstr ""

