# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0308.txt
msgid "PEP"
msgstr ""

#: ../../pep-0308.txt:1
msgid "308"
msgstr ""

#: ../../pep-0308.txt
msgid "Title"
msgstr ""

#: ../../pep-0308.txt:2
msgid "Conditional Expressions"
msgstr ""

#: ../../pep-0308.txt
msgid "Author"
msgstr ""

#: ../../pep-0308.txt:5
msgid "Guido van Rossum, Raymond Hettinger"
msgstr ""

#: ../../pep-0308.txt
msgid "Status"
msgstr ""

#: ../../pep-0308.txt:6
msgid "Final"
msgstr ""

#: ../../pep-0308.txt
msgid "Type"
msgstr ""

#: ../../pep-0308.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0308.txt
msgid "Created"
msgstr ""

#: ../../pep-0308.txt:9
msgid "07-Feb-2003"
msgstr ""

#: ../../pep-0308.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0308.txt:10
msgid "7-Feb-2003, 11-Feb-2003"
msgstr ""

#: ../../pep-0308.txt:14
msgid "Adding a conditional expression"
msgstr ""

#: ../../pep-0308.txt:16
msgid ""
"On 9/29/2005, Guido decided to add conditional expressions in the form of"
" \"X if C else Y\". [1]_"
msgstr ""

#: ../../pep-0308.txt:19
msgid ""
"The motivating use case was the prevalence of error-prone attempts to "
"achieve the same effect using \"and\" and \"or\". [2]_"
msgstr ""

#: ../../pep-0308.txt:22
msgid ""
"Previous community efforts to add a conditional expression were stymied "
"by a lack of consensus on the best syntax.  That issue was resolved by "
"simply deferring to a BDFL best judgment call."
msgstr ""

#: ../../pep-0308.txt:26
msgid ""
"The decision was validated by reviewing how the syntax fared when applied"
" throughout the standard library (this review approximates a sampling of "
"real-world use cases, across a variety of applications, written by a "
"number of programmers with diverse backgrounds). [3]_"
msgstr ""

#: ../../pep-0308.txt:31
msgid ""
"The following change will be made to the grammar.  (The or_test symbols "
"is new, the others are modified.)"
msgstr ""

#: ../../pep-0308.txt:43
msgid ""
"The new syntax nearly introduced a minor syntactical backwards "
"incompatibility.  In previous Python versions, the following is legal::"
msgstr ""

#: ../../pep-0308.txt:49
msgid ""
"(I.e. a list comprehension where the sequence following 'in' is an "
"unparenthesized series of lambdas -- or just one lambda, even.)"
msgstr ""

#: ../../pep-0308.txt:52
msgid "In Python 3.0, the series of lambdas will have to be parenthesized, e.g.::"
msgstr ""

#: ../../pep-0308.txt:57
msgid ""
"This is because lambda binds less tight than the if-else expression, but "
"in this context, the lambda could already be followed by an 'if' keyword "
"that binds less tightly still (for details, consider the grammar changes "
"shown above)."
msgstr ""

#: ../../pep-0308.txt:62
msgid ""
"However, in Python 2.5, a slightly different grammar is used that is more"
" backwards compatible, but constrains the grammar of a lambda used in "
"this position by forbidding the lambda's body to contain an "
"unparenthesized condition expression.  Examples::"
msgstr ""

#: ../../pep-0308.txt:74
msgid "References"
msgstr ""

#: ../../pep-0308.txt:76
msgid ""
"Pronouncement https://mail.python.org/pipermail/python-"
"dev/2005-September/056846.html"
msgstr ""

#: ../../pep-0308.txt:79
msgid ""
"Motivating use case: https://mail.python.org/pipermail/python-"
"dev/2005-September/056546.html https://mail.python.org/pipermail/python-"
"dev/2005-September/056510.html"
msgstr ""

#: ../../pep-0308.txt:83
msgid ""
"Review in the context of real-world code fragments: "
"https://mail.python.org/pipermail/python-dev/2005-September/056803.html"
msgstr ""

#: ../../pep-0308.txt:88
msgid "Introduction to earlier draft of the PEP (kept for historical purposes)"
msgstr ""

#: ../../pep-0308.txt:90
msgid ""
"Requests for an if-then-else (\"ternary\") expression keep coming up on "
"comp.lang.python.  This PEP contains a concrete proposal of a fairly "
"Pythonic syntax.  This is the community's one chance: if this PEP is "
"approved with a clear majority, it will be implemented in Python 2.4.  If"
" not, the PEP will be augmented with a summary of the reasons for "
"rejection and the subject better not come up again.  While the BDFL is "
"co-author of this PEP, he is neither in favor nor against this proposal; "
"it is up to the community to decide.  If the community can't decide, the "
"BDFL will reject the PEP."
msgstr ""

#: ../../pep-0308.txt:101
msgid ""
"After unprecedented community response (very good arguments were made "
"both pro and con) this PEP has been revised with the help of Raymond "
"Hettinger.  Without going through a complete revision history, the main "
"changes are a different proposed syntax, an overview of proposed "
"alternatives, the state of the current discussion, and a discussion of "
"short-circuit behavior."
msgstr ""

#: ../../pep-0308.txt:108
msgid ""
"Following the discussion, a vote was held.  While there was an overall "
"interest in having some form of if-then-else expressions, no one format "
"was able to draw majority support.  Accordingly, the PEP was rejected due"
" to the lack of an overwhelming majority for change. Also, a Python "
"design principle has been to prefer the status quo whenever there are "
"doubts about which path to take."
msgstr ""

#: ../../pep-0308.txt:117
msgid "Proposal"
msgstr ""

#: ../../pep-0308.txt:119
msgid "The proposed syntax is as follows::"
msgstr ""

#: ../../pep-0308.txt:123
msgid "Note that the enclosing parentheses are not optional."
msgstr ""

#: ../../pep-0308.txt:125
msgid "The resulting expression is evaluated like this:"
msgstr ""

#: ../../pep-0308.txt:127
msgid "First, <condition> is evaluated."
msgstr ""

#: ../../pep-0308.txt:129
msgid ""
"If <condition> is true, <expression1> is evaluated and is the result of "
"the whole thing."
msgstr ""

#: ../../pep-0308.txt:132
msgid ""
"If <condition> is false, <expression2> is evaluated and is the result of "
"the whole thing."
msgstr ""

#: ../../pep-0308.txt:135
msgid "A natural extension of this syntax is to allow one or more 'elif' parts::"
msgstr ""

#: ../../pep-0308.txt:140
msgid "This will be implemented if the proposal is accepted."
msgstr ""

#: ../../pep-0308.txt:142
msgid "The downsides to the proposal are:"
msgstr ""

#: ../../pep-0308.txt:144
msgid "the required parentheses"
msgstr ""

#: ../../pep-0308.txt:145
msgid "confusability with statement syntax"
msgstr ""

#: ../../pep-0308.txt:146
msgid "additional semantic loading of colons"
msgstr ""

#: ../../pep-0308.txt:148
msgid ""
"Note that at most one of <expression1> and <expression2> is evaluated.  "
"This is called a \"short-circuit expression\"; it is similar to the way "
"the second operand of 'and' / 'or' is only evaluated if the first operand"
" is true / false."
msgstr ""

#: ../../pep-0308.txt:153
msgid "A common way to emulate an if-then-else expression is::"
msgstr ""

#: ../../pep-0308.txt:157
msgid ""
"However, this doesn't work the same way: it returns <expression2> when "
"<expression1> is false!  See FAQ 4.16 for alternatives that work -- "
"however, they are pretty ugly and require much more effort to understand."
msgstr ""

#: ../../pep-0308.txt:164
msgid "Alternatives"
msgstr ""

#: ../../pep-0308.txt:166
msgid "Holger Krekel proposed a new, minimally invasive variant::"
msgstr ""

#: ../../pep-0308.txt:170
msgid ""
"The concept behind it is that a nearly complete ternary operator already "
"exists with and/or and this proposal is the least invasive change that "
"makes it complete.  Many respondants on the newsgroup found this to be "
"the most pleasing alternative. However, a couple of respondants were able"
" to post examples that were mentally difficult to parse.  Later it was "
"pointed out that this construct works by having the \"else\" change the "
"existing meaning of \"and\"."
msgstr ""

#: ../../pep-0308.txt:179
msgid ""
"As a result, there is increasing support for Christian Tismer's proposed "
"variant of the same idea::"
msgstr ""

#: ../../pep-0308.txt:184
msgid ""
"The advantages are simple visual parsing, no required parentheses, no "
"change in the semantics of existing keywords, not as likely as the "
"proposal to be confused with statement syntax, and does not further "
"overload the colon.  The disadvantage is the implementation costs of "
"introducing a new keyword.  However, unlike other new keywords, the word "
"\"then\" seems unlikely to have been used as a name in existing programs."
msgstr ""

#: ../../pep-0308.txt:192 ../../pep-0308.txt:204 ../../pep-0308.txt:215
msgid "---"
msgstr ""

#: ../../pep-0308.txt:194
msgid "Many C-derived languages use this syntax::"
msgstr ""

#: ../../pep-0308.txt:198
msgid ""
"Eric Raymond even implemented this.  The BDFL rejected this for several "
"reasons: the colon already has many uses in Python (even though it would "
"actually not be ambiguous, because the question mark requires a matching "
"colon); for people not used to C-derived language, it is hard to "
"understand."
msgstr ""

#: ../../pep-0308.txt:206
msgid "The original version of this PEP proposed the following syntax::"
msgstr ""

#: ../../pep-0308.txt:210
msgid ""
"The out-of-order arrangement was found to be too uncomfortable for many "
"of participants in the discussion; especially when <expression1> is long,"
" it's easy to miss the conditional while skimming."
msgstr ""

#: ../../pep-0308.txt:217
msgid ""
"Some have suggested adding a new builtin instead of extending the syntax "
"of the language.  For example::"
msgstr ""

#: ../../pep-0308.txt:222
msgid ""
"This won't work the way a syntax extension will because both expression1 "
"and expression2 must be evaluated before the function is called.  There's"
" no way to short-circuit the expression evaluation.  It could work if "
"'cond' (or some other name) were made a keyword, but that has all the "
"disadvantages of adding a new keyword, plus confusing syntax: it "
"**looks** like a function call so a casual reader might expect both "
"<expression1> and <expression2> to be evaluated."
msgstr ""

#: ../../pep-0308.txt:233
msgid "Summary of the Current State of the Discussion"
msgstr ""

#: ../../pep-0308.txt:235
msgid "Groups are falling into one of three camps:"
msgstr ""

#: ../../pep-0308.txt:237
msgid "Adopt a ternary operator built using punctuation characters::"
msgstr ""

#: ../../pep-0308.txt:241
msgid ""
"Adopt a ternary operator built using new or existing keywords. The "
"leading examples are::"
msgstr ""

#: ../../pep-0308.txt:247
msgid "Do nothing."
msgstr ""

#: ../../pep-0308.txt:249
msgid "The first two positions are relatively similar."
msgstr ""

#: ../../pep-0308.txt:251
msgid ""
"Some find that any form of punctuation makes the language more cryptic.  "
"Others find that punctuation style is appropriate for expressions rather "
"than statements and helps avoid a COBOL style: 3 plus 4 times 5."
msgstr ""

#: ../../pep-0308.txt:256
msgid ""
"Adapting existing keywords attempts to improve on punctuation through "
"explicit meaning and a more tidy appearance.  The downside is some loss "
"of the economy-of-expression provided by punctuation operators.  The "
"other downside is that it creates some degree of confusion between the "
"two meanings and two usages of the keywords."
msgstr ""

#: ../../pep-0308.txt:262
msgid ""
"Those difficulties are overcome by options which introduce new keywords "
"which take more effort to implement."
msgstr ""

#: ../../pep-0308.txt:265
msgid ""
"The last position is doing nothing.  Arguments in favor include keeping "
"the language simple and concise; maintaining backwards compatibility; and"
" that any every use case can already be already expressed in terms of "
"\"if\" and \"else\".  Lambda expressions are an exception as they require"
" the conditional to be factored out into a separate function definition."
msgstr ""

#: ../../pep-0308.txt:272
msgid ""
"The arguments against doing nothing are that the other choices allow "
"greater economy of expression and that current practices show a "
"propensity for erroneous uses of \"and\", \"or\", or one their more "
"complex, less visually unappealing workarounds."
msgstr ""

#: ../../pep-0308.txt:279
msgid "Short-Circuit Behavior"
msgstr ""

#: ../../pep-0308.txt:281
msgid ""
"The principal difference between the ternary operator and the ``cond()`` "
"function is that the latter provides an expression form but does not "
"provide short-circuit evaluation."
msgstr ""

#: ../../pep-0308.txt:285
msgid "Short-circuit evaluation is desirable on three occasions:"
msgstr ""

#: ../../pep-0308.txt:287
msgid "When an expression has side-effects"
msgstr ""

#: ../../pep-0308.txt:288
msgid "When one or both of the expressions are resource intensive"
msgstr ""

#: ../../pep-0308.txt:289
msgid "When the condition serves as a guard for the validity of the expression."
msgstr ""

#: ../../pep-0308.txt:298
msgid "``readlines()`` moves the file pointer"
msgstr ""

#: ../../pep-0308.txt:299
msgid "for long sources, both alternatives take time"
msgstr ""

#: ../../pep-0308.txt:300
msgid ""
"``split()`` is only valid for strings and ``readlines()`` is only valid "
"for file objects."
msgstr ""

#: ../../pep-0308.txt:303
msgid ""
"Supporters of a ``cond()`` function point out that the need for short-"
"circuit evaluation is rare.  Scanning through existing code directories, "
"they found that if/else did not occur often; and of those only a few "
"contained expressions that could be helped by ``cond()`` or a ternary "
"operator; and that most of those had no need for short-circuit "
"evaluation.  Hence, ``cond()`` would suffice for most needs and would "
"spare efforts to alter the syntax of the language."
msgstr ""

#: ../../pep-0308.txt:312
msgid ""
"More supporting evidence comes from scans of C code bases which show that"
" its ternary operator used very rarely (as a percentage of lines of "
"code)."
msgstr ""

#: ../../pep-0308.txt:316
msgid ""
"A counterpoint to that analysis is that the availability of a ternary "
"operator helped the programmer in every case because it spared the need "
"to search for side-effects.  Further, it would preclude errors arising "
"from distant modifications which introduce side-effects.  The latter case"
" has become more of a reality with the advent of properties where even "
"attribute access can be given side-effects."
msgstr ""

#: ../../pep-0308.txt:324
msgid ""
"The BDFL's position is that short-circuit behavior is essential for an "
"if-then-else construct to be added to the language."
msgstr ""

#: ../../pep-0308.txt:329
msgid "Detailed Results of Voting"
msgstr ""

#: ../../pep-0308.txt:370
msgid "CHOICE KEY"
msgstr ""

#: ../../pep-0308.txt:394
msgid "Detail for write-in votes and their ranking"
msgstr ""

#: ../../pep-0308.txt:463
msgid "Copyright"
msgstr ""

#: ../../pep-0308.txt:465
msgid "This document has been placed in the public domain."
msgstr ""

