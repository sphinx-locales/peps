# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0584.rst
msgid "PEP"
msgstr ""

#: ../../pep-0584.rst:1
msgid "584"
msgstr ""

#: ../../pep-0584.rst
msgid "Title"
msgstr ""

#: ../../pep-0584.rst:2
msgid "Add Union Operators To dict"
msgstr ""

#: ../../pep-0584.rst
msgid "Author"
msgstr ""

#: ../../pep-0584.rst:5
msgid "Steven D'Aprano <steve@pearwood.info>, Brandt Bucher <brandt@python.org>"
msgstr ""

#: ../../pep-0584.rst
msgid "BDFL-Delegate"
msgstr ""

#: ../../pep-0584.rst:7
msgid "Guido van Rossum <guido@python.org>"
msgstr ""

#: ../../pep-0584.rst
msgid "Status"
msgstr ""

#: ../../pep-0584.rst:8
msgid "Final"
msgstr ""

#: ../../pep-0584.rst
msgid "Type"
msgstr ""

#: ../../pep-0584.rst:9
msgid "Standards Track"
msgstr ""

#: ../../pep-0584.rst
msgid "Created"
msgstr ""

#: ../../pep-0584.rst:11
msgid "01-Mar-2019"
msgstr ""

#: ../../pep-0584.rst
msgid "Python-Version"
msgstr ""

#: ../../pep-0584.rst:12
msgid "3.9"
msgstr ""

#: ../../pep-0584.rst
msgid "Post-History"
msgstr ""

#: ../../pep-0584.rst:13
msgid "01-Mar-2019, 16-Oct-2019, 02-Dec-2019, 04-Feb-2020, 17-Feb-2020"
msgstr ""

#: ../../pep-0584.rst
msgid "Resolution"
msgstr ""

#: ../../pep-0584.rst:15
msgid ""
"https://mail.python.org/archives/list/python-"
"dev@python.org/thread/6KT2KIOTYXMDCD2CCAOLOI7LUGTN6MBS"
msgstr ""

#: ../../pep-0584.rst:20
msgid "Abstract"
msgstr ""

#: ../../pep-0584.rst:22
msgid ""
"This PEP proposes adding merge (``|``) and update (``|=``) operators to "
"the built-in ``dict`` class."
msgstr ""

#: ../../pep-0584.rst:26
msgid ""
"After this PEP was accepted, the decision was made to also implement the "
"new operators for `several other standard library mappings "
"<https://bugs.python.org/issue36144>`_."
msgstr ""

#: ../../pep-0584.rst:33
msgid "Motivation"
msgstr ""

#: ../../pep-0584.rst:35
msgid "The current ways to merge two dicts have several disadvantages:"
msgstr ""

#: ../../pep-0584.rst:40
msgid "``dict.update``"
msgstr ""

#: ../../pep-0584.rst:42
msgid ""
"``d1.update(d2)`` modifies ``d1`` in-place. ``e = d1.copy(); "
"e.update(d2)`` is not an expression and needs a temporary variable."
msgstr ""

#: ../../pep-0584.rst:49
msgid "``{**d1, **d2}``"
msgstr ""

#: ../../pep-0584.rst:51
msgid ""
"Dict unpacking looks ugly and is not easily discoverable.  Few people "
"would be able to guess what it means the first time they see it, or think"
" of it as the \"obvious way\" to merge two dicts."
msgstr ""

#: ../../pep-0584.rst:55
msgid ""
"`As Guido said <https://mail.python.org/archives/list/python-"
"ideas@python.org/message/K4IC74IXE23K4KEL7OUFK3VBC62HGGVF/>`_:"
msgstr ""

#: ../../pep-0584.rst:58
msgid ""
"I'm sorry for PEP 448, but even if you know about ``**d`` in simpler "
"contexts, if you were to ask a typical Python user how to combine two "
"dicts into a new one, I doubt many people would think of ``{**d1, "
"**d2}``. I know I myself had forgotten about it when this thread started!"
msgstr ""

#: ../../pep-0584.rst:64
msgid ""
"``{**d1, **d2}`` ignores the types of the mappings and always returns a "
"``dict``.  ``type(d1)({**d1, **d2})`` fails for dict subclasses such as "
"``defaultdict`` that have an incompatible ``__init__`` method."
msgstr ""

#: ../../pep-0584.rst:71
msgid "``collections.ChainMap``"
msgstr ""

#: ../../pep-0584.rst:73
msgid ""
"``ChainMap`` is unfortunately poorly-known and doesn't qualify as "
"\"obvious\".  It also resolves duplicate keys in the opposite order to "
"that expected (\"first seen wins\" instead of \"last seen wins\"). Like "
"dict unpacking, it is tricky to get it to honor the desired subclass. For"
" the same reason, ``type(d1)(ChainMap(d2, d1))`` fails for some "
"subclasses of dict."
msgstr ""

#: ../../pep-0584.rst:80
msgid ""
"Further, ChainMaps wrap their underlying dicts, so writes to the ChainMap"
" will modify the original dict::"
msgstr ""

#: ../../pep-0584.rst:93
msgid "``dict(d1, **d2)``"
msgstr ""

#: ../../pep-0584.rst:95
msgid ""
"This \"neat trick\" is not well-known, and only works when ``d2`` is "
"entirely string-keyed::"
msgstr ""

#: ../../pep-0584.rst:108
msgid "Rationale"
msgstr ""

#: ../../pep-0584.rst:110
msgid ""
"The new operators will have the same relationship to the ``dict.update`` "
"method as the list concatenate (``+``) and extend (``+=``) operators have"
" to ``list.extend``. Note that this is somewhat different from the "
"relationship that ``|``/``|=`` have with ``set.update``; the authors have"
" determined that allowing the in-place operator to accept a wider range "
"of types (as ``list`` does) is a more useful design, and that restricting"
" the types of the binary operator's operands (again, as ``list`` does) "
"will help avoid silent errors caused by complicated implicit type casting"
" on both sides."
msgstr ""

#: ../../pep-0584.rst:120
msgid ""
"Key conflicts will be resolved by keeping the rightmost value.  This "
"matches the existing behavior of similar ``dict`` operations, where the "
"last seen value always wins::"
msgstr ""

#: ../../pep-0584.rst:130
msgid ""
"All of the above follow the same rule.  This PEP takes the position that "
"this behavior is simple, obvious, usually the behavior we want, and "
"should be the default behavior for dicts.  This means that dict union is "
"not commutative; in general ``d | e != e | d``."
msgstr ""

#: ../../pep-0584.rst:135
msgid ""
"Similarly, the *iteration order* of the key-value pairs in the dictionary"
" will follow the same semantics as the examples above, with each newly "
"added key (and its value) being appended to the current sequence."
msgstr ""

#: ../../pep-0584.rst:143
msgid "Specification"
msgstr ""

#: ../../pep-0584.rst:145
msgid ""
"Dict union will return a new ``dict`` consisting of the left operand "
"merged with the right operand, each of which must be a ``dict`` (or an "
"instance of a ``dict`` subclass). If a key appears in both operands, the "
"last-seen value (i.e. that from the right-hand operand) wins::"
msgstr ""

#: ../../pep-0584.rst:157
msgid "The augmented assignment version operates in-place::"
msgstr ""

#: ../../pep-0584.rst:163
msgid ""
"Augmented assignment behaves identically to the ``update`` method called "
"with a single positional argument, so it also accepts anything "
"implementing the Mapping protocol (more specifically, anything with the "
"``keys`` and ``__getitem__`` methods) or iterables of key-value pairs. "
"This is analogous to ``list +=`` and ``list.extend``, which accept any "
"iterable, not just lists.  Continued from above::"
msgstr ""

#: ../../pep-0584.rst:179
msgid ""
"When new keys are added, their order matches their order within the "
"right-hand mapping, if any exists for its type."
msgstr ""

#: ../../pep-0584.rst:184
msgid "Reference Implementation"
msgstr ""

#: ../../pep-0584.rst:186
msgid ""
"One of the authors has `written a C implementation "
"<https://github.com/python/cpython/pull/12088>`_."
msgstr ""

#: ../../pep-0584.rst:189
msgid "An *approximate* pure-Python implementation is::"
msgstr ""

#: ../../pep-0584.rst:212
msgid "Major Objections"
msgstr ""

#: ../../pep-0584.rst:216
msgid "Dict Union Is Not Commutative"
msgstr ""

#: ../../pep-0584.rst:218
msgid "Union is commutative, but dict union will not be (``d | e != e | d``)."
msgstr ""

#: ../../pep-0584.rst:223 ../../pep-0584.rst:247 ../../pep-0584.rst:285
#: ../../pep-0584.rst:306 ../../pep-0584.rst:323 ../../pep-0584.rst:373
#: ../../pep-0584.rst:403 ../../pep-0584.rst:443
msgid "Response"
msgstr ""

#: ../../pep-0584.rst:225
msgid "There is precedent for non-commutative unions in Python::"
msgstr ""

#: ../../pep-0584.rst:232
msgid ""
"While the results may be equal, they are distinctly different. In "
"general, ``a | b`` is not the same operation as ``b | a``."
msgstr ""

#: ../../pep-0584.rst:238
msgid "Dict Union Will Be Inefficient"
msgstr ""

#: ../../pep-0584.rst:240
msgid ""
"Giving a pipe operator to mappings is an invitation to writing code that "
"doesn't scale well.  Repeated dict union is inefficient: ``d | e | f | g "
"| h`` creates and destroys three temporary mappings."
msgstr ""

#: ../../pep-0584.rst:249
msgid "The same argument applies to sequence concatenation."
msgstr ""

#: ../../pep-0584.rst:251
msgid ""
"Sequence concatenation grows with the total number of items in the "
"sequences, leading to O(N**2) (quadratic) performance.  Dict union is "
"likely to involve duplicate keys, so the temporary mappings will not grow"
" as fast."
msgstr ""

#: ../../pep-0584.rst:256
msgid ""
"Just as it is rare for people to concatenate large numbers of lists or "
"tuples, the authors of this PEP believe that it will be rare for people "
"to merge large numbers of dicts.  ``collections.Counter`` is a dict "
"subclass that supports many operators, and there are no known examples of"
" people having performance issues due to combining large numbers of "
"Counters.  Further, a survey of the standard library by the authors found"
" no examples of merging more than two dicts, so this is unlikely to be a "
"performance problem in practice... \"Everything is fast for small enough "
"N\"."
msgstr ""

#: ../../pep-0584.rst:266
msgid ""
"If one expects to be merging a large number of dicts where performance is"
" an issue, it may be better to use an explicit loop and in-place "
"merging::"
msgstr ""

#: ../../pep-0584.rst:277
msgid "Dict Union Is Lossy"
msgstr ""

#: ../../pep-0584.rst:279
msgid ""
"Dict union can lose data (values may disappear); no other form of union "
"is lossy."
msgstr ""

#: ../../pep-0584.rst:287
msgid ""
"It isn't clear why the first part of this argument is a problem. "
"``dict.update()`` may throw away values, but not keys; that is expected "
"behavior, and will remain expected behavior regardless of whether it is "
"spelled as ``update()`` or ``|``."
msgstr ""

#: ../../pep-0584.rst:292
msgid ""
"Other types of union are also lossy, in the sense of not being "
"reversible; you cannot get back the two operands given only the union. "
"``a | b == 365``... what are ``a`` and ``b``?"
msgstr ""

#: ../../pep-0584.rst:299
msgid "Only One Way To Do It"
msgstr ""

#: ../../pep-0584.rst:301
msgid "Dict union will violate the Only One Way koan from the Zen."
msgstr ""

#: ../../pep-0584.rst:308
msgid ""
"There is no such koan.  \"Only One Way\" is a calumny about Python "
"originating long ago from the Perl community."
msgstr ""

#: ../../pep-0584.rst:314
msgid "More Than One Way To Do It"
msgstr ""

#: ../../pep-0584.rst:316
msgid ""
"Okay, the Zen doesn't say that there should be Only One Way To Do It. But"
" it does have a prohibition against allowing \"more than one way to do "
"it\"."
msgstr ""

#: ../../pep-0584.rst:325
msgid ""
"There is no such prohibition.  The \"Zen of Python\" merely expresses a "
"*preference* for \"only one *obvious* way\"::"
msgstr ""

#: ../../pep-0584.rst:331
msgid ""
"The emphasis here is that there should be an obvious way to do \"it\". In"
" the case of dict update operations, there are at least two different "
"operations that we might wish to do:"
msgstr ""

#: ../../pep-0584.rst:335
msgid ""
"*Update a dict in place*: The Obvious Way is to use the ``update()`` "
"method.  If this proposal is accepted, the ``|=`` augmented assignment "
"operator will also work, but that is a side-effect of how augmented "
"assignments are defined.  Which you choose is a matter of taste."
msgstr ""

#: ../../pep-0584.rst:341
msgid ""
"*Merge two existing dicts into a third, new dict*: This PEP proposes that"
" the Obvious Way is to use the ``|`` merge operator."
msgstr ""

#: ../../pep-0584.rst:344
msgid ""
"In practice, this preference for \"only one way\" is frequently violated "
"in Python.  For example, every ``for`` loop could be re-written as a "
"``while`` loop; every ``if`` block could be written as an ``if``/ "
"``else`` block.  List, set and dict comprehensions could all be replaced "
"by generator expressions.  Lists offer no fewer than five ways to "
"implement concatenation:"
msgstr ""

#: ../../pep-0584.rst:351
msgid "Concatenation operator: ``a + b``"
msgstr ""

#: ../../pep-0584.rst:352
msgid "In-place concatenation operator: ``a += b``"
msgstr ""

#: ../../pep-0584.rst:353
msgid "Slice assignment: ``a[len(a):] = b``"
msgstr ""

#: ../../pep-0584.rst:354
msgid "Sequence unpacking: ``[*a, *b]``"
msgstr ""

#: ../../pep-0584.rst:355
msgid "Extend method: ``a.extend(b)``"
msgstr ""

#: ../../pep-0584.rst:357
msgid ""
"We should not be too strict about rejecting useful functionality because "
"it violates \"only one way\"."
msgstr ""

#: ../../pep-0584.rst:363
msgid "Dict Union Makes Code Harder To Understand"
msgstr ""

#: ../../pep-0584.rst:365
msgid ""
"Dict union makes it harder to tell what code means.  To paraphrase the "
"objection rather than quote anyone in specific: \"If I see ``spam | "
"eggs``, I can't tell what it does unless I know what ``spam`` and "
"``eggs`` are\"."
msgstr ""

#: ../../pep-0584.rst:375
msgid ""
"This is very true.  But it is equally true today, where the use of the "
"``|`` operator could mean any of:"
msgstr ""

#: ../../pep-0584.rst:378
msgid "``int``/``bool`` bitwise-or"
msgstr ""

#: ../../pep-0584.rst:379
msgid "``set``/``frozenset`` union"
msgstr ""

#: ../../pep-0584.rst:380
msgid "any other overloaded operation"
msgstr ""

#: ../../pep-0584.rst:382
msgid ""
"Adding dict union to the set of possibilities doesn't seem to make it "
"*harder* to understand the code.  No more work is required to determine "
"that ``spam`` and ``eggs`` are mappings than it would take to determine "
"that they are sets, or integers.  And good naming conventions will help::"
msgstr ""

#: ../../pep-0584.rst:395
msgid "What About The Full ``set`` API?"
msgstr ""

#: ../../pep-0584.rst:397
msgid ""
"dicts are \"set like\", and should support the full collection of set "
"operators: ``|``, ``&``, ``^``, and ``-``."
msgstr ""

#: ../../pep-0584.rst:405
msgid ""
"This PEP does not take a position on whether dicts should support the "
"full collection of set operators, and would prefer to leave that for a "
"later PEP (one of the authors is interested in drafting such a PEP). For "
"the benefit of any later PEP, a brief summary follows."
msgstr ""

#: ../../pep-0584.rst:410
msgid ""
"Set symmetric difference (``^``) is obvious and natural.  For example, "
"given two dicts::"
msgstr ""

#: ../../pep-0584.rst:416
msgid ""
"the symmetric difference ``d1 ^ d2`` would be ``{\"spam\": 1, \"ham\": "
"3}``."
msgstr ""

#: ../../pep-0584.rst:419
msgid ""
"Set difference (``-``) is also obvious and natural, and an earlier "
"version of this PEP included it in the proposal.  Given the dicts above, "
"we would have ``d1 - d2`` be ``{\"spam\": 1}`` and ``d2 - d1`` be "
"``{\"ham\": 3}``."
msgstr ""

#: ../../pep-0584.rst:424
msgid ""
"Set intersection (``&``) is a bit more problematic.  While it is easy to "
"determine the intersection of *keys* in two dicts, it is not clear what "
"to do with the *values*.  Given the two dicts above, it is obvious that "
"the only key of ``d1 & d2`` must be ``\"eggs\"``. \"Last seen wins\", "
"however, has the advantage of consistency with other dict operations (and"
" the proposed union operators)."
msgstr ""

#: ../../pep-0584.rst:434
msgid "What About ``Mapping`` And ``MutableMapping``?"
msgstr ""

#: ../../pep-0584.rst:436
msgid ""
"``collections.abc.Mapping`` and ``collections.abc.MutableMapping`` should"
" define ``|`` and ``|=``, so subclasses could just inherit the new "
"operators instead of having to define them."
msgstr ""

#: ../../pep-0584.rst:445
msgid ""
"There are two primary reasons why adding the new operators to these "
"classes would be problematic:"
msgstr ""

#: ../../pep-0584.rst:448
msgid ""
"Currently, neither defines a ``copy`` method, which would be necessary "
"for ``|`` to create a new instance."
msgstr ""

#: ../../pep-0584.rst:451
msgid ""
"Adding ``|=`` to ``MutableMapping`` (or a ``copy`` method to ``Mapping``)"
" would create compatibility issues for virtual subclasses."
msgstr ""

#: ../../pep-0584.rst:458
msgid "Rejected Ideas"
msgstr ""

#: ../../pep-0584.rst:462
msgid "Rejected Semantics"
msgstr ""

#: ../../pep-0584.rst:464
msgid ""
"There were at least four other proposed solutions for handling "
"conflicting keys.  These alternatives are left to subclasses of dict."
msgstr ""

#: ../../pep-0584.rst:470
msgid "Raise"
msgstr ""

#: ../../pep-0584.rst:472
msgid ""
"It isn't clear that this behavior has many use-cases or will be often "
"useful, but it will likely be annoying as any use of the dict union "
"operator would have to be guarded with a ``try``/``except`` clause."
msgstr ""

#: ../../pep-0584.rst:479
msgid "Add The Values (As Counter Does, with ``+``)"
msgstr ""

#: ../../pep-0584.rst:481
msgid "Too specialised to be used as the default behavior."
msgstr ""

#: ../../pep-0584.rst:486
msgid "Leftmost Value (First-Seen) Wins"
msgstr ""

#: ../../pep-0584.rst:488
msgid ""
"It isn't clear that this behavior has many use-cases.  In fact, one can "
"simply reverse the order of the arguments::"
msgstr ""

#: ../../pep-0584.rst:496
msgid "Concatenate Values In A List"
msgstr ""

#: ../../pep-0584.rst:498
msgid ""
"This is likely to be too specialised to be the default.  It is not clear "
"what to do if the values are already lists::"
msgstr ""

#: ../../pep-0584.rst:503
msgid "Should this give ``{'a': [1, 2, 3, 4]}`` or ``{'a': [[1, 2], [3, 4]]}``?"
msgstr ""

#: ../../pep-0584.rst:509
msgid "Rejected Alternatives"
msgstr ""

#: ../../pep-0584.rst:513
msgid "Use The Addition Operator"
msgstr ""

#: ../../pep-0584.rst:515
msgid ""
"This PEP originally started life as a proposal for dict addition, using "
"the ``+`` and ``+=`` operator.  That choice proved to be exceedingly "
"controversial, with many people having serious objections to the choice "
"of operator.  For details, see `previous versions "
"<https://github.com/python/peps/commits/master/pep-0584.rst>`_ of the PEP"
" and the mailing list discussions_."
msgstr ""

#: ../../pep-0584.rst:525
msgid "Use The Left Shift Operator"
msgstr ""

#: ../../pep-0584.rst:527
msgid ""
"The ``<<`` operator didn't seem to get much support on Python-Ideas, but "
"no major objections either.  Perhaps the strongest objection was Chris "
"Angelico's comment"
msgstr ""

#: ../../pep-0584.rst:531
msgid ""
"The \"cuteness\" value of abusing the operator to indicate information "
"flow got old shortly after C++ did it."
msgstr ""

#: ../../pep-0584.rst:537
msgid "Use A New Left Arrow Operator"
msgstr ""

#: ../../pep-0584.rst:539
msgid ""
"Another suggestion was to create a new operator ``<-``.  Unfortunately "
"this would be ambiguous, ``d <- e`` could mean ``d merge e`` or ``d less-"
"than minus e``."
msgstr ""

#: ../../pep-0584.rst:546
msgid "Use A Method"
msgstr ""

#: ../../pep-0584.rst:548
msgid ""
"A ``dict.merged()`` method would avoid the need for an operator at all.  "
"One subtlety is that it would likely need slightly different "
"implementations when called as an unbound method versus as a bound "
"method."
msgstr ""

#: ../../pep-0584.rst:553
msgid "As an unbound method, the behavior could be similar to::"
msgstr ""

#: ../../pep-0584.rst:562
msgid "As a bound method, the behavior could be similar to::"
msgstr ""

#: ../../pep-0584.rst:573 ../../pep-0584.rst:631
msgid "Advantages"
msgstr ""

#: ../../pep-0584.rst:575
msgid "Arguably, methods are more discoverable than operators."
msgstr ""

#: ../../pep-0584.rst:577
msgid ""
"The method could accept any number of positional and keyword arguments, "
"avoiding the inefficiency of creating temporary dicts."
msgstr ""

#: ../../pep-0584.rst:580
msgid "Accepts sequences of ``(key, value)`` pairs like the ``update`` method."
msgstr ""

#: ../../pep-0584.rst:583
msgid ""
"Being a method, it is easy to override in a subclass if you need "
"alternative behaviors such as \"first wins\", \"unique keys\", etc."
msgstr ""

#: ../../pep-0584.rst:588 ../../pep-0584.rst:640
msgid "Disadvantages"
msgstr ""

#: ../../pep-0584.rst:590
msgid ""
"Would likely require a new kind of method decorator which combined the "
"behavior of regular instance methods and ``classmethod``.  It would need "
"to be public (but not necessarily a builtin) for those needing to "
"override the method.  There is a `proof of concept "
"<http://code.activestate.com/recipes/577030>`_."
msgstr ""

#: ../../pep-0584.rst:596
msgid ""
"It isn't an operator.  Guido discusses `why operators are useful "
"<https://mail.python.org/archives/list/python-"
"ideas@python.org/message/52DLME5DKNZYFEETCTRENRNKWJ2B4DD5/>`_. For "
"another viewpoint, see `Nick Coghlan's blog post "
"<https://www.curiousefficiency.org/posts/2019/03/what-"
"does-x-equals-a-plus-b-mean.html>`_."
msgstr ""

#: ../../pep-0584.rst:604
msgid "Use a Function"
msgstr ""

#: ../../pep-0584.rst:606
msgid ""
"Instead of a method, use a new built-in function ``merged()``.  One "
"possible implementation could be something like this::"
msgstr ""

#: ../../pep-0584.rst:623
msgid ""
"An alternative might be to forgo the arbitrary keywords, and take a "
"single keyword parameter that specifies the behavior on collisions::"
msgstr ""

#: ../../pep-0584.rst:633
msgid "Most of the same advantages of the method solutions above."
msgstr ""

#: ../../pep-0584.rst:635
msgid ""
"Doesn't require a subclass to implement alternative behavior on "
"collisions, just a function."
msgstr ""

#: ../../pep-0584.rst:642
msgid "May not be important enough to be a builtin."
msgstr ""

#: ../../pep-0584.rst:644
msgid ""
"Hard to override behavior if you need something like \"first wins\", "
"without losing the ability to process arbitrary keyword arguments."
msgstr ""

#: ../../pep-0584.rst:650
msgid "Examples"
msgstr ""

#: ../../pep-0584.rst:652
msgid ""
"The authors of this PEP did a survey of third party libraries for "
"dictionary merging which might be candidates for dict union."
msgstr ""

#: ../../pep-0584.rst:655
msgid ""
"This is a cursory list based on a subset of whatever arbitrary third-"
"party packages happened to be installed on one of the authors' computers,"
" and may not reflect the current state of any package. Also note that, "
"while further (unrelated) refactoring may be possible, the rewritten "
"version only adds usage of the new operators for an apples-to-apples "
"comparison. It also reduces the result to an expression when it is "
"efficient to do so."
msgstr ""

#: ../../pep-0584.rst:666
msgid "IPython/zmq/ipkernel.py"
msgstr ""

#: ../../pep-0584.rst:668 ../../pep-0584.rst:682 ../../pep-0584.rst:733
#: ../../pep-0584.rst:748 ../../pep-0584.rst:773 ../../pep-0584.rst:788
#: ../../pep-0584.rst:809 ../../pep-0584.rst:823 ../../pep-0584.rst:837
#: ../../pep-0584.rst:851 ../../pep-0584.rst:865 ../../pep-0584.rst:880
#: ../../pep-0584.rst:899 ../../pep-0584.rst:913 ../../pep-0584.rst:929
#: ../../pep-0584.rst:945 ../../pep-0584.rst:960 ../../pep-0584.rst:975
msgid "Before::"
msgstr ""

#: ../../pep-0584.rst:673 ../../pep-0584.rst:706 ../../pep-0584.rst:739
#: ../../pep-0584.rst:779 ../../pep-0584.rst:796 ../../pep-0584.rst:814
#: ../../pep-0584.rst:828 ../../pep-0584.rst:842 ../../pep-0584.rst:856
#: ../../pep-0584.rst:871 ../../pep-0584.rst:888 ../../pep-0584.rst:904
#: ../../pep-0584.rst:920 ../../pep-0584.rst:936 ../../pep-0584.rst:951
#: ../../pep-0584.rst:966 ../../pep-0584.rst:981
msgid "After::"
msgstr ""

#: ../../pep-0584.rst:680
msgid "IPython/zmq/kernelapp.py"
msgstr ""

#: ../../pep-0584.rst:731
msgid "matplotlib/backends/backend_svg.py"
msgstr ""

#: ../../pep-0584.rst:746
msgid "matplotlib/delaunay/triangulate.py"
msgstr ""

#: ../../pep-0584.rst:758
msgid "Rewrite as::"
msgstr ""

#: ../../pep-0584.rst:771
msgid "matplotlib/legend.py"
msgstr ""

#: ../../pep-0584.rst:786
msgid "numpy/ma/core.py"
msgstr ""

#: ../../pep-0584.rst:807
msgid "praw/internal.py"
msgstr ""

#: ../../pep-0584.rst:821
msgid "pygments/lexer.py"
msgstr ""

#: ../../pep-0584.rst:835
msgid "requests/sessions.py"
msgstr ""

#: ../../pep-0584.rst:849
msgid "sphinx/domains/__init__.py"
msgstr ""

#: ../../pep-0584.rst:863
msgid "sphinx/ext/doctest.py"
msgstr ""

#: ../../pep-0584.rst:878
msgid "sphinx/ext/inheritance_diagram.py"
msgstr ""

#: ../../pep-0584.rst:897
msgid "sphinx/highlighting.py"
msgstr ""

#: ../../pep-0584.rst:911
msgid "sphinx/quickstart.py"
msgstr ""

#: ../../pep-0584.rst:927
msgid "sympy/abc.py"
msgstr ""

#: ../../pep-0584.rst:943
msgid "sympy/parsing/maxima.py"
msgstr ""

#: ../../pep-0584.rst:958
msgid "sympy/printing/ccode.py and sympy/printing/fcode.py"
msgstr ""

#: ../../pep-0584.rst:973
msgid "sympy/utilities/runtests.py"
msgstr ""

#: ../../pep-0584.rst:986
msgid ""
"The above examples show that sometimes the ``|`` operator leads to a "
"clear increase in readability, reducing the number of lines of code and "
"improving clarity.  However other examples using the ``|`` operator lead "
"to long, complex single expressions, possibly well over the PEP 8 maximum"
" line length of 80 columns.  As with any other language feature, the "
"programmer should use their own judgement about whether ``|`` improves "
"their code."
msgstr ""

#: ../../pep-0584.rst:997
msgid "Related Discussions"
msgstr ""

#: ../../pep-0584.rst:1001
msgid "Mailing list threads (this is by no means an exhaustive list):"
msgstr ""

#: ../../pep-0584.rst:1003
msgid ""
"`Dict joining using + and += <https://mail.python.org/archives/list"
"/python-ideas@python.org/thread/BHIJX6MHGMMD3S6D7GVTPZQL4N5V7T42/>`_"
msgstr ""

#: ../../pep-0584.rst:1006
msgid ""
"`PEP: Dict addition and subtraction "
"<https://mail.python.org/archives/list/python-"
"ideas@python.org/thread/KLDQAPOIJEANCKYCHQZ536WHQ45I6UVW/>`_"
msgstr ""

#: ../../pep-0584.rst:1009
msgid ""
"`PEP 584: Add + and += operators to the built-in dict class. "
"<https://mail.python.org/archives/list/python-"
"ideas@python.org/thread/W2FCSC3JDA7NUBXAVSTVCUDEGAKWWPTH/>`_"
msgstr ""

#: ../../pep-0584.rst:1012
msgid ""
"`Moving PEP 584 forward (dict + and += operators) "
"<https://mail.python.org/archives/list/python-"
"ideas@python.org/thread/SWBLMTNQXNL3O5LN3327IYNPFIL2QSH5/>`_"
msgstr ""

#: ../../pep-0584.rst:1015
msgid ""
"`PEP 584: Add Union Operators To dict "
"<https://mail.python.org/archives/list/python-"
"dev@python.org/thread/TTIKCDIPC2CDHX23Y57CPHDSVYOWCCER/>`_"
msgstr ""

#: ../../pep-0584.rst:1018
msgid ""
"`Accepting PEP 584: Add Union Operators To dict "
"<https://mail.python.org/archives/list/python-"
"dev@python.org/thread/6KT2KIOTYXMDCD2CCAOLOI7LUGTN6MBS>`_"
msgstr ""

#: ../../pep-0584.rst:1021
msgid "`Ticket on the bug tracker <https://bugs.python.org/issue36144>`_"
msgstr ""

#: ../../pep-0584.rst:1023
msgid ""
"Merging two dictionaries in an expression is a frequently requested "
"feature.  For example:"
msgstr ""

#: ../../pep-0584.rst:1026
msgid ""
"https://stackoverflow.com/questions/38987/how-to-merge-two-dictionaries-"
"in-a-single-expression"
msgstr ""

#: ../../pep-0584.rst:1028
msgid ""
"https://stackoverflow.com/questions/1781571/how-to-concatenate-two-"
"dictionaries-to-create-a-new-one-in-python"
msgstr ""

#: ../../pep-0584.rst:1030
msgid ""
"https://stackoverflow.com/questions/6005066/adding-dictionaries-together-"
"python"
msgstr ""

#: ../../pep-0584.rst:1032
msgid "Occasionally people request alternative behavior for the merge:"
msgstr ""

#: ../../pep-0584.rst:1034
msgid "https://stackoverflow.com/questions/1031199/adding-dictionaries-in-python"
msgstr ""

#: ../../pep-0584.rst:1036
msgid "https://stackoverflow.com/questions/877295/python-dict-add-by-valuedict-2"
msgstr ""

#: ../../pep-0584.rst:1038
msgid ""
"...including one proposal to treat dicts as `sets of keys "
"<https://mail.python.org/archives/list/python-"
"ideas@python.org/message/YY3KZZGEX6VEFX5QZJ33P7NTTXGPZQ7N/>`_."
msgstr ""

#: ../../pep-0584.rst:1041
msgid ""
"`Ian Lee's proto-PEP <https://lwn.net/Articles/635444/>`_, and "
"`discussion <https://lwn.net/Articles/635397/>`_ in 2015.  Further "
"discussion took place on `Python-Ideas "
"<https://mail.python.org/archives/list/python-"
"ideas@python.org/thread/43OZV3MR4XLFRPCI27I7BB6HVBD25M2E/>`_."
msgstr ""

#: ../../pep-0584.rst:1046
msgid ""
"(Observant readers will notice that one of the authors of this PEP was "
"more skeptical of the idea in 2015.)"
msgstr ""

#: ../../pep-0584.rst:1049
msgid ""
"Adding `a full complement of operators to dicts "
"<https://mail.python.org/archives/list/python-"
"ideas@python.org/thread/EKWMDJKMVOJCOROQVHJFQX7W2L55I5RA/>`_."
msgstr ""

#: ../../pep-0584.rst:1052
msgid ""
"`Discussion on Y-Combinator "
"<https://news.ycombinator.com/item?id=19314646>`_."
msgstr ""

#: ../../pep-0584.rst:1054
msgid "https://treyhunner.com/2016/02/how-to-merge-dictionaries-in-python/"
msgstr ""

#: ../../pep-0584.rst:1056
msgid ""
"https://code.tutsplus.com/tutorials/how-to-merge-two-python-dictionaries"
"--cms-26230"
msgstr ""

#: ../../pep-0584.rst:1058
msgid ""
"In direct response to an earlier draft of this PEP, Serhiy Storchaka "
"raised `a ticket in the bug tracker "
"<https://bugs.python.org/issue36431>`_ to replace the ``copy(); "
"update()`` idiom with dict unpacking."
msgstr ""

#: ../../pep-0584.rst:1066
msgid "Copyright"
msgstr ""

#: ../../pep-0584.rst:1068
msgid ""
"This document is placed in the public domain or under the "
"CC0-1.0-Universal license, whichever is more permissive."
msgstr ""

