# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0515.txt
msgid "PEP"
msgstr ""

#: ../../pep-0515.txt:1
msgid "515"
msgstr ""

#: ../../pep-0515.txt
msgid "Title"
msgstr ""

#: ../../pep-0515.txt:2
msgid "Underscores in Numeric Literals"
msgstr ""

#: ../../pep-0515.txt
msgid "Author"
msgstr ""

#: ../../pep-0515.txt:5
msgid "Georg Brandl, Serhiy Storchaka"
msgstr ""

#: ../../pep-0515.txt
msgid "Status"
msgstr ""

#: ../../pep-0515.txt:6
msgid "Final"
msgstr ""

#: ../../pep-0515.txt
msgid "Type"
msgstr ""

#: ../../pep-0515.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0515.txt
msgid "Created"
msgstr ""

#: ../../pep-0515.txt:9
msgid "10-Feb-2016"
msgstr ""

#: ../../pep-0515.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0515.txt:10
msgid "3.6"
msgstr ""

#: ../../pep-0515.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0515.txt:11
msgid "10-Feb-2016, 11-Feb-2016"
msgstr ""

#: ../../pep-0515.txt:14
msgid "Abstract and Rationale"
msgstr ""

#: ../../pep-0515.txt:16
msgid ""
"This PEP proposes to extend Python's syntax and number-from-string "
"constructors so that underscores can be used as visual separators for "
"digit grouping purposes in integral, floating-point and complex number "
"literals."
msgstr ""

#: ../../pep-0515.txt:21
msgid ""
"This is a common feature of other modern languages, and can aid "
"readability of long literals, or literals whose value should clearly "
"separate into parts, such as bytes or words in hexadecimal notation."
msgstr ""

#: ../../pep-0515.txt:25
msgid "Examples::"
msgstr ""

#: ../../pep-0515.txt:41
msgid "Specification"
msgstr ""

#: ../../pep-0515.txt:43
msgid ""
"The current proposal is to allow one underscore between digits, and after"
" base specifiers in numeric literals.  The underscores have no semantic "
"meaning, and literals are parsed as if the underscores were absent."
msgstr ""

#: ../../pep-0515.txt:49
msgid "Literal Grammar"
msgstr ""

#: ../../pep-0515.txt:51
msgid "The production list for integer literals would therefore look like this::"
msgstr ""

#: ../../pep-0515.txt:65
msgid "For floating-point and complex literals::"
msgstr ""

#: ../../pep-0515.txt:76
msgid "Constructors"
msgstr ""

#: ../../pep-0515.txt:78
msgid ""
"Following the same rules for placement, underscores will be allowed in "
"the following constructors:"
msgstr ""

#: ../../pep-0515.txt:81
msgid "``int()`` (with any base)"
msgstr ""

#: ../../pep-0515.txt:82
msgid "``float()``"
msgstr ""

#: ../../pep-0515.txt:83
msgid "``complex()``"
msgstr ""

#: ../../pep-0515.txt:84
msgid "``Decimal()``"
msgstr ""

#: ../../pep-0515.txt:87
msgid "Further changes"
msgstr ""

#: ../../pep-0515.txt:89
msgid ""
"The new-style number-to-string formatting language will be extended to "
"allow ``_`` as a thousands separator, where currently only ``,`` is "
"supported.  This can be used to easily generate code with more readable "
"literals.  [11]_"
msgstr ""

#: ../../pep-0515.txt:94
msgid ""
"The syntax would be the same as for the comma, e.g. ``{:10_}`` for a "
"width of 10 with ``_`` separator."
msgstr ""

#: ../../pep-0515.txt:97
msgid ""
"For the ``b``, ``x`` and ``o`` format specifiers, ``_`` will be allowed "
"and group by 4 digits."
msgstr ""

#: ../../pep-0515.txt:102
msgid "Prior Art"
msgstr ""

#: ../../pep-0515.txt:104
msgid ""
"Those languages that do allow underscore grouping implement a large "
"variety of rules for allowed placement of underscores.  In cases where "
"the language spec contradicts the actual behavior, the actual behavior is"
" listed.  (\"single\" or \"multiple\" refer to allowing runs of "
"consecutive underscores.)"
msgstr ""

#: ../../pep-0515.txt:110
msgid "Ada: single, only between digits [8]_"
msgstr ""

#: ../../pep-0515.txt:111
msgid "C# (open proposal for 7.0): multiple, only between digits [6]_"
msgstr ""

#: ../../pep-0515.txt:112
msgid "C++14: single, between digits (different separator chosen) [1]_"
msgstr ""

#: ../../pep-0515.txt:113
msgid "D: multiple, anywhere, including trailing [2]_"
msgstr ""

#: ../../pep-0515.txt:114
msgid "Java: multiple, only between digits [7]_"
msgstr ""

#: ../../pep-0515.txt:115
msgid "Julia: single, only between digits (but not in float exponent parts) [9]_"
msgstr ""

#: ../../pep-0515.txt:117
msgid ""
"Perl 5: multiple, basically anywhere, although docs say it's restricted "
"to one underscore between digits [3]_"
msgstr ""

#: ../../pep-0515.txt:119
msgid "Ruby: single, only between digits (although docs say \"anywhere\") [10]_"
msgstr ""

#: ../../pep-0515.txt:121
msgid ""
"Rust: multiple, anywhere, except for between exponent \"e\" and digits "
"[4]_"
msgstr ""

#: ../../pep-0515.txt:123
msgid ""
"Swift: multiple, between digits and trailing (although textual "
"description says only \"between digits\") [5]_"
msgstr ""

#: ../../pep-0515.txt:128
msgid "Alternative Syntax"
msgstr ""

#: ../../pep-0515.txt:131
msgid "Underscore Placement Rules"
msgstr ""

#: ../../pep-0515.txt:133
msgid ""
"Instead of the relatively strict rule specified above, the use of "
"underscores could be less limited.  As seen in other languages, common "
"rules include:"
msgstr ""

#: ../../pep-0515.txt:137
msgid "Only one consecutive underscore allowed, and only between digits."
msgstr ""

#: ../../pep-0515.txt:138
msgid "Multiple consecutive underscores allowed, but only between digits."
msgstr ""

#: ../../pep-0515.txt:139
msgid ""
"Multiple consecutive underscores allowed, in most positions except for "
"the start of the literal, or special positions like after a decimal "
"point."
msgstr ""

#: ../../pep-0515.txt:143
msgid ""
"The syntax in this PEP has ultimately been selected because it covers the"
" common use cases, and does not allow for syntax that would have to be "
"discouraged in style guides anyway."
msgstr ""

#: ../../pep-0515.txt:147
msgid ""
"A less common rule would be to allow underscores only every N digits "
"(where N could be 3 for decimal literals, or 4 for hexadecimal ones). "
"This is unnecessarily restrictive, especially considering the separator "
"placement is different in different cultures."
msgstr ""

#: ../../pep-0515.txt:153
msgid "Different Separators"
msgstr ""

#: ../../pep-0515.txt:155
msgid ""
"A proposed alternate syntax was to use whitespace for grouping. Although "
"strings are a precedent for combining adjoining literals, the behavior "
"can lead to unexpected effects which are not possible with underscores.  "
"Also, no other language is known to use this rule, except for languages "
"that generally disregard any whitespace."
msgstr ""

#: ../../pep-0515.txt:161
msgid ""
"C++14 introduces apostrophes for grouping (because underscores introduce "
"ambiguity with user-defined literals), which is not considered because of"
" the use in Python's string literals. [1]_"
msgstr ""

#: ../../pep-0515.txt:167
msgid "Implementation"
msgstr ""

#: ../../pep-0515.txt:169
msgid ""
"A preliminary patch that implements the specification given above has "
"been posted to the issue tracker. [12]_"
msgstr ""

#: ../../pep-0515.txt:174
msgid "References"
msgstr ""

#: ../../pep-0515.txt:176
msgid "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3499.html"
msgstr ""

#: ../../pep-0515.txt:178
msgid "https://dlang.org/spec/lex.html#integerliteral"
msgstr ""

#: ../../pep-0515.txt:180
msgid "https://perldoc.perl.org/perldata#Scalar-value-constructors"
msgstr ""

#: ../../pep-0515.txt:182
msgid ""
"https://web.archive.org/web/20160304121349/http://doc.rust-"
"lang.org/reference.html#integer-literals"
msgstr ""

#: ../../pep-0515.txt:184
msgid "https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html"
msgstr ""

#: ../../pep-0515.txt:186
msgid "https://github.com/dotnet/roslyn/issues/216"
msgstr ""

#: ../../pep-0515.txt:188
msgid ""
"https://docs.oracle.com/javase/7/docs/technotes/guides/language"
"/underscores-literals.html"
msgstr ""

#: ../../pep-0515.txt:190
msgid "http://archive.adaic.com/standards/83lrm/html/lrm-02-04.html#2.4"
msgstr ""

#: ../../pep-0515.txt:192
msgid ""
"https://web.archive.org/web/20160223175334/http://docs.julialang.org/en/release-0.4/manual"
"/integers-and-floating-point-numbers/"
msgstr ""

#: ../../pep-0515.txt:194
msgid ""
"https://ruby-doc.org/core-2.3.0/doc/syntax/literals_rdoc.html#label-"
"Numbers"
msgstr ""

#: ../../pep-0515.txt:196
msgid "https://mail.python.org/pipermail/python-dev/2016-February/143283.html"
msgstr ""

#: ../../pep-0515.txt:198
msgid "http://bugs.python.org/issue26331"
msgstr ""

#: ../../pep-0515.txt:202
msgid "Copyright"
msgstr ""

#: ../../pep-0515.txt:204
msgid "This document has been placed in the public domain."
msgstr ""

