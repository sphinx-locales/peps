# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0604.rst
msgid "PEP"
msgstr ""

#: ../../pep-0604.rst:1
msgid "604"
msgstr ""

#: ../../pep-0604.rst
msgid "Title"
msgstr ""

#: ../../pep-0604.rst:2
msgid "Allow writing union types as ``X | Y``"
msgstr ""

#: ../../pep-0604.rst
msgid "Author"
msgstr ""

#: ../../pep-0604.rst:3
msgid "Philippe PRADOS <python@prados.fr>, Maggie Moss <maggiebmoss@gmail.com>"
msgstr ""

#: ../../pep-0604.rst
msgid "Sponsor"
msgstr ""

#: ../../pep-0604.rst:4
msgid "Chris Angelico <rosuav@gmail.com>"
msgstr ""

#: ../../pep-0604.rst
msgid "BDFL-Delegate"
msgstr ""

#: ../../pep-0604.rst:5
msgid "Guido van Rossum <guido@python.org>"
msgstr ""

#: ../../pep-0604.rst
msgid "Discussions-To"
msgstr ""

#: ../../pep-0604.rst:6
msgid "typing-sig@python.org"
msgstr ""

#: ../../pep-0604.rst
msgid "Status"
msgstr ""

#: ../../pep-0604.rst:7
msgid "Accepted"
msgstr ""

#: ../../pep-0604.rst
msgid "Type"
msgstr ""

#: ../../pep-0604.rst:8
msgid "Standards Track"
msgstr ""

#: ../../pep-0604.rst
msgid "Created"
msgstr ""

#: ../../pep-0604.rst:10
msgid "28-Aug-2019"
msgstr ""

#: ../../pep-0604.rst
msgid "Python-Version"
msgstr ""

#: ../../pep-0604.rst:11
msgid "3.10"
msgstr ""

#: ../../pep-0604.rst
msgid "Post-History"
msgstr ""

#: ../../pep-0604.rst:12
msgid "28-Aug-2019, 05-Aug-2020"
msgstr ""

#: ../../pep-0604.rst:16
msgid "Abstract"
msgstr ""

#: ../../pep-0604.rst:18
msgid ""
"This PEP proposes overloading the ``|`` operator on types to allow "
"writing ``Union[X, Y]`` as ``X | Y``, and allows it to appear in "
"``isinstance`` and ``issubclass`` calls."
msgstr ""

#: ../../pep-0604.rst:24
msgid "Motivation"
msgstr ""

#: ../../pep-0604.rst:26
msgid ""
"PEP 484 and PEP 526 propose a generic syntax to add typing to variables, "
"parameters and function returns. PEP 585 proposes to `expose parameters "
"to generics at runtime <https://www.python.org/dev/peps/pep-0585"
"/#parameters-to-generics-are-available-at-runtime>`_. Mypy [1]_ accepts a"
" syntax which looks like::"
msgstr ""

#: ../../pep-0604.rst:37
msgid "To describe a disjunction (union type), the user must use ``Union[X, Y]``."
msgstr ""

#: ../../pep-0604.rst:39
msgid "The verbosity of this syntax does not help with type adoption."
msgstr ""

#: ../../pep-0604.rst:43
msgid "Proposal"
msgstr ""

#: ../../pep-0604.rst:45
msgid ""
"Inspired by Scala [2]_ and Pike [3]_, this proposal adds operator "
"``type.__or__()``.  With this new operator, it is possible to write ``int"
" | str`` instead of ``Union[int, str]``. In addition to annotations, the "
"result of this expression would then be valid in ``isinstance()`` and "
"``issubclass()``::"
msgstr ""

#: ../../pep-0604.rst:54
msgid ""
"We will also be able to write ``t | None`` or ``None | t`` instead of "
"``Optional[t]``::"
msgstr ""

#: ../../pep-0604.rst:61
msgid "Specification"
msgstr ""

#: ../../pep-0604.rst:63
msgid ""
"The new union syntax should be accepted for function, variable and "
"parameter annotations."
msgstr ""

#: ../../pep-0604.rst:66
msgid "Simplified Syntax"
msgstr ""

#: ../../pep-0604.rst:84
msgid "The existing ``typing.Union`` and ``|`` syntax should be equivalent."
msgstr ""

#: ../../pep-0604.rst:93
msgid "The order of the items in the Union should not matter for equality."
msgstr ""

#: ../../pep-0604.rst:101
msgid "Optional values should be equivalent to the new union syntax"
msgstr ""

#: ../../pep-0604.rst:107
msgid "A new Union.__repr__() method should be implemented."
msgstr ""

#: ../../pep-0604.rst:118
msgid "isinstance and issubclass"
msgstr ""

#: ../../pep-0604.rst:120
msgid ""
"The new syntax should be accepted for calls to ``isinstance`` and "
"``issubclass`` as long as the Union items are valid arguments to "
"``isinstance`` and ``issubclass`` themselves."
msgstr ""

#: ../../pep-0604.rst:140
msgid "Incompatible changes"
msgstr ""

#: ../../pep-0604.rst:142
msgid "In some situations, some exceptions will not be raised as expected."
msgstr ""

#: ../../pep-0604.rst:144
msgid "If a metaclass implements the ``__or__`` operator, it will override this::"
msgstr ""

#: ../../pep-0604.rst:160
msgid "Objections and responses"
msgstr ""

#: ../../pep-0604.rst:162
msgid "For more details about discussions, see links below:"
msgstr ""

#: ../../pep-0604.rst:164
msgid ""
"`Discussion in python-ideas <https://mail.python.org/archives/list"
"/python-ideas@python.org/thread/FCTXGDT2NNKRJQ6CDEPWUXHVG2AAQZZY/>`_"
msgstr ""

#: ../../pep-0604.rst:165
msgid ""
"`Discussion in typing-sig <https://mail.python.org/archives/list/typing-"
"sig@python.org/thread/D5HCB4NT4S3WSK33WI26WZSFEXCEMNHN/>`_"
msgstr ""

#: ../../pep-0604.rst:168
msgid "1. Add a new operator for ``Union[type1, type2]``?"
msgstr ""

#: ../../pep-0604.rst:170 ../../pep-0604.rst:209
msgid "PROS:"
msgstr ""

#: ../../pep-0604.rst:172
msgid ""
"This syntax can be more readable, and is similar to other languages "
"(Scala, ...)"
msgstr ""

#: ../../pep-0604.rst:173
msgid ""
"At runtime, ``int|str`` might return a simple object in 3.10, rather than"
" everything that you'd need to grab from importing ``typing``"
msgstr ""

#: ../../pep-0604.rst:177 ../../pep-0604.rst:213
msgid "CONS:"
msgstr ""

#: ../../pep-0604.rst:179
msgid ""
"Adding this operator introduces a dependency between ``typing`` and "
"``builtins``"
msgstr ""

#: ../../pep-0604.rst:180
msgid ""
"Breaks the backport (in that ``typing`` can easily be backported but core"
" ``types`` can't)"
msgstr ""

#: ../../pep-0604.rst:181
msgid ""
"If Python itself doesn't have to be changed, we'd still need to implement"
" it in mypy, Pyre, PyCharm, Pytype, and who knows what else (it's a minor"
" change see \"Reference Implementation\")"
msgstr ""

#: ../../pep-0604.rst:186
msgid ""
"2. Change only PEP 484 (Type hints) to accept the syntax ``type1 | "
"type2`` ?"
msgstr ""

#: ../../pep-0604.rst:188
msgid ""
"PEP 563 (Postponed Evaluation of Annotations) is enough to accept this "
"proposition, if we accept to not be compatible with the dynamic "
"evaluation of annotations (``eval()``)."
msgstr ""

#: ../../pep-0604.rst:203
msgid "3. Extend ``isinstance()`` and ``issubclass()`` to accept ``Union`` ?"
msgstr ""

#: ../../pep-0604.rst:211
msgid ""
"If they were permitted, then instance checking could use an extremely "
"clean-looking notation"
msgstr ""

#: ../../pep-0604.rst:215
msgid "Must migrate all of the ``typing`` module in ``builtin``"
msgstr ""

#: ../../pep-0604.rst:219
msgid "Reference Implementation"
msgstr ""

#: ../../pep-0604.rst:221
msgid ""
"A new built-in ``Union`` type must be implemented to hold the return "
"value of ``t1 | t2``, and it must be supported by ``isinstance()`` and "
"``issubclass()``. This type can be placed in the ``types`` module. "
"Interoperability between ``types.Union`` and ``typing.Union`` must be "
"provided."
msgstr ""

#: ../../pep-0604.rst:227
msgid ""
"Once the Python language is extended, mypy [1]_ and other type checkers "
"will need to be updated to accept this new syntax."
msgstr ""

#: ../../pep-0604.rst:231
msgid ""
"A proposed implementation for `cpython is here "
"<https://github.com/python/cpython/pull/21515>`_."
msgstr ""

#: ../../pep-0604.rst:233
msgid ""
"A proposed implementation for `mypy is here "
"<https://github.com/pprados/mypy/tree/PEP604>`_."
msgstr ""

#: ../../pep-0604.rst:238
msgid "References"
msgstr ""

#: ../../pep-0604.rst:240
msgid "mypy http://mypy-lang.org/"
msgstr ""

#: ../../pep-0604.rst:242
msgid ""
"Scala Union Types https://dotty.epfl.ch/docs/reference/new-types/union-"
"types.html"
msgstr ""

#: ../../pep-0604.rst:244
msgid "Pike http://pike.lysator.liu.se/docs/man/chapter_3.html#3.5"
msgstr ""

#: ../../pep-0604.rst:249
msgid "Copyright"
msgstr ""

#: ../../pep-0604.rst:251
msgid ""
"This document is placed in the public domain or under the "
"CC0-1.0-Universal license, whichever is more permissive."
msgstr ""

