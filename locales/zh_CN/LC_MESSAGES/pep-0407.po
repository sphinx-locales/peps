# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0407.txt
msgid "PEP"
msgstr ""

#: ../../pep-0407.txt:1
msgid "407"
msgstr ""

#: ../../pep-0407.txt
msgid "Title"
msgstr ""

#: ../../pep-0407.txt:2
msgid "New release cycle and introducing long-term support versions"
msgstr ""

#: ../../pep-0407.txt
msgid "Author"
msgstr ""

#: ../../pep-0407.txt:5
msgid ""
"Antoine Pitrou <solipsis@pitrou.net>, Georg Brandl <georg@python.org>, "
"Barry Warsaw <barry@python.org>"
msgstr ""

#: ../../pep-0407.txt
msgid "Status"
msgstr ""

#: ../../pep-0407.txt:8
msgid "Deferred"
msgstr ""

#: ../../pep-0407.txt
msgid "Type"
msgstr ""

#: ../../pep-0407.txt:9
msgid "Process"
msgstr ""

#: ../../pep-0407.txt
msgid "Created"
msgstr ""

#: ../../pep-0407.txt:11
msgid "12-Jan-2012"
msgstr ""

#: ../../pep-0407.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0407.txt:12
msgid "17-Jan-2012"
msgstr ""

#: ../../pep-0407.txt:16
msgid "Abstract"
msgstr ""

#: ../../pep-0407.txt:18
msgid ""
"Finding a release cycle for an open-source project is a delicate exercise"
" in managing mutually contradicting constraints: developer manpower, "
"availability of release management volunteers, ease of maintenance for "
"users and third-party packagers, quick availability of new features (and "
"behavioural changes), availability of bug fixes without pulling in new "
"features or behavioural changes."
msgstr ""

#: ../../pep-0407.txt:25
msgid ""
"The current release cycle errs on the conservative side.  It is adequate "
"for people who value stability over reactivity.  This PEP is an attempt "
"to keep the stability that has become a Python trademark, while offering "
"a more fluid release of features, by introducing the notion of long-term "
"support versions."
msgstr ""

#: ../../pep-0407.txt:33
msgid "Scope"
msgstr ""

#: ../../pep-0407.txt:35
msgid ""
"This PEP doesn't try to change the maintenance period or release scheme "
"for the 2.7 branch.  Only 3.x versions are considered."
msgstr ""

#: ../../pep-0407.txt:40
msgid "Proposal"
msgstr ""

#: ../../pep-0407.txt:42
msgid ""
"Under the proposed scheme, there would be two kinds of feature versions "
"(sometimes dubbed \"minor versions\", for example 3.2 or 3.3): normal "
"feature versions and long-term support (LTS) versions."
msgstr ""

#: ../../pep-0407.txt:46
msgid ""
"Normal feature versions would get either zero or at most one bugfix "
"release; the latter only if needed to fix critical issues.  Security fix "
"handling for these branches needs to be decided."
msgstr ""

#: ../../pep-0407.txt:50
msgid ""
"LTS versions would get regular bugfix releases until the next LTS version"
" is out.  They then would go into security fixes mode, up to a "
"termination date at the release manager's discretion."
msgstr ""

#: ../../pep-0407.txt:55
msgid "Periodicity"
msgstr ""

#: ../../pep-0407.txt:57
msgid ""
"A new feature version would be released every X months.  We tentatively "
"propose X = 6 months."
msgstr ""

#: ../../pep-0407.txt:60
msgid ""
"LTS versions would be one out of N feature versions.  We tentatively "
"propose N = 4."
msgstr ""

#: ../../pep-0407.txt:63
msgid ""
"With these figures, a new LTS version would be out every 24 months, and "
"remain supported until the next LTS version 24 months later.  This is "
"mildly similar to today's 18 months bugfix cycle for every feature "
"version."
msgstr ""

#: ../../pep-0407.txt:69
msgid "Pre-release versions"
msgstr ""

#: ../../pep-0407.txt:71
msgid ""
"More frequent feature releases imply a smaller number of disruptive "
"changes per release.  Therefore, the number of pre-release builds (alphas"
" and betas) can be brought down considerably.  Two alpha builds and a "
"single beta build would probably be enough in the regular case. The "
"number of release candidates depends, as usual, on the number of last-"
"minute fixes before final release."
msgstr ""

#: ../../pep-0407.txt:80
msgid "Effects"
msgstr ""

#: ../../pep-0407.txt:83
msgid "Effect on development cycle"
msgstr ""

#: ../../pep-0407.txt:85
msgid ""
"More feature releases might mean more stress on the development and "
"release management teams.  This is quantitatively alleviated by the "
"smaller number of pre-release versions; and qualitatively by the lesser "
"amount of disruptive changes (meaning less potential for breakage).  The "
"shorter feature freeze period (after the first beta build until the final"
" release) is easier to accept.  The rush for adding features just before "
"feature freeze should also be much smaller."
msgstr ""

#: ../../pep-0407.txt:95
msgid "Effect on bugfix cycle"
msgstr ""

#: ../../pep-0407.txt:97
msgid ""
"The effect on fixing bugs should be minimal with the proposed figures. "
"The same number of branches would be simultaneously open for bugfix "
"maintenance (two until 2.x is terminated, then one)."
msgstr ""

#: ../../pep-0407.txt:102
msgid "Effect on workflow"
msgstr ""

#: ../../pep-0407.txt:104
msgid ""
"The workflow for new features would be the same: developers would only "
"commit them on the ``default`` branch."
msgstr ""

#: ../../pep-0407.txt:107
msgid ""
"The workflow for bug fixes would be slightly updated: developers would "
"commit bug fixes to the current LTS branch (for example ``3.3``) and then"
" merge them into ``default``."
msgstr ""

#: ../../pep-0407.txt:111
msgid ""
"If some critical fixes are needed to a non-LTS version, they can be "
"grafted from the current LTS branch to the non-LTS branch, just like "
"fixes are ported from 3.x to 2.7 today."
msgstr ""

#: ../../pep-0407.txt:116
msgid "Effect on the community"
msgstr ""

#: ../../pep-0407.txt:118
msgid ""
"People who value stability can just synchronize on the LTS releases "
"which, with the proposed figures, would give a similar support cycle "
"(both in duration and in stability)."
msgstr ""

#: ../../pep-0407.txt:122
msgid ""
"People who value reactivity and access to new features (without taking "
"the risk to install alpha versions or Mercurial snapshots) would get much"
" more value from the new release cycle than currently."
msgstr ""

#: ../../pep-0407.txt:126
msgid ""
"People who want to contribute new features or improvements would be more "
"motivated to do so, knowing that their contributions will be more quickly"
" available to normal users.  Also, a smaller feature freeze period makes "
"it less cumbersome to interact with contributors of features."
msgstr ""

#: ../../pep-0407.txt:134
msgid "Discussion"
msgstr ""

#: ../../pep-0407.txt:136
msgid "These are open issues that should be worked out during discussion:"
msgstr ""

#: ../../pep-0407.txt:138
msgid ""
"Decide on X (months between feature releases) and N (feature releases per"
" LTS release) as defined above."
msgstr ""

#: ../../pep-0407.txt:141
msgid ""
"For given values of X and N, is the no-bugfix-releases policy for non-LTS"
" versions feasible?"
msgstr ""

#: ../../pep-0407.txt:144
msgid "What is the policy for security fixes?"
msgstr ""

#: ../../pep-0407.txt:146
msgid ""
"Restrict new syntax and similar changes (i.e. everything that was "
"prohibited by PEP 3003) to LTS versions?"
msgstr ""

#: ../../pep-0407.txt:149
msgid "What is the effect on packagers such as Linux distributions?"
msgstr ""

#: ../../pep-0407.txt:151
msgid ""
"How will release version numbers or other identifying and marketing "
"material make it clear to users which versions are normal feature "
"releases and which are LTS releases?  How do we manage user expectations?"
msgstr ""

#: ../../pep-0407.txt:156
msgid ""
"Does the faster release cycle mean we could some day reach 3.10 and "
"above?  Some people expressed a tacit expectation that version numbers "
"always fit in one decimal digit."
msgstr ""

#: ../../pep-0407.txt:160
msgid ""
"A community poll or survey to collect opinions from the greater Python "
"community would be valuable before making a final decision."
msgstr ""

#: ../../pep-0407.txt:165
msgid "Copyright"
msgstr ""

#: ../../pep-0407.txt:167
msgid "This document has been placed in the public domain."
msgstr ""

