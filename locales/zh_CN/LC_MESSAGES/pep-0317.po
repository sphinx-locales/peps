# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0317.txt
msgid "PEP"
msgstr ""

#: ../../pep-0317.txt:1
msgid "317"
msgstr ""

#: ../../pep-0317.txt
msgid "Title"
msgstr ""

#: ../../pep-0317.txt:2
msgid "Eliminate Implicit Exception Instantiation"
msgstr ""

#: ../../pep-0317.txt
msgid "Author"
msgstr ""

#: ../../pep-0317.txt:5
msgid "Steven Taschuk <staschuk@telusplanet.net>"
msgstr ""

#: ../../pep-0317.txt
msgid "Status"
msgstr ""

#: ../../pep-0317.txt:6
msgid "Rejected"
msgstr ""

#: ../../pep-0317.txt
msgid "Type"
msgstr ""

#: ../../pep-0317.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0317.txt
msgid "Created"
msgstr ""

#: ../../pep-0317.txt:9
msgid "06-May-2003"
msgstr ""

#: ../../pep-0317.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0317.txt:10
msgid "2.4"
msgstr ""

#: ../../pep-0317.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0317.txt:11
msgid "09-Jun-2003"
msgstr ""

#: ../../pep-0317.txt:15
msgid "Abstract"
msgstr ""

#: ../../pep-0317.txt:17
msgid ""
"\"For clarity in new code, the form ``raise class(argument, ...)`` is "
"recommended (i.e. make an explicit call to the constructor).\""
msgstr ""

#: ../../pep-0317.txt:24
msgid "Guido van Rossum, in 1997 [1]_"
msgstr ""

#: ../../pep-0317.txt:22
msgid ""
"This PEP proposes the formal deprecation and eventual elimination of "
"forms of the ``raise`` statement which implicitly instantiate an "
"exception.  For example, statements such as ::"
msgstr ""

#: ../../pep-0317.txt:29
msgid "must under this proposal be replaced with their synonyms ::"
msgstr ""

#: ../../pep-0317.txt:34
msgid ""
"Note that these latter statements are already legal, and that this PEP "
"does not change their meaning."
msgstr ""

#: ../../pep-0317.txt:37
msgid ""
"Eliminating these forms of ``raise`` makes it impossible to use string "
"exceptions; accordingly, this PEP also proposes the formal deprecation "
"and eventual elimination of string exceptions."
msgstr ""

#: ../../pep-0317.txt:41
msgid ""
"Adoption of this proposal breaks backwards compatibility.  Under the "
"proposed implementation schedule, Python 2.4 will introduce warnings "
"about uses of ``raise`` which will eventually become incorrect, and "
"Python 3.0 will eliminate them entirely.  (It is assumed that this "
"transition period -- 2.4 to 3.0 -- will be at least one year long, to "
"comply with the guidelines of PEP 5 [2]_.)"
msgstr ""

#: ../../pep-0317.txt:50
msgid "Motivation"
msgstr ""

#: ../../pep-0317.txt:53
msgid "String Exceptions"
msgstr ""

#: ../../pep-0317.txt:55
msgid ""
"It is assumed that removing string exceptions will be uncontroversial, "
"since it has been intended since at least Python 1.5, when the standard "
"exception types were changed to classes [1]_."
msgstr ""

#: ../../pep-0317.txt:59
msgid ""
"For the record: string exceptions should be removed because the presence "
"of two kinds of exception complicates the language without any "
"compensation.  Instance exceptions are superior because, for example,"
msgstr ""

#: ../../pep-0317.txt:64
msgid ""
"the class-instance relationship more naturally expresses the relationship"
" between the exception type and value,"
msgstr ""

#: ../../pep-0317.txt:67
msgid ""
"they can be organized naturally using superclass-subclass relationships, "
"and"
msgstr ""

#: ../../pep-0317.txt:70
msgid "they can encapsulate error-reporting behaviour (for example)."
msgstr ""

#: ../../pep-0317.txt:74
msgid "Implicit Instantiation"
msgstr ""

#: ../../pep-0317.txt:76
msgid ""
"Guido's 1997 essay [1]_ on changing the standard exceptions into classes "
"makes clear why ``raise`` can instantiate implicitly:"
msgstr ""

#: ../../pep-0317.txt:79
msgid ""
"\"The raise statement has been extended to allow raising a class "
"exception without explicit instantiation. The following forms, called the"
" \"compatibility forms\" of the raise statement [...]  The motivation for"
" introducing the compatibility forms was to allow backward compatibility "
"with old code that raised a standard exception.\""
msgstr ""

#: ../../pep-0317.txt:86
msgid ""
"For example, it was desired that pre-1.5 code which used string exception"
" syntax such as ::"
msgstr ""

#: ../../pep-0317.txt:91
msgid ""
"would work both on versions of Python in which ``TypeError`` was a "
"string, and on versions in which it was a class."
msgstr ""

#: ../../pep-0317.txt:94
msgid ""
"When no such consideration obtains -- that is, when the desired exception"
" type is not a string in any version of the software which the code must "
"support -- there is no good reason to instantiate implicitly, and it is "
"clearer not to.  For example:"
msgstr ""

#: ../../pep-0317.txt:99
msgid "In the code ::"
msgstr ""

#: ../../pep-0317.txt:106
msgid ""
"the syntactic parallel between the ``raise`` and ``except`` statements "
"strongly suggests that ``raised`` and ``caught`` refer to the same "
"object.  For string exceptions this actually is the case, but for "
"instance exceptions it is not."
msgstr ""

#: ../../pep-0317.txt:111
msgid ""
"When instantiation is implicit, it is not obvious when it occurs, for "
"example, whether it occurs when the exception is raised or when it is "
"caught.  Since it actually happens at the ``raise``, the code should say "
"so."
msgstr ""

#: ../../pep-0317.txt:116
msgid ""
"(Note that at the level of the C API, an exception can be \"raised\" and "
"\"caught\" without being instantiated; this is used as an optimization "
"by, for example, ``PyIter_Next``.  But in Python, no such optimization is"
" or should be available.)"
msgstr ""

#: ../../pep-0317.txt:121
msgid ""
"An implicitly instantiating ``raise`` statement with no arguments, such "
"as ::"
msgstr ""

#: ../../pep-0317.txt:126
msgid "simply does not do what it says: it does not raise the named object."
msgstr ""

#: ../../pep-0317.txt:129
msgid "The equivalence of ::"
msgstr ""

#: ../../pep-0317.txt:134
msgid ""
"conflates classes and instances, creating a possible source of confusion "
"for beginners.  (Moreover, it is not clear that the interpreter could "
"distinguish between a new-style class and an instance of such a class, so"
" implicit instantiation may be an obstacle to any future plan to let "
"exceptions be new-style objects.)"
msgstr ""

#: ../../pep-0317.txt:141
msgid ""
"In short, implicit instantiation has no advantages other than backwards "
"compatibility, and so should be phased out along with what it exists to "
"ensure compatibility with, namely, string exceptions."
msgstr ""

#: ../../pep-0317.txt:147
msgid "Specification"
msgstr ""

#: ../../pep-0317.txt:149
msgid "The syntax of ``raise_stmt`` [3]_ is to be changed from ::"
msgstr ""

#: ../../pep-0317.txt:153
msgid "to ::"
msgstr ""

#: ../../pep-0317.txt:157
msgid ""
"If no expressions are present, the ``raise`` statement behaves as it does"
" presently: it re-raises the last exception that was active in the "
"current scope, and if no exception has been active in the current scope, "
"a ``TypeError`` is raised indicating that this is the problem."
msgstr ""

#: ../../pep-0317.txt:162
msgid ""
"Otherwise, the first expression is evaluated, producing the *raised "
"object*.  Then the second expression is evaluated, if present, producing "
"the *substituted traceback*.  If no second expression is present, the "
"substituted traceback is ``None``."
msgstr ""

#: ../../pep-0317.txt:167
msgid ""
"The raised object must be an instance.  The class of the instance is the "
"exception type, and the instance itself is the exception value. If the "
"raised object is not an instance -- for example, if it is a class or "
"string -- a ``TypeError`` is raised."
msgstr ""

#: ../../pep-0317.txt:172
msgid ""
"If the substituted traceback is not ``None``, it must be a traceback "
"object, and it is substituted instead of the current location as the "
"place where the exception occurred.  If it is neither a traceback object "
"nor ``None``, a ``TypeError`` is raised."
msgstr ""

#: ../../pep-0317.txt:179
msgid "Backwards Compatibility"
msgstr ""

#: ../../pep-0317.txt:182
msgid "Migration Plan"
msgstr ""

#: ../../pep-0317.txt:185
msgid "Future Statement"
msgstr ""

#: ../../pep-0317.txt:187
msgid "Under the future statement [4]_ ::"
msgstr ""

#: ../../pep-0317.txt:191
msgid ""
"the syntax and semantics of the ``raise`` statement will be as described "
"above.  This future feature is to appear in Python 2.4; its effect is to "
"become standard in Python 3.0."
msgstr ""

#: ../../pep-0317.txt:195
msgid ""
"As the examples below illustrate, this future statement is only needed "
"for code which uses the substituted traceback argument to ``raise``; "
"simple exception raising does not require it."
msgstr ""

#: ../../pep-0317.txt:201
msgid "Warnings"
msgstr ""

#: ../../pep-0317.txt:203
msgid ""
"Three new warnings [5]_, all of category ``DeprecationWarning``, are to "
"be issued to point out uses of ``raise`` which will become incorrect "
"under the proposed changes."
msgstr ""

#: ../../pep-0317.txt:207
msgid ""
"The first warning is issued when a ``raise`` statement is executed in "
"which the first expression evaluates to a string.  The message for this "
"warning is::"
msgstr ""

#: ../../pep-0317.txt:213
msgid ""
"The second warning is issued when a ``raise`` statement is executed in "
"which the first expression evaluates to a class.  The message for this "
"warning is::"
msgstr ""

#: ../../pep-0317.txt:219
msgid ""
"The third warning is issued when a ``raise`` statement with three "
"expressions is compiled.  (Not, note, when it is executed; this is "
"important because the ``SyntaxError`` which this warning presages will "
"occur at compile-time.)  The message for this warning is::"
msgstr ""

#: ../../pep-0317.txt:226
msgid ""
"These warnings are to appear in Python 2.4, and disappear in Python 3.0, "
"when the conditions which cause them are simply errors."
msgstr ""

#: ../../pep-0317.txt:231
msgid "Examples"
msgstr ""

#: ../../pep-0317.txt:234
msgid "Code Using Implicit Instantiation"
msgstr ""

#: ../../pep-0317.txt:236 ../../pep-0317.txt:252 ../../pep-0317.txt:272
msgid "Code such as ::"
msgstr ""

#: ../../pep-0317.txt:243
msgid ""
"will issue a warning when the ``raise`` statement is executed.  The "
"``raise`` statement should be changed to instantiate explicitly::"
msgstr ""

#: ../../pep-0317.txt:250
msgid "Code Using String Exceptions"
msgstr ""

#: ../../pep-0317.txt:257
msgid ""
"will issue a warning when the ``raise`` statement is executed.  The "
"exception type should be changed to a class::"
msgstr ""

#: ../../pep-0317.txt:263
msgid ""
"and, as in the previous example, the ``raise`` statement should be "
"changed to instantiate explicitly ::"
msgstr ""

#: ../../pep-0317.txt:270
msgid "Code Supplying a Traceback Object"
msgstr ""

#: ../../pep-0317.txt:276
msgid "will issue a warning when compiled.  The statement should be changed to ::"
msgstr ""

#: ../../pep-0317.txt:281
msgid "and the future statement ::"
msgstr ""

#: ../../pep-0317.txt:285
msgid ""
"should be added at the top of the module.  Note that adding this future "
"statement also turns the other two warnings into errors, so the changes "
"described in the previous examples must also be applied."
msgstr ""

#: ../../pep-0317.txt:289
msgid "The special case ::"
msgstr ""

#: ../../pep-0317.txt:293
msgid ""
"(which is intended to re-raise a previous exception) should be changed "
"simply to ::"
msgstr ""

#: ../../pep-0317.txt:300
msgid "A Failure of the Plan"
msgstr ""

#: ../../pep-0317.txt:302
msgid ""
"It may occur that a ``raise`` statement which raises a string or "
"implicitly instantiates is not executed in production or testing during "
"the phase-in period for this PEP.  In that case, it will not issue any "
"warnings, but will instead suddenly fail one day in Python 3.0 or a "
"subsequent version.  (The failure is that the wrong exception gets "
"raised, namely a ``TypeError`` complaining about the arguments to "
"``raise``, instead of the exception intended.)"
msgstr ""

#: ../../pep-0317.txt:310
msgid ""
"Such cases can be made rarer by prolonging the phase-in period; they "
"cannot be made impossible short of issuing at compile-time a warning for "
"every ``raise`` statement."
msgstr ""

#: ../../pep-0317.txt:316
msgid "Rejection"
msgstr ""

#: ../../pep-0317.txt:318
msgid ""
"If this PEP were accepted, nearly all existing Python code would need to "
"be reviewed and probably revised; even if all the above arguments in "
"favour of explicit instantiation are accepted, the improvement in clarity"
" is too minor to justify the cost of doing the revision and the risk of "
"new bugs introduced thereby."
msgstr ""

#: ../../pep-0317.txt:324
msgid "This proposal has therefore been rejected [6]_."
msgstr ""

#: ../../pep-0317.txt:326
msgid ""
"Note that string exceptions are slated for removal independently of this "
"proposal; what is rejected is the removal of implicit exception "
"instantiation."
msgstr ""

#: ../../pep-0317.txt:332
msgid "Summary of Discussion"
msgstr ""

#: ../../pep-0317.txt:334
msgid ""
"A small minority of respondents were in favour of the proposal, but the "
"dominant response was that any such migration would be costly out of "
"proportion to the putative benefit.  As noted above, this point is "
"sufficient in itself to reject the PEP."
msgstr ""

#: ../../pep-0317.txt:341
msgid "New-Style Exceptions"
msgstr ""

#: ../../pep-0317.txt:343
msgid ""
"Implicit instantiation might conflict with future plans to allow "
"instances of new-style classes to be used as exceptions.  In order to "
"decide whether to instantiate implicitly, the ``raise`` machinery must "
"determine whether the first argument is a class or an instance -- but "
"with new-style classes there is no clear and strong distinction."
msgstr ""

#: ../../pep-0317.txt:349
msgid ""
"Under this proposal, the problem would be avoided because the exception "
"would already have been instantiated.  However, there are two plausible "
"alternative solutions:"
msgstr ""

#: ../../pep-0317.txt:353
msgid ""
"Require exception types to be subclasses of ``Exception``, and "
"instantiate implicitly if and only if ::"
msgstr ""

#: ../../pep-0317.txt:358
msgid "Instantiate implicitly if and only if ::"
msgstr ""

#: ../../pep-0317.txt:362
msgid ""
"Thus eliminating implicit instantiation entirely is not necessary to "
"solve this problem."
msgstr ""

#: ../../pep-0317.txt:367
msgid "Ugliness of Explicit Instantiation"
msgstr ""

#: ../../pep-0317.txt:369
msgid ""
"Some respondents felt that the explicitly instantiating syntax is uglier,"
" especially in cases when no arguments are supplied to the exception "
"constructor::"
msgstr ""

#: ../../pep-0317.txt:375
msgid ""
"The problem is particularly acute when the exception instance itself is "
"not of interest, that is, when the only relevant point is the exception "
"type::"
msgstr ""

#: ../../pep-0317.txt:385
msgid ""
"In such cases the symmetry between ``raise`` and ``except`` can be more "
"expressive of the intent of the code."
msgstr ""

#: ../../pep-0317.txt:388
msgid ""
"Guido opined that the implicitly instantiating syntax is \"a tad "
"prettier\" even for cases with a single argument, since it has less "
"punctuation."
msgstr ""

#: ../../pep-0317.txt:394
msgid "Performance Penalty of Warnings"
msgstr ""

#: ../../pep-0317.txt:396
msgid ""
"Experience with deprecating ``apply()`` shows that use of the warning "
"framework can incur a significant performance penalty."
msgstr ""

#: ../../pep-0317.txt:399
msgid ""
"Code which instantiates explicitly would not be affected, since the run-"
"time checks necessary to determine whether to issue a warning are exactly"
" those which are needed to determine whether to instantiate implicitly in"
" the first place.  That is, such statements are already incurring the "
"cost of these checks."
msgstr ""

#: ../../pep-0317.txt:405
msgid ""
"Code which instantiates implicitly would incur a large cost: timing "
"trials indicate that issuing a warning (whether it is suppressed or not) "
"takes about five times more time than simply instantiating, raising, and "
"catching an exception."
msgstr ""

#: ../../pep-0317.txt:410
msgid ""
"This penalty is mitigated by the fact that ``raise`` statements are "
"rarely on performance-critical execution paths."
msgstr ""

#: ../../pep-0317.txt:415
msgid "Traceback Argument"
msgstr ""

#: ../../pep-0317.txt:417
msgid ""
"As the proposal stands, it would be impossible to use the traceback "
"argument to ``raise`` conveniently with all 2.x versions of Python."
msgstr ""

#: ../../pep-0317.txt:420
msgid ""
"For compatibility with versions < 2.4, the three-argument form must be "
"used; but this form would produce warnings with versions >= 2.4. Those "
"warnings could be suppressed, but doing so is awkward because the "
"relevant type of warning is issued at compile-time."
msgstr ""

#: ../../pep-0317.txt:425
msgid ""
"If this PEP were still under consideration, this objection would be met "
"by extending the phase-in period.  For example, warnings could first be "
"issued in 3.0, and become errors in some later release."
msgstr ""

#: ../../pep-0317.txt:431
msgid "References"
msgstr ""

#: ../../pep-0317.txt:433
msgid ""
"\"Standard Exception Classes in Python 1.5\", Guido van Rossum. "
"http://www.python.org/doc/essays/stdexceptions.html"
msgstr ""

#: ../../pep-0317.txt:436
msgid ""
"\"Guidelines for Language Evolution\", Paul Prescod. "
"http://www.python.org/dev/peps/pep-0005/"
msgstr ""

#: ../../pep-0317.txt:439
msgid ""
"\"Python Language Reference\", Guido van Rossum. "
"http://docs.python.org/reference/simple_stmts.html#raise"
msgstr ""

#: ../../pep-0317.txt:442
msgid ""
"PEP 236 \"Back to the __future__\", Tim Peters. "
"http://www.python.org/dev/peps/pep-0236/"
msgstr ""

#: ../../pep-0317.txt:445
msgid ""
"PEP 230 \"Warning Framework\", Guido van Rossum. "
"http://www.python.org/dev/peps/pep-0230/"
msgstr ""

#: ../../pep-0317.txt:448
msgid ""
"Guido van Rossum, 11 June 2003 post to ``python-dev``. "
"https://mail.python.org/pipermail/python-dev/2003-June/036176.html"
msgstr ""

#: ../../pep-0317.txt:453
msgid "Copyright"
msgstr ""

#: ../../pep-0317.txt:455
msgid "This document has been placed in the public domain."
msgstr ""

