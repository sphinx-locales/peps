# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0323.txt
msgid "PEP"
msgstr ""

#: ../../pep-0323.txt:1
msgid "323"
msgstr ""

#: ../../pep-0323.txt
msgid "Title"
msgstr ""

#: ../../pep-0323.txt:2
msgid "Copyable Iterators"
msgstr ""

#: ../../pep-0323.txt
msgid "Author"
msgstr ""

#: ../../pep-0323.txt:5
msgid "Alex Martelli <aleaxit@gmail.com>"
msgstr ""

#: ../../pep-0323.txt
msgid "Status"
msgstr ""

#: ../../pep-0323.txt:6
msgid "Deferred"
msgstr ""

#: ../../pep-0323.txt
msgid "Type"
msgstr ""

#: ../../pep-0323.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0323.txt
msgid "Created"
msgstr ""

#: ../../pep-0323.txt:9
msgid "25-Oct-2003"
msgstr ""

#: ../../pep-0323.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0323.txt:10
msgid "2.5"
msgstr ""

#: ../../pep-0323.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0323.txt:11
msgid "29-Oct-2003"
msgstr ""

#: ../../pep-0323.txt:15
msgid "Deferral"
msgstr ""

#: ../../pep-0323.txt:17
msgid ""
"This PEP has been deferred. Copyable iterators are a nice idea, but after"
" four years, no implementation or widespread interest has emerged."
msgstr ""

#: ../../pep-0323.txt:22
msgid "Abstract"
msgstr ""

#: ../../pep-0323.txt:24
msgid ""
"This PEP suggests that some iterator types should support shallow copies "
"of their instances by exposing a ``__copy__`` method which meets some "
"specific requirements, and indicates how code using an iterator might "
"exploit such a ``__copy__`` method when present."
msgstr ""

#: ../../pep-0323.txt:31
msgid "Update and Comments"
msgstr ""

#: ../../pep-0323.txt:33
msgid "Support for ``__copy__`` was included in Py2.4's ``itertools.tee()``."
msgstr ""

#: ../../pep-0323.txt:35
msgid ""
"Adding ``__copy__`` methods to existing iterators will change the "
"behavior under ``tee()``.  Currently, the copied iterators remain tied to"
" the original iterator.  If the original advances, then so do all of the "
"copies.  Good practice is to overwrite the original so that anomalies "
"don't result:  ``a,b=tee(a)``. Code that doesn't follow that practice may"
" observe a semantic change if a ``__copy__`` method is added to an "
"iterator."
msgstr ""

#: ../../pep-0323.txt:44
msgid "Motivation"
msgstr ""

#: ../../pep-0323.txt:46
msgid ""
"In Python up to 2.3, most built-in iterator types don't let the user copy"
" their instances.  User-coded iterators that do let their clients call "
"copy.copy on their instances may, or may not, happen to return, as a "
"result of the copy, a separate iterator object that may be iterated upon "
"independently from the original."
msgstr ""

#: ../../pep-0323.txt:52
msgid ""
"Currently, \"support\" for copy.copy in a user-coded iterator type is "
"almost invariably \"accidental\" -- i.e., the standard machinery of the "
"copy method in Python's standard library's copy module does build and "
"return a copy.  However, the copy will be independently iterable with "
"respect to the original only if calling ``.next()`` on an instance of "
"that class happens to change instance state solely by rebinding some "
"attributes to new values, and not by mutating some attributes' existing "
"values."
msgstr ""

#: ../../pep-0323.txt:61
msgid ""
"For example, an iterator whose \"index\" state is held as an integer "
"attribute will probably give usable copies, since (integers being "
"immutable) ``.next()`` presumably just rebinds that attribute.  On the "
"other hand, another iterator whose \"index\" state is held as a list "
"attribute will probably mutate the same list object when ``.next()`` "
"executes, and therefore copies of such an iterator will not be iterable "
"separately and independently from the original."
msgstr ""

#: ../../pep-0323.txt:69
msgid ""
"Given this existing situation, ``copy.copy(it)`` on some iterator object "
"isn't very useful, nor, therefore, is it at all widely used.  However, "
"there are many cases in which being able to get a \"snapshot\" of an "
"iterator, as a \"bookmark\", so as to be able to keep iterating along the"
" sequence but later iterate again on the same sequence from the bookmark "
"onwards, is useful.  To support such \"bookmarking\", module itertools, "
"in 2.4, has grown a 'tee' function, to be used as::"
msgstr ""

#: ../../pep-0323.txt:79
msgid ""
"The previous value of 'it' must not be used again, which is why this "
"typical usage idiom rebinds the name.  After this call, 'it' and "
"'bookmark' are independently-iterable iterators on the same underlying "
"sequence as the original value of 'it': this satisfies application needs "
"for \"iterator copying\"."
msgstr ""

#: ../../pep-0323.txt:85
msgid ""
"However, when itertools.tee can make no hypotheses about the nature of "
"the iterator it is passed as an argument, it must save in memory all "
"items through which one of the two 'teed' iterators, but not yet both, "
"have stepped.  This can be quite costly in terms of memory, if the two "
"iterators get very far from each other in their stepping; indeed, in some"
" cases it may be preferable to make a list from the iterator so as to be "
"able to step repeatedly through the subsequence, or, if that is too costy"
" in terms of memory, save items to disk, again in order to be able to "
"iterate through them repeatedly."
msgstr ""

#: ../../pep-0323.txt:95
msgid ""
"This PEP proposes another idea that will, in some important cases, allow "
"``itertools.tee`` to do its job with minimal cost in terms of memory; "
"user code may also occasionally be able to exploit the idea in order to "
"decide whether to copy an iterator, make a list from it, or use an "
"auxiliary disk file."
msgstr ""

#: ../../pep-0323.txt:101
msgid ""
"The key consideration is that some important iterators, such as those "
"which built-in function iter builds over sequences, would be "
"intrinsically easy to copy: just get another reference to the same "
"sequence, and a copy of the integer index.  However, in Python 2.3, those"
" iterators don't expose the state, and don't support ``copy.copy``."
msgstr ""

#: ../../pep-0323.txt:107
msgid ""
"The purpose of this PEP, therefore, is to have those iterator types "
"expose a suitable ``__copy__`` method.  Similarly, user-coded iterator "
"types that can provide copies of their instances, suitable for separate "
"and independent iteration, with limited costs in time and space, should "
"also expose a suitable ``__copy__`` method.  While copy.copy also "
"supports other ways to let a type control the way its instances are "
"copied, it is suggested, for simplicity, that iterator types that support"
" copying always do so by exposing a ``__copy__`` method, and not in the "
"other ways ``copy.copy`` supports."
msgstr ""

#: ../../pep-0323.txt:117
msgid ""
"Having iterators expose a suitable ``__copy__`` when feasible will afford"
" easy optimization of itertools.tee and similar user code, as in::"
msgstr ""

#: ../../pep-0323.txt:129
msgid ""
"Note that this function does NOT call \"copy.copy(it)\", which (even "
"after this PEP is implemented) might well still \"just happen to "
"succeed\". for some iterator type that is implemented as a user-coded "
"class. without really supplying an adequate \"independently iterable\" "
"copy object as its result."
msgstr ""

#: ../../pep-0323.txt:137
msgid "Specification"
msgstr ""

#: ../../pep-0323.txt:139
msgid ""
"Any iterator type X may expose a method ``__copy__`` that is callable "
"without arguments on any instance x of X.  The method should be exposed "
"if and only if the iterator type can provide copyability with reasonably "
"little computational and memory effort.  Furthermore, the new object y "
"returned by method ``__copy__`` should be a new instance of X that is "
"iterable independently and separately from x, stepping along the same "
"\"underlying sequence\" of items."
msgstr ""

#: ../../pep-0323.txt:147
msgid ""
"For example, suppose a class Iter essentially duplicated the "
"functionality of the iter builtin for iterating on a sequence::"
msgstr ""

#: ../../pep-0323.txt:165
msgid ""
"To make this Iter class compliant with this PEP, the following addition "
"to the body of class Iter would suffice::"
msgstr ""

#: ../../pep-0323.txt:173
msgid ""
"Note that ``__copy__``, in this case, does not even try to copy the "
"sequence; if the sequence is altered while either or both of the original"
" and copied iterators are still stepping on it, the iteration behavior is"
" quite likely to go awry anyway -- it is not ``__copy__``'s "
"responsibility to change this normal Python behavior for iterators which "
"iterate on mutable sequences (that might, perhaps, be the specification "
"for a ``__deepcopy__`` method of iterators, which, however, this PEP does"
" not deal with)."
msgstr ""

#: ../../pep-0323.txt:182
msgid ""
"Consider also a \"random iterator\", which provides a nonterminating "
"sequence of results from some method of a random instance, called with "
"given arguments::"
msgstr ""

#: ../../pep-0323.txt:204
msgid ""
"This iterator type is slightly more general than its name implies, as it "
"supports calls to any bound method (or other callable, but if the "
"callable is not a bound method, then method ``__copy__`` will fail).  But"
" the use case is for the purpose of generating random streams, as in::"
msgstr ""

#: ../../pep-0323.txt:223
msgid "which will display some output such as::"
msgstr ""

#: ../../pep-0323.txt:229
msgid ""
"the key point being that the second and third lines are equal, because "
"the normit and copit iterators will step along the same \"underlying "
"sequence\".  (As an aside, note that to get a copy of "
"``self.call.im_self`` we must use ``copy.copy``, NOT try getting at a "
"``__copy__`` method directly, because for example instances of "
"``random.Random`` support copying via ``__getstate__`` and "
"``__setstate__``, NOT via ``__copy__``; indeed, using copy.copy is the "
"normal way to get a shallow copy of any object -- copyable iterators are "
"different because of the already-mentioned uncertainty about the result "
"of ``copy.copy`` supporting these \"copyable iterator\" specs)."
msgstr ""

#: ../../pep-0323.txt:242
msgid "Details"
msgstr ""

#: ../../pep-0323.txt:244
msgid ""
"Besides adding to the Python docs a recommendation that user-coded "
"iterator types support a ``__copy__`` method (if and only if it can be "
"implemented with small costs in memory and runtime, and produce an "
"independently-iterable copy of an iterator object), this PEP's "
"implementation will specifically include the addition of copyability to "
"the iterators over sequences that built-in iter returns, and also to the "
"iterators over a dictionary returned by the methods ``__iter__``, "
"iterkeys, itervalues, and iteritems of built-in type dict."
msgstr ""

#: ../../pep-0323.txt:253
msgid ""
"Iterators produced by generator functions will not be copyable. However, "
"iterators produced by the new \"generator expressions\" of Python 2.4 "
"(PEP 289 [3]_) should be copyable if their underlying ``iterator[s]`` "
"are; the strict limitations on what is possible in a generator "
"expression, compared to the much vaster generality of a generator, should"
" make that feasible.  Similarly, the iterators produced by the built-in "
"function ``enumerate``, and certain functions suppiled by module "
"itertools, should be copyable if the underlying iterators are."
msgstr ""

#: ../../pep-0323.txt:263
msgid ""
"The implementation of this PEP will also include the optimization of the "
"new itertools.tee function mentioned in the Motivation section."
msgstr ""

#: ../../pep-0323.txt:268
msgid "Rationale"
msgstr ""

#: ../../pep-0323.txt:270
msgid ""
"The main use case for (shallow) copying of an iterator is the same as for"
" the function ``itertools.tee`` (new in 2.4).  User code will not "
"directly attempt to copy an iterator, because it would have to deal "
"separately with uncopyable cases; calling ``itertools.tee`` will "
"internally perform the copy when appropriate, and implicitly fallback to "
"a maximally efficient non-copying strategy for iterators that are not "
"copyable.  (Occasionally, user code may want more direct control, "
"specifically in order to deal with non-copyable iterators by other "
"strategies, such as making a list or saving the sequence to disk)."
msgstr ""

#: ../../pep-0323.txt:280
msgid ""
"A tee'd iterator may serve as a \"reference point\", allowing processing "
"of a sequence to continue or resume from a known point, while the other "
"independent iterator can be freely advanced to \"explore\" a further part"
" of the sequence as needed.  A simple example: a generator function "
"which, given an iterator of numbers (assumed to be positive), returns a "
"corresponding iterator, each of whose items is the fraction of the total "
"corresponding to each corresponding item of the input iterator.  The "
"caller may pass the total as a value, if known in advance; otherwise, the"
" iterator returned by calling this generator function will first compute "
"the total."
msgstr ""

#: ../../pep-0323.txt:301
msgid ""
"The ability to tee the numbers iterator allows this generator to "
"precompute the total, if needed, without necessarily requiring O(N) "
"auxiliary memory if the numbers iterator is copyable."
msgstr ""

#: ../../pep-0323.txt:305
msgid ""
"As another example of \"iterator bookmarking\", consider a stream of "
"numbers with an occasional string as a \"postfix operator\" now and then."
"  By far most frequent such operator is a '+', whereupon we must sum all "
"previous numbers (since the last previous operator if any, or else since "
"the start) and yield the result.  Sometimes we find a '*' instead, which "
"is the same except that the previous numbers must instead be multiplied, "
"not summed."
msgstr ""

#: ../../pep-0323.txt:335
msgid ""
"Similar use cases of itertools.tee can support such tasks as \"undo\" on "
"a stream of commands represented by an iterator, \"backtracking\" on the "
"parse of a stream of tokens, and so on. (Of course, in each case, one "
"should also consider simpler possibilities such as saving relevant "
"portions of the sequence into lists while stepping on the sequence with "
"just one iterator, depending on the details of one's task)."
msgstr ""

#: ../../pep-0323.txt:344
msgid ""
"Here is an example, in pure Python, of how the 'enumerate' built-in could"
" be extended to support ``__copy__`` if its underlying iterator also "
"supported ``__copy__``::"
msgstr ""

#: ../../pep-0323.txt:368
msgid ""
"Here is an example of the kind of \"fragility\" produced by \"accidental "
"copyability\" of an iterator -- the reason why one must NOT use copy.copy"
" expecting, if it succeeds, to receive as a result an iterator which is "
"iterable-on independently from the original.  Here is an iterator class "
"that iterates (in preorder) on \"trees\" which, for simplicity, are just "
"nested lists -- any item that's a list is treated as a subtree, any other"
" item as a leaf."
msgstr ""

#: ../../pep-0323.txt:403
msgid "Now, for example, the following code::"
msgstr ""

#: ../../pep-0323.txt:419
msgid ""
"does NOT work as intended -- the \"cop\" iterator gets consumed, and "
"exhausted, step by step as the original \"it\" iterator is, because the "
"accidental (rather than deliberate) copying performed by ``copy.copy`` "
"shares, rather than duplicating the \"index\" list, which is the mutable "
"attribute ``it.indx`` (a list of numerical indices). Thus, this \"client "
"code\" of the iterator, which attempts to iterate twice over a portion of"
" the sequence via a ``copy.copy`` on the iterator, is NOT correct."
msgstr ""

#: ../../pep-0323.txt:428
msgid ""
"Some correct solutions include using ``itertools.tee``, i.e., changing "
"the first for loop into::"
msgstr ""

#: ../../pep-0323.txt:438
msgid ""
"(note that we MUST break the loop in two, otherwise we'd still be looping"
" on the ORIGINAL value of it, which must NOT be used further after the "
"call to tee!!!); or making a list, i.e."
msgstr ""

#: ../../pep-0323.txt:451
msgid ""
"(again, the loop must be broken in two, since iterator 'it' gets "
"exhausted by the call ``list(it)``)."
msgstr ""

#: ../../pep-0323.txt:454
msgid ""
"Finally, all of these solutions would work if Listiter supplied a "
"suitable ``__copy__`` method, as this PEP recommends::"
msgstr ""

#: ../../pep-0323.txt:463
msgid ""
"There is no need to get any \"deeper\" in the copy, but the two mutable "
"\"index state\" attributes must indeed be copied in order to achieve a "
"\"proper\" (independently iterable) iterator-copy."
msgstr ""

#: ../../pep-0323.txt:467
msgid ""
"The recommended solution is to have class Listiter supply this "
"``__copy__`` method AND have client code use ``itertools.tee`` (with the "
"split-in-two-parts loop as shown above).  This will make client code "
"maximally tolerant of different iterator types it might be using AND "
"achieve good performance for tee'ing of this specific iterator type at "
"the same time."
msgstr ""

#: ../../pep-0323.txt:476
msgid "References"
msgstr ""

#: ../../pep-0323.txt:478
msgid ""
"Discussion on python-dev starting at post: "
"https://mail.python.org/pipermail/python-dev/2003-October/038969.html"
msgstr ""

#: ../../pep-0323.txt:481
msgid ""
"Online documentation for the copy module of the standard library: "
"http://docs.python.org/library/copy.html"
msgstr ""

#: ../../pep-0323.txt:484
msgid ""
"PEP 289, Generator Expressions, Hettinger "
"http://www.python.org/dev/peps/pep-0289/"
msgstr ""

#: ../../pep-0323.txt:488
msgid "Copyright"
msgstr ""

#: ../../pep-0323.txt:490
msgid "This document has been placed in the public domain."
msgstr ""

