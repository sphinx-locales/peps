# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0351.txt
msgid "PEP"
msgstr ""

#: ../../pep-0351.txt:1
msgid "351"
msgstr ""

#: ../../pep-0351.txt
msgid "Title"
msgstr ""

#: ../../pep-0351.txt:2
msgid "The freeze protocol"
msgstr ""

#: ../../pep-0351.txt
msgid "Author"
msgstr ""

#: ../../pep-0351.txt:5
msgid "Barry Warsaw <barry@python.org>"
msgstr ""

#: ../../pep-0351.txt
msgid "Status"
msgstr ""

#: ../../pep-0351.txt:6
msgid "Rejected"
msgstr ""

#: ../../pep-0351.txt
msgid "Type"
msgstr ""

#: ../../pep-0351.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0351.txt
msgid "Created"
msgstr ""

#: ../../pep-0351.txt:9
msgid "14-Apr-2005"
msgstr ""

#: ../../pep-0351.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0351.txt:14
msgid "Abstract"
msgstr ""

#: ../../pep-0351.txt:16
msgid ""
"This PEP describes a simple protocol for requesting a frozen, immutable "
"copy of a mutable object.  It also defines a new built-in function which "
"uses this protocol to provide an immutable copy on any cooperating "
"object."
msgstr ""

#: ../../pep-0351.txt:23
msgid "Rejection Notice"
msgstr ""

#: ../../pep-0351.txt:25
msgid "This PEP was rejected.  For a rationale, see `this thread on python-dev`_."
msgstr ""

#: ../../pep-0351.txt:31
msgid "Rationale"
msgstr ""

#: ../../pep-0351.txt:33
msgid ""
"Built-in objects such dictionaries and sets accept only immutable objects"
" as keys.  This means that mutable objects like lists cannot be used as "
"keys to a dictionary.  However, a Python programmer can convert a list to"
" a tuple; the two objects are similar, but the latter is immutable, and "
"can be used as a dictionary key."
msgstr ""

#: ../../pep-0351.txt:39
msgid ""
"It is conceivable that third party objects also have similar mutable and "
"immutable counterparts, and it would be useful to have a standard "
"protocol for conversion of such objects."
msgstr ""

#: ../../pep-0351.txt:43
msgid ""
"sets.Set objects expose a \"protocol for automatic conversion to "
"immutable\" so that you can create sets.Sets of sets.Sets.  PEP 218 "
"deliberately dropped this feature from built-in sets.  This PEP advances "
"that the feature is still useful and proposes a standard mechanism for "
"its support."
msgstr ""

#: ../../pep-0351.txt:51
msgid "Proposal"
msgstr ""

#: ../../pep-0351.txt:53
msgid "It is proposed that a new built-in function called freeze() is added."
msgstr ""

#: ../../pep-0351.txt:55
msgid ""
"If freeze() is passed an immutable object, as determined by hash() on "
"that object not raising a TypeError, then the object is returned "
"directly."
msgstr ""

#: ../../pep-0351.txt:59
msgid ""
"If freeze() is passed a mutable object (i.e. hash() of that object raises"
" a TypeError), then freeze() will call that object's __freeze__() method "
"to get an immutable copy.  If the object does not have a __freeze__() "
"method, then a TypeError is raised."
msgstr ""

#: ../../pep-0351.txt:66
msgid "Sample implementations"
msgstr ""

#: ../../pep-0351.txt:68
msgid "Here is a Python implementation of the freeze() built-in::"
msgstr ""

#: ../../pep-0351.txt:80
msgid "Here are some code samples which show the intended semantics::"
msgstr ""

#: ../../pep-0351.txt:142
msgid "Reference implementation"
msgstr ""

#: ../../pep-0351.txt:144
msgid ""
"Patch 1335812_ provides the C implementation of this feature.  It adds "
"the freeze() built-in, along with implementations of the __freeze__() "
"method for lists and sets.  Dictionaries are not easily freezable in "
"current Python, so an implementation of dict.__freeze__() is not provided"
" yet."
msgstr ""

#: ../../pep-0351.txt:153
msgid "Open issues"
msgstr ""

#: ../../pep-0351.txt:155
msgid "Should we define a similar protocol for thawing frozen objects?"
msgstr ""

#: ../../pep-0351.txt:157
msgid "Should dicts and sets automatically freeze their mutable keys?"
msgstr ""

#: ../../pep-0351.txt:159
msgid ""
"Should we support \"temporary freezing\" (perhaps with a method called "
"__congeal__()) a la __as_temporarily_immutable__() in sets.Set?"
msgstr ""

#: ../../pep-0351.txt:162
msgid ""
"For backward compatibility with sets.Set, should we support "
"__as_immutable__()?  Or should __freeze__() just be renamed to "
"__as_immutable__()?"
msgstr ""

#: ../../pep-0351.txt:168
msgid "Copyright"
msgstr ""

#: ../../pep-0351.txt:170
msgid "This document has been placed in the public domain."
msgstr ""

