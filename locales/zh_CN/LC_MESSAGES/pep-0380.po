# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0380.txt
msgid "PEP"
msgstr ""

#: ../../pep-0380.txt:1
msgid "380"
msgstr ""

#: ../../pep-0380.txt
msgid "Title"
msgstr ""

#: ../../pep-0380.txt:2
msgid "Syntax for Delegating to a Subgenerator"
msgstr ""

#: ../../pep-0380.txt
msgid "Author"
msgstr ""

#: ../../pep-0380.txt:5
msgid "Gregory Ewing <greg.ewing@canterbury.ac.nz>"
msgstr ""

#: ../../pep-0380.txt
msgid "Status"
msgstr ""

#: ../../pep-0380.txt:6
msgid "Final"
msgstr ""

#: ../../pep-0380.txt
msgid "Type"
msgstr ""

#: ../../pep-0380.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0380.txt
msgid "Created"
msgstr ""

#: ../../pep-0380.txt:9
msgid "13-Feb-2009"
msgstr ""

#: ../../pep-0380.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0380.txt:10
msgid "3.3"
msgstr ""

#: ../../pep-0380.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0380.txt
msgid "Resolution"
msgstr ""

#: ../../pep-0380.txt:12
msgid "https://mail.python.org/pipermail/python-dev/2011-June/112010.html"
msgstr ""

#: ../../pep-0380.txt:16
msgid "Abstract"
msgstr ""

#: ../../pep-0380.txt:18
msgid ""
"A syntax is proposed for a generator to delegate part of its operations "
"to another generator.  This allows a section of code containing 'yield' "
"to be factored out and placed in another generator. Additionally, the "
"subgenerator is allowed to return with a value, and the value is made "
"available to the delegating generator."
msgstr ""

#: ../../pep-0380.txt:24
msgid ""
"The new syntax also opens up some opportunities for optimisation when one"
" generator re-yields values produced by another."
msgstr ""

#: ../../pep-0380.txt:28
msgid "PEP Acceptance"
msgstr ""

#: ../../pep-0380.txt:30
msgid "Guido officially `accepted the PEP`_ on 26th June, 2011."
msgstr ""

#: ../../pep-0380.txt:35
msgid "Motivation"
msgstr ""

#: ../../pep-0380.txt:37
msgid ""
"A Python generator is a form of coroutine, but has the limitation that it"
" can only yield to its immediate caller.  This means that a piece of code"
" containing a ``yield`` cannot be factored out and put into a separate "
"function in the same way as other code.  Performing such a factoring "
"causes the called function to itself become a generator, and it is "
"necessary to explicitly iterate over this second generator and re-yield "
"any values that it produces."
msgstr ""

#: ../../pep-0380.txt:45
msgid ""
"If yielding of values is the only concern, this can be performed without "
"much difficulty using a loop such as"
msgstr ""

#: ../../pep-0380.txt:53
msgid ""
"However, if the subgenerator is to interact properly with the caller in "
"the case of calls to ``send()``, ``throw()`` and ``close()``, things "
"become considerably more difficult.  As will be seen later, the necessary"
" code is very complicated, and it is tricky to handle all the corner "
"cases correctly."
msgstr ""

#: ../../pep-0380.txt:59
msgid ""
"A new syntax will be proposed to address this issue.  In the simplest use"
" cases, it will be equivalent to the above for-loop, but it will also "
"handle the full range of generator behaviour, and allow generator code to"
" be refactored in a simple and straightforward way."
msgstr ""

#: ../../pep-0380.txt:66
msgid "Proposal"
msgstr ""

#: ../../pep-0380.txt:68
msgid ""
"The following new expression syntax will be allowed in the body of a "
"generator:"
msgstr ""

#: ../../pep-0380.txt:75
msgid ""
"where <expr> is an expression evaluating to an iterable, from which an "
"iterator is extracted. The iterator is run to exhaustion, during which "
"time it yields and receives values directly to or from the caller of the "
"generator containing the ``yield from`` expression (the \"delegating "
"generator\")."
msgstr ""

#: ../../pep-0380.txt:81
msgid ""
"Furthermore, when the iterator is another generator, the subgenerator is "
"allowed to execute a ``return`` statement with a value, and that value "
"becomes the value of the ``yield from`` expression."
msgstr ""

#: ../../pep-0380.txt:85
msgid ""
"The full semantics of the ``yield from`` expression can be described in "
"terms of the generator protocol as follows:"
msgstr ""

#: ../../pep-0380.txt:88
msgid "Any values that the iterator yields are passed directly to the caller."
msgstr ""

#: ../../pep-0380.txt:91
msgid ""
"Any values sent to the delegating generator using ``send()`` are passed "
"directly to the iterator.  If the sent value is None, the iterator's "
"``__next__()`` method is called.  If the sent value is not None, the "
"iterator's ``send()`` method is called.  If the call raises "
"StopIteration, the delegating generator is resumed. Any other exception "
"is propagated to the delegating generator."
msgstr ""

#: ../../pep-0380.txt:98
msgid ""
"Exceptions other than GeneratorExit thrown into the delegating generator "
"are passed to the ``throw()`` method of the iterator. If the call raises "
"StopIteration, the delegating generator is resumed.  Any other exception "
"is propagated to the delegating generator."
msgstr ""

#: ../../pep-0380.txt:104
msgid ""
"If a GeneratorExit exception is thrown into the delegating generator, or "
"the ``close()`` method of the delegating generator is called, then the "
"``close()`` method of the iterator is called if it has one. If this call "
"results in an exception, it is propagated to the delegating generator.  "
"Otherwise, GeneratorExit is raised in the delegating generator."
msgstr ""

#: ../../pep-0380.txt:111
msgid ""
"The value of the ``yield from`` expression is the first argument to the "
"``StopIteration`` exception raised by the iterator when it terminates."
msgstr ""

#: ../../pep-0380.txt:115
msgid ""
"``return expr`` in a generator causes ``StopIteration(expr)`` to be "
"raised upon exit from the generator."
msgstr ""

#: ../../pep-0380.txt:120
msgid "Enhancements to StopIteration"
msgstr ""

#: ../../pep-0380.txt:122
msgid ""
"For convenience, the ``StopIteration`` exception will be given a "
"``value`` attribute that holds its first argument, or None if there are "
"no arguments."
msgstr ""

#: ../../pep-0380.txt:128
msgid "Formal Semantics"
msgstr ""

#: ../../pep-0380.txt:130
msgid "Python 3 syntax is used in this section."
msgstr ""

#: ../../pep-0380.txt:132
msgid "The statement ::"
msgstr ""

#: ../../pep-0380.txt:136 ../../pep-0380.txt:183
msgid "is semantically equivalent to ::"
msgstr ""

#: ../../pep-0380.txt:179
msgid "In a generator, the statement ::"
msgstr ""

#: ../../pep-0380.txt:187
msgid ""
"except that, as currently, the exception cannot be caught by ``except`` "
"clauses within the returning generator."
msgstr ""

#: ../../pep-0380.txt:190
msgid "The StopIteration exception behaves as though defined thusly::"
msgstr ""

#: ../../pep-0380.txt:203
msgid "Rationale"
msgstr ""

#: ../../pep-0380.txt:206
msgid "The Refactoring Principle"
msgstr ""

#: ../../pep-0380.txt:208
msgid ""
"The rationale behind most of the semantics presented above stems from the"
" desire to be able to refactor generator code.  It should be possible to "
"take a section of code containing one or more ``yield`` expressions, move"
" it into a separate function (using the usual techniques to deal with "
"references to variables in the surrounding scope, etc.), and call the new"
" function using a ``yield from`` expression."
msgstr ""

#: ../../pep-0380.txt:216
msgid ""
"The behaviour of the resulting compound generator should be, as far as "
"reasonably practicable, the same as the original unfactored generator in "
"all situations, including calls to ``__next__()``, ``send()``, "
"``throw()`` and ``close()``."
msgstr ""

#: ../../pep-0380.txt:221
msgid ""
"The semantics in cases of subiterators other than generators has been "
"chosen as a reasonable generalization of the generator case."
msgstr ""

#: ../../pep-0380.txt:224
msgid ""
"The proposed semantics have the following limitations with regard to "
"refactoring:"
msgstr ""

#: ../../pep-0380.txt:227
msgid ""
"A block of code that catches GeneratorExit without subsequently re-"
"raising it cannot be factored out while retaining exactly the same "
"behaviour."
msgstr ""

#: ../../pep-0380.txt:231
msgid ""
"Factored code may not behave the same way as unfactored code if a "
"StopIteration exception is thrown into the delegating generator."
msgstr ""

#: ../../pep-0380.txt:234
msgid ""
"With use cases for these being rare to non-existent, it was not "
"considered worth the extra complexity required to support them."
msgstr ""

#: ../../pep-0380.txt:239
msgid "Finalization"
msgstr ""

#: ../../pep-0380.txt:241
msgid ""
"There was some debate as to whether explicitly finalizing the delegating "
"generator by calling its ``close()`` method while it is suspended at a "
"``yield from`` should also finalize the subiterator. An argument against "
"doing so is that it would result in premature finalization of the "
"subiterator if references to it exist elsewhere."
msgstr ""

#: ../../pep-0380.txt:247
msgid ""
"Consideration of non-refcounting Python implementations led to the "
"decision that this explicit finalization should be performed, so that "
"explicitly closing a factored generator has the same effect as doing so "
"to an unfactored one in all Python implementations."
msgstr ""

#: ../../pep-0380.txt:252
msgid ""
"The assumption made is that, in the majority of use cases, the "
"subiterator will not be shared.  The rare case of a shared subiterator "
"can be accommodated by means of a wrapper that blocks ``throw()`` and "
"``close()`` calls, or by using a means other than ``yield from`` to call "
"the subiterator."
msgstr ""

#: ../../pep-0380.txt:260
msgid "Generators as Threads"
msgstr ""

#: ../../pep-0380.txt:262
msgid ""
"A motivation for generators being able to return values concerns the use "
"of generators to implement lightweight threads.  When using generators in"
" that way, it is reasonable to want to spread the computation performed "
"by the lightweight thread over many functions. One would like to be able "
"to call a subgenerator as though it were an ordinary function, passing it"
" parameters and receiving a returned value."
msgstr ""

#: ../../pep-0380.txt:270
msgid "Using the proposed syntax, a statement such as ::"
msgstr ""

#: ../../pep-0380.txt:274
msgid ""
"where f is an ordinary function, can be transformed into a delegation "
"call ::"
msgstr ""

#: ../../pep-0380.txt:279
msgid ""
"where g is a generator.  One can reason about the behaviour of the "
"resulting code by thinking of g as an ordinary function that can be "
"suspended using a ``yield`` statement."
msgstr ""

#: ../../pep-0380.txt:283
msgid ""
"When using generators as threads in this way, typically one is not "
"interested in the values being passed in or out of the yields. However, "
"there are use cases for this as well, where the thread is seen as a "
"producer or consumer of items.  The ``yield from`` expression allows the "
"logic of the thread to be spread over as many functions as desired, with "
"the production or consumption of items occurring in any subfunction, and "
"the items are automatically routed to or from their ultimate source or "
"destination."
msgstr ""

#: ../../pep-0380.txt:292
msgid ""
"Concerning ``throw()`` and ``close()``, it is reasonable to expect that "
"if an exception is thrown into the thread from outside, it should first "
"be raised in the innermost generator where the thread is suspended, and "
"propagate outwards from there; and that if the thread is terminated from "
"outside by calling ``close()``, the chain of active generators should be "
"finalised from the innermost outwards."
msgstr ""

#: ../../pep-0380.txt:301
msgid "Syntax"
msgstr ""

#: ../../pep-0380.txt:303
msgid ""
"The particular syntax proposed has been chosen as suggestive of its "
"meaning, while not introducing any new keywords and clearly standing out "
"as being different from a plain ``yield``."
msgstr ""

#: ../../pep-0380.txt:309
msgid "Optimisations"
msgstr ""

#: ../../pep-0380.txt:311
msgid ""
"Using a specialised syntax opens up possibilities for optimisation when "
"there is a long chain of generators.  Such chains can arise, for "
"instance, when recursively traversing a tree structure.  The overhead of "
"passing ``__next__()`` calls and yielded values down and up the chain can"
" cause what ought to be an O(n) operation to become, in the worst case, "
"O(n\\*\\*2)."
msgstr ""

#: ../../pep-0380.txt:318
msgid ""
"A possible strategy is to add a slot to generator objects to hold a "
"generator being delegated to.  When a ``__next__()`` or ``send()`` call "
"is made on the generator, this slot is checked first, and if it is "
"nonempty, the generator that it references is resumed instead.  If it "
"raises StopIteration, the slot is cleared and the main generator is "
"resumed."
msgstr ""

#: ../../pep-0380.txt:325
msgid ""
"This would reduce the delegation overhead to a chain of C function calls "
"involving no Python code execution.  A possible enhancement would be to "
"traverse the whole chain of generators in a loop and directly resume the "
"one at the end, although the handling of StopIteration is more "
"complicated then."
msgstr ""

#: ../../pep-0380.txt:333
msgid "Use of StopIteration to return values"
msgstr ""

#: ../../pep-0380.txt:335
msgid ""
"There are a variety of ways that the return value from the generator "
"could be passed back.  Some alternatives include storing it as an "
"attribute of the generator-iterator object, or returning it as the value "
"of the ``close()`` call to the subgenerator.  However, the proposed "
"mechanism is attractive for a couple of reasons:"
msgstr ""

#: ../../pep-0380.txt:341
msgid ""
"Using a generalization of the StopIteration exception makes it easy for "
"other kinds of iterators to participate in the protocol without having to"
" grow an extra attribute or a close() method."
msgstr ""

#: ../../pep-0380.txt:345
msgid ""
"It simplifies the implementation, because the point at which the return "
"value from the subgenerator becomes available is the same point at which "
"the exception is raised.  Delaying until any later time would require "
"storing the return value somewhere."
msgstr ""

#: ../../pep-0380.txt:352
msgid "Rejected Ideas"
msgstr ""

#: ../../pep-0380.txt:354
msgid "Some ideas were discussed but rejected."
msgstr ""

#: ../../pep-0380.txt:356
msgid ""
"Suggestion: There should be some way to prevent the initial call to "
"__next__(), or substitute it with a send() call with a specified value, "
"the intention being to support the use of generators wrapped so that the "
"initial __next__() is performed automatically."
msgstr ""

#: ../../pep-0380.txt:361
msgid ""
"Resolution: Outside the scope of the proposal. Such generators should not"
" be used with ``yield from``."
msgstr ""

#: ../../pep-0380.txt:364
msgid ""
"Suggestion: If closing a subiterator raises StopIteration with a value, "
"return that value from the ``close()`` call to the delegating generator."
msgstr ""

#: ../../pep-0380.txt:368
msgid ""
"The motivation for this feature is so that the end of a stream of values "
"being sent to a generator can be signalled by closing the generator.  The"
" generator would catch GeneratorExit, finish its computation and return a"
" result, which would then become the return value of the close() call."
msgstr ""

#: ../../pep-0380.txt:374
msgid ""
"Resolution: This usage of close() and GeneratorExit would be incompatible"
" with their current role as a bail-out and clean-up mechanism.  It would "
"require that when closing a delegating generator, after the subgenerator "
"is closed, the delegating generator be resumed instead of re-raising "
"GeneratorExit.  But this is not acceptable, because it would fail to "
"ensure that the delegating generator is finalised properly in the case "
"where close() is being called for cleanup purposes."
msgstr ""

#: ../../pep-0380.txt:383
msgid ""
"Signalling the end of values to a consumer is better addressed by other "
"means, such as sending in a sentinel value or throwing in an exception "
"agreed upon by the producer and consumer.  The consumer can then detect "
"the sentinel or exception and respond by finishing its computation and "
"returning normally.  Such a scheme behaves correctly in the presence of "
"delegation."
msgstr ""

#: ../../pep-0380.txt:390
msgid ""
"Suggestion: If ``close()`` is not to return a value, then raise an "
"exception if StopIteration with a non-None value occurs."
msgstr ""

#: ../../pep-0380.txt:393
msgid ""
"Resolution: No clear reason to do so. Ignoring a return value is not "
"considered an error anywhere else in Python."
msgstr ""

#: ../../pep-0380.txt:398
msgid "Criticisms"
msgstr ""

#: ../../pep-0380.txt:400
msgid ""
"Under this proposal, the value of a ``yield from`` expression would be "
"derived in a very different way from that of an ordinary ``yield`` "
"expression.  This suggests that some other syntax not containing the word"
" ``yield`` might be more appropriate, but no acceptable alternative has "
"so far been proposed.  Rejected alternatives include ``call``, "
"``delegate`` and ``gcall``."
msgstr ""

#: ../../pep-0380.txt:407
msgid ""
"It has been suggested that some mechanism other than ``return`` in the "
"subgenerator should be used to establish the value returned by the "
"``yield from`` expression.  However, this would interfere with the goal "
"of being able to think of the subgenerator as a suspendable function, "
"since it would not be able to return values in the same way as other "
"functions."
msgstr ""

#: ../../pep-0380.txt:414
msgid ""
"The use of an exception to pass the return value has been criticised as "
"an \"abuse of exceptions\", without any concrete justification of this "
"claim.  In any case, this is only one suggested implementation; another "
"mechanism could be used without losing any essential features of the "
"proposal."
msgstr ""

#: ../../pep-0380.txt:420
msgid ""
"It has been suggested that a different exception, such as "
"GeneratorReturn, should be used instead of StopIteration to return a "
"value.  However, no convincing practical reason for this has been put "
"forward, and the addition of a ``value`` attribute to StopIteration "
"mitigates any difficulties in extracting a return value from a "
"StopIteration exception that may or may not have one.  Also, using a "
"different exception would mean that, unlike ordinary functions, 'return' "
"without a value in a generator would not be equivalent to 'return None'."
msgstr ""

#: ../../pep-0380.txt:432
msgid "Alternative Proposals"
msgstr ""

#: ../../pep-0380.txt:434
msgid ""
"Proposals along similar lines have been made before, some using the "
"syntax ``yield *`` instead of ``yield from``.  While ``yield *`` is more "
"concise, it could be argued that it looks too similar to an ordinary "
"``yield`` and the difference might be overlooked when reading code."
msgstr ""

#: ../../pep-0380.txt:440
msgid ""
"To the author's knowledge, previous proposals have focused only on "
"yielding values, and thereby suffered from the criticism that the two-"
"line for-loop they replace is not sufficiently tiresome to write to "
"justify a new syntax.  By dealing with the full generator protocol, this "
"proposal provides considerably more benefit."
msgstr ""

#: ../../pep-0380.txt:448
msgid "Additional Material"
msgstr ""

#: ../../pep-0380.txt:450
msgid ""
"Some examples of the use of the proposed syntax are available, and also a"
" prototype implementation based on the first optimisation outlined above."
msgstr ""

#: ../../pep-0380.txt:454
msgid "`Examples and Implementation`_"
msgstr ""

#: ../../pep-0380.txt:459
msgid ""
"A version of the implementation updated for Python 3.3 is available from "
"tracker `issue #11682`_"
msgstr ""

#: ../../pep-0380.txt:467
msgid "Copyright"
msgstr ""

#: ../../pep-0380.txt:469
msgid "This document has been placed in the public domain."
msgstr ""

