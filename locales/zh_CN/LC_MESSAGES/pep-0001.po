# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-15 12:40+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0001.txt
msgid "PEP"
msgstr ""

#: ../../pep-0001.txt:1
msgid "1"
msgstr ""

#: ../../pep-0001.txt
msgid "Title"
msgstr ""

#: ../../pep-0001.txt:2
msgid "PEP Purpose and Guidelines"
msgstr "PEP 的宗旨和准则"

#: ../../pep-0001.txt
msgid "Author"
msgstr ""

#: ../../pep-0001.txt:3
msgid "Barry Warsaw, Jeremy Hylton, David Goodger, Nick Coghlan"
msgstr ""

#: ../../pep-0001.txt
msgid "Status"
msgstr ""

#: ../../pep-0001.txt:4
msgid "Active"
msgstr ""

#: ../../pep-0001.txt
msgid "Type"
msgstr ""

#: ../../pep-0001.txt:5
msgid "Process"
msgstr ""

#: ../../pep-0001.txt
msgid "Created"
msgstr ""

#: ../../pep-0001.txt:7
msgid "13-Jun-2000"
msgstr ""

#: ../../pep-0001.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0001.txt:8
msgid "21-Mar-2001, 29-Jul-2002, 03-May-2003, 05-May-2012, 07-Apr-2013"
msgstr ""

#: ../../pep-0001.txt:13
msgid "What is a PEP?"
msgstr "什么是 PEP？"

#: ../../pep-0001.txt:15
msgid ""
"PEP stands for Python Enhancement Proposal.  A PEP is a design document "
"providing information to the Python community, or describing a new "
"feature for Python or its processes or environment.  The PEP should "
"provide a concise technical specification of the feature and a rationale "
"for the feature."
msgstr ""
"PEP 是 Python Enhancement Proposal 的缩写。PEP 是一个向 Python 社区提供信息的设计文件，或者描述 "
"Python （或其进程或环境）新特性。PEP 应该提供该特性的简明技术规范和该特性的提出理由。"

#: ../../pep-0001.txt:21
msgid ""
"We intend PEPs to be the primary mechanisms for proposing major new "
"features, for collecting community input on an issue, and for documenting"
" the design decisions that have gone into Python.  The PEP author is "
"responsible for building consensus within the community and documenting "
"dissenting opinions."
msgstr ""
"我们打算让 PEP 成为提出主要新特性、收集社区对某一议题的意见、以及记录 Python 设计决策的主要机制。PEP "
"的作者负责在社区内建立共识，并记录不同的意见。"

#: ../../pep-0001.txt:27
msgid ""
"Because the PEPs are maintained as text files in a versioned repository, "
"their revision history is the historical record of the feature proposal "
"[1]_."
msgstr "因为 PEP 是以文本文件的形式保存在一个版本库中，它们的修订历史是特性建议的历史记录 [1]_。"

#: ../../pep-0001.txt:33
msgid "PEP Audience"
msgstr "PEP 受众"

#: ../../pep-0001.txt:35
msgid ""
"The typical primary audience for PEPs are the core developers of the "
"CPython reference interpreter and their elected Steering Council, as well"
" as developers of other implementations of the Python language "
"specification."
msgstr "PEP 典型的主要受众是 CPython 参考解释器的核心开发者和他们选出的指导委员会，以及 Python 语言规范的其他实现的开发者。"

#: ../../pep-0001.txt:39
msgid ""
"However, other parts of the Python community may also choose to use the "
"process (particularly for Informational PEPs) to document expected API "
"conventions and to manage complex design coordination problems that "
"require collaboration across multiple projects."
msgstr ""
"然而，Python 社区的其他部分也可能选择使用这个过程（尤其是信息性 PEP）来记录预期的 API "
"约定，并管理需要在多个项目间协作的复杂设计协调问题。"

#: ../../pep-0001.txt:46
msgid "PEP Types"
msgstr "PEP 类型"

#: ../../pep-0001.txt:48
msgid "There are three kinds of PEP:"
msgstr "有三种 PEP："

#: ../../pep-0001.txt:50
msgid ""
"A **Standards Track** PEP describes a new feature or implementation for "
"Python. It may also describe an interoperability standard that will be "
"supported outside the standard library for current Python versions before"
" a subsequent PEP adds standard library support in a future version."
msgstr ""
"**标准追踪** 的 PEP 描述了 Python 的新特性或实现。它也可以描述一个互操作性标准，在后续的 PEP "
"在未来的版本中增加标准库支持之前，它将在标准库之外支持当前的 Python 版本。"

#: ../../pep-0001.txt:56
msgid ""
"An **Informational** PEP describes a Python design issue, or provides "
"general guidelines or information to the Python community, but does not "
"propose a new feature.  Informational PEPs do not necessarily represent a"
" Python community consensus or recommendation, so users and implementers "
"are free to ignore Informational PEPs or follow their advice."
msgstr ""
"**信息性的** PEP 描述了 Python 设计问题，或者为 Python 社区提供了一般的指南或信息，但并没有提出一个新的特性。信息性 "
"PEP 不一定代表 Python 社区的共识或建议，所以用户和实现者可以自由地忽略信息性 PEP 或遵循其建议。"

#: ../../pep-0001.txt:63
msgid ""
"A **Process** PEP describes a process surrounding Python, or proposes a "
"change to (or an event in) a process.  Process PEPs are like Standards "
"Track PEPs but apply to areas other than the Python language itself.  "
"They may propose an implementation, but not to Python's codebase; they "
"often require community consensus; unlike Informational PEPs, they are "
"more than recommendations, and users are typically not free to ignore "
"them.  Examples include procedures, guidelines, changes to the decision-"
"making process, and changes to the tools or environment used in Python "
"development. Any meta-PEP is also considered a Process PEP."
msgstr ""
"**过程** 的 PEP 描述了围绕 Python 的一个过程，或者提出了对一个过程的改变（或一个事件）。过程 PEP 与标准跟踪 PEP "
"类似，但适用于 Pytho n语言本身以外的领域。 它们可以提出一个实现，但不是针对 Python 代码库；它们通常需要社区达成共识；与信息性 "
"PEP 不同，它们不仅仅是建议，而且用户通常不能随意忽略它们。例子包括程序、指南、对决策过程的改变，以及对 Python "
"开发中使用的工具或环境的改变。任何 PEP 元信息 也被认为是过程 PEP\""

#: ../../pep-0001.txt:76
msgid "PEP Workflow"
msgstr "PEP 工作流程"

#: ../../pep-0001.txt:79
msgid "Python's Steering Council"
msgstr "Python 的指导理事会"

#: ../../pep-0001.txt:81
msgid ""
"There are several references in this PEP to the \"Steering Council\" or "
"\"Council\". This refers to the current members of the elected Steering "
"Council described in PEP 13 [5]_, in their role as the final authorities "
"on whether or not PEPs will be accepted or rejected."
msgstr ""
"本 PEP 中多次提到 “指导委员会”（Steering Council） 或 “理事会”（Council）。这指的是 PEP 13 [5]_ "
"中描述的当选指导委员会的现任成员，他们是决定是否接受或拒绝 PEP 的最终权威。"

#: ../../pep-0001.txt:88
msgid "Python's Core Developers"
msgstr "Python 的核心开发者"

#: ../../pep-0001.txt:90
msgid ""
"There are several references in this PEP to \"core developers\". This "
"refers to the currently active Python core team members described in PEP "
"13 [5]_."
msgstr "在此 PEP 中多次提到了 “核心开发人员”。这指的是 PEP 13 [5]_ 中描述的目前活跃的 Python 核心团队成员。"

#: ../../pep-0001.txt:95
msgid "Python's BDFL"
msgstr "Python 的 BDFL"

#: ../../pep-0001.txt:97
msgid ""
"Previous versions of this PEP used the title \"BDFL-Delegate\" for PEP "
"decision makers. This was a historical reference to Python's previous "
"governance model, where all design authority ultimately derived from "
"Guido van Rossum, the original creator of the Python programming "
"language. By contrast, the Steering Council's design authority derives "
"from their election by the currently active core developers. Now, PEP-"
"Delegate is used in place of BDFL-Delegate."
msgstr ""
"这个 PEP 的先前版本对 PEP 的决策者使用了头部 “BDFL-Delegate”。这是对 Python "
"以前的管理模式的一个历史参考，在这个模式中，所有的设计权力最终都来自于 Guido van Rossum，Python "
"编程语言的最初创造者。相比之下，指导委员会的设计权力来自于他们由目前活跃的核心开发者选举产生。现在，PEP-Delegate 被用来代替 "
"BDFL-Delegate。"

#: ../../pep-0001.txt:106
msgid "PEP Editors"
msgstr "PEP 编辑者"

#: ../../pep-0001.txt:108
msgid ""
"The PEP editors are individuals responsible for managing the "
"administrative and editorial aspects of the PEP workflow (e.g. assigning "
"PEP numbers and changing their status).  See `PEP Editor Responsibilities"
" & Workflow`_ for details."
msgstr "PEP 编辑是负责管理 PEP 工作流程的行政和编辑方面的个体（例如，分配 PEP 编号和改变其状态）。 详见 `PEP 编辑的职责和工作流程`_。"

#: ../../pep-0001.txt:113
msgid ""
"PEP editorship is by invitation of the current editors, and they can be "
"contacted by mentioning ``@python/pep-editors`` on GitHub.  All of the "
"PEP workflow can be conducted via the GitHub `PEP repository`_ issues and"
" pull requests."
msgstr ""

# "PEP 的编辑工作是由现任编辑邀请的，可以在 GitHub 上提及 "
# "``@python/pep-editors`` 来联系他们。"
# "所有 PEP 的工作流程都可以通过 GitHub 的 `PEP repository`_ "
# "issue 和拉取请求进行。"
#: ../../pep-0001.txt:120
msgid "Start with an idea for Python"
msgstr "从 Python 的创意开始"

#: ../../pep-0001.txt:122
msgid ""
"The PEP process begins with a new idea for Python.  It is highly "
"recommended that a single PEP contain a single key proposal or new idea. "
"Small enhancements or patches often don't need a PEP and can be injected "
"into the Python development workflow with a patch submission to the "
"Python `issue tracker`_. The more focused the PEP, the more successful it"
" tends to be.  The PEP editors reserve the right to reject PEP proposals "
"if they appear too unfocused or too broad.  If in doubt, split your PEP "
"into several well-focused ones."
msgstr ""

# "PEP 过程以 Python 的新创意开始。强烈建议一个 PEP 包含一个关键建议或新创意。"
# "小的改进或补丁通常不需要 PEP，可以通过向 Python 开发流程提交补丁的方式，将其注入到 Python 开发流程中。"
# "可以通过向 Python  `issue tracker`_  提交补丁的方式注入到 Python 开发工作流程中。"
# "PEP 的重点越突出，往往就越成功。"
# "PEP 的编辑们保留拒绝 PEP 提案的权利，如果它们看起来太不集中或太广泛。"
# "如果有疑问，可以将你的 PEP 分成几个重点突出的 PEP。"
#: ../../pep-0001.txt:131
msgid ""
"Each PEP must have a champion -- someone who writes the PEP using the "
"style and format described below, shepherds the discussions in the "
"appropriate forums, and attempts to build community consensus around the "
"idea.  The PEP champion (a.k.a. Author) should first attempt to ascertain"
" whether the idea is PEP-able.  Posting to the comp.lang.python newsgroup"
" (a.k.a. python-list@python.org mailing list) or the python-"
"ideas@python.org mailing list is the best way to go about this."
msgstr ""
"每个 PEP 都必须有一个拥护者 -- 使用下面描述的风格和格式撰写 PEP 的人，在适当的论坛上指导讨论，并试图围绕这个想法建立社区共识。PEP"
" 拥护者（又称作者）应该首先尝试确定这个想法是否可以成为 PEP。在 comp.lang.python 新闻组（又称 python-"
"list@python.org 邮件列表）或 python-ideas@python.org 邮件列表上发帖是最好的方法。"

#: ../../pep-0001.txt:139
msgid ""
"Vetting an idea publicly before going as far as writing a PEP is meant to"
" save the potential author time. Many ideas have been brought forward for"
" changing Python that have been rejected for various reasons. Asking the "
"Python community first if an idea is original helps prevent too much time"
" being spent on something that is guaranteed to be rejected based on "
"prior discussions (searching the internet does not always do the trick). "
"It also helps to make sure the idea is applicable to the entire community"
" and not just the author. Just because an idea sounds good to the author "
"does not mean it will work for most people in most areas where Python is "
"used."
msgstr ""
"在写 PEP 之前公开审查一个想法，是为了节省潜在作者的时间。许多改变 Python 的想法已经被提出来了，但由于各种原因被拒绝。首先询问 "
"Python "
"社区，一个想法是否是原创的，有助于防止在基于先前的讨论而保证被拒绝的事情上花费太多时间（在互联网上搜索并不总是能做到这一点）。这也有助于确保这个想法适用于整个社区，而不仅仅是作者本人。仅仅因为一个想法对作者来说听起来不错，并不意味着它对大多数使用"
" Python 的领域中的大多数人都有效。"

#: ../../pep-0001.txt:150
msgid ""
"Once the champion has asked the Python community as to whether an idea "
"has any chance of acceptance, a draft PEP should be presented to python-"
"ideas.  This gives the author a chance to flesh out the draft PEP to make"
" properly formatted, of high quality, and to address initial concerns "
"about the proposal."
msgstr ""
"一旦拥护者询问 Python 社区是否有机会接受一个想法，就应该向 python-ideas 提交一个 PEP 草案。这使作者有机会充实 PEP "
"草案，使其格式正确，质量高，并解决对建议的初步关注。"

#: ../../pep-0001.txt:158
msgid "Submitting a PEP"
msgstr "提交 PEP"

#: ../../pep-0001.txt:160
msgid ""
"Following a discussion on python-ideas, the workflow varies based on "
"whether any of the PEP's co-authors are core developers. If one or more "
"of the PEP's co-authors are core developers, they are responsible for "
"following the process outlined below. Otherwise (i.e. none of the co-"
"authors are core developers), then the PEP author(s) will need to find a "
"sponsor for the PEP."
msgstr ""
"在 python-ideas 的讨论之后，工作流程根据 PEP 的合作者中是否有核心开发者而有所不同。如果 PEP "
"的一个或多个共同作者是核心开发者，他们将负责遵循下面的流程。否则（即没有一个共同作者是核心开发者），那么 PEP 的作者将需要为 PEP "
"找到一个发起人。"

#: ../../pep-0001.txt:166
msgid ""
"Ideally, a core developer sponsor is identified, but non-core sponsors "
"may also be selected with the approval of the Steering Council.  Members "
"of the GitHub \"PEP editors\" team are pre-approved to be sponsors.  The "
"sponsor's job is to provide guidance to the PEP author to help them "
"through the logistics of the PEP process (somewhat acting like a mentor)."
"  Being a sponsor does **not** disqualify that person from becoming a co-"
"author or PEP-Delegate later on (but not both).  The sponsor of a PEP is "
"recorded in the \"Sponsor:\" field of the header."
msgstr ""
"理想的情况是，确定一个核心开发者发起人，但经指导委员会批准，也可以选择非核心发起人。GitHub "
"（“PEP编辑”）团队的成员被预先批准成为发起人。发起人的工作是为 PEP 作者提供指导，帮助他们完成 PEP "
"过程中的后勤工作（有点像导师）。成为发起人并不取消该人以后成为共同作者或 PEP-Delegate（但不能同时成为共同作者）。PEP "
"的发起人被记录在页眉的 \"Sponsor:\" 字段中。"

#: ../../pep-0001.txt:175
msgid ""
"Once the sponsor or the core developer(s) co-authoring the PEP deem the "
"PEP ready for submission, the proposal should be submitted as a draft PEP"
" via a `GitHub pull request`_.  The draft must be written in PEP style as"
" described below, else it will fail review immediately (although minor "
"errors may be corrected by the editors)."
msgstr ""

# "一旦发起人或共同撰写 PEP 的核心开发者认为 PEP 可以提交，"
# "就应该通过 `GitHub pull request`_ 将该提案作为 PEP 草案提交。"
# "草案必须按照下面描述的 PEP 风格来写，否则将立即无法通过审查（尽管小的错误可以由编辑来纠正）。"
#: ../../pep-0001.txt:181
msgid "The standard PEP workflow is:"
msgstr "标准 PEP 的工作流程："

#: ../../pep-0001.txt:183
msgid ""
"You, the PEP author, fork the `PEP repository`_, and create a file named "
"``pep-9999.rst`` that contains your new PEP.  Use \"9999\" as your draft "
"PEP number."
msgstr ""

# "你，PEP 的作者，fork 了 `PEP repository`_，"
# "并创建了一个名为 ``pep-9999.rst`` 的文件，其中包含你的新 PEP。"
# "使用 “9999” 作为你的 PEP 草案编号。"
#: ../../pep-0001.txt:187
msgid ""
"In the \"Type:\" header field, enter \"Standards Track\", "
"\"Informational\", or \"Process\" as appropriate, and for the \"Status:\""
" field enter \"Draft\".  For full details, see `PEP Header Preamble`_."
msgstr ""
"在 \"Type:\" 头字段中，根据情况输入 \"Standards Track\"、\"Informational\" 或 "
"\"Process\"，在 \"Status:\" 字段中输入 \"Draft\"。 详细情况见 `PEP Header Preamble`_"

#: ../../pep-0001.txt:191
msgid ""
"Update `.github/CODEOWNERS` [7]_ such that any core developer co-"
"author(s) or sponsor are listed for your new file such that any future "
"pull requests will be assigned to them."
msgstr ""
"更新 `.github/CODEOWNERS` "
"[7]_，使任何核心开发者的共同作者或发起者都被列入你的新文件，这样，任何未来的拉取请求都将分配给他们。"

#: ../../pep-0001.txt:195
msgid "Push this to your GitHub fork and submit a pull request."
msgstr "推送到你的 GitHub fork 中，并提交一个拉取请求。"

#: ../../pep-0001.txt:197
msgid ""
"The PEP editors review your PR for structure, formatting, and other "
"errors.  For a reST-formatted PEP, PEP 12 is provided as a template. It "
"also provides a complete introduction to reST markup that is used in "
"PEPs.  Approval criteria are:"
msgstr ""
"PEP 的编辑们会审查你的 PR 的结构、格式和其他错误。对于一个 reST 格式的 PEP，PEP 12 "
"被提供作为一个模板。它还提供了一个完整的关于 PEP 中使用的 reST 标记的介绍。批准标准是："

#: ../../pep-0001.txt:202
msgid ""
"It sound and complete.  The ideas must make technical sense.  The editors"
" do not consider whether they seem likely to be accepted."
msgstr "健全而完整。观点必须具有技术意义。编辑们不考虑它们是否似乎有可能被接受\""

#: ../../pep-0001.txt:204
msgid "The title accurately describes the content."
msgstr "标题准确描述了内容。"

#: ../../pep-0001.txt:205
msgid ""
"The PEP's language (spelling, grammar, sentence structure, etc.) and code"
" style (examples should match PEP 8 & PEP 7) should be correct and "
"conformant.  The PEP will be checked for formatting (plain text or "
"reStructuredText) by Travis CI, and will not be approved until this "
"passes."
msgstr ""
"PEP 的语言（拼写、语法、句子结构等）和代码风格（例子应符合 PEP 8 和 PEP 7）应该是正确和符合要求的。PEP 将由 Travis "
"CI 检查格式（纯文本或 reStructuredText），在通过之前不会被批准。"

#: ../../pep-0001.txt:211
msgid ""
"Editors are generally quite lenient about this initial review, expecting "
"that problems will be corrected by the reviewing process. **Note:** "
"Approval of the PEP is no guarantee that there are no embarrassing "
"mistakes!  Correctness is the responsibility of authors and reviewers, "
"not the editors."
msgstr ""
"编辑对这种初步审查一般是相当宽松的，期望通过审查过程纠正问题。**注意**：批准 PEP 并不保证没有令人尴尬的错误! "
"正确性是作者和审稿人的责任，而不是编辑的责任。"

#: ../../pep-0001.txt:217
msgid ""
"If the PEP isn't ready for approval, an editor will send it back to the "
"author for revision, with specific instructions."
msgstr "如果 PEP 还没有准备好供批准，编辑会把它送回给作者进行修改，并给出具体的指示。"

#: ../../pep-0001.txt:220
msgid "Once approved, they will assign your PEP a number."
msgstr "一旦获得批准，他们将为你的 PEP 分配一个号码。"

#: ../../pep-0001.txt:222
msgid ""
"Once the review process is complete, and the PEP editors approve it (note"
" that this is *not* the same as accepting your PEP!), they will squash "
"commit your pull request onto master."
msgstr "一旦审查过程完成，并且 PEP 编辑们批准了它（注意，这 *不* 等同于接受你的 PEP！），他们会把你的拉取请求提交到 master。"

#: ../../pep-0001.txt:226
msgid ""
"The PEP editors will not unreasonably deny publication of a PEP.  Reasons"
" for denying PEP status include duplication of effort, being technically "
"unsound, not providing proper motivation or addressing backwards "
"compatibility, or not in keeping with the Python philosophy.  The "
"Steering Council can be consulted during the approval phase, and are the "
"final arbiter of a draft's PEP-ability."
msgstr ""
"PEP的编辑不会无理地拒绝发表 PEP。拒绝 PEP 状态的原因包括：工作重复、技术上不健全、没有提供适当的动机或解决后向兼容性问题，或者不符合 "
"Python 哲学。在审批阶段可以咨询指导委员会，他们是草案是否为 PEP 的最终仲裁者\""

#: ../../pep-0001.txt:232
msgid ""
"Developers with git push privileges for the `PEP repository`_ may claim "
"PEP numbers directly by creating and committing a new PEP. When doing so,"
" the developer must handle the tasks that would normally be taken care of"
" by the PEP editors (see `PEP Editor Responsibilities & Workflow`_). This"
" includes ensuring the initial version meets the expected standards for "
"submitting a PEP.  Alternately, even developers should submit PEPs via "
"pull request. When doing so, you are generally expected to handle the "
"process yourself; if you need assistance from PEP editors, mention "
"``@python/pep-editors`` on GitHub."
msgstr ""

# "拥有 `PEP repository`_ 的 git 推送权限的开发者可以通过创建和提交新的 PEP 直接申请 PEP 编号。"
# "这样做时，开发者必须处理通常由 PEP 编辑人员负责的任务（参见 `PEP编辑人员的职责和工作流程`_）。"
# "这包括确保初始版本符合提交 PEP 的预期标准。另外，即使是开发人员也应该通过拉取请求来提交 PEP。"
# "在这样做的时候，一般希望你能自己处理这个过程；如果你需要 PEP 编辑的帮助，请在 GitHub 上提到 "
# "``@python/pep-editors``。"
#: ../../pep-0001.txt:242
msgid ""
"As updates are necessary, the PEP author can check in new versions if "
"they (or a collaborating developer) have git push privileges."
msgstr "当需要更新时，如果他们（或合作的开发者）有 git 推送的权限，PEP 作者可以检查新版本。"

#: ../../pep-0001.txt:245
msgid ""
"After a PEP number has been assigned, a draft PEP may be discussed "
"further on python-ideas (getting a PEP number assigned early can be "
"useful for ease of reference, especially when multiple draft PEPs are "
"being considered at the same time). Eventually, all Standards Track PEPs "
"must  be sent to the `python-dev list <mailto:python-dev@python.org>`__ "
"for review as described in the next section."
msgstr ""
"在分配了 PEP 编号之后，PEP 草案可能会在 python-ideas 上被进一步讨论（尽早分配 PEP 编号以方便引用，尤其是在同时考虑多个"
" PEP 草案的时候）。最终，所有标准追踪的 PEP 都必须被送到 `python-dev 列表 <mailto:python-"
"dev@python.org>`__ 进行审查，如下一节所述。"

#: ../../pep-0001.txt:252
msgid ""
"Standards Track PEPs consist of two parts, a design document and a "
"reference implementation.  It is generally recommended that at least a "
"prototype implementation be co-developed with the PEP, as ideas that "
"sound good in principle sometimes turn out to be impractical when "
"subjected to the test of implementation."
msgstr ""
"标准追踪 PEPs 由两部分组成，一个设计文件和一个参考实现。一般来说，建议至少有一个原型实现与 PEP "
"共同开发，因为原则上听起来不错的想法，在接受实施的考验时，有时会变得不切实际。"

#: ../../pep-0001.txt:258
msgid ""
"PEP authors are responsible for collecting community feedback on a PEP "
"before submitting it for review. However, wherever possible, long open-"
"ended discussions on public mailing lists should be avoided. Strategies "
"to keep the discussions efficient include: setting up a separate SIG "
"mailing list for the topic, having the PEP author accept private comments"
" in the early design phases, setting up a wiki page, etc. PEP authors "
"should use their discretion here."
msgstr ""
"PEP 作者有责任在提交审查之前收集社区对 PEP "
"的反馈。然而，在可能的情况下，应该避免在公共邮件列表中进行长时间的开放式讨论。保持讨论效率的策略包括：为该主题建立一个单独的 SIG 邮件列表，让"
" PEP 作者在早期设计阶段接受私人评论，建立一个 wiki 页面，等等。PEP 作者应该在这里酌情处理\""

#: ../../pep-0001.txt:268
msgid "PEP Review & Resolution"
msgstr "PEP 审查与解决"

#: ../../pep-0001.txt:270
msgid ""
"Once the authors have completed a PEP, they may request a review for "
"style and consistency from the PEP editors."
msgstr "一旦作者完成了 PEP，他们可以要求 PEP 的编辑对风格和一致性进行审查。"

#: ../../pep-0001.txt:273
msgid ""
"However, content review and final acceptance of the PEP must be requested"
" of the core developers, usually via an email to the python-dev mailing "
"list."
msgstr "然而，PEP 的内容审查和最终接受必须向核心开发者提出请求，通常是通过向 python-dev 邮件列表发送电子邮件。"

#: ../../pep-0001.txt:276
msgid ""
"To expedite the process in selected cases (e.g. when a change is clearly "
"beneficial and ready to be accepted, but the PEP hasn't been formally "
"submitted for review yet), the Steering Council may also initiate a PEP "
"review, first notifying the PEP author(s) and giving them a chance to "
"make revisions."
msgstr ""
"为了在选定的情况下加快进程（例如，当一个变化明显有益并准备被接受，但 PEP 还没有正式提交审查），指导委员会也可以启动 PEP 审查，首先通知 "
"PEP 作者，给他们一个机会进行修改。"

#: ../../pep-0001.txt:281
msgid ""
"The final authority for PEP approval is the Steering Council. However, "
"whenever a new PEP is put forward, any core developer that believes they "
"are suitably experienced to make the final decision on that PEP may offer"
" to serve as the PEP-Delegate for that PEP, and they will then have the "
"authority to approve (or reject) that PEP. Individuals taking on this "
"responsibility are free to seek additional guidance from the Steering "
"Council at any time, and are also expected to take the advice and "
"perspectives of other core developers into account."
msgstr ""
"批准 PEP 的最终权力是指导委员会。然而，每当一个新的 PEP 被提出时，任何核心开发者如果认为他们有适当的经验来对该 PEP "
"做出最终决定，可以提出作为该 PEP 的授权人，然后他们将有权力批准（或拒绝）该 "
"PEP。承担这一责任的个人可以在任何时候寻求指导委员会的额外指导，而且还应该考虑到其他核心开发者的建议和观点。"

#: ../../pep-0001.txt:289
msgid ""
"The designated decision maker for each PEP is recorded in the \"PEP-"
"Delegate\" header in the PEP."
msgstr "每个 PEP 的指定决策者被记录在 PEP 中的 \"PEP-Delegate\" 头部下。"

#: ../../pep-0001.txt:292
msgid ""
"Such self-nominations are accepted by default, but may be explicitly "
"declined by the Steering Council. Possible reasons for the Steering "
"Council declining a self-nomination as PEP-Delegate include, but are not "
"limited to, perceptions of a potential conflict of interest (e.g. working"
" for the same organisation as the PEP submitter), or simply considering "
"another potential PEP-Delegate to be more appropriate. If core developers"
" (or other community members) have concerns regarding the suitability of "
"a PEP-Delegate for any given PEP, they may ask the Steering Council to "
"review the delegation."
msgstr ""
"这种自荐是默认接受的，但指导委员会可以明确地拒绝。指导委员会拒绝自我提名为 PEP-Delegate "
"的可能原因包括，但不限于，认为有潜在的利益冲突（例如，与 PEP 提交者在同一个组织工作），或者只是认为另一个潜在的 PEP-Delegate "
"更合适。如果核心开发者（或其他社区成员）对任何特定的 PEP-Delegate 的合适性有顾虑，他们可以要求指导委员会审查该委托。"

#: ../../pep-0001.txt:301
msgid ""
"If no volunteer steps forward, then the Steering Council will approach "
"core developers (and potentially other Python community members) with "
"relevant expertise, in an attempt to identify a candidate that is willing"
" to serve as PEP-Delegate for that PEP. If no suitable candidate can be "
"found, then the PEP will be marked as Deferred until one is available."
msgstr ""
"如果没有志愿者站出来，那么指导委员会将与具有相关专业知识的核心开发者（以及可能的其他 Python 社区成员）接触，试图确定一个愿意担任该 "
"PEP-Delegate 的候选人。如果找不到合适的人选，那么该 PEP 将被标记为 “Deferred”，直到有合适的人选。"

#: ../../pep-0001.txt:307
msgid ""
"Previously appointed PEP-Delegates may choose to step down, or be asked "
"to step down by the Council, in which case a new PEP-Delegate will be "
"appointed in the same manner as for a new PEP (including deferral of the "
"PEP if no suitable replacement can be found). In the event that a PEP-"
"Delegate is asked to step down, this will overrule any prior acceptance "
"or rejection of the PEP, and it will revert to Draft status."
msgstr ""
"以前任命的 PEP-Delegates 可以选择卸任，或被理事会要求卸任，在这种情况下，将按照任命新的 PEP-Delegates 的方式任命新的"
" PEP-Delegate（包括如果找不到合适的替代者，则推迟 PEP 的任命）。如果 PEP-Delegate 被要求卸任，这将推翻之前对 "
"PEP 的任何接受或拒绝，并且它将恢复到草案状态。"

#: ../../pep-0001.txt:314
msgid ""
"With the approval of the Steering Council, PEP review and resolution may "
"also occur on a list other than python-dev (for example, distutils-sig "
"for packaging related PEPs that don't immediately affect the standard "
"library). In these cases, the \"Discussions-To\" heading in the PEP will "
"identify the appropriate alternative list where discussion, review and "
"pronouncement on the PEP will occur."
msgstr ""
"在指导委员会的批准下，PEP 的审查和解决也可能发生在 python-dev 之外的列表中（例如，distutils-sig "
"用于与打包相关的、不会立即影响标准库的 PEP）。在这种情况下，PEP 中的 \"Discussions-To\" "
"头信息将确定适当的替代列表，在那里对 PEP 进行讨论、审查和宣布"

#: ../../pep-0001.txt:321
msgid ""
"When such standing delegations are put in place, the Steering Council "
"will maintain sufficient public records to allow subsequent Councils, the"
" core developers, and the wider Python community to understand the "
"delegations that currently exist, why they were put in place, and the "
"circumstances under which they may no longer be needed."
msgstr ""
"当这种常设授权到位时，指导委员会将保持足够的公共记录，以使后来的理事会、核心开发商和更广泛的 Python "
"社区了解目前存在的授权，为什么会有这些授权，以及在什么情况下可能不再需要这些授权。"

#: ../../pep-0001.txt:327
msgid ""
"For a PEP to be accepted it must meet certain minimum criteria.  It must "
"be a clear and complete description of the proposed enhancement. The "
"enhancement must represent a net improvement.  The proposed "
"implementation, if applicable, must be solid and must not complicate the "
"interpreter unduly.  Finally, a proposed enhancement must be \"pythonic\""
" in order to be accepted by the Steering Council.  (However, \"pythonic\""
" is an imprecise term; it may be defined as whatever is acceptable to the"
" Steering Council.  This logic is intentionally circular.)  See PEP 2 "
"[2]_ for standard library module acceptance criteria."
msgstr ""
"要接受 "
"PEP，它必须满足某些最低标准。它必须是对拟议改进的清晰和完整的描述。该改进必须代表净改进。建议的实现，如果适用的话，必须是可靠的，并且不能使解释器过度复杂化。最后，提议的改进必须是"
" “pythonic”，以便被指导委员会接受。（然而，“pythonic” "
"是一个不精确的术语；它可以被定义为指导委员会可以接受的任何东西。这个逻辑是故意循环的）。参见 PEP 2 [2]_ 关于标准库模块的接受标准。"

#: ../../pep-0001.txt:337
msgid ""
"Once a PEP has been accepted, the reference implementation must be "
"completed.  When the reference implementation is complete and "
"incorporated into the main source code repository, the status will be "
"changed to \"Final\"."
msgstr "一旦一个 PEP 被接受，必须完成参考实现。当参考实现完成并被纳入主源代码库时，状态将被改变为 \"Final\"。"

#: ../../pep-0001.txt:341
msgid ""
"To allow gathering of additional design and interface feedback before "
"committing to long term stability for a language feature or standard "
"library API, a PEP may also be marked as \"Provisional\". This is short "
"for \"Provisionally Accepted\", and indicates that the proposal has been "
"accepted for inclusion in the reference implementation, but additional "
"user feedback is needed before the full design can be considered "
"\"Final\". Unlike regular accepted PEPs, provisionally accepted PEPs may "
"still be Rejected or Withdrawn *even after the related changes have been "
"included in a Python release*."
msgstr ""
"为了在对语言功能或标准库 API 的长期稳定性做出承诺之前收集额外的设计和接口反馈，PEP 也可以被标记为 \"Provisional\"。这是 "
"\"Provisionally Accepted\" 的简称，表示该提案已被接受纳入参考实现，但在完整的设计被认为是 \"Final\" "
"之前还需要更多的用户反馈。与常规接受的 PEP 不同，临时接受的 PEP 仍然可能被拒绝或撤回，*即使相关的修改已经包含在 Python "
"版本中*。"

#: ../../pep-0001.txt:350
msgid ""
"Wherever possible, it is considered preferable to reduce the scope of a "
"proposal to avoid the need to rely on the \"Provisional\" status (e.g. by"
" deferring some features to later PEPs), as this status can lead to "
"version compatibility challenges in the wider Python ecosystem. PEP 411 "
"provides additional details on potential use cases for the Provisional "
"status."
msgstr ""
"只要有可能，我们认为最好是缩小提案的范围，以避免依赖 \"Provisional\" 状态（例如将一些特性推迟到以后的 "
"PEP），因为这种状态可能会导致更广泛的 Python 生态系统中的版本兼容性问题。PEP 411 提供了关于临时状态的潜在用例的更多细节。"

#: ../../pep-0001.txt:356
msgid ""
"A PEP can also be assigned the status \"Deferred\".  The PEP author or an"
" editor can assign the PEP this status when no progress is being made on "
"the PEP.  Once a PEP is deferred, a PEP editor can reassign it to draft "
"status."
msgstr ""
"一个 PEP 也可以被赋予状态：\"Deferred\"。当 PEP 没有进展时，PEP 的作者或编辑可以给该 PEP 分配这种状态。一旦 PEP"
" 被推迟，PEP 编辑可以将其重新分配为草案状态。"

#: ../../pep-0001.txt:361
msgid ""
"A PEP can also be \"Rejected\".  Perhaps after all is said and done it "
"was not a good idea.  It is still important to have a record of this "
"fact. The \"Withdrawn\" status is similar - it means that the PEP author "
"themselves has decided that the PEP is actually a bad idea, or has "
"accepted that a competing proposal is a better alternative."
msgstr ""
"PEP也可以是 \"Rejected\" 的。也许说来说去，这并不是一个好主意。对这一事实进行记录仍然是很重要的。\"Withdrawn\" "
"状态是类似的--它意味着 PEP 作者自己已经决定该 PEP 实际上是一个坏主意，或者已经接受了一个竞争提案是更好的选择。"

#: ../../pep-0001.txt:367
msgid ""
"When a PEP is Accepted, Rejected or Withdrawn, the PEP should be updated "
"accordingly. In addition to updating the status field, at the very least "
"the Resolution header should be added with a link to the relevant post in"
" the python-dev mailing list archives."
msgstr ""
"当一个 PEP 被接受、拒绝或撤回时，PEP 应该被相应地更新。除了更新状态字段之外，至少应该在决议头部中添加一个指向 python-dev "
"邮件列表档案中相关帖子的链接。"

#: ../../pep-0001.txt:372
msgid ""
"PEPs can also be superseded by a different PEP, rendering the original "
"obsolete.  This is intended for Informational PEPs, where version 2 of an"
" API can replace version 1."
msgstr "PEP 也可以被一个不同的 PEP所取代，使原来的 PEP 过时。这是为信息性 PEP 准备的，即一个 API 的第二版可以取代第一版。"

#: ../../pep-0001.txt:376
msgid "The possible paths of the status of PEPs are as follows:"
msgstr "PEP 的状态的可能路径如下："

msgid "PEP 过程流程图"
msgstr ""

#: ../../pep-0001.txt:381
msgid ""
"While not shown in the diagram, \"Accepted\" PEPs may technically move to"
" \"Rejected\" or \"Withdrawn\" even after acceptance. This will only "
"occur if the implementation process reveals fundamental flaws in the "
"design that were not noticed prior to acceptance of the PEP. Unlike "
"Provisional PEPs, these transitions are only permitted if the accepted "
"proposal has *not* been included in a Python release - released changes "
"must instead go through the regular deprecation process (which may "
"require a new PEP providing the rationale for the deprecation)."
msgstr ""
"虽然在图中没有显示，但从技术上讲，\"Accepted\" 的 PEP 可能会转到 \"Rejected\" 或 "
"\"Withdrawn\"，甚至在接受之后。只有在实施过程中发现了设计中的基本缺陷，而在接受 PEP 之前没有注意到时，才会发生这种情况。与临时 "
"PEP 不同的是，只有在被接受的建议没有被包含在 Python 版本中的情况下才允许这些转换--"
"被发布的修改必须通过常规的废弃过程（这可能需要一个新的 PEP 来提供废弃的理由）。"

#: ../../pep-0001.txt:390
msgid ""
"Some Informational and Process PEPs may also have a status of \"Active\" "
"if they are never meant to be completed.  E.g. PEP 1 (this PEP)."
msgstr "一些信息性和过程性的 PEPs 如果从未打算完成，也可能有一个状态为 \"Active\"。例如，PEP 1（本 PEP）。"

#: ../../pep-0001.txt:395
msgid "PEP Maintenance"
msgstr "PEP 的维护"

#: ../../pep-0001.txt:397
msgid ""
"In general, Standards track PEPs are no longer modified after they have "
"reached the Final state. Once a PEP has been completed, the Language and "
"Standard Library References become the formal documentation of the "
"expected behavior."
msgstr "一般来说，标准追踪的 PEP 在达到最终状态后就不再修改。一旦一个 PEP 完成，语言和标准库参考文献就成为预期行为的正式文件。"

#: ../../pep-0001.txt:402
msgid ""
"If changes based on implementation experience and user feedback are made "
"to Standards track PEPs while in the Accepted or Provisional State, those"
" changes should be noted in the PEP, such that the PEP accurately "
"describes the state of the implementation at the point where it is marked"
" Final."
msgstr ""
"如果在处于接受或临时状态时，根据实施经验和用户反馈对标准跟踪 PEP 进行了修改，则应在 PEP 中注明这些修改，从而使 PEP "
"准确地描述了在标记为 Final 状态时的实施情况。"

#: ../../pep-0001.txt:407
msgid ""
"Informational and Process PEPs may be updated over time to reflect "
"changes to development practices and other details. The precise process "
"followed in these cases will depend on the nature and purpose of the PEP "
"being updated."
msgstr ""
"信息性和过程性 PEP 可能会随着时间的推移而更新，以反映发展实践和其他细节的变化。在这些情况下，所遵循的确切程序将取决于被更新的 PEP "
"的性质和目的。"

#: ../../pep-0001.txt:414
msgid "What belongs in a successful PEP?"
msgstr "哪些是属于成功的 PEP？"

#: ../../pep-0001.txt:416
msgid "Each PEP should have the following parts/sections:"
msgstr "每个 PEP 应该有以下部分/节："

#: ../../pep-0001.txt:418
msgid ""
"Preamble -- RFC 822 style headers containing meta-data about the PEP, "
"including the PEP number, a short descriptive title (limited to a maximum"
" of 44 characters), the names, and optionally the contact info for each "
"author, etc."
msgstr ""

#: ../../pep-0001.txt:423
msgid ""
"Abstract -- a short (~200 word) description of the technical issue being "
"addressed."
msgstr ""

#: ../../pep-0001.txt:426
msgid ""
"Motivation -- The motivation is critical for PEPs that want to change the"
" Python language, library, or ecosystem.  It should clearly explain why "
"the existing language specification is inadequate to address the problem "
"that the PEP solves.  This can include collecting documented support for "
"the PEP from important projects in the Python ecosystem.  PEP submissions"
" without sufficient motivation may be rejected."
msgstr ""

#: ../../pep-0001.txt:434
msgid ""
"Rationale -- The rationale fleshes out the specification by describing "
"why particular design decisions were made.  It should describe alternate "
"designs that were considered and related work, e.g. how the feature is "
"supported in other languages."
msgstr ""

#: ../../pep-0001.txt:439
msgid ""
"The rationale should provide evidence of consensus within the community "
"and discuss important objections or concerns raised during discussion."
msgstr ""

#: ../../pep-0001.txt:443
msgid ""
"Specification -- The technical specification should describe the syntax "
"and semantics of any new language feature.  The specification should be "
"detailed enough to allow competing, interoperable implementations for at "
"least the current major Python platforms (CPython, Jython, IronPython, "
"PyPy)."
msgstr ""

#: ../../pep-0001.txt:449
msgid ""
"Backwards Compatibility -- All PEPs that introduce backwards "
"incompatibilities must include a section describing these "
"incompatibilities and their severity.  The PEP must explain how the "
"author proposes to deal with these incompatibilities.  PEP submissions "
"without a sufficient backwards compatibility treatise may be rejected "
"outright."
msgstr ""

#: ../../pep-0001.txt:456
msgid ""
"Security Implications -- If there are security concerns in relation to "
"the PEP, those concerns should be explicitly written out to make sure "
"reviewers of the PEP are aware of them."
msgstr ""

#: ../../pep-0001.txt:460
msgid ""
"How to Teach This -- For a PEP that adds new functionality or changes "
"language behavior, it is helpful to include a section on how to teach "
"users, new and experienced, how to apply the PEP to their work."
msgstr ""

#: ../../pep-0001.txt:465
msgid ""
"This section may include key points and recommended documentation changes"
" that would help users adopt a new feature or migrate their code to use a"
" language change."
msgstr ""

#: ../../pep-0001.txt:469
msgid ""
"Reference Implementation -- The reference implementation must be "
"completed before any PEP is given status \"Final\", but it need not be "
"completed before the PEP is accepted.  While there is merit to the "
"approach of reaching consensus on the specification and rationale before "
"writing code, the principle of \"rough consensus and running code\" is "
"still useful when it comes to resolving many discussions of API details."
msgstr ""

#: ../../pep-0001.txt:477
msgid ""
"The final implementation must include test code and documentation "
"appropriate for either the Python language reference or the standard "
"library reference."
msgstr ""

#: ../../pep-0001.txt:481
msgid ""
"Rejected Ideas -- Throughout the discussion of a PEP, various ideas will "
"be proposed which are not accepted. Those rejected ideas should be "
"recorded along with the reasoning as to why they were rejected. This both"
" helps record the thought process behind the final version of the PEP as "
"well as preventing people from bringing up the same rejected idea again "
"in subsequent discussions."
msgstr ""

#: ../../pep-0001.txt:488
msgid ""
"In a way this section can be thought of as a breakout section of the "
"Rationale section that is focused specifically on why certain ideas were "
"not ultimately pursued."
msgstr ""

#: ../../pep-0001.txt:492
msgid ""
"Open Issues -- While a PEP is in draft, ideas can come up which warrant "
"further discussion. Those ideas should be recorded so people know that "
"they are being thought about but do not have a concrete resolution. This "
"helps make sure all issues required for the PEP to be ready for "
"consideration are complete and reduces people duplicating prior "
"discussion."
msgstr ""

#: ../../pep-0001.txt:499
msgid "References -- A collection of URLs used as references through the PEP."
msgstr ""

#: ../../pep-0001.txt:501
msgid ""
"Copyright/license -- Each new PEP must be placed under a dual license of "
"public domain and CC0-1.0-Universal_ (see this PEP for an example)."
msgstr ""

#: ../../pep-0001.txt:506
msgid "PEP Formats and Templates"
msgstr ""

#: ../../pep-0001.txt:508
msgid ""
"PEPs are UTF-8 encoded text files using the reStructuredText_ format. "
"ReStructuredText_ allows for rich markup that is still quite easy to "
"read, but also results in good-looking and functional HTML. PEP 12 "
"contains instructions and a template [4]_ for reStructuredText PEPs."
msgstr ""

#: ../../pep-0001.txt:513
msgid ""
"The PEP text files are automatically converted to HTML [6]_ for easier "
"`online reading <https://www.python.org/dev/peps/>`__."
msgstr ""

#: ../../pep-0001.txt:518
msgid "PEP Header Preamble"
msgstr ""

#: ../../pep-0001.txt:520
msgid ""
"Each PEP must begin with an RFC 822 style header preamble.  The headers "
"must appear in the following order.  Headers marked with \"*\" are "
"optional and are described below.  All other headers are required. ::"
msgstr ""

#: ../../pep-0001.txt:542
msgid ""
"The Author header lists the names, and optionally the email addresses of "
"all the authors/owners of the PEP.  The format of the Author header value"
" must be"
msgstr ""

#: ../../pep-0001.txt:546
msgid "Random J. User <address@dom.ain>"
msgstr ""

#: ../../pep-0001.txt:548
msgid "if the email address is included, and just"
msgstr ""

#: ../../pep-0001.txt:550
msgid "Random J. User"
msgstr ""

#: ../../pep-0001.txt:552
msgid ""
"if the address is not given.  For historical reasons the format "
"\"address@dom.ain (Random J. User)\" may appear in a PEP, however new "
"PEPs must use the mandated format above, and it is acceptable to change "
"to this format when PEPs are updated."
msgstr ""

#: ../../pep-0001.txt:557
msgid ""
"If there are multiple authors, each should be on a separate line "
"following RFC 2822 continuation line conventions.  Note that personal "
"email addresses in PEPs will be obscured as a defense against spam "
"harvesters."
msgstr ""

#: ../../pep-0001.txt:562
msgid ""
"The Sponsor field records which developer (core, or otherwise approved by"
" the Steering Council) is sponsoring the PEP.  If one of the authors of "
"the PEP is a core developer then no sponsor is necessary and thus this "
"field should be left out."
msgstr ""

#: ../../pep-0001.txt:567
msgid ""
"The PEP-Delegate field is used to record the individual appointed by the "
"Steering Council to make the final decision on whether or not to approve "
"or reject a PEP. (The delegate's email address is currently omitted due "
"to a limitation in the email address masking for reStructuredText PEPs)"
msgstr ""

#: ../../pep-0001.txt:572
msgid ""
"*Note: The Resolution header is required for Standards Track PEPs only.  "
"It contains a URL that should point to an email message or other web "
"resource where the pronouncement about the PEP is made.*"
msgstr ""

#: ../../pep-0001.txt:576
msgid ""
"For a PEP where final pronouncement will be made on a list other than "
"python-dev, a Discussions-To header will indicate the mailing list or URL"
" where the pronouncement will occur. A temporary Discussions-To header "
"may also be used when a draft PEP is being discussed prior to submission "
"for pronouncement. No Discussions-To header is necessary if the PEP is "
"being discussed privately with the author, or on the python-list, python-"
"ideas or python-dev mailing lists.  Note that email addresses in the "
"Discussions-To header will not be obscured."
msgstr ""

#: ../../pep-0001.txt:585
msgid ""
"The Type header specifies the type of PEP: Standards Track, "
"Informational, or Process."
msgstr ""

#: ../../pep-0001.txt:588
msgid ""
"The format of a PEP is specified with a Content-Type header.  The "
"acceptable values are \"text/plain\" for plaintext PEPs (see PEP 9 [3]_) "
"and \"text/x-rst\" for reStructuredText PEPs (see PEP 12 [4]_). "
"reStructuredText is strongly preferred, but for backwards compatibility "
"plain text is currently still the default if no Content-Type header is "
"present."
msgstr ""

#: ../../pep-0001.txt:595
msgid ""
"The Created header records the date that the PEP was assigned a number, "
"while Post-History is used to record the dates of when new versions of "
"the PEP are posted to python-ideas and/or python-dev.  Both headers "
"should be in dd-mmm-yyyy format, e.g. 14-Aug-2001."
msgstr ""

#: ../../pep-0001.txt:600
msgid ""
"Standards Track PEPs will typically have a Python-Version header which "
"indicates the version of Python that the feature will be released with. "
"Standards Track PEPs without a Python-Version header indicate "
"interoperability standards that will initially be supported through "
"external libraries and tools, and then potentially supplemented by a "
"later PEP to add support to the standard library. Informational and "
"Process PEPs do not need a Python-Version header."
msgstr ""

#: ../../pep-0001.txt:608
msgid ""
"PEPs may have a Requires header, indicating the PEP numbers that this PEP"
" depends on."
msgstr ""

#: ../../pep-0001.txt:611
msgid ""
"PEPs may also have a Superseded-By header indicating that a PEP has been "
"rendered obsolete by a later document; the value is the number of the PEP"
" that replaces the current document.  The newer PEP must have a Replaces "
"header containing the number of the PEP that it rendered obsolete."
msgstr ""

#: ../../pep-0001.txt:619
msgid "Auxiliary Files"
msgstr ""

#: ../../pep-0001.txt:621
msgid ""
"PEPs may include auxiliary files such as diagrams.  Such files should be "
"named ``pep-XXXX-Y.ext``, where \"XXXX\" is the PEP number, \"Y\" is a "
"serial number (starting at 1), and \"ext\" is replaced by the actual file"
" extension (e.g. \"png\")."
msgstr ""

#: ../../pep-0001.txt:626
msgid ""
"Alternatively, all support files may be placed in a subdirectory called "
"``pep-XXXX``, where \"XXXX\" is the PEP number. When using a "
"subdirectory, there are no constraints on the names used in files."
msgstr ""

#: ../../pep-0001.txt:632
msgid "Reporting PEP Bugs, or Submitting PEP Updates"
msgstr ""

#: ../../pep-0001.txt:634
msgid ""
"How you report a bug, or submit a PEP update depends on several factors, "
"such as the maturity of the PEP, the preferences of the PEP author, and "
"the nature of your comments.  For the early draft stages of the PEP, it's"
" probably best to send your comments and changes directly to the PEP "
"author.  For more mature, or finished PEPs you may want to submit "
"corrections as a `GitHub issue`_ or `GitHub pull request`_ so that your "
"changes don't get lost."
msgstr ""

# "你如何报告一个错误，或提交一个 PEP 更新，取决于几个因素，如 PEP 的成熟度，"
# "PEP 作者的偏好，以及你的评论的性质。对于 PEP 的早期草案阶段，最好是将你的评论和修改直接发送给 PEP 作者。"
# "对于更成熟的，或已经完成的PEP，你可能想以  `GitHub issue`_  或 "
# " `GitHub pull request`_  的形式提交修改，这样你的修改就不会丢失。"
#: ../../pep-0001.txt:642
msgid ""
"When in doubt about where to send your changes, please check first with "
"the PEP author and/or a PEP editor."
msgstr ""

#: ../../pep-0001.txt:645
msgid ""
"PEP authors with git push privileges for the PEP repository can update "
"the PEPs themselves by using \"git push\" or the GitHub PR interface to "
"submit their changes."
msgstr ""

#: ../../pep-0001.txt:651
msgid "Transferring PEP Ownership"
msgstr ""

#: ../../pep-0001.txt:653
msgid ""
"It occasionally becomes necessary to transfer ownership of PEPs to a new "
"champion.  In general, it is preferable to retain the original author as "
"a co-author of the transferred PEP, but that's really up to the original "
"author.  A good reason to transfer ownership is because the original "
"author no longer has the time or interest in updating it or following "
"through with the PEP process, or has fallen off the face of the 'net "
"(i.e. is unreachable or not responding to email).  A bad reason to "
"transfer ownership is because the author doesn't agree with the direction"
" of the PEP.  One aim of the PEP process is to try to build consensus "
"around a PEP, but if that's not possible, an author can always submit a "
"competing PEP."
msgstr ""

#: ../../pep-0001.txt:665
msgid ""
"If you are interested in assuming ownership of a PEP, you can also do "
"this via pull request.  Fork the `PEP repository`_, make your ownership "
"modification, and submit a pull request.  You should mention both the "
"original author and ``@python/pep-editors`` in a comment on the pull "
"request.  (If the original author's GitHub username is unknown, use "
"email.)  If the original author doesn't respond in a timely manner, the "
"PEP editors will make a unilateral decision (it's not like such decisions"
" can't be reversed :)."
msgstr ""

# "如果你有兴趣承担一个 PEP 的所有权，"
# "你也可以通过pull request来做这件事。"
# "fork `PEP repository`_ ，修改你的所有权，并提交一个拉动请求。"
# "你应该在拉动请求的评论中提到原作者和 ``@python/pep-editors``。"
# "（如果原作者的GitHub用户名不详，请使用电子邮件。）"
# "如果原作者没有及时回应，PEP 编辑们将做出单方面的决定"
# "（这种决定也不是不能推翻的 :)。"
#: ../../pep-0001.txt:675
msgid "PEP Editor Responsibilities & Workflow"
msgstr ""

#: ../../pep-0001.txt:677
msgid ""
"A PEP editor must be added to the ``@python/pep-editors`` group on GitHub"
" and must watch the `PEP repository`_."
msgstr ""

# "PEP 编辑者必须加入 GitHub 上的 ``@python/pep-editors`` 组，"
# "并且必须监视  `PEP repository`_ 。"
#: ../../pep-0001.txt:680
msgid ""
"Note that developers with git push privileges for the `PEP repository`_ "
"may handle the tasks that would normally be taken care of by the PEP "
"editors. Alternately, even developers may request assistance from PEP "
"editors by mentioning ``@python/pep-editors`` on GitHub."
msgstr ""

# "请注意，拥有  `PEP repository`_  的 git 推送权限的开发人员可以处理通常"
# "由 PEP 编辑人员负责的任务。"
# "另外，即使是开发者也可以通过在 GitHub 上提及 ``@python/pep-editors`` "
# "来请求 PEP 编辑的帮助。"
#: ../../pep-0001.txt:685
msgid "For each new PEP that comes in an editor does the following:"
msgstr ""

#: ../../pep-0001.txt:687
msgid ""
"Make sure that the PEP is either co-authored by a core developer, has a "
"core developer as a sponsor, or has a sponsor specifically approved for "
"this PEP by the Steering Council."
msgstr ""

#: ../../pep-0001.txt:691
msgid ""
"Read the PEP to check if it is ready: sound and complete.  The ideas must"
" make technical sense, even if they don't seem likely to be accepted."
msgstr ""

#: ../../pep-0001.txt:695
msgid "The title should accurately describe the content."
msgstr ""

#: ../../pep-0001.txt:697
msgid "The file name extension is correct (i.e. ``.rst``)."
msgstr ""

#: ../../pep-0001.txt:699
msgid ""
"Make sure the appropriate core developer(s) is added to "
"`.github/CODEOWNERS` [7]_."
msgstr ""

#: ../../pep-0001.txt:702
msgid ""
"Skim the PEP for obvious defects in language (spelling, grammar, sentence"
" structure, etc.), and code style (examples should conform to PEP 8 & PEP"
" 7).  Editors may correct problems themselves, but are not required to do"
" so.  (Text format is checked by Travis CI.)"
msgstr ""

#: ../../pep-0001.txt:707
msgid ""
"If a project is portrayed as benefiting from or supporting the PEP, make "
"sure there is some direct indication from the project included to make "
"the support clear. This is to avoid a PEP accidentally portraying a "
"project as supporting a PEP when in fact the support is based on "
"conjecture."
msgstr ""

#: ../../pep-0001.txt:712
msgid ""
"If the PEP isn't ready, an editor will send it back to the author for "
"revision, with specific instructions.  If reST formatting is a problem, "
"ask the author(s) to use PEP 12 as a template and resubmit."
msgstr ""

#: ../../pep-0001.txt:716
msgid "Once the PEP is ready for the repository, a PEP editor will:"
msgstr ""

#: ../../pep-0001.txt:718
msgid ""
"Assign a PEP number (almost always just the next available number, but "
"sometimes it's a special/joke number, like 666 or 3141). (Clarification: "
"For Python 3, numbers in the 3000s were used for Py3k-specific proposals."
"  But now that all new features go into Python 3 only, the process is "
"back to using numbers in the 100s again. Remember that numbers below 100 "
"are meta-PEPs.)"
msgstr ""

#: ../../pep-0001.txt:725
msgid ""
"Check that the author has correctly labeled the PEP's type (\"Standards "
"Track\", \"Informational\", or \"Process\"), and marked its status as "
"\"Draft\"."
msgstr ""

#: ../../pep-0001.txt:729
msgid ""
"Add the PEP to a local fork of the PEP repository.  For workflow "
"instructions, follow `The Python Developers Guide "
"<http://docs.python.org/devguide>`_"
msgstr ""
"将 PEP 添加到 PEP 仓库的本地分叉中。关于工作流程的说明，请遵循 `Python 开发者指南 "
"<http://docs.python.org/devguide>`_"

#: ../../pep-0001.txt:732
msgid "The git repo for the peps is::"
msgstr ""

#: ../../pep-0001.txt:736
msgid ""
"Run ``./genpepindex.py`` and ``./pep2html.py <PEP Number>`` to ensure "
"they are generated without errors. If either triggers errors, then the "
"web site will not be updated to reflect the PEP changes."
msgstr ""

#: ../../pep-0001.txt:740
msgid "Commit and push the new (or updated) PEP"
msgstr ""

#: ../../pep-0001.txt:742
msgid ""
"Monitor python.org to make sure the PEP gets added to the site properly. "
"If it fails to appear, running ``make`` will build all of the current "
"PEPs. If any of these are triggering errors, they must be corrected "
"before any PEP will update on the site."
msgstr ""

#: ../../pep-0001.txt:747
msgid ""
"Send email back to the PEP author with next steps (post to python-list & "
"-dev)."
msgstr ""

#: ../../pep-0001.txt:750
msgid "Updates to existing PEPs should be submitted as a `GitHub pull request`_."
msgstr ""

#: ../../pep-0001.txt:752
msgid ""
"Many PEPs are written and maintained by developers with write access to "
"the Python codebase.  The PEP editors monitor the PEP repository for "
"changes, and correct any structure, grammar, spelling, or markup mistakes"
" they see."
msgstr ""
"许多 PEP 是由具有 Python 代码库写入权限的开发者编写和维护的。PEP 编辑人员监视 PEP "
"仓库的变化，并纠正他们看到的任何结构、语法、拼写或标记错误。"

#: ../../pep-0001.txt:757
msgid ""
"PEP editors don't pass judgment on PEPs.  They merely do the "
"administrative & editorial part (which is generally a low volume task)."
msgstr ""

#: ../../pep-0001.txt:760
msgid "Resources:"
msgstr ""

#: ../../pep-0001.txt:762
msgid "`Index of Python Enhancement Proposals <http://www.python.org/dev/peps/>`_"
msgstr ""

#: ../../pep-0001.txt:764
msgid ""
"`Following Python's Development "
"<http://docs.python.org/devguide/communication.html>`_"
msgstr ""

#: ../../pep-0001.txt:767
msgid "`Python Developer's Guide <http://docs.python.org/devguide/>`_"
msgstr ""

#: ../../pep-0001.txt:769
msgid ""
"`Frequently Asked Questions for Developers "
"<http://docs.python.org/devguide/faq.html>`_"
msgstr ""

#: ../../pep-0001.txt:774
msgid "References and Footnotes"
msgstr ""

#: ../../pep-0001.txt:776
msgid ""
"This historical record is available by the normal git commands for "
"retrieving older revisions, and can also be browsed via HTTP here: "
"https://github.com/python/peps"
msgstr ""

#: ../../pep-0001.txt:780
msgid ""
"PEP 2, Procedure for Adding New Modules "
"(http://www.python.org/dev/peps/pep-0002)"
msgstr ""

#: ../../pep-0001.txt:783
msgid ""
"PEP 9, Sample Plaintext PEP Template "
"(http://www.python.org/dev/peps/pep-0009)"
msgstr ""

#: ../../pep-0001.txt:786
msgid ""
"PEP 12, Sample reStructuredText PEP Template "
"(http://www.python.org/dev/peps/pep-0012)"
msgstr ""

#: ../../pep-0001.txt:789
msgid ""
"PEP 13, Python Language Governance "
"(http://www.python.org/dev/peps/pep-0013)"
msgstr ""

#: ../../pep-0001.txt:792
msgid ""
"More details on the PEP rendering and publication process can be found in"
" the PEPs repo README at "
"https://github.com/python/peps/blob/master/README.rst"
msgstr ""

#: ../../pep-0001.txt:796
msgid ""
"`CODEOWNERS` documentation (https://docs.github.com/en/github/creating-"
"cloning-and-archiving-repositories/about-code-owners)"
msgstr ""

#: ../../pep-0001.txt:816
msgid "Copyright"
msgstr ""

#: ../../pep-0001.txt:818
msgid ""
"This document is placed in the public domain or under the "
"CC0-1.0-Universal license, whichever is more permissive."
msgstr ""

#~ msgid "PEP process flow diagram"
#~ msgstr "PEP 过程流程图"

