# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0318.txt
msgid "PEP"
msgstr ""

#: ../../pep-0318.txt:1
msgid "318"
msgstr ""

#: ../../pep-0318.txt
msgid "Title"
msgstr ""

#: ../../pep-0318.txt:2
msgid "Decorators for Functions and Methods"
msgstr ""

#: ../../pep-0318.txt
msgid "Author"
msgstr ""

#: ../../pep-0318.txt:5
msgid ""
"Kevin D. Smith <Kevin.Smith@theMorgue.org>, Jim J. Jewett, Skip "
"Montanaro, Anthony Baxter"
msgstr ""

#: ../../pep-0318.txt
msgid "Status"
msgstr ""

#: ../../pep-0318.txt:6
msgid "Final"
msgstr ""

#: ../../pep-0318.txt
msgid "Type"
msgstr ""

#: ../../pep-0318.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0318.txt
msgid "Created"
msgstr ""

#: ../../pep-0318.txt:9
msgid "05-Jun-2003"
msgstr ""

#: ../../pep-0318.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0318.txt:10
msgid "2.4"
msgstr ""

#: ../../pep-0318.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0318.txt:11
msgid ""
"09-Jun-2003, 10-Jun-2003, 27-Feb-2004, 23-Mar-2004, 30-Aug-2004, "
"2-Sep-2004"
msgstr ""

#: ../../pep-0318.txt:16
msgid "WarningWarningWarning"
msgstr ""

#: ../../pep-0318.txt:18
msgid ""
"This document is meant to describe the decorator syntax and the process "
"that resulted in the decisions that were made.  It does not attempt to "
"cover the huge number of potential alternative syntaxes, nor is it an "
"attempt to exhaustively list all the positives and negatives of each "
"form."
msgstr ""

#: ../../pep-0318.txt:26
msgid "Abstract"
msgstr ""

#: ../../pep-0318.txt:28
msgid ""
"The current method for transforming functions and methods (for instance, "
"declaring them as a class or static method) is awkward and can lead to "
"code that is difficult to understand.  Ideally, these transformations "
"should be made at the same point in the code where the declaration itself"
" is made.  This PEP introduces new syntax for transformations of a "
"function or method declaration."
msgstr ""

#: ../../pep-0318.txt:37
msgid "Motivation"
msgstr ""

#: ../../pep-0318.txt:39
msgid ""
"The current method of applying a transformation to a function or method "
"places the actual transformation after the function body.  For large "
"functions this separates a key component of the function's behavior from "
"the definition of the rest of the function's external interface.  For "
"example::"
msgstr ""

#: ../../pep-0318.txt:49
msgid ""
"This becomes less readable with longer methods.  It also seems less than "
"pythonic to name the function three times for what is conceptually a "
"single declaration.  A solution to this problem is to move the "
"transformation of the method closer to the method's own declaration. The "
"intent of the new syntax is to replace ::"
msgstr ""

#: ../../pep-0318.txt:60
msgid ""
"with an alternative that places the decoration in the function's "
"declaration::"
msgstr ""

#: ../../pep-0318.txt:68
msgid ""
"Modifying classes in this fashion is also possible, though the benefits "
"are not as immediately apparent.  Almost certainly, anything which could "
"be done with class decorators could be done using metaclasses, but using "
"metaclasses is sufficiently obscure that there is some attraction to "
"having an easier way to make simple modifications to classes.  For Python"
" 2.4, only function/method decorators are being added."
msgstr ""

#: ../../pep-0318.txt:75 ../../pep-0318.txt:839
msgid "PEP 3129 [#PEP-3129] proposes to add class decorators as of Python 2.6."
msgstr ""

#: ../../pep-0318.txt:79
msgid "Why Is This So Hard?"
msgstr ""

#: ../../pep-0318.txt:81
msgid ""
"Two decorators (``classmethod()`` and ``staticmethod()``) have been "
"available in Python since version 2.2.  It's been assumed since "
"approximately that time that some syntactic support for them would "
"eventually be added to the language.  Given this assumption, one might "
"wonder why it's been so difficult to arrive at a consensus.  Discussions "
"have raged off-and-on at times in both comp.lang.python and the python-"
"dev mailing list about how best to implement function decorators. There "
"is no one clear reason why this should be so, but a few problems seem to "
"be most divisive."
msgstr ""

#: ../../pep-0318.txt:91
msgid ""
"Disagreement about where the \"declaration of intent\" belongs. Almost "
"everyone agrees that decorating/transforming a function at the end of its"
" definition is suboptimal.  Beyond that there seems to be no clear "
"consensus where to place this information."
msgstr ""

#: ../../pep-0318.txt:96
msgid ""
"Syntactic constraints.  Python is a syntactically simple language with "
"fairly strong constraints on what can and can't be done without \"messing"
" things up\" (both visually and with regards to the language parser).  "
"There's no obvious way to structure this information so that people new "
"to the concept will think, \"Oh yeah, I know what you're doing.\"  The "
"best that seems possible is to keep new users from creating a wildly "
"incorrect mental model of what the syntax means."
msgstr ""

#: ../../pep-0318.txt:104
msgid ""
"Overall unfamiliarity with the concept.  For people who have a passing "
"acquaintance with algebra (or even basic arithmetic) or have used at "
"least one other programming language, much of Python is intuitive.  Very "
"few people will have had any experience with the decorator concept before"
" encountering it in Python.  There's just no strong preexisting meme that"
" captures the concept."
msgstr ""

#: ../../pep-0318.txt:111
msgid ""
"Syntax discussions in general appear to cause more contention than almost"
" anything else. Readers are pointed to the ternary operator discussions "
"that were associated with PEP 308 for another example of this."
msgstr ""

#: ../../pep-0318.txt:118
msgid "Background"
msgstr ""

#: ../../pep-0318.txt:120
msgid ""
"There is general agreement that syntactic support is desirable to the "
"current state of affairs.  Guido mentioned `syntactic support for "
"decorators`_ in his DevDay keynote presentation at the `10th Python "
"Conference`_, though `he later said`_ it was only one of several "
"extensions he proposed there \"semi-jokingly\".  `Michael Hudson raised "
"the topic`_ on ``python-dev`` shortly after the conference, attributing "
"the initial bracketed syntax to an earlier proposal on "
"``comp.lang.python`` by `Gareth McCaughan`_."
msgstr ""

#: ../../pep-0318.txt:140
msgid ""
"Class decorations seem like an obvious next step because class definition"
" and function definition are syntactically similar, however Guido remains"
" unconvinced, and class decorators will almost certainly not be in Python"
" 2.4."
msgstr ""

#: ../../pep-0318.txt:145
msgid ""
"The discussion continued on and off on python-dev from February 2002 "
"through July 2004.  Hundreds and hundreds of posts were made, with people"
" proposing many possible syntax variations.  Guido took a list of "
"proposals to `EuroPython 2004`_, where a discussion took place.  "
"Subsequent to this, he decided that we'd have the `Java-style`_ "
"@decorator syntax, and this appeared for the first time in 2.4a2. Barry "
"Warsaw named this the 'pie-decorator' syntax, in honor of the Pie-thon "
"Parrot shootout which occurred around the same time as the decorator "
"syntax, and because the @ looks a little like a pie. Guido `outlined his "
"case`_ on Python-dev, including `this piece`_ on some of the (many) "
"rejected forms."
msgstr ""

#: ../../pep-0318.txt:168
msgid "On the name 'Decorator'"
msgstr ""

#: ../../pep-0318.txt:170
msgid ""
"There's been a number of complaints about the choice of the name "
"'decorator' for this feature.  The major one is that the name is not "
"consistent with its use in the `GoF book`_.  The name 'decorator' "
"probably owes more to its use in the compiler area -- a syntax tree is "
"walked and annotated.  It's quite possible that a better name may turn "
"up."
msgstr ""

#: ../../pep-0318.txt:182
msgid "Design Goals"
msgstr ""

#: ../../pep-0318.txt:184
msgid "The new syntax should"
msgstr ""

#: ../../pep-0318.txt:186
msgid ""
"work for arbitrary wrappers, including user-defined callables and the "
"existing builtins ``classmethod()`` and ``staticmethod()``.  This "
"requirement also means that a decorator syntax must support passing "
"arguments to the wrapper constructor"
msgstr ""

#: ../../pep-0318.txt:191
msgid "work with multiple wrappers per definition"
msgstr ""

#: ../../pep-0318.txt:193
msgid ""
"make it obvious what is happening; at the very least it should be obvious"
" that new users can safely ignore it when writing their own code"
msgstr ""

#: ../../pep-0318.txt:197
msgid "be a syntax \"that ... [is] easy to remember once explained\""
msgstr ""

#: ../../pep-0318.txt:199
msgid "not make future extensions more difficult"
msgstr ""

#: ../../pep-0318.txt:201
msgid ""
"be easy to type; programs that use it are expected to use it very "
"frequently"
msgstr ""

#: ../../pep-0318.txt:204
msgid ""
"not make it more difficult to scan through code quickly.  It should still"
" be easy to search for all definitions, a particular definition, or the "
"arguments that a function accepts"
msgstr ""

#: ../../pep-0318.txt:208
msgid ""
"not needlessly complicate secondary support tools such as language-"
"sensitive editors and other \"`toy parser tools out there`_\""
msgstr ""

#: ../../pep-0318.txt:212
msgid ""
"allow future compilers to optimize for decorators.  With the hope of a "
"JIT compiler for Python coming into existence at some point this tends to"
" require the syntax for decorators to come before the function definition"
msgstr ""

#: ../../pep-0318.txt:217
msgid ""
"move from the end of the function, where it's currently hidden, to the "
"front where it is more `in your face`_"
msgstr ""

#: ../../pep-0318.txt:220
msgid ""
"Andrew Kuchling has links to a bunch of the discussions about motivations"
" and use cases `in his blog`_.  Particularly notable is `Jim Huginin's "
"list of use cases`_."
msgstr ""

#: ../../pep-0318.txt:235
msgid "Current Syntax"
msgstr ""

#: ../../pep-0318.txt:237
msgid ""
"The current syntax for function decorators as implemented in Python 2.4a2"
" is::"
msgstr ""

#: ../../pep-0318.txt:245 ../../pep-0318.txt:277 ../../pep-0318.txt:614
msgid "This is equivalent to::"
msgstr ""

#: ../../pep-0318.txt:251
msgid ""
"without the intermediate assignment to the variable ``func``.  The "
"decorators are near the function declaration.  The @ sign makes it clear "
"that something new is going on here."
msgstr ""

#: ../../pep-0318.txt:255
msgid ""
"The rationale for the `order of application`_ (bottom to top) is that it "
"matches the usual order for function-application.  In mathematics, "
"composition of functions (g o f)(x) translates to g(f(x)).  In Python, "
"``@g @f def foo()`` translates to ``foo=g(f(foo)``."
msgstr ""

#: ../../pep-0318.txt:263
msgid ""
"The decorator statement is limited in what it can accept -- arbitrary "
"expressions will not work.  Guido preferred this because of a `gut "
"feeling`_."
msgstr ""

#: ../../pep-0318.txt:270
msgid ""
"The current syntax also allows decorator declarations to call a function "
"that returns a decorator::"
msgstr ""

#: ../../pep-0318.txt:281
msgid ""
"The rationale for having a function that returns a decorator is that the "
"part after the @ sign can be considered to be an expression (though "
"syntactically restricted to just a function), and whatever that "
"expression returns is called.  See `declaration arguments`_."
msgstr ""

#: ../../pep-0318.txt:291
msgid "Syntax Alternatives"
msgstr ""

#: ../../pep-0318.txt:293
msgid ""
"There have been `a large number`_ of different syntaxes proposed -- "
"rather than attempting to work through these individual syntaxes, it's "
"worthwhile to break the syntax discussion down into a number of areas. "
"Attempting to discuss `each possible syntax`_ individually would be an "
"act of madness, and produce a completely unwieldy PEP."
msgstr ""

#: ../../pep-0318.txt:306
msgid "Decorator Location"
msgstr ""

#: ../../pep-0318.txt:308
msgid ""
"The first syntax point is the location of the decorators.  For the "
"following examples, we use the @syntax used in 2.4a2."
msgstr ""

#: ../../pep-0318.txt:311
msgid ""
"Decorators before the def statement are the first alternative, and the "
"syntax used in 2.4a2::"
msgstr ""

#: ../../pep-0318.txt:323
msgid ""
"There have been a number of objections raised to this location -- the "
"primary one is that it's the first real Python case where a line of code "
"has an effect on a following line.  The syntax available in 2.4a3 "
"requires one decorator per line (in a2, multiple decorators could be "
"specified on the same line), and the final decision for 2.4 final stayed "
"one decorator per line."
msgstr ""

#: ../../pep-0318.txt:330
msgid ""
"People also complained that the syntax quickly got unwieldy when multiple"
" decorators were used.  The point was made, though, that the chances of a"
" large number of decorators being used on a single function were small "
"and thus this was not a large worry."
msgstr ""

#: ../../pep-0318.txt:335
msgid ""
"Some of the advantages of this form are that the decorators live outside "
"the method body -- they are obviously executed at the time the function "
"is defined."
msgstr ""

#: ../../pep-0318.txt:339
msgid ""
"Another advantage is that a prefix to the function definition fits the "
"idea of knowing about a change to the semantics of the code before the "
"code itself, thus you know how to interpret the code's semantics properly"
" without having to go back and change your initial perceptions if the "
"syntax did not come before the function definition."
msgstr ""

#: ../../pep-0318.txt:345
msgid ""
"Guido decided `he preferred`_ having the decorators on the line before "
"the 'def', because it was felt that a long argument list would mean that "
"the decorators would be 'hidden'"
msgstr ""

#: ../../pep-0318.txt:352
msgid ""
"The second form is the decorators between the def and the function name, "
"or the function name and the argument list::"
msgstr ""

#: ../../pep-0318.txt:367
msgid ""
"There are a couple of objections to this form.  The first is that it "
"breaks easily 'greppability' of the source -- you can no longer search "
"for 'def foo(' and find the definition of the function.  The second, more"
" serious, objection is that in the case of multiple decorators, the "
"syntax would be extremely unwieldy."
msgstr ""

#: ../../pep-0318.txt:373
msgid ""
"The next form, which has had a number of strong proponents, is to have "
"the decorators between the argument list and the trailing ``:`` in the "
"'def' line::"
msgstr ""

#: ../../pep-0318.txt:383
msgid ""
"Guido `summarized the arguments`_ against this form (many of which also "
"apply to the previous form) as:"
msgstr ""

#: ../../pep-0318.txt:386
msgid ""
"it hides crucial information (e.g. that it is a static method) after the "
"signature, where it is easily missed"
msgstr ""

#: ../../pep-0318.txt:389
msgid ""
"it's easy to miss the transition between a long argument list and a long "
"decorator list"
msgstr ""

#: ../../pep-0318.txt:392
msgid ""
"it's cumbersome to cut and paste a decorator list for reuse, because it "
"starts and ends in the middle of a line"
msgstr ""

#: ../../pep-0318.txt:398
msgid ""
"The next form is that the decorator syntax goes inside the method body at"
" the start, in the same place that docstrings currently live::"
msgstr ""

#: ../../pep-0318.txt:410
msgid ""
"The primary objection to this form is that it requires \"peeking inside\""
" the method body to determine the decorators.  In addition, even though "
"the code is inside the method body, it is not executed when the method is"
" run.  Guido felt that docstrings were not a good counter-example, and "
"that it was quite possible that a 'docstring' decorator could help move "
"the docstring to outside the function body."
msgstr ""

#: ../../pep-0318.txt:417
msgid ""
"The final form is a new block that encloses the method's code.  For this "
"example, we'll use a 'decorate' keyword, as it makes no sense with the "
"@syntax. ::"
msgstr ""

#: ../../pep-0318.txt:432
msgid ""
"This form would result in inconsistent indentation for decorated and "
"undecorated methods.  In addition, a decorated method's body would start "
"three indent levels in."
msgstr ""

#: ../../pep-0318.txt:438
msgid "Syntax forms"
msgstr ""

#: ../../pep-0318.txt:440
msgid "``@decorator``::"
msgstr ""

#: ../../pep-0318.txt:451
msgid ""
"The major objections against this syntax are that the @ symbol is not "
"currently used in Python (and is used in both IPython and Leo), and that "
"the @ symbol is not meaningful. Another objection is that this \"wastes\""
" a currently unused character (from a limited set) on something that is "
"not perceived as a major use."
msgstr ""

#: ../../pep-0318.txt:457
msgid "``|decorator``::"
msgstr ""

#: ../../pep-0318.txt:468
msgid ""
"This is a variant on the @decorator syntax -- it has the advantage that "
"it does not break IPython and Leo.  Its major disadvantage compared to "
"the @syntax is that the | symbol looks like both a capital I and a "
"lowercase l."
msgstr ""

#: ../../pep-0318.txt:473
msgid "list syntax::"
msgstr ""

#: ../../pep-0318.txt:483
msgid ""
"The major objection to the list syntax is that it's currently meaningful "
"(when used in the form before the method).  It's also lacking any "
"indication that the expression is a decorator."
msgstr ""

#: ../../pep-0318.txt:487
msgid "list syntax using other brackets (``<...>``, ``[[...]]``, ...)::"
msgstr ""

#: ../../pep-0318.txt:497
msgid ""
"None of these alternatives gained much traction. The alternatives which "
"involve square brackets only serve to make it obvious that the decorator "
"construct is not a list. They do nothing to make parsing any easier. The "
"'<...>' alternative presents parsing problems because '<' and '>' already"
" parse as un-paired. They present a further parsing ambiguity because a "
"right angle bracket might be a greater than symbol instead of a closer "
"for the decorators."
msgstr ""

#: ../../pep-0318.txt:505
msgid "``decorate()``"
msgstr ""

#: ../../pep-0318.txt:507
msgid ""
"The ``decorate()`` proposal was that no new syntax be implemented -- "
"instead a magic function that used introspection to manipulate the "
"following function.  Both Jp Calderone and Philip Eby produced "
"implementations of functions that did this.  Guido was pretty firmly "
"against this -- with no new syntax, the magicness of a function like this"
" is extremely high:"
msgstr ""

#: ../../pep-0318.txt:514
msgid ""
"Using functions with \"action-at-a-distance\" through sys.settraceback "
"may be okay for an obscure feature that can't be had any other way yet "
"doesn't merit changes to the language, but that's not the situation for "
"decorators.  The widely held view here is that decorators need to be "
"added as a syntactic feature to avoid the problems with the postfix "
"notation used in 2.2 and 2.3.  Decorators are slated to be an important "
"new language feature and their design needs to be forward-looking, not "
"constrained by what can be implemented in 2.3."
msgstr ""

#: ../../pep-0318.txt:524
msgid "_`new keyword (and block)`"
msgstr ""

#: ../../pep-0318.txt:526
msgid ""
"This idea was the consensus alternate from comp.lang.python (more on this"
" in `Community Consensus`_ below.)  Robert Brewer wrote up a detailed `J2"
" proposal`_ document outlining the arguments in favor of this form.  The "
"initial issues with this form are:"
msgstr ""

#: ../../pep-0318.txt:531
msgid ""
"It requires a new keyword, and therefore a ``from __future__ import "
"decorators`` statement."
msgstr ""

#: ../../pep-0318.txt:534
msgid ""
"The choice of keyword is contentious.  However ``using`` emerged as the "
"consensus choice, and is used in the proposal and implementation."
msgstr ""

#: ../../pep-0318.txt:538
msgid ""
"The keyword/block form produces something that looks like a normal code "
"block, but isn't.  Attempts to use statements in this block will cause a "
"syntax error, which may confuse users."
msgstr ""

#: ../../pep-0318.txt:542
msgid ""
"A few days later, Guido `rejected the proposal`_ on two main grounds, "
"firstly:"
msgstr ""

#: ../../pep-0318.txt:545
msgid ""
"... the syntactic form of an indented block strongly suggests that its "
"contents should be a sequence of statements, but in fact it is not -- "
"only expressions are allowed, and there is an implicit \"collecting\" of "
"these expressions going on until they can be applied to the subsequent "
"function definition. ..."
msgstr ""

#: ../../pep-0318.txt:551
msgid "and secondly:"
msgstr ""

#: ../../pep-0318.txt:553
msgid ""
"... the keyword starting the line that heads a block draws a lot of "
"attention to it. This is true for \"if\", \"while\", \"for\", \"try\", "
"\"def\" and \"class\". But the \"using\" keyword (or any other keyword in"
" its place) doesn't deserve that attention; the emphasis should be on the"
" decorator or decorators inside the suite, since those are the important "
"modifiers to the function definition that follows. ..."
msgstr ""

#: ../../pep-0318.txt:561
msgid "Readers are invited to read `the full response`_."
msgstr ""

#: ../../pep-0318.txt:572
msgid "Other forms"
msgstr ""

#: ../../pep-0318.txt:574
msgid "There are plenty of other variants and proposals on `the wiki page`_."
msgstr ""

#: ../../pep-0318.txt:581
msgid "Why @?"
msgstr ""

#: ../../pep-0318.txt:583
msgid ""
"There is some history in Java using @ initially as a marker in `Javadoc "
"comments`_ and later in Java 1.5 for `annotations`_, which are similar to"
" Python decorators.  The fact that @ was previously unused as a token in "
"Python also means it's clear there is no possibility of such code being "
"parsed by an earlier version of Python, leading to possibly subtle "
"semantic bugs.  It also means that ambiguity of what is a decorator and "
"what isn't is removed.  That said, @ is still a fairly arbitrary choice."
"  Some have suggested using | instead."
msgstr ""

#: ../../pep-0318.txt:592
msgid ""
"For syntax options which use a list-like syntax (no matter where it "
"appears) to specify the decorators a few alternatives were proposed: "
"``[|...|]``, ``*[...]*``, and ``<...>``."
msgstr ""

#: ../../pep-0318.txt:603
msgid "Current Implementation, History"
msgstr ""

#: ../../pep-0318.txt:605
msgid ""
"Guido asked for a volunteer to implement his preferred syntax, and Mark "
"Russell stepped up and posted a `patch`_ to SF.  This new syntax was "
"available in 2.4a2. ::"
msgstr ""

#: ../../pep-0318.txt:620
msgid "though without the intermediate creation of a variable named ``func``."
msgstr ""

#: ../../pep-0318.txt:622
msgid ""
"The version implemented in 2.4a2 allowed multiple ``@decorator`` clauses "
"on a single line. In 2.4a3, this was tightened up to only allowing one "
"decorator per line."
msgstr ""

#: ../../pep-0318.txt:626
msgid ""
"A `previous patch`_ from Michael Hudson which implements the list-after-"
"def syntax is also still kicking around."
msgstr ""

#: ../../pep-0318.txt:632
msgid ""
"After 2.4a2 was released, in response to community reaction, Guido stated"
" that he'd re-examine a community proposal, if the community could come "
"up with a community consensus, a decent proposal, and an implementation."
"  After an amazing number of posts, collecting a vast number of "
"alternatives in the `Python wiki`_, a community consensus emerged "
"(below).  Guido `subsequently rejected`_ this alternate form, but added:"
msgstr ""

#: ../../pep-0318.txt:640
msgid ""
"In Python 2.4a3 (to be released this Thursday), everything remains as "
"currently in CVS.  For 2.4b1, I will consider a change of @ to some other"
" single character, even though I think that @ has the advantage of being "
"the same character used by a similar feature in Java.  It's been argued "
"that it's not quite the same, since @ in Java is used for attributes that"
" don't change semantics.  But Python's dynamic nature makes that its "
"syntactic elements never mean quite the same thing as similar constructs "
"in other languages, and there is definitely significant overlap.  "
"Regarding the impact on 3rd party tools: IPython's author doesn't think "
"there's going to be much impact; Leo's author has said that Leo will "
"survive (although it will cause him and his users some transitional "
"pain).  I actually expect that picking a character that's already used "
"elsewhere in Python's syntax might be harder for external tools to adapt "
"to, since parsing will have to be more subtle in that case.  But I'm "
"frankly undecided, so there's some wiggle room here.  I don't want to "
"consider further syntactic alternatives at this point: the buck has to "
"stop at some point, everyone has had their say, and the show must go on."
msgstr ""

#: ../../pep-0318.txt:667
msgid "Community Consensus"
msgstr ""

#: ../../pep-0318.txt:669
msgid ""
"This section documents the rejected J2 syntax, and is included for "
"historical completeness."
msgstr ""

#: ../../pep-0318.txt:672
msgid ""
"The consensus that emerged on comp.lang.python was the proposed J2 syntax"
" (the \"J2\" was how it was referenced on the PythonDecorators wiki "
"page): the new keyword ``using`` prefixing a block of decorators before "
"the ``def`` statement.  For example::"
msgstr ""

#: ../../pep-0318.txt:683
msgid ""
"The main arguments for this syntax fall under the \"readability counts\" "
"doctrine.  In brief, they are:"
msgstr ""

#: ../../pep-0318.txt:686
msgid ""
"A suite is better than multiple @lines.  The ``using`` keyword and block "
"transforms the single-block ``def`` statement into a multiple-block "
"compound construct, akin to try/finally and others."
msgstr ""

#: ../../pep-0318.txt:690
msgid ""
"A keyword is better than punctuation for a new token.  A keyword matches "
"the existing use of tokens.  No new token category is necessary.  A "
"keyword distinguishes Python decorators from Java annotations and .Net "
"attributes, which are significantly different beasts."
msgstr ""

#: ../../pep-0318.txt:696
msgid ""
"Robert Brewer wrote a `detailed proposal`_ for this form, and Michael "
"Sparks produced `a patch`_."
msgstr ""

#: ../../pep-0318.txt:704
msgid ""
"As noted previously, Guido rejected this form, outlining his problems "
"with it in `a message`_ to python-dev and comp.lang.python."
msgstr ""

#: ../../pep-0318.txt:712
msgid "Examples"
msgstr ""

#: ../../pep-0318.txt:714
msgid ""
"Much of the discussion on ``comp.lang.python`` and the ``python-dev`` "
"mailing list focuses on the use of decorators as a cleaner way to use the"
" ``staticmethod()`` and ``classmethod()`` builtins.  This capability is "
"much more powerful than that.  This section presents some examples of "
"use."
msgstr ""

#: ../../pep-0318.txt:720
msgid ""
"Define a function to be executed at exit.  Note that the function isn't "
"actually \"wrapped\" in the usual sense. ::"
msgstr ""

#: ../../pep-0318.txt:732
msgid ""
"Note that this example is probably not suitable for real usage, but is "
"for example purposes only."
msgstr ""

#: ../../pep-0318.txt:735
msgid ""
"Define a class with a singleton instance.  Note that once the class "
"disappears enterprising programmers would have to be more creative to "
"create more instances.  (From Shane Hathaway on ``python-dev``.) ::"
msgstr ""

#: ../../pep-0318.txt:751
msgid ""
"Add attributes to a function.  (Based on an example posted by Anders "
"Munch on ``python-dev``.) ::"
msgstr ""

#: ../../pep-0318.txt:766
msgid ""
"Enforce function argument and return types.  Note that this copies the "
"func_name attribute from the old to the new function. func_name was made "
"writable in Python 2.4a3::"
msgstr ""

#: ../../pep-0318.txt:798
msgid ""
"Declare that a class implements a particular (set of) interface(s). This "
"is from a posting by Bob Ippolito on ``python-dev`` based on experience "
"with `PyProtocols`_. ::"
msgstr ""

#: ../../pep-0318.txt:822
msgid ""
"Of course, all these examples are possible today, though without "
"syntactic support."
msgstr ""

#: ../../pep-0318.txt:827
msgid "(No longer) Open Issues"
msgstr ""

#: ../../pep-0318.txt:829
msgid ""
"It's not yet certain that class decorators will be incorporated into the "
"language at a future point.  Guido expressed skepticism about the "
"concept, but various people have made some `strong arguments`_ (search "
"for ``PEP 318 -- posting draft``) on their behalf in ``python-dev``.  "
"It's exceedingly unlikely that class decorators will be in Python 2.4."
msgstr ""

#: ../../pep-0318.txt:841
msgid "The choice of the ``@`` character will be re-examined before Python 2.4b1."
msgstr ""

#: ../../pep-0318.txt:844
msgid "In the end, the ``@`` character was kept."
msgstr ""

#: ../../pep-0318.txt:848
msgid "References"
msgstr ""

#: ../../pep-0318.txt:850
msgid ""
"PEP 3129, \"Class Decorators\", Winter "
"http://www.python.org/dev/peps/pep-3129"
msgstr ""

#: ../../pep-0318.txt:855
msgid "Copyright"
msgstr ""

#: ../../pep-0318.txt:857
msgid "This document has been placed in the public domain."
msgstr ""

