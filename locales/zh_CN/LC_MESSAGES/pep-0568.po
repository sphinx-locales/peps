# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0568.rst
msgid "PEP"
msgstr ""

#: ../../pep-0568.rst:1
msgid "568"
msgstr ""

#: ../../pep-0568.rst
msgid "Title"
msgstr ""

#: ../../pep-0568.rst:2
msgid "Generator-sensitivity for Context Variables"
msgstr ""

#: ../../pep-0568.rst
msgid "Author"
msgstr ""

#: ../../pep-0568.rst:3
msgid "Nathaniel J. Smith <njs@pobox.com>"
msgstr ""

#: ../../pep-0568.rst
msgid "Status"
msgstr ""

#: ../../pep-0568.rst:4
msgid "Deferred"
msgstr ""

#: ../../pep-0568.rst
msgid "Type"
msgstr ""

#: ../../pep-0568.rst:5
msgid "Standards Track"
msgstr ""

#: ../../pep-0568.rst
msgid "Created"
msgstr ""

#: ../../pep-0568.rst:7
msgid "04-Jan-2018"
msgstr ""

#: ../../pep-0568.rst
msgid "Python-Version"
msgstr ""

#: ../../pep-0568.rst:8
msgid "3.8"
msgstr ""

#: ../../pep-0568.rst
msgid "Post-History"
msgstr ""

#: ../../pep-0568.rst:13
msgid "Abstract"
msgstr ""

#: ../../pep-0568.rst:15
msgid ""
"Context variables provide a generic mechanism for tracking dynamic, "
"context-local state, similar to thread-local storage but generalized to "
"cope work with other kinds of thread-like contexts, such as asyncio "
"Tasks. PEP 550 proposed a mechanism for context-local state that was also"
" sensitive to generator context, but this was pretty complicated, so the "
"BDFL requested it be simplified. The result was PEP 567, which is "
"targeted for inclusion in 3.7. This PEP then extends PEP 567's machinery "
"to add generator context sensitivity."
msgstr ""

#: ../../pep-0568.rst:24
msgid ""
"This PEP is starting out in the \"deferred\" status, because there isn't "
"enough time to give it proper consideration before the 3.7 feature "
"freeze. The only goal *right now* is to understand what would be required"
" to add generator context sensitivity in 3.8, so that we can avoid "
"shipping something in 3.7 that would rule it out by accident. (Ruling it "
"out on purpose can wait until 3.8 ;-).)"
msgstr ""

#: ../../pep-0568.rst:33
msgid "Rationale"
msgstr ""

#: ../../pep-0568.rst:35
msgid ""
"[Currently the point of this PEP is just to understand *how* this would "
"work, with discussion of *whether* it's a good idea deferred until after "
"the 3.7 feature freeze. So rationale is TBD.]"
msgstr ""

#: ../../pep-0568.rst:41
msgid "High-level summary"
msgstr ""

#: ../../pep-0568.rst:43
msgid ""
"Instead of holding a single ``Context``, the threadstate now holds a "
"``ChainMap`` of ``Context``\\s. ``ContextVar.get`` and ``ContextVar.set``"
" are backed by the ``ChainMap``. Generators and async generators each "
"have an associated ``Context`` that they push onto the ``ChainMap`` while"
" they're running to isolate their context-local changes from their "
"callers, though this can be overridden in cases like "
"``@contextlib.contextmanager`` where \"leaking\" context changes from the"
" generator into its caller is desirable."
msgstr ""

#: ../../pep-0568.rst:55
msgid "Specification"
msgstr ""

#: ../../pep-0568.rst:58
msgid "Review of PEP 567"
msgstr ""

#: ../../pep-0568.rst:60
msgid ""
"Let's start by reviewing how PEP 567 works, and then in the next section "
"we'll describe the differences."
msgstr ""

#: ../../pep-0568.rst:63
msgid ""
"In PEP 567, a ``Context`` is a ``Mapping`` from ``ContextVar`` objects to"
" arbitrary values. In our pseudo-code here we'll pretend that it uses a "
"``dict`` for backing storage. (The real implementation uses a HAMT, which"
" is semantically equivalent to a ``dict`` but with different performance "
"trade-offs.)::"
msgstr ""

#: ../../pep-0568.rst:83
msgid ""
"At any given moment, the threadstate holds a current ``Context`` "
"(initialized to an empty ``Context`` when the threadstate is created); we"
" can use ``Context.run`` to temporarily switch the current ``Context``::"
msgstr ""

#: ../../pep-0568.rst:102
msgid ""
"We can fetch a shallow copy of the current ``Context`` by calling "
"``copy_context``; this is commonly used when spawning a new task, so that"
" the child task can inherit context from its parent::"
msgstr ""

#: ../../pep-0568.rst:112
msgid ""
"In practice, what end users generally work with is ``ContextVar`` "
"objects, which also provide the only way to mutate a ``Context``. They "
"work with a utility class ``Token``, which can be used to restore a "
"``ContextVar`` to its previous value::"
msgstr ""

#: ../../pep-0568.rst:158
msgid "Changes from PEP 567 to this PEP"
msgstr ""

#: ../../pep-0568.rst:160
msgid ""
"In general, ``Context`` remains the same. However, now instead of holding"
" a single ``Context`` object, the threadstate stores a stack of them. "
"This stack acts just like a ``collections.ChainMap``, so we'll use that "
"in our pseudocode. ``Context.run`` then becomes::"
msgstr ""

#: ../../pep-0568.rst:179
msgid ""
"Aside from some updated variables names (e.g., ``tstate.current_context``"
" → ``tstate.current_context_stack``), the only change here is on the "
"marked line, which now wraps the context in a ``ChainMap`` before "
"stashing it in the threadstate."
msgstr ""

#: ../../pep-0568.rst:184
msgid ""
"We also add a ``Context.push`` method, which is almost exactly like "
"``Context.run``, except that it temporarily pushes the ``Context`` onto "
"the existing stack, instead of temporarily replacing the whole stack::"
msgstr ""

#: ../../pep-0568.rst:202
msgid ""
"In most cases, we don't expect ``push`` to be used directly; instead, it "
"will be used implicitly by generators. Specifically, every generator "
"object and async generator object gains a new attribute ``.context``. "
"When an (async) generator object is created, this attribute is "
"initialized to an empty ``Context`` (``self.context = Context()``). This "
"is a mutable attribute; it can be changed by user code. But trying to set"
" it to anything that isn't a ``Context`` object or ``None`` will raise an"
" error."
msgstr ""

#: ../../pep-0568.rst:211
msgid ""
"Whenever we enter an generator via ``__next__``, ``send``, ``throw``, or "
"``close``, or enter an async generator by calling one of those methods on"
" its ``__anext__``, ``asend``, ``athrow``, or ``aclose`` coroutines, then"
" its ``.context`` attribute is checked, and if non-``None``, is "
"automatically pushed::"
msgstr ""

#: ../../pep-0568.rst:224
msgid ""
"While we don't expect people to use ``Context.push`` often, making it a "
"public API preserves the principle that a generator can always be "
"rewritten as an explicit iterator class with equivalent semantics."
msgstr ""

#: ../../pep-0568.rst:228
msgid ""
"Also, we modify ``contextlib.(async)contextmanager`` to always set its "
"(async) generator objects' ``.context`` attribute to ``None``::"
msgstr ""

#: ../../pep-0568.rst:237
msgid "This makes sure that code like this continues to work as expected::"
msgstr ""

#: ../../pep-0568.rst:248
msgid ""
"The general idea here is that by default, every generator object gets its"
" own local context, but if users want to explicitly get some other "
"behavior then they can do that."
msgstr ""

#: ../../pep-0568.rst:252
msgid ""
"Otherwise, things mostly work as before, except that we go through and "
"swap everything to use the threadstate ``ChainMap`` instead of the "
"threadstate ``Context``. In full detail:"
msgstr ""

#: ../../pep-0568.rst:256
msgid ""
"The ``copy_context`` function now returns a flattened copy of the "
"\"effective\" context. (As an optimization, the implementation might "
"choose to do this flattening lazily, but if so this will be made "
"invisible to the user.) Compared to our previous implementation above, "
"the only change here is that ``tstate.current_context`` has been replaced"
" with ``tstate.current_context_stack``::"
msgstr ""

#: ../../pep-0568.rst:269
msgid ""
"``Token`` is unchanged, and the changes to ``ContextVar.get`` are "
"trivial::"
msgstr ""

#: ../../pep-0568.rst:277
msgid ""
"``ContextVar.set`` is a little more interesting: instead of going through"
" the ``ChainMap`` machinery like everything else, it always mutates the "
"top ``Context`` in the stack, and – crucially! – sets up the returned "
"``Token`` to restore *its* state later. This allows us to avoid "
"accidentally \"promoting\" values between different levels in the stack, "
"as would happen if we did ``old = var.get(); ...; var.set(old)``::"
msgstr ""

#: ../../pep-0568.rst:292
msgid ""
"And finally, to allow for introspection of the full context stack, we "
"provide a new function ``contextvars.get_context_stack``::"
msgstr ""

#: ../../pep-0568.rst:298
msgid "That's all."
msgstr ""

#: ../../pep-0568.rst:302
msgid "Comparison to PEP 550"
msgstr ""

#: ../../pep-0568.rst:304
msgid ""
"The main difference from PEP 550 is that it reified what we're calling "
"\"contexts\" and \"context stacks\" as two different concrete types "
"(``LocalContext`` and ``ExecutionContext`` respectively). This led to "
"lots of confusion about what the differences were, and which object "
"should be used in which places. This proposal simplifies things by only "
"reifying the ``Context``, which is \"just a dict\", and makes the "
"\"context stack\" an unnamed feature of the interpreter's runtime state –"
" though it is still possible to introspect it using "
"``get_context_stack``, for debugging and other purposes."
msgstr ""

#: ../../pep-0568.rst:316
msgid "Implementation notes"
msgstr ""

#: ../../pep-0568.rst:318
msgid ""
"``Context`` will continue to use a HAMT-based mapping structure under the"
" hood instead of ``dict``, since we expect that calls to ``copy_context``"
" are much more common than ``ContextVar.set``. In almost all cases, "
"``copy_context`` will find that there's only one ``Context`` in the stack"
" (because it's rare for generators to spawn new tasks), and can simply "
"re-use it directly; in other cases HAMTs are cheap to merge and this can "
"be done lazily."
msgstr ""

#: ../../pep-0568.rst:326
msgid ""
"Rather than using an actual ``ChainMap`` object, we'll represent the "
"context stack using some appropriate structure – the most appropriate "
"options are probably either a bare ``list`` with the \"top\" of the stack"
" being the end of the list so we can use ``push``\\/``pop``, or else an "
"intrusive linked list (``PyThreadState`` → ``Context`` → ``Context`` → "
"...), with the \"top\" of the stack at the beginning of the list to allow"
" efficient push/pop."
msgstr ""

#: ../../pep-0568.rst:334
msgid ""
"A critical optimization in PEP 567 is the caching of values inside "
"``ContextVar``. Switching from a single context to a context stack makes "
"this a little bit more complicated, but not too much. Currently, we "
"invalidate the cache whenever the threadstate's current ``Context`` "
"changes (on thread switch, and when entering/exiting ``Context.run``). "
"The simplest approach here would be to invalidate the cache whenever "
"stack changes (on thread switch, when entering/exiting ``Context.run``, "
"and when entering/leaving ``Context.push``). The main effect of this is "
"that iterating a generator will invalidate the cache. It seems unlikely "
"that this will cause serious problems, but if it does, then I think it "
"can be avoided with a cleverer cache key that recognizes that pushing and"
" then popping a ``Context`` returns the threadstate to its previous "
"state. (Idea: store the cache key for a particular stack configuration in"
" the topmost ``Context``.)"
msgstr ""

#: ../../pep-0568.rst:349
msgid ""
"It seems unavoidable in this design that uncached ``get`` will be O(n), "
"where n is the size of the context stack. However, n will generally be "
"very small – it's roughly the number of nested generators, so usually "
"n=1, and it will be extremely rare to see n greater than, say, 5. At "
"worst, n is bounded by the recursion limit. In addition, we can expect "
"that in most cases of deep generator recursion, most of the "
"``Context``\\s in the stack will be empty, and thus can be skipped "
"extremely quickly during lookup. And for repeated lookups the caching "
"mechanism will kick in. So it's probably possible to construct some "
"extreme case where this causes performance problems, but ordinary code "
"should be essentially unaffected."
msgstr ""

#: ../../pep-0568.rst:363
msgid "Copyright"
msgstr ""

#: ../../pep-0568.rst:365
msgid "This document has been placed in the public domain."
msgstr ""

