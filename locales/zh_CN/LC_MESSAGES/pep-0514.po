# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0514.txt
msgid "PEP"
msgstr ""

#: ../../pep-0514.txt:1
msgid "514"
msgstr ""

#: ../../pep-0514.txt
msgid "Title"
msgstr ""

#: ../../pep-0514.txt:2
msgid "Python registration in the Windows registry"
msgstr ""

#: ../../pep-0514.txt
msgid "Author"
msgstr ""

#: ../../pep-0514.txt:5
msgid "Steve Dower <steve.dower@python.org>"
msgstr ""

#: ../../pep-0514.txt
msgid "BDFL-Delegate"
msgstr ""

#: ../../pep-0514.txt:6
msgid "Paul Moore <p.f.moore@gmail.com>"
msgstr ""

#: ../../pep-0514.txt
msgid "Status"
msgstr ""

#: ../../pep-0514.txt:7
msgid "Active"
msgstr ""

#: ../../pep-0514.txt
msgid "Type"
msgstr ""

#: ../../pep-0514.txt:8
msgid "Informational"
msgstr ""

#: ../../pep-0514.txt
msgid "Created"
msgstr ""

#: ../../pep-0514.txt:10
msgid "02-Feb-2016"
msgstr ""

#: ../../pep-0514.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0514.txt:11
msgid "02-Feb-2016, 01-Mar-2016, 18-Jul-2016"
msgstr ""

#: ../../pep-0514.txt
msgid "Resolution"
msgstr ""

#: ../../pep-0514.txt:12
msgid "https://mail.python.org/pipermail/python-dev/2016-July/145697.html"
msgstr ""

#: ../../pep-0514.txt:15
msgid "Abstract"
msgstr ""

#: ../../pep-0514.txt:17
msgid ""
"This PEP defines a schema for the Python registry key to allow third-"
"party installers to register their installation, and to allow tools and "
"applications to detect and correctly display all Python environments on a"
" user's machine. No implementation changes to Python are proposed with "
"this PEP."
msgstr ""

#: ../../pep-0514.txt:22
msgid ""
"Python environments are not required to be registered unless they want to"
" be automatically discoverable by external tools. As this relates to "
"Windows only, these tools are expected to be predominantly GUI "
"applications. However, console applications may also make use of the "
"registered information. This PEP covers the information that may be made "
"available, but the actual presentation and use of this information is "
"left to the tool designers."
msgstr ""

#: ../../pep-0514.txt:29
msgid ""
"The schema matches the registry values that have been used by the "
"official installer since at least Python 2.5, and the resolution "
"behaviour matches the behaviour of the official Python releases. Some "
"backwards compatibility rules are provided to ensure tools can correctly "
"detect versions of CPython that do not register full information."
msgstr ""

#: ../../pep-0514.txt:36
msgid "Motivation"
msgstr ""

#: ../../pep-0514.txt:38
msgid ""
"When installed on Windows, the official Python installer creates a "
"registry key for discovery and detection by other applications. This "
"allows tools such as installers or IDEs to automatically detect and "
"display a user's Python installations. For example, the PEP 397 "
"``py.exe`` launcher and editors such as PyCharm and Visual Studio already"
" make use of this information."
msgstr ""

#: ../../pep-0514.txt:44
msgid ""
"Third-party installers, such as those used by distributions, typically "
"create identical keys for the same purpose. Most tools that use the "
"registry to detect Python installations only inspect the keys used by the"
" official installer. As a result, third-party installations that wish to "
"be discoverable will overwrite these values, often causing users to "
"\"lose\" their original Python installation."
msgstr ""

#: ../../pep-0514.txt:50
msgid ""
"By describing a layout for registry keys that allows third-party "
"installations to register themselves uniquely, as well as providing tool "
"developers guidance for discovering all available Python installations, "
"these collisions should be prevented. We also take the opportunity to add"
" some well-known metadata so that more information can be presented to "
"users."
msgstr ""

#: ../../pep-0514.txt:57
msgid "Definitions"
msgstr ""

#: ../../pep-0514.txt:59
msgid ""
"A \"registry key\" is the equivalent of a file-system path into the "
"registry. Each key may contain \"subkeys\" (keys nested within keys) and "
"\"values\" (named and typed attributes attached to a key). These are used"
" on Windows to store settings in much the same way that directories "
"containing configuration files would work."
msgstr ""

#: ../../pep-0514.txt:64
msgid ""
"``HKEY_CURRENT_USER`` is the root of settings for the currently logged-in"
" user, and this user can generally read and write all settings under this"
" root."
msgstr ""

#: ../../pep-0514.txt:67
msgid ""
"``HKEY_LOCAL_MACHINE`` is the root of settings for all users. Generally, "
"any user can read these settings but only administrators can modify them."
" It is typical for values under ``HKEY_CURRENT_USER`` to take precedence "
"over those in ``HKEY_LOCAL_MACHINE``."
msgstr ""

#: ../../pep-0514.txt:72
msgid ""
"On 64-bit Windows, ``HKEY_LOCAL_MACHINE\\Software\\Wow6432Node`` is a "
"special key that 32-bit processes transparently read and write to rather "
"than accessing the ``Software`` key directly."
msgstr ""

#: ../../pep-0514.txt:76
msgid ""
"Further documentation regarding registry redirection on Windows is "
"available from the MSDN Library [1]_."
msgstr ""

#: ../../pep-0514.txt:80
msgid "Structure"
msgstr ""

#: ../../pep-0514.txt:82
msgid ""
"We consider there to be a single collection of Python environments on a "
"machine, where the collection may be different for each user of the "
"machine. There are three potential registry locations where the "
"collection may be stored based on the installation options of each "
"environment::"
msgstr ""

#: ../../pep-0514.txt:91
msgid ""
"Official Python releases use ``PythonCore`` for Company, and the value of"
" ``sys.winver`` for Tag. The Company ``PyLauncher`` is reserved. Other "
"registered environments may use any values for Company and Tag. "
"Recommendations are made later in this document."
msgstr ""

#: ../../pep-0514.txt:96
msgid ""
"Company-Tag pairs are case-insensitive, and uniquely identify each "
"environment. Depending on the purpose and intended use of a tool, there "
"are two suggested approaches for resolving conflicts between Company-Tag "
"pairs."
msgstr ""

#: ../../pep-0514.txt:100
msgid ""
"Tools that list every installed environment may choose to include those "
"even where the Company-Tag pairs match. They should ensure users can "
"easily identify whether the registration was per-user or per-machine, and"
" which registration has the higher priority."
msgstr ""

#: ../../pep-0514.txt:105
msgid ""
"Tools that aim to select a single installed environment from all "
"registered environments based on the Company-Tag pair, such as the "
"``py.exe`` launcher, should always select the environment registered in "
"``HKEY_CURRENT_USER`` when than the matching one in "
"``HKEY_LOCAL_MACHINE``."
msgstr ""

#: ../../pep-0514.txt:110
msgid ""
"Conflicts between ``HKEY_LOCAL_MACHINE\\Software\\Python`` and "
"``HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Python`` should only occur "
"when both 64-bit and 32-bit versions of an interpreter have the same Tag."
" In this case, the tool should select whichever is more appropriate for "
"its use."
msgstr ""

#: ../../pep-0514.txt:115
msgid ""
"If a tool is able to determine from the provided information (or lack "
"thereof) that it cannot use a registered environment, there is no "
"obligation to present it to users."
msgstr ""

#: ../../pep-0514.txt:119
msgid ""
"Except as discussed in the section on backwards compatibility, Company "
"and Tag values are considered opaque to tools, and no information about "
"the interpreter should be inferred from the text. However, some tools may"
" display the Company and Tag values to users, so ideally the Tag will be "
"able to help users identify the associated environment."
msgstr ""

#: ../../pep-0514.txt:125
msgid ""
"Python environments are not required to register themselves unless they "
"want to be automatically discoverable by external tools."
msgstr ""

#: ../../pep-0514.txt:129
msgid "Backwards Compatibility"
msgstr ""

#: ../../pep-0514.txt:131
msgid ""
"Python 3.4 and earlier did not distinguish between 32-bit and 64-bit "
"builds in ``sys.winver``. As a result, it is not possible to have valid "
"side-by-side installations of both 32-bit and 64-bit interpreters under "
"this scheme since it would result in duplicate Tags."
msgstr ""

#: ../../pep-0514.txt:136
msgid ""
"To ensure backwards compatibility, applications should treat environments"
" listed under the following two registry keys as distinct, even when the "
"Tag matches::"
msgstr ""

#: ../../pep-0514.txt:142
msgid ""
"Environments listed under ``HKEY_CURRENT_USER`` may be treated as "
"distinct from both of the above keys, potentially resulting in three "
"environments discovered using the same Tag. Alternatively, a tool may "
"determine whether the per-user environment is 64-bit or 32-bit and give "
"it priority over the per-machine environment, resulting in a maximum of "
"two discovered environments."
msgstr ""

#: ../../pep-0514.txt:148
msgid ""
"It is not possible to detect side-by-side installations of both 64-bit "
"and 32-bit versions of Python prior to 3.5 when they have been installed "
"for the current user. Python 3.5 and later always uses different Tags for"
" 64-bit and 32-bit versions."
msgstr ""

#: ../../pep-0514.txt:153
msgid ""
"The following section describe user-visible information that may be "
"registered. For Python 3.5 and earlier, none of this information is "
"available, but alternative defaults are specified for the ``PythonCore`` "
"key."
msgstr ""

#: ../../pep-0514.txt:157
msgid ""
"Environments registered under other Company names have no backward "
"compatibility requirements and must use distinct Tags to support side-by-"
"side installations. Tools consuming these registrations are not required "
"to disambiguate tags other than by preferring the user's setting."
msgstr ""

#: ../../pep-0514.txt:163
msgid "Company"
msgstr ""

#: ../../pep-0514.txt:165
msgid ""
"The Company part of the key is intended to group related environments and"
" to ensure that Tags are namespaced appropriately. The key name should be"
" alphanumeric without spaces and likely to be unique. For example, a "
"trademarked name (preferred), a hostname, or as a last resort, a UUID "
"would be appropriate::"
msgstr ""

#: ../../pep-0514.txt:174
msgid ""
"The company name ``PyLauncher`` is reserved for the PEP 397 launcher "
"(``py.exe``). It does not follow this convention and should be ignored by"
" tools."
msgstr ""

#: ../../pep-0514.txt:177
msgid ""
"If a string value named ``DisplayName`` exists, it should be used to "
"identify the environment manufacturer/developer/distributor to users. "
"Otherwise, the name of the key should be used. (For ``PythonCore``, the "
"default display name is \"Python Software Foundation\".)"
msgstr ""

#: ../../pep-0514.txt:182
msgid ""
"If a string value named ``SupportUrl`` exists, it may be displayed or "
"otherwise used to direct users to a web site related to the environment. "
"(For ``PythonCore``, the default support URL is "
"\"http://www.python.org/\".)"
msgstr ""

#: ../../pep-0514.txt:186 ../../pep-0514.txt:282 ../../pep-0514.txt:304
msgid "A complete example may look like::"
msgstr ""

#: ../../pep-0514.txt:194
msgid "Tag"
msgstr ""

#: ../../pep-0514.txt:196
msgid ""
"The Tag part of the key is intended to uniquely identify an environment "
"within those provided by a single company. The key name should be "
"alphanumeric without spaces and stable across installations. For example,"
" the Python language version, a UUID or a partial/complete hash would be "
"appropriate, while a Tag based on the install directory or some aspect of"
" the current machine may not. For example::"
msgstr ""

#: ../../pep-0514.txt:207
msgid ""
"It is expected that some tools will require users to type the Tag into a "
"command line, and that the Company may be optional provided the Tag is "
"unique across all Python installations. Short, human-readable and easy to"
" type Tags are recommended, and if possible, select a value likely to be "
"unique across all other Companies."
msgstr ""

#: ../../pep-0514.txt:213
msgid ""
"If a string value named ``DisplayName`` exists, it should be used to "
"identify the environment to users. Otherwise, the name of the key should "
"be used. (For ``PythonCore``, the default is \"Python \" followed by the "
"Tag.)"
msgstr ""

#: ../../pep-0514.txt:217
msgid ""
"If a string value named ``SupportUrl`` exists, it may be displayed or "
"otherwise used to direct users to a web site related to the environment. "
"(For ``PythonCore``, the default is \"http://www.python.org/\".)"
msgstr ""

#: ../../pep-0514.txt:221
msgid ""
"If a string value named ``Version`` exists, it should be used to identify"
" the version of the environment. This is independent from the version of "
"Python implemented by the environment. (For ``PythonCore``, the default "
"is the first three characters of the Tag.)"
msgstr ""

#: ../../pep-0514.txt:226
msgid ""
"If a string value named ``SysVersion`` exists, it must be in ``x.y`` or "
"``x.y.z`` format matching the version returned by ``sys.version_info`` in"
" the interpreter. If omitted, the Python version is unknown. (For "
"``PythonCore``, the default is the first three characters of the Tag.)"
msgstr ""

#: ../../pep-0514.txt:231
msgid ""
"If a string value named ``SysArchitecture`` exists, it must match the "
"first element of the tuple returned by ``platform.architecture()``. "
"Typically, this will be \"32bit\" or \"64bit\". If omitted, the "
"architecture is unknown. (For ``PythonCore``, the architecture is "
"\"32bit\" when registered under "
"``HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Python`` *or* anywhere on a "
"32-bit operating system, \"64bit\" when registered under "
"``HKEY_LOCAL_MACHINE\\Software\\Python`` on a 64-bit machine, and unknown"
" when registered under ``HKEY_CURRENT_USER``.)"
msgstr ""

#: ../../pep-0514.txt:240
msgid ""
"Note that each of these values is recommended, but optional. Omitting "
"``SysVersion`` or ``SysArchitecture`` may prevent some tools from "
"correctly supporting the environment. A complete example may look like "
"this::"
msgstr ""

#: ../../pep-0514.txt:253
msgid "InstallPath"
msgstr ""

#: ../../pep-0514.txt:255
msgid ""
"Beneath the environment key, an ``InstallPath`` key must be created. This"
" key is always named ``InstallPath``, and the default value must match "
"``sys.prefix``::"
msgstr ""

#: ../../pep-0514.txt:261
msgid ""
"If a string value named ``ExecutablePath`` exists, it must be the full "
"path to the ``python.exe`` (or equivalent) executable. If omitted, the "
"environment is not executable. (For ``PythonCore``, the default is the "
"``python.exe`` file in the directory referenced by the ``(Default)`` "
"value.)"
msgstr ""

#: ../../pep-0514.txt:266
msgid ""
"If a string value named ``ExecutableArguments`` exists, tools should use "
"the value as the first arguments when executing ``ExecutablePath``. Tools"
" may add other arguments following these, and will reasonably expect "
"standard Python command line options to be available."
msgstr ""

#: ../../pep-0514.txt:271
msgid ""
"If a string value named ``WindowedExecutablePath`` exists, it must be a "
"path to the ``pythonw.exe`` (or equivalent) executable. If omitted, the "
"default is the value of ``ExecutablePath``, and if that is omitted the "
"environment is not executable. (For ``PythonCore``, the default is the "
"``pythonw.exe`` file in the directory referenced by the ``(Default)`` "
"value.)"
msgstr ""

#: ../../pep-0514.txt:277
msgid ""
"If a string value named ``WindowedExecutableArguments`` exists, tools "
"should use the value as the first arguments when executing "
"``WindowedExecutablePath``. Tools may add other arguments following "
"these, and will reasonably expect standard Python command line options to"
" be available."
msgstr ""

#: ../../pep-0514.txt:292
msgid "Help"
msgstr ""

#: ../../pep-0514.txt:294
msgid ""
"Beneath the environment key, a ``Help`` key may be created. This key is "
"always named ``Help`` if present and has no default value."
msgstr ""

#: ../../pep-0514.txt:297
msgid ""
"Each subkey of ``Help`` specifies a documentation file, tool, or URL "
"associated with the environment. The subkey may have any name, and the "
"default value is a string appropriate for passing to ``os.startfile`` or "
"equivalent."
msgstr ""

#: ../../pep-0514.txt:301
msgid ""
"If a string value named ``DisplayName`` exists, it should be used to "
"identify the help file to users. Otherwise, the key name should be used."
msgstr ""

#: ../../pep-0514.txt:315
msgid "Other Keys"
msgstr ""

#: ../../pep-0514.txt:317
msgid "All other subkeys under a Company-Tag pair are available for private use."
msgstr ""

#: ../../pep-0514.txt:319
msgid ""
"Official CPython releases have traditionally used certain keys in this "
"space to determine the location of the Python standard library and other "
"installed modules. This behaviour is retained primarily for backward "
"compatibility. However, as the code that reads these values is embedded "
"into the interpreter, third-party distributions may be affected by values"
" written into ``PythonCore`` if using an unmodified interpreter."
msgstr ""

#: ../../pep-0514.txt:327
msgid "Sample Code"
msgstr ""

#: ../../pep-0514.txt:329
msgid ""
"This sample code enumerates the registry and displays the available "
"Company-Tag pairs that could be used to launch an environment and the "
"target executable. It only shows the most-preferred target for the tag. "
"Backwards-compatible handling of ``PythonCore`` is omitted but shown in a"
" later example::"
msgstr ""

#: ../../pep-0514.txt:390
msgid ""
"This example only scans ``PythonCore`` entries for the current user. "
"Where data is missing, the defaults as described earlier in the PEP are "
"substituted. Note that these defaults are only for use under "
"``PythonCore``; other registrations do not have any default values::"
msgstr ""

#: ../../pep-0514.txt:447
msgid ""
"This example shows a subset of the registration that will be created by a"
" just-for-me install of 64-bit Python 3.6.0. Other keys may also be "
"created::"
msgstr ""

#: ../../pep-0514.txt:473
msgid "References"
msgstr ""

#: ../../pep-0514.txt:475
msgid ""
"Registry Redirector (Windows) (https://msdn.microsoft.com/en-"
"us/library/windows/desktop/aa384232.aspx)"
msgstr ""

#: ../../pep-0514.txt:479
msgid "Copyright"
msgstr ""

#: ../../pep-0514.txt:481
msgid "This document has been placed in the public domain."
msgstr ""

