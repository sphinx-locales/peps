# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0416.txt
msgid "PEP"
msgstr ""

#: ../../pep-0416.txt:1
msgid "416"
msgstr ""

#: ../../pep-0416.txt
msgid "Title"
msgstr ""

#: ../../pep-0416.txt:2
msgid "Add a frozendict builtin type"
msgstr ""

#: ../../pep-0416.txt
msgid "Author"
msgstr ""

#: ../../pep-0416.txt:5
msgid "Victor Stinner <vstinner@python.org>"
msgstr ""

#: ../../pep-0416.txt
msgid "Status"
msgstr ""

#: ../../pep-0416.txt:6
msgid "Rejected"
msgstr ""

#: ../../pep-0416.txt
msgid "Type"
msgstr ""

#: ../../pep-0416.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0416.txt
msgid "Created"
msgstr ""

#: ../../pep-0416.txt:9
msgid "29-Feb-2012"
msgstr ""

#: ../../pep-0416.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0416.txt:10
msgid "3.3"
msgstr ""

#: ../../pep-0416.txt:14
msgid "Rejection Notice"
msgstr ""

#: ../../pep-0416.txt:16
msgid "I'm rejecting this PEP.  A number of reasons (not exhaustive):"
msgstr ""

#: ../../pep-0416.txt:18
msgid ""
"According to Raymond Hettinger, use of frozendict is low.  Those that do "
"use it tend to use it as a hint only, such as declaring global or class-"
"level \"constants\": they aren't really immutable, since anyone can still"
" assign to the name."
msgstr ""

#: ../../pep-0416.txt:22
msgid "There are existing idioms for avoiding mutable default values."
msgstr ""

#: ../../pep-0416.txt:23
msgid ""
"The potential of optimizing code using frozendict in PyPy is unsure; a "
"lot of other things would have to change first.  The same holds for "
"compile-time lookups in general."
msgstr ""

#: ../../pep-0416.txt:26
msgid ""
"Multiple threads can agree by convention not to mutate a shared dict, "
"there's no great need for enforcement.  Multiple processes can't share "
"dicts."
msgstr ""

#: ../../pep-0416.txt:29
msgid ""
"Adding a security sandbox written in Python, even with a limited scope, "
"is frowned upon by many, due to the inherent difficulty with ever proving"
" that the sandbox is actually secure.  Because of this we won't be adding"
" one to the stdlib any time soon, so this use case falls outside the "
"scope of a PEP."
msgstr ""

#: ../../pep-0416.txt:35
msgid ""
"On the other hand, exposing the existing read-only dict proxy as a built-"
"in type sounds good to me.  (It would need to be changed to allow calling"
" the constructor.)  GvR."
msgstr ""

#: ../../pep-0416.txt:39
msgid ""
"**Update** (2012-04-15): A new ``MappingProxyType`` type was added to the"
" types module of Python 3.3."
msgstr ""

#: ../../pep-0416.txt:44
msgid "Abstract"
msgstr ""

#: ../../pep-0416.txt:46
msgid "Add a new frozendict builtin type."
msgstr ""

#: ../../pep-0416.txt:50
msgid "Rationale"
msgstr ""

#: ../../pep-0416.txt:52
msgid ""
"A frozendict is a read-only mapping: a key cannot be added nor removed, "
"and a key is always mapped to the same value. However, frozendict values "
"can be not hashable. A frozendict is hashable if and only if all values "
"are hashable."
msgstr ""

#: ../../pep-0416.txt:56
msgid "Use cases:"
msgstr ""

#: ../../pep-0416.txt:58
msgid "Immutable global variable like a default configuration."
msgstr ""

#: ../../pep-0416.txt:59
msgid ""
"Default value of a function parameter. Avoid the issue of mutable default"
" arguments."
msgstr ""

#: ../../pep-0416.txt:61
msgid ""
"Implement a cache: frozendict can be used to store function keywords. "
"frozendict can be used as a key of a mapping or as a member of set."
msgstr ""

#: ../../pep-0416.txt:63
msgid ""
"frozendict avoids the need of a lock when the frozendict is shared by "
"multiple threads or processes, especially hashable frozendict. It would "
"also help to prohibe coroutines (generators + greenlets) to modify the "
"global state."
msgstr ""

#: ../../pep-0416.txt:67
msgid ""
"frozendict lookup can be done at compile time instead of runtime because "
"the mapping is read-only. frozendict can be used instead of a "
"preprocessor to remove conditional code at compilation, like code "
"specific to a debug build."
msgstr ""

#: ../../pep-0416.txt:70
msgid ""
"frozendict helps to implement read-only object proxies for security "
"modules. For example, it would be possible to use frozendict type for "
"__builtins__ mapping or type.__dict__. This is possible because "
"frozendict is compatible with the PyDict C API."
msgstr ""

#: ../../pep-0416.txt:74
msgid ""
"frozendict avoids the need of a read-only proxy in some cases. frozendict"
" is faster than a proxy because getting an item in a frozendict is a fast"
" lookup whereas a proxy requires a function call."
msgstr ""

#: ../../pep-0416.txt:80
msgid "Constraints"
msgstr ""

#: ../../pep-0416.txt:82
msgid "frozendict has to implement the Mapping abstract base class"
msgstr ""

#: ../../pep-0416.txt:83
msgid "frozendict keys and values can be unorderable"
msgstr ""

#: ../../pep-0416.txt:84
msgid "a frozendict is hashable if all keys and values are hashable"
msgstr ""

#: ../../pep-0416.txt:85
msgid "frozendict hash does not depend on the items creation order"
msgstr ""

#: ../../pep-0416.txt:89
msgid "Implementation"
msgstr ""

#: ../../pep-0416.txt:91
msgid ""
"Add a PyFrozenDictObject structure based on PyDictObject with an extra "
"\"Py_hash_t hash;\" field"
msgstr ""

#: ../../pep-0416.txt:93
msgid ""
"frozendict.__hash__() is implemented using hash(frozenset(self.items())) "
"and caches the result in its private hash attribute"
msgstr ""

#: ../../pep-0416.txt:95
msgid "Register frozendict as a collections.abc.Mapping"
msgstr ""

#: ../../pep-0416.txt:96
msgid ""
"frozendict can be used with PyDict_GetItem(), but PyDict_SetItem() and "
"PyDict_DelItem() raise a TypeError"
msgstr ""

#: ../../pep-0416.txt:101
msgid "Recipe: hashable dict"
msgstr ""

#: ../../pep-0416.txt:103
msgid ""
"To ensure that a frozendict is hashable, values can be checked before "
"creating the frozendict::"
msgstr ""

#: ../../pep-0416.txt:121
msgid "Objections"
msgstr ""

#: ../../pep-0416.txt:123
msgid "*namedtuple may fit the requirements of a frozendict.*"
msgstr ""

#: ../../pep-0416.txt:125
msgid ""
"A namedtuple is not a mapping, it does not implement the Mapping abstract"
" base class."
msgstr ""

#: ../../pep-0416.txt:128
msgid ""
"*frozendict can be implemented in Python using descriptors\" and "
"\"frozendict just need to be practically constant.*"
msgstr ""

#: ../../pep-0416.txt:131
msgid ""
"If frozendict is used to harden Python (security purpose), it must be "
"implemented in C. A type implemented in C is also faster."
msgstr ""

#: ../../pep-0416.txt:134
msgid "*The PEP 351 was rejected.*"
msgstr ""

#: ../../pep-0416.txt:136
msgid ""
"The PEP 351 tries to freeze an object and so may convert a mutable object"
" to an immutable object (using a different type). frozendict doesn't "
"convert anything: hash(frozendict) raises a TypeError if a value is not "
"hashable. Freezing an object is not the purpose of this PEP."
msgstr ""

#: ../../pep-0416.txt:143
msgid "Alternative: dictproxy"
msgstr ""

#: ../../pep-0416.txt:145
msgid ""
"Python has a builtin dictproxy type used by type.__dict__ getter "
"descriptor. This type is not public. dictproxy is a read-only view of a "
"dictionary, but it is not read-only mapping.  If a dictionary is "
"modified, the dictproxy is also modified."
msgstr ""

#: ../../pep-0416.txt:150
msgid ""
"dictproxy can be used using ctypes and the Python C API, see for example "
"the `make dictproxy object via ctypes.pythonapi and type() (Python recipe"
" 576540)`_ by Ikkei Shimomura. The recipe contains a test checking that a"
" dictproxy is \"mutable\" (modify the dictionary linked to the "
"dictproxy)."
msgstr ""

#: ../../pep-0416.txt:155
msgid ""
"However dictproxy can be useful in some cases, where its mutable property"
" is not an issue, to avoid a copy of the dictionary."
msgstr ""

#: ../../pep-0416.txt:160
msgid "Existing implementations"
msgstr ""

#: ../../pep-0416.txt:162
msgid "Whitelist approach."
msgstr ""

#: ../../pep-0416.txt:164
msgid ""
"`Implementing an Immutable Dictionary (Python recipe 498072) "
"<http://code.activestate.com/recipes/498072/>`_ by Aristotelis "
"Mikropoulos. Similar to frozendict except that it is not truly read-only:"
" it is possible to access to this private internal dict.  It does not "
"implement __hash__ and has an implementation issue: it is possible to "
"call again __init__() to modify the mapping."
msgstr ""

#: ../../pep-0416.txt:170
msgid ""
"PyWebmail contains an ImmutableDict type: `webmail.utils.ImmutableDict "
"<http://pywebmail.cvs.sourceforge.net/viewvc/pywebmail/webmail/webmail/utils/ImmutableDict.py?revision=1.2&view=markup>`_."
" It is hashable if keys and values are hashable. It is not truly read-"
"only: its internal dict is a public attribute."
msgstr ""

#: ../../pep-0416.txt:174
msgid ""
"remember project: `remember.dicts.FrozenDict "
"<https://bitbucket.org/mikegraham/remember/src/tip/remember/dicts.py>`_. "
"It is used to implement a cache: FrozenDict is used to store function "
"callbacks. FrozenDict may be hashable. It has an extra supply_dict() "
"class method to create a FrozenDict from a dict without copying the dict:"
" store the dict as the internal dict. Implementation issue: __init__() "
"can be called to modify the mapping and the hash may differ depending on "
"item creation order. The mapping is not truly read-only: the internal "
"dict is accessible in Python."
msgstr ""

#: ../../pep-0416.txt:184
msgid ""
"Blacklist approach: inherit from dict and override write methods to raise"
" an exception. It is not truly read-only: it is still possible to call "
"dict methods on such \"frozen dictionary\" to modify it."
msgstr ""

#: ../../pep-0416.txt:188
msgid ""
"brownie: `brownie.datastructures.ImmutableDict "
"<https://github.com/DasIch/brownie/blob/HEAD/brownie/datastructures/mappings.py>`_."
" It is hashable if keys and values are hashable. werkzeug project has the"
" same code: `werkzeug.datastructures.ImmutableDict "
"<https://github.com/mitsuhiko/werkzeug/blob/master/werkzeug/datastructures.py>`_."
" ImmutableDict is used for global constant (configuration options). The "
"Flask project uses ImmutableDict of werkzeug for its default "
"configuration."
msgstr ""

#: ../../pep-0416.txt:195
msgid ""
"SQLAlchemy project: `sqlalchemy.util.immutabledict "
"<http://hg.sqlalchemy.org/sqlalchemy/file/tip/lib/sqlalchemy/util/_collections.py>`_."
" It is not hashable and has an extra method: union(). immutabledict is "
"used for the default value of parameter of some functions expecting a "
"mapping. Example: mapper_args=immutabledict() in SqlSoup.map()."
msgstr ""

#: ../../pep-0416.txt:200
msgid ""
"`Frozen dictionaries (Python recipe 414283) "
"<http://code.activestate.com/recipes/414283/>`_ by Oren Tirosh. It is "
"hashable if keys and values are hashable. Included in the following "
"projects:"
msgstr ""

#: ../../pep-0416.txt:204
msgid ""
"lingospot: `frozendict/frozendict.py "
"<http://code.google.com/p/lingospot/source/browse/trunk/frozendict/frozendict.py>`_"
msgstr ""

#: ../../pep-0416.txt:206
msgid ""
"factor-graphics: frozendict type in `python/fglib/util_ext_frozendict.py "
"<https://github.com/ih/factor-"
"graphics/blob/41006fb71a09377445cc140489da5ce8eeb9c8b1/python/fglib/util_ext_frozendict.py>`_"
msgstr ""

#: ../../pep-0416.txt:209
msgid ""
"The gsakkis-utils project written by George Sakkis includes a frozendict "
"type: `datastructs.frozendict <http://code.google.com/p/gsakkis-"
"utils/source/browse/trunk/datastructs/frozendict.py>`_"
msgstr ""

#: ../../pep-0416.txt:212
msgid ""
"characters: `scripts/python/frozendict.py "
"<https://github.com/JasonGross/characters/blob/15a2af5f7861cd33a0dbce70f1569cda74e9a1e3/scripts/python/frozendict.py#L1>`_."
" It is hashable. __init__() sets __init__ to None."
msgstr ""

#: ../../pep-0416.txt:215
msgid ""
"Old NLTK (1.x): `nltk.util.frozendict "
"<http://nltk.googlecode.com/svn/trunk/nltk-old/src/nltk/util.py>`_. Keys "
"and values must be hashable. __init__() can be called twice to modify the"
" mapping. frozendict is used to \"freeze\" an object."
msgstr ""

#: ../../pep-0416.txt:220
msgid "Hashable dict: inherit from dict and just add an __hash__ method."
msgstr ""

#: ../../pep-0416.txt:222
msgid ""
"`pypy.rpython.lltypesystem.lltype.frozendict "
"<https://bitbucket.org/pypy/pypy/src/1f49987cc2fe/pypy/rpython/lltypesystem/lltype.py#cl-86>`_."
" It is hashable but don't deny modification of the mapping."
msgstr ""

#: ../../pep-0416.txt:225
msgid ""
"factor-graphics: hashabledict type in "
"`python/fglib/util_ext_frozendict.py <https://github.com/ih/factor-"
"graphics/blob/41006fb71a09377445cc140489da5ce8eeb9c8b1/python/fglib/util_ext_frozendict.py>`_"
msgstr ""

#: ../../pep-0416.txt:230
msgid "Links"
msgstr ""

#: ../../pep-0416.txt:232
msgid ""
"`Issue #14162: PEP 416: Add a builtin frozendict type "
"<http://bugs.python.org/issue14162>`_"
msgstr ""

#: ../../pep-0416.txt:234
msgid ""
"PEP 412: Key-Sharing Dictionary (`issue #13903 "
"<http://bugs.python.org/issue13903>`_)"
msgstr ""

#: ../../pep-0416.txt:236
msgid "PEP 351: The freeze protocol"
msgstr ""

#: ../../pep-0416.txt:237
msgid ""
"`The case for immutable dictionaries; and the central misunderstanding of"
" PEP 351 "
"<http://www.cs.toronto.edu/~tijmen/programming/immutableDictionaries.html>`_"
msgstr ""

#: ../../pep-0416.txt:239
msgid ""
"`make dictproxy object via ctypes.pythonapi and type() (Python recipe "
"576540) <http://code.activestate.com/recipes/576540/>`_ by Ikkei "
"Shimomura."
msgstr ""

#: ../../pep-0416.txt:241
msgid ""
"Python security modules implementing read-only object proxies using a C "
"extension:"
msgstr ""

#: ../../pep-0416.txt:244
msgid "`pysandbox <https://github.com/vstinner/pysandbox/>`_"
msgstr ""

#: ../../pep-0416.txt:245
msgid "`mxProxy <http://www.egenix.com/products/python/mxBase/mxProxy/>`_"
msgstr ""

#: ../../pep-0416.txt:246
msgid "`zope.proxy <http://pypi.python.org/pypi/zope.proxy>`_"
msgstr ""

#: ../../pep-0416.txt:247
msgid "`zope.security <http://pypi.python.org/pypi/zope.security>`_"
msgstr ""

#: ../../pep-0416.txt:251
msgid "Copyright"
msgstr ""

#: ../../pep-0416.txt:253
msgid "This document has been placed in the public domain."
msgstr ""

