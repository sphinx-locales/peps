# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0387.txt
msgid "PEP"
msgstr ""

#: ../../pep-0387.txt:1
msgid "387"
msgstr ""

#: ../../pep-0387.txt
msgid "Title"
msgstr ""

#: ../../pep-0387.txt:2
msgid "Backwards Compatibility Policy"
msgstr ""

#: ../../pep-0387.txt
msgid "Author"
msgstr ""

#: ../../pep-0387.txt:5
msgid "Benjamin Peterson <benjamin@python.org>"
msgstr ""

#: ../../pep-0387.txt
msgid "BDFL-Delegate"
msgstr ""

#: ../../pep-0387.txt:6
msgid "Brett Cannon (on behalf of the steering council)"
msgstr ""

#: ../../pep-0387.txt
msgid "Discussions-To"
msgstr ""

#: ../../pep-0387.txt:7
msgid "https://discuss.python.org/t/pep-387-backwards-compatibilty-policy/"
msgstr ""

#: ../../pep-0387.txt
msgid "Status"
msgstr ""

#: ../../pep-0387.txt:8
msgid "Active"
msgstr ""

#: ../../pep-0387.txt
msgid "Type"
msgstr ""

#: ../../pep-0387.txt:9
msgid "Process"
msgstr ""

#: ../../pep-0387.txt
msgid "Created"
msgstr ""

#: ../../pep-0387.txt:11
msgid "18-Jun-2009"
msgstr ""

#: ../../pep-0387.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0387.txt:12
msgid "19-Jun-2009, 12-Jun-2020"
msgstr ""

#: ../../pep-0387.txt:16
msgid "Abstract"
msgstr ""

#: ../../pep-0387.txt:18
msgid "This PEP outlines Python's backwards compatibility policy."
msgstr ""

#: ../../pep-0387.txt:22
msgid "Rationale"
msgstr ""

#: ../../pep-0387.txt:24
msgid ""
"As one of the most used programming languages today [#tiobe]_, the Python"
" core language and its standard library play a critical role in millions "
"of applications and libraries. This is fantastic. However, it means the "
"development team must be very careful not to break this existing 3rd "
"party code with new releases."
msgstr ""

#: ../../pep-0387.txt:30
msgid ""
"This PEP takes the perspective that \"backwards incompatibility\" means "
"preexisting code ceases to comparatively function after a change. It is "
"acknowledged that this is not a concrete definition, but the expectation "
"is people in general understand what is meant by \"backwards "
"incompatibility\", and if they are unsure they may ask the Python "
"development team and/or steering council for guidance."
msgstr ""

#: ../../pep-0387.txt:39
msgid "Backwards Compatibility Rules"
msgstr ""

#: ../../pep-0387.txt:41
msgid "This policy applies to all public APIs.  These include:"
msgstr ""

#: ../../pep-0387.txt:43
msgid ""
"Syntax and behavior of these constructs as defined by the reference "
"manual."
msgstr ""

#: ../../pep-0387.txt:46
msgid "The C-API."
msgstr ""

#: ../../pep-0387.txt:48
msgid "Function, class, module, attribute, and method names and types."
msgstr ""

#: ../../pep-0387.txt:50
msgid ""
"Given a set of arguments, the return value, side effects, and raised "
"exceptions of a function.  This does not preclude changes from reasonable"
" bug fixes."
msgstr ""

#: ../../pep-0387.txt:54
msgid "The position and expected types of arguments and returned values."
msgstr ""

#: ../../pep-0387.txt:56
msgid ""
"Behavior of classes with regards to subclasses: the conditions under "
"which overridden methods are called."
msgstr ""

#: ../../pep-0387.txt:59
msgid "Documented exceptions and the semantics which lead to their raising."
msgstr ""

#: ../../pep-0387.txt:61
msgid "Exceptions commonly raised in EAFP scenarios."
msgstr ""

#: ../../pep-0387.txt:63
msgid ""
"Others are explicitly not part of the public API.  They can change or be "
"removed at any time in any way.  These include:"
msgstr ""

#: ../../pep-0387.txt:66
msgid ""
"Function, class, module, attribute, method, and C-API names and types "
"that are prefixed by \"_\" (except special names)."
msgstr ""

#: ../../pep-0387.txt:69
msgid "Anything documented publicly as being private."
msgstr ""

#: ../../pep-0387.txt:71
msgid ""
"Imported modules (unless explicitly documented as part of the public API;"
" e.g. importing the ``bacon`` module in the ``spam`` does not "
"automatically mean ``spam.bacon`` is part of the public API unless it is "
"documented as such)."
msgstr ""

#: ../../pep-0387.txt:76
msgid "Inheritance patterns of internal classes."
msgstr ""

#: ../../pep-0387.txt:78
msgid ""
"Test suites.  (Anything in the ``Lib/test`` directory or test "
"subdirectories of packages.)"
msgstr ""

#: ../../pep-0387.txt:81
msgid ""
"Backward compatibility rules do not apply to any module or API that is "
"explicitly documented as **Provisional** per PEP 411."
msgstr ""

#: ../../pep-0387.txt:86
msgid "Basic policy for backwards compatibility"
msgstr ""

#: ../../pep-0387.txt:88
msgid ""
"In general, incompatibilities should have a large benefit to breakage "
"ratio, and the incompatibility should be easy to resolve in affected "
"code.  For example, adding an stdlib module with the same name as a third"
" party package is generally not acceptable.  Adding a method or attribute"
" that conflicts with 3rd party code through inheritance, however, is "
"likely reasonable."
msgstr ""

#: ../../pep-0387.txt:95
msgid ""
"Unless it is going through the deprecation process below, the behavior of"
" an API *must* not change in an incompatible fashion between any two "
"consecutive releases.  Python's yearly release process (:pep:`602`) means"
" that the deprecation period must last at least two years."
msgstr ""

#: ../../pep-0387.txt:101
msgid ""
"Similarly a feature cannot be removed without notice between any two "
"consecutive releases."
msgstr ""

#: ../../pep-0387.txt:104
msgid ""
"The steering council may grant exceptions to this policy. In particular, "
"they may shorten the required deprecation period for a feature. "
"Exceptions are only granted for extreme situations such as dangerously "
"broken or insecure features or features no one could reasonably be "
"depending on (e.g., support for completely obsolete platforms)."
msgstr ""

#: ../../pep-0387.txt:113
msgid "Making Incompatible Changes"
msgstr ""

#: ../../pep-0387.txt:115
msgid ""
"Making an incompatible change is a gradual process performed over several"
" releases:"
msgstr ""

#: ../../pep-0387.txt:118
msgid ""
"Discuss the change.  Depending on the degree of incompatibility, this "
"could be on the bug tracker, python-dev, python-list, or the appropriate "
"SIG.  A PEP or similar document may be written. Hopefully users of the "
"affected API will pipe up to comment."
msgstr ""

#: ../../pep-0387.txt:123
msgid ""
"Add a warning.  If behavior is changing, the API may gain a new function "
"or method to perform the new behavior; old usage should raise the "
"warning.  If an API is being removed, simply warn whenever it is entered."
"  ``DeprecationWarning`` is the usual warning category to use, but "
"``PendingDeprecationWarning`` may be used in special cases where the old "
"and new versions of the API will coexist for many releases [#warnings]_. "
"Compiler warnings are also acceptable. The warning message should include"
" the release the incompatibility is expected to become the default and a "
"link to an issue that users can post feedback to."
msgstr ""

#: ../../pep-0387.txt:134
msgid ""
"Wait for the warning to appear in at least two minor Python versions of "
"the same major version, or one minor version in an older major version "
"(e.g. for a warning in Python 3.10, you either wait until at least Python"
" 3.12 or Python 4.0 to make the change). It's fine to wait more than two "
"releases."
msgstr ""

#: ../../pep-0387.txt:140
msgid ""
"See if there's any feedback.  Users not involved in the original "
"discussions may comment now after seeing the warning.  Perhaps "
"reconsider."
msgstr ""

#: ../../pep-0387.txt:144
msgid ""
"The behavior change or feature removal may now be made default or "
"permanent having reached the declared version. Remove the old version and"
" warning."
msgstr ""

#: ../../pep-0387.txt:150
msgid "References"
msgstr ""

#: ../../pep-0387.txt:152
msgid "TIOBE Programming Community Index"
msgstr ""

#: ../../pep-0387.txt:154
msgid "http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html"
msgstr ""

#: ../../pep-0387.txt:156
msgid "The warnings module"
msgstr ""

#: ../../pep-0387.txt:158
msgid "http://docs.python.org/library/warnings.html"
msgstr ""

#: ../../pep-0387.txt:162
msgid "Copyright"
msgstr ""

#: ../../pep-0387.txt:164
msgid "This document has been placed in the public domain."
msgstr ""

