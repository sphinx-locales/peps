# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0530.txt
msgid "PEP"
msgstr ""

#: ../../pep-0530.txt:1
msgid "530"
msgstr ""

#: ../../pep-0530.txt
msgid "Title"
msgstr ""

#: ../../pep-0530.txt:2 ../../pep-0530.txt:55
msgid "Asynchronous Comprehensions"
msgstr ""

#: ../../pep-0530.txt
msgid "Author"
msgstr ""

#: ../../pep-0530.txt:5
msgid "Yury Selivanov <yury@edgedb.com>"
msgstr ""

#: ../../pep-0530.txt
msgid "Discussions-To"
msgstr ""

#: ../../pep-0530.txt:6
msgid "<python-dev@python.org>"
msgstr ""

#: ../../pep-0530.txt
msgid "Status"
msgstr ""

#: ../../pep-0530.txt:7
msgid "Final"
msgstr ""

#: ../../pep-0530.txt
msgid "Type"
msgstr ""

#: ../../pep-0530.txt:8
msgid "Standards Track"
msgstr ""

#: ../../pep-0530.txt
msgid "Created"
msgstr ""

#: ../../pep-0530.txt:10 ../../pep-0530.txt:12
msgid "03-Sep-2016"
msgstr ""

#: ../../pep-0530.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0530.txt:11
msgid "3.6"
msgstr ""

#: ../../pep-0530.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0530.txt:16
msgid "Abstract"
msgstr ""

#: ../../pep-0530.txt:18
msgid ""
"PEP 492 and PEP 525 introduce support for native coroutines and "
"asynchronous generators using ``async`` / ``await`` syntax.  This PEP "
"proposes to add asynchronous versions of list, set, dict comprehensions "
"and generator expressions."
msgstr ""

#: ../../pep-0530.txt:25
msgid "Rationale and Goals"
msgstr ""

#: ../../pep-0530.txt:27
msgid ""
"Python has extensive support for synchronous comprehensions, allowing to "
"produce lists, dicts, and sets with a simple and concise syntax.  We "
"propose implementing similar syntactic constructions for the asynchronous"
" code."
msgstr ""

#: ../../pep-0530.txt:32
msgid ""
"To illustrate the readability improvement, consider the following "
"example::"
msgstr ""

#: ../../pep-0530.txt:40
msgid ""
"With the proposed asynchronous comprehensions syntax, the above code "
"becomes as short as::"
msgstr ""

#: ../../pep-0530.txt:45
msgid ""
"The PEP also makes it possible to use the ``await`` expressions in all "
"kinds of comprehensions::"
msgstr ""

#: ../../pep-0530.txt:52
msgid "Specification"
msgstr ""

#: ../../pep-0530.txt:57
msgid ""
"We propose to allow using ``async for`` inside list, set and dict "
"comprehensions.  Pending PEP 525 approval, we can also allow creation of "
"asynchronous generator expressions."
msgstr ""

#: ../../pep-0530.txt:61
msgid "Examples:"
msgstr ""

#: ../../pep-0530.txt:63
msgid "set comprehension: ``{i async for i in agen()}``;"
msgstr ""

#: ../../pep-0530.txt:65
msgid "list comprehension: ``[i async for i in agen()]``;"
msgstr ""

#: ../../pep-0530.txt:67
msgid "dict comprehension: ``{i: i ** 2 async for i in agen()}``;"
msgstr ""

#: ../../pep-0530.txt:69
msgid "generator expression: ``(i ** 2 async for i in agen())``."
msgstr ""

#: ../../pep-0530.txt:71
msgid ""
"It is allowed to use ``async for`` along with  ``if`` and ``for`` clauses"
" in asynchronous comprehensions and generator expressions::"
msgstr ""

#: ../../pep-0530.txt:78
msgid ""
"Asynchronous comprehensions are only allowed inside an ``async def`` "
"function."
msgstr ""

#: ../../pep-0530.txt:81
msgid ""
"In principle, asynchronous generator expressions are allowed in any "
"context.  However, in Python 3.6, due to ``async`` and ``await`` soft-"
"keyword status, asynchronous generator expressions are only allowed in an"
" ``async def`` function.  Once ``async`` and ``await`` become reserved "
"keywords in Python 3.7, this restriction will be removed."
msgstr ""

#: ../../pep-0530.txt:90
msgid "``await`` in Comprehensions"
msgstr ""

#: ../../pep-0530.txt:92
msgid ""
"We propose to allow the use of ``await`` expressions in both asynchronous"
" and synchronous comprehensions::"
msgstr ""

#: ../../pep-0530.txt:111
msgid "This is only valid in ``async def`` function body."
msgstr ""

#: ../../pep-0530.txt:115
msgid "Grammar Updates"
msgstr ""

#: ../../pep-0530.txt:117
msgid ""
"The proposal requires one change on the grammar level: adding the "
"optional \"async\" keyword to ``comp_for``::"
msgstr ""

#: ../../pep-0530.txt:122
msgid "The ``comprehension`` AST node will have the new ``is_async`` argument."
msgstr ""

#: ../../pep-0530.txt:126
msgid "Backwards Compatibility"
msgstr ""

#: ../../pep-0530.txt:128
msgid "The proposal is fully backwards compatible."
msgstr ""

#: ../../pep-0530.txt:132
msgid "Acceptance"
msgstr ""

#: ../../pep-0530.txt:134
msgid "PEP 530 was accepted by Guido, September 6, 2016 [1]_."
msgstr ""

#: ../../pep-0530.txt:138
msgid "Implementation"
msgstr ""

#: ../../pep-0530.txt:140
msgid ""
"The implementation is tracked in issue 28008 [3]_.  The reference "
"implementation git repository is available at [2]_."
msgstr ""

#: ../../pep-0530.txt:145
msgid "References"
msgstr ""

#: ../../pep-0530.txt:147
msgid "https://mail.python.org/pipermail/python-ideas/2016-September/042141.html"
msgstr ""

#: ../../pep-0530.txt:149
msgid "https://github.com/1st1/cpython/tree/asyncomp"
msgstr ""

#: ../../pep-0530.txt:151
msgid "http://bugs.python.org/issue28008"
msgstr ""

#: ../../pep-0530.txt:155
msgid "Acknowledgments"
msgstr ""

#: ../../pep-0530.txt:157
msgid ""
"I thank Guido van Rossum, Victor Stinner and Elvis Pranskevichus for "
"their feedback, code reviews, and discussions around this PEP."
msgstr ""

#: ../../pep-0530.txt:162
msgid "Copyright"
msgstr ""

#: ../../pep-0530.txt:164
msgid "This document has been placed in the public domain."
msgstr ""

