# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0231.txt
msgid "PEP"
msgstr ""

#: ../../pep-0231.txt:1
msgid "231"
msgstr ""

#: ../../pep-0231.txt
msgid "Title"
msgstr ""

#: ../../pep-0231.txt:2
msgid "__findattr__()"
msgstr ""

#: ../../pep-0231.txt
msgid "Author"
msgstr ""

#: ../../pep-0231.txt:5
msgid "barry@python.org (Barry Warsaw)"
msgstr ""

#: ../../pep-0231.txt
msgid "Status"
msgstr ""

#: ../../pep-0231.txt:6
msgid "Rejected"
msgstr ""

#: ../../pep-0231.txt
msgid "Type"
msgstr ""

#: ../../pep-0231.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0231.txt
msgid "Created"
msgstr ""

#: ../../pep-0231.txt:9
msgid "30-Nov-2000"
msgstr ""

#: ../../pep-0231.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0231.txt:10
msgid "2.1"
msgstr ""

#: ../../pep-0231.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0231.txt:15
msgid "Introduction"
msgstr ""

#: ../../pep-0231.txt:17
msgid ""
"This PEP describes an extension to instance attribute lookup and "
"modification machinery, which allows pure-Python implementations of many "
"interesting programming models.  This PEP tracks the status and ownership"
" of this feature.  It contains a description of the feature and outlines "
"changes necessary to support the feature.  This PEP summarizes "
"discussions held in mailing list forums, and provides URLs for further "
"information, where appropriate.  The CVS revision history of this file "
"contains the definitive historical record."
msgstr ""

#: ../../pep-0231.txt:29
msgid "Background"
msgstr ""

#: ../../pep-0231.txt:31
msgid ""
"The semantics for Python instances allow the programmer to customize some"
" aspects of attribute lookup and attribute modification, through the "
"special methods ``__getattr__()`` and ``__setattr__()`` [1]_."
msgstr ""

#: ../../pep-0231.txt:36
msgid ""
"However, because of certain restrictions imposed by these methods, there "
"are useful programming techniques that can not be written in Python "
"alone, e.g. strict Java Bean-like [2]_ interfaces and Zope style "
"acquisitions [3]_.  In the latter case, Zope solves this by including a C"
" extension called ExtensionClass [5]_ which modifies the standard class "
"semantics, and uses a metaclass hook in Python's class model called "
"alternatively the \"Don Beaudry Hook\" or \"Don Beaudry Hack\" [6]_."
msgstr ""

#: ../../pep-0231.txt:45
msgid ""
"While Zope's approach works, it has several disadvantages.  First, it "
"requires a C extension.  Second it employs a very arcane, but truck-sized"
" loophole in the Python machinery.  Third, it can be difficult for other "
"programmers to use and understand (the metaclass has well-known brain "
"exploding properties).  And fourth, because ExtensionClass instances "
"aren't \"real\" Python instances, some aspects of the Python runtime "
"system don't work with ExtensionClass instances."
msgstr ""

#: ../../pep-0231.txt:54
#, python-format
msgid ""
"Proposals for fixing this problem have often been lumped under the rubric"
" of fixing the \"class/type dichotomy\"; that is, eliminating the "
"difference between built-in types and classes [7]_.  While a laudable "
"goal itself, repairing this rift is not necessary in order to achieve the"
" types of programming constructs described above.  This proposal provides"
" an 80% solution with a minimum of modification to Python's class and "
"instance objects.  It does nothing to address the type/class dichotomy."
msgstr ""

#: ../../pep-0231.txt:65
msgid "Proposal"
msgstr ""

#: ../../pep-0231.txt:67
msgid ""
"This proposal adds a new special method called ``__findattr__()`` with "
"the following semantics:"
msgstr ""

#: ../../pep-0231.txt:70
msgid ""
"If defined in a class, it will be called on all instance attribute "
"resolutions instead of ``__getattr__()`` and ``__setattr__()``."
msgstr ""

#: ../../pep-0231.txt:74
msgid ""
"``__findattr__()`` is never called recursively.  That is, when a specific"
" instance's ``__findattr__()`` is on the call stack, further attribute "
"accesses for that instance will use the standard ``__getattr__()`` and "
"``__setattr__()`` methods."
msgstr ""

#: ../../pep-0231.txt:79
msgid ""
"``__findattr__()`` is called for both attribute access ('getting') and "
"attribute modification ('setting').  It is not called for attribute "
"deletion."
msgstr ""

#: ../../pep-0231.txt:83
msgid ""
"When called for getting, it is passed a single argument (not counting "
"'self'): the name of the attribute being accessed."
msgstr ""

#: ../../pep-0231.txt:86
msgid ""
"When called for setting, it is called with third argument, which is the "
"value to set the attribute to."
msgstr ""

#: ../../pep-0231.txt:89
msgid ""
"``__findattr__()`` methods have the same caching semantics as "
"``__getattr__()`` and ``__setattr__()``; i.e. if they are present in the "
"class at class definition time, they are used, but if they are "
"subsequently added to a class later they are not."
msgstr ""

#: ../../pep-0231.txt:96
msgid "Key Differences with the Existing Protocol"
msgstr ""

#: ../../pep-0231.txt:98
msgid ""
"``__findattr__()``'s semantics are different from the existing protocol "
"in key ways:"
msgstr ""

#: ../../pep-0231.txt:101
msgid ""
"First, ``__getattr__()`` is never called if the attribute is found in the"
" instance's ``__dict__``.  This is done for efficiency reasons, and "
"because otherwise, ``__setattr__()`` would have no way to get to the "
"instance's attributes."
msgstr ""

#: ../../pep-0231.txt:106
msgid ""
"Second, ``__setattr__()`` cannot use \"normal\" syntax for setting "
"instance attributes, e.g. \"self.name = foo\" because that would cause "
"recursive calls to ``__setattr__()``."
msgstr ""

#: ../../pep-0231.txt:110
msgid ""
"``__findattr__()`` is always called regardless of whether the attribute "
"is in ``__dict__`` or not, and a flag in the instance object prevents "
"recursive calls to ``__findattr__()``.  This gives the class a chance to "
"perform some action for every attribute access.  And because it is called"
" for both gets and sets, it is easy to write similar policy for all "
"attribute access.  Further, efficiency is not a problem because it is "
"only paid when the extended mechanism is used."
msgstr ""

#: ../../pep-0231.txt:121
msgid "Related Work"
msgstr ""

#: ../../pep-0231.txt:123
msgid ""
"PEP 213 [9]_ describes a different approach to hooking into attribute "
"access and modification.  The semantics proposed in PEP 213 can be "
"implemented using the ``__findattr__()`` hook described here, with one "
"caveat.  The current reference implementation of ``__findattr__()`` does "
"not support hooking on attribute deletion. This could be added if it's "
"found desirable.  See example below."
msgstr ""

#: ../../pep-0231.txt:132
msgid "Examples"
msgstr ""

#: ../../pep-0231.txt:134
msgid ""
"One programming style that this proposal allows is a Java Bean-like "
"interface to objects, where unadorned attribute access and modification "
"is transparently mapped to a functional interface.  E.g."
msgstr ""

#: ../../pep-0231.txt:169
msgid ""
"A second, more elaborate example is the implementation of both implicit "
"and explicit acquisition in pure Python::"
msgstr ""

#: ../../pep-0231.txt:392
msgid ""
"C++-like access control can also be accomplished, although less cleanly "
"because of the difficulty of figuring out what method is being called "
"from the runtime call stack::"
msgstr ""

#: ../../pep-0231.txt:544
msgid ""
"Here's an implementation of the attribute hook described in PEP 213 "
"(except that hooking on attribute deletion isn't supported by the current"
" reference implementation)."
msgstr ""

#: ../../pep-0231.txt:599
msgid "Reference Implementation"
msgstr ""

#: ../../pep-0231.txt:601
msgid ""
"The reference implementation, as a patch to the Python core, can be found"
" at this URL:"
msgstr ""

#: ../../pep-0231.txt:604
msgid "http://sourceforge.net/patch/?func=detailpatch&patch_id=102613&group_id=5470"
msgstr ""

#: ../../pep-0231.txt:608
msgid "References"
msgstr ""

#: ../../pep-0231.txt:610
msgid ""
"http://docs.python.org/reference/datamodel.html#customizing-attribute-"
"access"
msgstr ""

#: ../../pep-0231.txt:611
msgid "http://www.javasoft.com/products/javabeans/"
msgstr ""

#: ../../pep-0231.txt:612
msgid "http://www.digicool.com/releases/ExtensionClass/Acquisition.html"
msgstr ""

#: ../../pep-0231.txt:613
msgid "http://www.digicool.com/releases/ExtensionClass"
msgstr ""

#: ../../pep-0231.txt:614
msgid "http://www.python.org/doc/essays/metaclasses/"
msgstr ""

#: ../../pep-0231.txt:615
msgid "http://www.foretec.com/python/workshops/1998-11/dd-ascher-sum.html"
msgstr ""

#: ../../pep-0231.txt:616
msgid "http://docs.python.org/howto/regex.html"
msgstr ""

#: ../../pep-0231.txt:617
msgid ""
"PEP 213, Attribute Access Handlers, Prescod "
"http://www.python.org/dev/peps/pep-0213/"
msgstr ""

#: ../../pep-0231.txt:622
msgid "Rejection"
msgstr ""

#: ../../pep-0231.txt:624
msgid ""
"There are serious problems with the recursion-protection feature. As "
"described here it's not thread-safe, and a thread-safe solution has other"
" problems.  In general, it's not clear how helpful the recursion-"
"protection feature is; it makes it hard to write code that needs to be "
"callable inside ``__findattr__`` as well as outside it.  But without the "
"recursion-protection, it's hard to implement ``__findattr__`` at all "
"(since ``__findattr__`` would invoke itself recursively for every "
"attribute it tries to access).  There seems to be no good solution here."
msgstr ""

#: ../../pep-0231.txt:634
msgid ""
"It's also dubious how useful it is to support ``__findattr__`` both for "
"getting and for setting attributes -- ``__setattr__`` gets called in all "
"cases already."
msgstr ""

#: ../../pep-0231.txt:638
msgid ""
"The examples can all be implemented using ``__getattr__`` if care is "
"taken not to store instance variables under their own names."
msgstr ""

#: ../../pep-0231.txt:643
msgid "Copyright"
msgstr ""

#: ../../pep-0231.txt:645
msgid "This document has been placed in the Public Domain."
msgstr ""

