# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0012.rst
msgid "PEP"
msgstr ""

#: ../../pep-0012.rst:1
msgid "12"
msgstr ""

#: ../../pep-0012.rst
msgid "Title"
msgstr ""

#: ../../pep-0012.rst:2
msgid "Sample reStructuredText PEP Template"
msgstr ""

#: ../../pep-0012.rst
msgid "Author"
msgstr ""

#: ../../pep-0012.rst:3
msgid ""
"David Goodger <goodger@python.org>, Barry Warsaw <barry@python.org>, "
"Brett Cannon <brett@python.org>"
msgstr ""

#: ../../pep-0012.rst
msgid "Status"
msgstr ""

#: ../../pep-0012.rst:6
msgid "Active"
msgstr ""

#: ../../pep-0012.rst
msgid "Type"
msgstr ""

#: ../../pep-0012.rst:7
msgid "Process"
msgstr ""

#: ../../pep-0012.rst
msgid "Created"
msgstr ""

#: ../../pep-0012.rst:9
msgid "05-Aug-2002"
msgstr ""

#: ../../pep-0012.rst
msgid "Post-History"
msgstr ""

#: ../../pep-0012.rst:10
msgid "30-Aug-2002"
msgstr ""

#: ../../pep-0012.rst:14
msgid "For those who have written a PEP before, there is a template_."
msgstr ""

#: ../../pep-0012.rst:17
msgid "Abstract"
msgstr ""

#: ../../pep-0012.rst:19
msgid ""
"This PEP provides a boilerplate or sample template for creating your own "
"reStructuredText PEPs.  In conjunction with the content guidelines in PEP"
" 1 [1]_, this should make it easy for you to conform your own PEPs to the"
" format outlined below."
msgstr ""

#: ../../pep-0012.rst:24
msgid ""
"Note: if you are reading this PEP via the web, you should first grab the "
"text (reStructuredText) source of this PEP in order to complete the steps"
" below.  **DO NOT USE THE HTML FILE AS YOUR TEMPLATE!**"
msgstr ""

#: ../../pep-0012.rst:28
msgid ""
"The source for this (or any) PEP can be found in the PEPs repository, "
"viewable on the web at https://github.com/python/peps/ ."
msgstr ""

#: ../../pep-0012.rst:33
msgid "Rationale"
msgstr ""

#: ../../pep-0012.rst:35
msgid ""
"If you intend to submit a PEP, you MUST use this template, in conjunction"
" with the format guidelines below, to ensure that your PEP submission "
"won't get automatically rejected because of form."
msgstr ""

#: ../../pep-0012.rst:39
msgid ""
"ReStructuredText provides PEP authors with useful functionality and "
"expressivity, while maintaining easy readability in the source text. The "
"processed HTML form makes the functionality accessible to readers: live "
"hyperlinks, styled text, tables, images, and automatic tables of "
"contents, among other advantages."
msgstr ""

#: ../../pep-0012.rst:47
msgid "How to Use This Template"
msgstr ""

#: ../../pep-0012.rst:49
msgid ""
"To use this template you must first decide whether your PEP is going to "
"be an Informational or Standards Track PEP.  Most PEPs are Standards "
"Track because they propose a new feature for the Python language or "
"standard library.  When in doubt, read PEP 1 for details, or open a "
"tracker issue on the PEPs repo to ask for assistance."
msgstr ""

#: ../../pep-0012.rst:55
msgid ""
"Once you've decided which type of PEP yours is going to be, follow the "
"directions below."
msgstr ""

#: ../../pep-0012.rst:58
msgid ""
"Make a copy of this file (the ``.rst`` file, **not** the HTML!) and "
"perform the following edits. Name the new file ``pep-9999.rst`` if you "
"don't yet have a PEP number assignment, or ``pep-NNNN.rst`` if you do. "
"Those with push permissions are welcome to claim the next available "
"number (ignoring the special blocks 3000 and 8000, and a handful of "
"special allocations - currently 666, 754, and 801) and push it directly."
msgstr ""

#: ../../pep-0012.rst:66
msgid ""
"Replace the \"PEP: 12\" header with \"PEP: 9999\" or \"PEP: NNNN\", "
"matching the file name. Note that the file name should be padded with "
"zeros (eg ``pep-0012.rst``), but the header should not (``PEP: 12``)."
msgstr ""

#: ../../pep-0012.rst:70
msgid "Change the Title header to the title of your PEP."
msgstr ""

#: ../../pep-0012.rst:72
msgid ""
"Change the Author header to include your name, and optionally your email "
"address.  Be sure to follow the format carefully: your name must appear "
"first, and it must not be contained in parentheses. Your email address "
"may appear second (or it can be omitted) and if it appears, it must "
"appear in angle brackets.  It is okay to obfuscate your email address."
msgstr ""

#: ../../pep-0012.rst:79
msgid ""
"If none of the authors are Python core developers, include a Sponsor "
"header with the name of the core developer sponsoring your PEP."
msgstr ""

#: ../../pep-0012.rst:82
msgid ""
"For many PEPs, discussions will take place on python-ideas@python.org "
"and/or python-dev@python.org. If there is another mailing list or public "
"forum more appropriate for discussion of your new feature, add a "
"Discussions-To header right after the Author header. Most Informational "
"PEPs don't need a Discussions-To header."
msgstr ""

#: ../../pep-0012.rst:88
msgid "Change the Status header to \"Draft\"."
msgstr ""

#: ../../pep-0012.rst:90
msgid "For Standards Track PEPs, change the Type header to \"Standards Track\"."
msgstr ""

#: ../../pep-0012.rst:93
msgid "For Informational PEPs, change the Type header to \"Informational\"."
msgstr ""

#: ../../pep-0012.rst:95
msgid ""
"For Standards Track PEPs, if your feature depends on the acceptance of "
"some other currently in-development PEP, add a Requires header right "
"after the Type header.  The value should be the PEP number of the PEP "
"yours depends on.  Don't add this header if your dependent feature is "
"described in a Final PEP."
msgstr ""

#: ../../pep-0012.rst:101
msgid ""
"Change the Created header to today's date.  Be sure to follow the format "
"carefully: it must be in ``dd-mmm-yyyy`` format, where the ``mmm`` is the"
" 3 English letter month abbreviation, i.e. one of Jan, Feb, Mar, Apr, "
"May, Jun, Jul, Aug, Sep, Oct, Nov, Dec."
msgstr ""

#: ../../pep-0012.rst:106
msgid ""
"For Standards Track PEPs, after the Created header, add a Python-Version "
"header and set the value to the next planned version of Python, i.e. the "
"one your new feature will hopefully make its first appearance in.  Do not"
" use an alpha or beta release designation here.  Thus, if the last "
"version of Python was 2.2 alpha 1 and you're hoping to get your new "
"feature into Python 2.2, set the header to::"
msgstr ""

#: ../../pep-0012.rst:116
msgid ""
"Leave Post-History alone for now; you'll add dates to this header each "
"time you post your PEP to the designated discussion forum (see the "
"Discussions-To header above). If you posted your PEP to the lists on "
"August 14, 2001 and September 3, 2001, the Post-History header would look"
" like::"
msgstr ""

#: ../../pep-0012.rst:124
msgid ""
"You must manually add new dates and commit them (with a pull request if "
"you don't have push privileges)."
msgstr ""

#: ../../pep-0012.rst:127
msgid ""
"Add a Replaces header if your PEP obsoletes an earlier PEP.  The value of"
" this header is the number of the PEP that your new PEP is replacing.  "
"Only add this header if the older PEP is in \"final\" form, i.e. is "
"either Accepted, Final, or Rejected.  You aren't replacing an older open "
"PEP if you're submitting a competing idea."
msgstr ""

#: ../../pep-0012.rst:133
msgid ""
"Now write your Abstract, Rationale, and other content for your PEP, "
"replacing all this gobbledygook with your own text. Be sure to adhere to "
"the format guidelines below, specifically on the prohibition of tab "
"characters and the indentation requirements. See \"Suggested Sections\" "
"below for a template of sections to include."
msgstr ""

#: ../../pep-0012.rst:139
msgid ""
"Update your References and Copyright section.  Usually you'll place your "
"PEP into the public domain, in which case just leave the Copyright "
"section alone.  Alternatively, you can use the `Open Publication "
"License`__, but public domain is still strongly preferred."
msgstr ""

#: ../../pep-0012.rst:147
msgid ""
"Leave the Emacs stanza at the end of this file alone, including the "
"formfeed character (\"^L\", or ``\\f``)."
msgstr ""

#: ../../pep-0012.rst:150
msgid ""
"Create a pull request against the https://github.com/python/peps "
"repository."
msgstr ""

#: ../../pep-0012.rst:153
msgid ""
"For reference, here are all of the possible header fields (everything in "
"brackets should either be replaced or have the field removed if it has a "
"leading ``*`` marking it as optional and it does not apply to your PEP)::"
msgstr ""

#: ../../pep-0012.rst:177
msgid "ReStructuredText PEP Formatting Requirements"
msgstr ""

#: ../../pep-0012.rst:179
msgid ""
"The following is a PEP-specific summary of reStructuredText syntax. For "
"the sake of simplicity and brevity, much detail is omitted.  For more "
"detail, see `Resources`_ below.  `Literal blocks`_ (in which no markup "
"processing is done) are used for examples throughout, to illustrate the "
"plaintext markup."
msgstr ""

#: ../../pep-0012.rst:187
msgid "General"
msgstr ""

#: ../../pep-0012.rst:189
msgid ""
"You must adhere to the Emacs convention of adding two spaces at the end "
"of every sentence.  You should fill your paragraphs to column 70, but "
"under no circumstances should your lines extend past column 79. If your "
"code samples spill over column 79, you should rewrite them."
msgstr ""

#: ../../pep-0012.rst:194
msgid ""
"Tab characters must never appear in the document at all.  A PEP should "
"include the standard Emacs stanza included by example at the bottom of "
"this PEP."
msgstr ""

#: ../../pep-0012.rst:200
msgid "Section Headings"
msgstr ""

#: ../../pep-0012.rst:202
msgid ""
"PEP headings must begin in column zero and the initial letter of each "
"word must be capitalized as in book titles.  Acronyms should be in all "
"capitals.  Section titles must be adorned with an underline, a single "
"repeated punctuation character, which begins in column zero and must "
"extend at least as far as the right edge of the title text (4 characters "
"minimum).  First-level section titles are underlined with \"=\" (equals "
"signs), second-level section titles with \"-\" (hyphens), and third-level"
" section titles with \"'\" (single quotes or apostrophes).  For example::"
msgstr ""

#: ../../pep-0012.rst:221
msgid ""
"If there are more than three levels of sections in your PEP, you may "
"insert overline/underline-adorned titles for the first and second levels "
"as follows::"
msgstr ""

#: ../../pep-0012.rst:242
msgid ""
"You shouldn't have more than five levels of sections in your PEP.  If you"
" do, you should consider rewriting it."
msgstr ""

#: ../../pep-0012.rst:245
msgid ""
"You must use two blank lines between the last line of a section's body "
"and the next section heading.  If a subsection heading immediately "
"follows a section heading, a single blank line in-between is sufficient."
msgstr ""

#: ../../pep-0012.rst:250
msgid ""
"The body of each section is not normally indented, although some "
"constructs do use indentation, as described below.  Blank lines are used "
"to separate constructs."
msgstr ""

#: ../../pep-0012.rst:256
msgid "Paragraphs"
msgstr ""

#: ../../pep-0012.rst:258
msgid ""
"Paragraphs are left-aligned text blocks separated by blank lines. "
"Paragraphs are not indented unless they are part of an indented construct"
" (such as a block quote or a list item)."
msgstr ""

#: ../../pep-0012.rst:264
msgid "Inline Markup"
msgstr ""

#: ../../pep-0012.rst:266
msgid ""
"Portions of text within paragraphs and other text blocks may be styled.  "
"For example::"
msgstr ""

#: ../../pep-0012.rst:278
msgid "Block Quotes"
msgstr ""

#: ../../pep-0012.rst:280
msgid "Block quotes consist of indented body elements.  For example::"
msgstr ""

#: ../../pep-0012.rst:288
msgid ""
"Block quotes are used to quote extended passages from other sources. "
"Block quotes may be nested inside other body elements.  Use 4 spaces per "
"indent level."
msgstr ""

#: ../../pep-0012.rst:294
msgid "Literal Blocks"
msgstr ""

#: ../../pep-0012.rst:304
msgid ""
"Literal blocks are used for code samples or preformatted ASCII art. To "
"indicate a literal block, preface the indented text block with \"``::``\""
" (two colons).  The literal block continues until the end of the "
"indentation.  Indent the text block by 4 spaces.  For example::"
msgstr ""

#: ../../pep-0012.rst:318
msgid ""
"The paragraph containing only \"``::``\" will be completely removed from "
"the output; no empty paragraph will remain.  \"``::``\" is also "
"recognized at the end of any paragraph.  If immediately preceded by "
"whitespace, both colons will be removed from the output.  When text "
"immediately precedes the \"``::``\", *one* colon will be removed from the"
" output, leaving only one colon visible (i.e., \"``::``\" will be "
"replaced by \"``:``\").  For example, one colon will remain visible "
"here::"
msgstr ""

#: ../../pep-0012.rst:333
msgid "Lists"
msgstr ""

#: ../../pep-0012.rst:335
msgid ""
"Bullet list items begin with one of \"-\", \"*\", or \"+\" (hyphen, "
"asterisk, or plus sign), followed by whitespace and the list item body.  "
"List item bodies must be left-aligned and indented relative to the "
"bullet; the text immediately after the bullet determines the indentation."
"  For example::"
msgstr ""

#: ../../pep-0012.rst:362
msgid ""
"Enumerated (numbered) list items are similar, but use an enumerator "
"instead of a bullet.  Enumerators are numbers (1, 2, 3, ...), letters (A,"
" B, C, ...; uppercase or lowercase), or Roman numerals (i, ii, iii, iv, "
"...; uppercase or lowercase), formatted with a period suffix (\"1.\", "
"\"2.\"), parentheses (\"(1)\", \"(2)\"), or a right-parenthesis suffix "
"(\"1)\", \"2)\").  For example::"
msgstr ""

#: ../../pep-0012.rst:379
msgid "Definition lists are written like this::"
msgstr ""

#: ../../pep-0012.rst:391
msgid "Tables"
msgstr ""

#: ../../pep-0012.rst:393
msgid "Simple tables are easy and compact::"
msgstr ""

#: ../../pep-0012.rst:404
msgid ""
"There must be at least two columns in a table (to differentiate from "
"section titles).  Column spans use underlines of hyphens (\"Inputs\" "
"spans the first two columns)::"
msgstr ""

#: ../../pep-0012.rst:419
msgid ""
"Text in a first-column cell starts a new row.  No text in the first "
"column indicates a continuation line; the rest of the cells may consist "
"of multiple lines.  For example::"
msgstr ""

#: ../../pep-0012.rst:437
msgid "Hyperlinks"
msgstr ""

#: ../../pep-0012.rst:439
msgid ""
"When referencing an external web page in the body of a PEP, you should "
"include the title of the page in the text, with either an inline "
"hyperlink reference to the URL or a footnote reference (see `Footnotes`_ "
"below).  Do not include the URL in the body text of the PEP."
msgstr ""

#: ../../pep-0012.rst:445
msgid ""
"Hyperlink references use backquotes and a trailing underscore to mark up "
"the reference text; backquotes are optional if the reference text is a "
"single word.  For example::"
msgstr ""

#: ../../pep-0012.rst:451
msgid ""
"An explicit target provides the URL.  Put targets in a References section"
" at the end of the PEP, or immediately after the reference. Hyperlink "
"targets begin with two periods and a space (the \"explicit markup "
"start\"), followed by a leading underscore, the reference text, a colon, "
"and the URL (absolute or relative)::"
msgstr ""

#: ../../pep-0012.rst:459
msgid ""
"The reference text and the target text must match (although the match is "
"case-insensitive and ignores differences in whitespace).  Note that the "
"underscore trails the reference text but precedes the target text. If you"
" think of the underscore as a right-pointing arrow, it points *away* from"
" the reference and *toward* the target."
msgstr ""

#: ../../pep-0012.rst:465
msgid ""
"The same mechanism can be used for internal references.  Every unique "
"section title implicitly defines an internal hyperlink target.  We can "
"make a link to the Abstract section like this::"
msgstr ""

#: ../../pep-0012.rst:473
msgid ""
"Footnotes containing the URLs from external targets will be generated "
"automatically at the end of the References section of the PEP, along with"
" footnote references linking the reference text to the footnotes."
msgstr ""

#: ../../pep-0012.rst:477
msgid ""
"Text of the form \"PEP x\" or \"RFC x\" (where \"x\" is a number) will be"
" linked automatically to the appropriate URLs."
msgstr ""

#: ../../pep-0012.rst:482
msgid "Footnotes"
msgstr ""

#: ../../pep-0012.rst:484
msgid ""
"Footnote references consist of a left square bracket, a number, a right "
"square bracket, and a trailing underscore::"
msgstr ""

#: ../../pep-0012.rst:489
msgid ""
"Whitespace must precede the footnote reference.  Leave a space between "
"the footnote reference and the preceding word."
msgstr ""

#: ../../pep-0012.rst:492
msgid ""
"When referring to another PEP, include the PEP number in the body text, "
"such as \"PEP 1\".  The title may optionally appear.  Add a footnote "
"reference following the title.  For example::"
msgstr ""

#: ../../pep-0012.rst:498
msgid ""
"Add a footnote that includes the PEP's title and author.  It may "
"optionally include the explicit URL on a separate line, but only in the "
"References section.  Footnotes begin with \".. \" (the explicit markup "
"start), followed by the footnote marker (no underscores), followed by the"
" footnote body.  For example::"
msgstr ""

#: ../../pep-0012.rst:510
msgid ""
"If you decide to provide an explicit URL for a PEP, please use this as "
"the URL template::"
msgstr ""

#: ../../pep-0012.rst:515
msgid ""
"PEP numbers in URLs must be padded with zeros from the left, so as to be "
"exactly 4 characters wide; however, PEP numbers in the text are never "
"padded."
msgstr ""

#: ../../pep-0012.rst:519
msgid ""
"During the course of developing your PEP, you may have to add, remove, "
"and rearrange footnote references, possibly resulting in mismatched "
"references, obsolete footnotes, and confusion.  Auto-numbered footnotes "
"allow more freedom.  Instead of a number, use a label of the form "
"\"#word\", where \"word\" is a mnemonic consisting of alphanumerics plus "
"internal hyphens, underscores, and periods (no whitespace or other "
"characters are allowed).  For example::"
msgstr ""

#: ../../pep-0012.rst:536
msgid ""
"Footnotes and footnote references will be numbered automatically, and the"
" numbers will always match.  Once a PEP is finalized, auto-numbered "
"labels should be replaced by numbers for simplicity."
msgstr ""

#: ../../pep-0012.rst:542
msgid "Images"
msgstr ""

#: ../../pep-0012.rst:544
msgid ""
"If your PEP contains a diagram, you may include it in the processed "
"output using the \"image\" directive::"
msgstr ""

#: ../../pep-0012.rst:549
msgid ""
"Any browser-friendly graphics format is possible: .png, .jpeg, .gif, "
".tiff, etc."
msgstr ""

#: ../../pep-0012.rst:552
msgid ""
"Since this image will not be visible to readers of the PEP in source text"
" form, you should consider including a description or ASCII art "
"alternative, using a comment (below)."
msgstr ""

#: ../../pep-0012.rst:558
msgid "Comments"
msgstr ""

#: ../../pep-0012.rst:560
msgid ""
"A comment block is an indented block of arbitrary text immediately "
"following an explicit markup start: two periods and whitespace.  Leave "
"the \"..\" on a line by itself to ensure that the comment is not "
"misinterpreted as another explicit markup construct.  Comments are not "
"visible in the processed document.  For the benefit of those reading your"
" PEP in source form, please consider including a descriptions of or ASCII"
" art alternatives to any images you include.  For example::"
msgstr ""

#: ../../pep-0012.rst:574
msgid "The Emacs stanza at the bottom of this document is inside a comment."
msgstr ""

#: ../../pep-0012.rst:578
msgid "Escaping Mechanism"
msgstr ""

#: ../../pep-0012.rst:580
msgid ""
"reStructuredText uses backslashes (\"``\\``\") to override the special "
"meaning given to markup characters and get the literal characters "
"themselves.  To get a literal backslash, use an escaped backslash "
"(\"``\\\\``\").  There are two contexts in which backslashes have no "
"special meaning: `literal blocks`_ and inline literals (see `Inline "
"Markup`_ above).  In these contexts, no markup recognition is done, and a"
" single backslash represents a literal backslash, without having to "
"double up."
msgstr ""

#: ../../pep-0012.rst:589
msgid ""
"If you find that you need to use a backslash in your text, consider using"
" inline literals or a literal block instead."
msgstr ""

#: ../../pep-0012.rst:594
msgid "Habits to Avoid"
msgstr ""

#: ../../pep-0012.rst:596
msgid ""
"Many programmers who are familiar with TeX often write quotation marks "
"like this::"
msgstr ""

#: ../../pep-0012.rst:601
msgid ""
"Backquotes are significant in reStructuredText, so this practice should "
"be avoided.  For ordinary text, use ordinary 'single-quotes' or \"double-"
"quotes\".  For inline literal text (see `Inline Markup`_ above), use "
"double-backquotes::"
msgstr ""

#: ../../pep-0012.rst:610
msgid "Suggested Sections"
msgstr ""

#: ../../pep-0012.rst:612
msgid ""
"Various sections are found to be common across PEPs and are outlined in "
"PEP 1 [1]_. Those sections are provided here for convenience."
msgstr ""

#: ../../pep-0012.rst:704
msgid "Resources"
msgstr ""

#: ../../pep-0012.rst:706
msgid ""
"Many other constructs and variations are possible.  For more details "
"about the reStructuredText markup, in increasing order of thoroughness, "
"please see:"
msgstr ""

#: ../../pep-0012.rst:710
msgid "`A ReStructuredText Primer`__, a gentle introduction."
msgstr ""

#: ../../pep-0012.rst:714
msgid "`Quick reStructuredText`__, a users' quick reference."
msgstr ""

#: ../../pep-0012.rst:718
msgid "`reStructuredText Markup Specification`__, the final authority."
msgstr ""

#: ../../pep-0012.rst:722
msgid ""
"The processing of reStructuredText PEPs is done using Docutils_.  If you "
"have a question or require assistance with reStructuredText or Docutils, "
"please `post a message`_ to the `Docutils-users mailing list`_.  The "
"`Docutils project web site`_ has more information."
msgstr ""

#: ../../pep-0012.rst:736
msgid "References"
msgstr ""

#: ../../pep-0012.rst:738
msgid ""
"PEP 1, PEP Purpose and Guidelines, Warsaw, Hylton "
"(http://www.python.org/dev/peps/pep-0001)"
msgstr ""

#: ../../pep-0012.rst:743
msgid "Copyright"
msgstr ""

#: ../../pep-0012.rst:745
msgid ""
"This document is placed in the public domain or under the "
"CC0-1.0-Universal license, whichever is more permissive."
msgstr ""

