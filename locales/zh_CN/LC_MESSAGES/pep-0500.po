# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0500.txt
msgid "PEP"
msgstr ""

#: ../../pep-0500.txt:1
msgid "500"
msgstr ""

#: ../../pep-0500.txt
msgid "Title"
msgstr ""

#: ../../pep-0500.txt:2
msgid "A protocol for delegating datetime methods to their tzinfo implementations"
msgstr ""

#: ../../pep-0500.txt
msgid "Author"
msgstr ""

#: ../../pep-0500.txt:6
msgid ""
"Alexander Belopolsky <alexander.belopolsky@gmail.com>, Tim Peters "
"<tim.peters@gmail.com>"
msgstr ""

#: ../../pep-0500.txt
msgid "Discussions-To"
msgstr ""

#: ../../pep-0500.txt:7
msgid "Datetime-SIG <datetime-sig@python.org>"
msgstr ""

#: ../../pep-0500.txt
msgid "Status"
msgstr ""

#: ../../pep-0500.txt:8
msgid "Rejected"
msgstr ""

#: ../../pep-0500.txt
msgid "Type"
msgstr ""

#: ../../pep-0500.txt:9
msgid "Standards Track"
msgstr ""

#: ../../pep-0500.txt
msgid "Requires"
msgstr ""

#: ../../pep-0500.txt:11
msgid "495"
msgstr ""

#: ../../pep-0500.txt
msgid "Created"
msgstr ""

#: ../../pep-0500.txt:12
msgid "08-Aug-2015"
msgstr ""

#: ../../pep-0500.txt
msgid "Resolution"
msgstr ""

#: ../../pep-0500.txt:13
msgid "https://mail.python.org/pipermail/datetime-sig/2015-August/000354.html"
msgstr ""

#: ../../pep-0500.txt:16
msgid "Abstract"
msgstr ""

#: ../../pep-0500.txt:18
msgid ""
"This PEP specifies a new protocol (PDDM - \"A Protocol for Delegating "
"Datetime Methods\") that can be used by concrete implementations of the "
"``datetime.tzinfo`` interface to override aware datetime arithmetics, "
"formatting and parsing.  We describe changes to the ``datetime.datetime``"
" class to support the new protocol and propose a new abstract class "
"``datetime.tzstrict`` that implements parts of this protocol necessary to"
" make aware datetime instances to follow \"strict\" arithmetic rules."
msgstr ""

#: ../../pep-0500.txt:29
msgid "Rationale"
msgstr ""

#: ../../pep-0500.txt:31
msgid ""
"As of Python 3.5, aware datetime instances that share a ``tzinfo`` object"
" follow the rules of arithmetics that are induced by a simple bijection "
"between (year, month, day, hour, minute, second, microsecond) 7-tuples "
"and large integers.  In this arithmetics, the difference between "
"YEAR-11-02T12:00 and YEAR-11-01T12:00 is always 24 hours, even though in "
"the US/Eastern timezone, for example, there are 25 hours between "
"2014-11-01T12:00 and 2014-11-02T12:00 because the local clocks were "
"rolled back one hour at 2014-11-02T02:00, introducing an extra hour in "
"the night between 2014-11-01 and 2014-11-02."
msgstr ""

#: ../../pep-0500.txt:42
msgid ""
"Many business applications require the use of Python's simplified view of"
" local dates.  No self-respecting car rental company will charge its "
"customers more for a week that straddles the end of DST than for any "
"other week or require that they return the car an hour early. Therefore, "
"changing the current rules for aware datetime arithmetics will not only "
"create a backward compatibility nightmare, it will eliminate support for "
"legitimate and common use cases."
msgstr ""

#: ../../pep-0500.txt:50
msgid ""
"Since it is impossible to choose universal rules for local time "
"arithmetics, we propose to delegate implementation of those rules to the "
"classes that implement ``datetime.tzinfo`` interface.  With such "
"delegation in place, users will be able to choose between different "
"arithmetics by simply picking instances of different classes for the "
"value of ``tzinfo``."
msgstr ""

#: ../../pep-0500.txt:59
msgid "Protocol"
msgstr ""

#: ../../pep-0500.txt:62
msgid "Subtraction of datetime"
msgstr ""

#: ../../pep-0500.txt:64
msgid ""
"A ``tzinfo`` subclass supporting the PDDM, may define a method called "
"``__datetime_diff__`` that should take two ``datetime.datetime`` "
"instances and return a ``datetime.timedelta`` instance representing the "
"time elapsed from the time represented by the first datetime instance to "
"another."
msgstr ""

#: ../../pep-0500.txt:72 ../../pep-0500.txt:149
msgid "Addition"
msgstr ""

#: ../../pep-0500.txt:74
msgid ""
"A ``tzinfo`` subclass supporting the PDDM, may define a method called "
"``__datetime_add__`` that should take two arguments--a datetime and a "
"timedelta instances--and return a datetime instance."
msgstr ""

#: ../../pep-0500.txt:80
msgid "Subtraction of timedelta"
msgstr ""

#: ../../pep-0500.txt:82
msgid ""
"A ``tzinfo`` subclass supporting the PDDM, may define a method called "
"``__datetime_sub__`` that should take two arguments--a datetime and a "
"timedelta instances--and return a datetime instance."
msgstr ""

#: ../../pep-0500.txt:88
msgid "Formatting"
msgstr ""

#: ../../pep-0500.txt:90
msgid ""
"A ``tzinfo`` subclass supporting the PDDM, may define methods called "
"``__datetime_isoformat__`` and ``__datetime_strftime__``."
msgstr ""

#: ../../pep-0500.txt:93
msgid ""
"The ``__datetime_isoformat__`` method should take a datetime instance and"
" an optional separator and produce a string representation of the given "
"datetime instance."
msgstr ""

#: ../../pep-0500.txt:97
msgid ""
"The ``__datetime_strftime__`` method should take a datetime instance and "
"a format string and produce a string representation of the given datetime"
" instance formatted according to the given format."
msgstr ""

#: ../../pep-0500.txt:103
msgid "Parsing"
msgstr ""

#: ../../pep-0500.txt:105
msgid ""
"A ``tzinfo`` subclass supporting the PDDM, may define a class method "
"called ``__datetime_strptime__`` and register the \"canonical\" names of "
"the timezones that it implements with a registry. **TODO** Describe a "
"registry."
msgstr ""

#: ../../pep-0500.txt:112
msgid "Changes to datetime methods"
msgstr ""

#: ../../pep-0500.txt:115
msgid "Subtraction"
msgstr ""

#: ../../pep-0500.txt:151
msgid ""
"Addition of a timedelta to a datetime instance will be delegated to the "
"``self.tzinfo.__datetime_add__`` method whenever it is defined."
msgstr ""

#: ../../pep-0500.txt:156
msgid "Strict arithmetics"
msgstr ""

#: ../../pep-0500.txt:158
msgid ""
"A new abstract subclass of ``datetime.tzinfo`` class called  "
"``datetime.tzstrict`` will be added to the ``datetime`` module.  This "
"subclass will not implement the ``utcoffset()``, ``tzname()`` or "
"``dst()`` methods, but will implement some of the methods of the PDDM."
msgstr ""

#: ../../pep-0500.txt:163
msgid ""
"The PDDM methods implemented by ``tzstrict`` will be equivalent to the "
"following::"
msgstr ""

#: ../../pep-0500.txt:181
msgid "Parsing and formatting"
msgstr ""

#: ../../pep-0500.txt:183
msgid ""
"Datetime methods ``strftime`` and ``isoformat`` will delegate to the "
"namesake methods of their ``tzinfo`` members whenever those methods are "
"defined."
msgstr ""

#: ../../pep-0500.txt:186
msgid ""
"When the ``datetime.strptime`` method is given a format string that "
"contains a ``%Z`` instruction, it will lookup the ``tzinfo`` "
"implementation in the registry by the given timezone name and call its "
"``__datetime_strptime__`` method."
msgstr ""

#: ../../pep-0500.txt:192
msgid "Applications"
msgstr ""

#: ../../pep-0500.txt:194
msgid ""
"This PEP will enable third party implementation of many different "
"timekeeping schemes including:"
msgstr ""

#: ../../pep-0500.txt:197
msgid "Julian / Microsoft Excel calendar."
msgstr ""

#: ../../pep-0500.txt:198
msgid "\"Right\" timezones with the leap second support."
msgstr ""

#: ../../pep-0500.txt:199
msgid "French revolutionary calendar (with a lot of work)."
msgstr ""

#: ../../pep-0500.txt:202
msgid "Copyright"
msgstr ""

#: ../../pep-0500.txt:204
msgid "This document has been placed in the public domain."
msgstr ""

