# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0552.rst
msgid "PEP"
msgstr ""

#: ../../pep-0552.rst:1
msgid "552"
msgstr ""

#: ../../pep-0552.rst
msgid "Title"
msgstr ""

#: ../../pep-0552.rst:2
msgid "Deterministic pycs"
msgstr ""

#: ../../pep-0552.rst
msgid "Author"
msgstr ""

#: ../../pep-0552.rst:5
msgid "Benjamin Peterson <benjamin@python.org>"
msgstr ""

#: ../../pep-0552.rst
msgid "Status"
msgstr ""

#: ../../pep-0552.rst:6
msgid "Final"
msgstr ""

#: ../../pep-0552.rst
msgid "Type"
msgstr ""

#: ../../pep-0552.rst:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0552.rst
msgid "Created"
msgstr ""

#: ../../pep-0552.rst:9
msgid "04-Sep-2017"
msgstr ""

#: ../../pep-0552.rst
msgid "Python-Version"
msgstr ""

#: ../../pep-0552.rst:10
msgid "3.7"
msgstr ""

#: ../../pep-0552.rst
msgid "Post-History"
msgstr ""

#: ../../pep-0552.rst:11
msgid "2017-09-07"
msgstr ""

#: ../../pep-0552.rst
msgid "Resolution"
msgstr ""

#: ../../pep-0552.rst:12
msgid "https://mail.python.org/pipermail/python-dev/2017-September/149649.html"
msgstr ""

#: ../../pep-0552.rst:16
msgid "Abstract"
msgstr ""

#: ../../pep-0552.rst:18
msgid ""
"This PEP proposes an extension to the pyc format to make it more "
"deterministic."
msgstr ""

#: ../../pep-0552.rst:22
msgid "Rationale"
msgstr ""

#: ../../pep-0552.rst:24
msgid ""
"A `reproducible build`_ is one where the same byte-for-byte output is "
"generated every time the same sources are built—even across different "
"machines (naturally subject to the requirement that they have rather "
"similar environments set up). Reproducibility is important for security. "
"It is also a key concept in content-based build systems such as Bazel_, "
"which are most effective when the output files’ contents are a "
"deterministic function of the input files’ contents."
msgstr ""

#: ../../pep-0552.rst:32
msgid ""
"The current Python pyc format is the marshaled code object of the module "
"prefixed by a `magic number`_, the source timestamp, and the source file "
"size. The presence of a source timestamp means that a pyc is not a "
"deterministic function of the input file’s contents—it also depends on "
"volatile metadata, the mtime of the source. Thus, pycs are a barrier to "
"proper reproducibility."
msgstr ""

#: ../../pep-0552.rst:38
msgid "Distributors of Python code are currently stuck with the options of"
msgstr ""

#: ../../pep-0552.rst:40
msgid "not distributing pycs and losing the caching advantages"
msgstr ""

#: ../../pep-0552.rst:42
msgid "distributing pycs and losing reproducibility"
msgstr ""

#: ../../pep-0552.rst:44
msgid ""
"carefully giving all Python source files a deterministic timestamp (see, "
"for example, https://github.com/python/cpython/pull/296)"
msgstr ""

#: ../../pep-0552.rst:47
msgid ""
"doing a complicated mixture of 1. and 2. like generating pycs at "
"installation time"
msgstr ""

#: ../../pep-0552.rst:50
msgid ""
"None of these options are very attractive. This PEP proposes allowing the"
" timestamp to be replaced with a deterministic hash. The current "
"timestamp invalidation method will remain the default, though. Despite "
"its nondeterminism, timestamp invalidation works well for many workflows "
"and usecases. The hash-based pyc format can impose the cost of reading "
"and hashing every source file, which is more expensive than simply "
"checking timestamps. Thus, for now, we expect it to be used mainly by "
"distributors and power use cases."
msgstr ""

#: ../../pep-0552.rst:58
msgid ""
"(Note there are other problems [#frozensets]_ [#interning]_ we do not "
"address here that can make pycs non-deterministic.)"
msgstr ""

#: ../../pep-0552.rst:63
msgid "Specification"
msgstr ""

#: ../../pep-0552.rst:65
msgid ""
"The pyc header currently consists of 3 32-bit words. We will expand it to"
" 4. The first word will continue to be the magic number, versioning the "
"bytecode and pyc format. The second word, conceptually the new word, will"
" be a bit field. The interpretation of the rest of the header and "
"invalidation behavior of the pyc depends on the contents of the bit "
"field."
msgstr ""

#: ../../pep-0552.rst:71
msgid ""
"If the bit field is 0, the pyc is a traditional timestamp-based pyc. "
"I.e., the third and forth words will be the timestamp and file size "
"respectively, and invalidation will be done by comparing the metadata of "
"the source file with that in the header."
msgstr ""

#: ../../pep-0552.rst:76
msgid ""
"If the lowest bit of the bit field is set, the pyc is a hash-based pyc. "
"We call the second lowest bit the ``check_source`` flag. Following the "
"bit field is a 64-bit hash of the source file. We will use a SipHash_ "
"with a hardcoded key of the contents of the source file. Another fast "
"hash like MD5 or BLAKE2_ would also work. We choose SipHash because "
"Python already has a builtin implementation of it from :pep:`456`, "
"although an interface that allows picking the SipHash key must be exposed"
" to Python. Security of the hash is not a concern, though we pass over "
"completely-broken hashes like MD5 to ease auditing of Python in "
"controlled environments."
msgstr ""

#: ../../pep-0552.rst:86
msgid ""
"When Python encounters a hash-based pyc, its behavior depends on the "
"setting of the ``check_source`` flag. If the ``check_source`` flag is "
"set, Python will determine the validity of the pyc by hashing the source "
"file and comparing the hash with the expected hash in the pyc. If the pyc"
" needs to be regenerated, it will be regenerated as a hash-based pyc "
"again with the ``check_source`` flag set."
msgstr ""

#: ../../pep-0552.rst:93
msgid ""
"For hash-based pycs with the ``check_source`` unset, Python will simply "
"load the pyc without checking the hash of the source file. The "
"expectation in this case is that some external system (e.g., the local "
"Linux distribution’s package manager) is responsible for keeping pycs up "
"to date, so Python itself doesn’t have to check. Even when validation is "
"disabled, the hash field should be set correctly, so out-of-band "
"consistency checkers can verify the up-to-dateness of the pyc. Note also "
"that the :pep:`3147` edict that pycs without corresponding source files "
"not be loaded will still be enforced for hash-based pycs."
msgstr ""

#: ../../pep-0552.rst:102
msgid ""
"The programmatic APIs of ``py_compile`` and ``compileall`` will support "
"generation of hash-based pycs. Principally, ``py_compile`` will define a "
"new enumeration corresponding to all the available pyc invalidation "
"modules::"
msgstr ""

#: ../../pep-0552.rst:111
msgid ""
"``py_compile.compile``, ``compileall.compile_dir``, and "
"``compileall.compile_file`` will all gain an ``invalidation_mode`` "
"parameter, which accepts a value of the ``PycInvalidationMode`` "
"enumeration."
msgstr ""

#: ../../pep-0552.rst:115
msgid ""
"The ``compileall`` tool will be extended with a command new option, "
"``--invalidation-mode`` to generate hash-based pycs with and without the "
"``check_source`` bit set. ``--invalidation-mode`` will be a tristate "
"option taking values ``timestamp`` (the default), ``checked-hash``, and "
"``unchecked-hash`` corresponding to the values of "
"``PycInvalidationMode``."
msgstr ""

#: ../../pep-0552.rst:121
msgid ""
"``importlib.util`` will be extended with a ``source_hash(source)`` "
"function that computes the hash used by the pyc writing code for a "
"bytestring **source**."
msgstr ""

#: ../../pep-0552.rst:124
msgid ""
"Runtime configuration of hash-based pyc invalidation will be facilitated "
"by a new ``--check-hash-based-pycs`` interpreter option. This is a "
"tristate option, which may take 3 values: ``default``, ``always``, and "
"``never``. The default value, ``default``, means the ``check_source`` "
"flag in hash-based pycs determines invalidation as described above. "
"``always`` causes the interpreter to hash the source file for "
"invalidation regardless of value of ``check_source`` bit. ``never`` "
"causes the interpreter to always assume hash-based pycs are valid. When "
"``--check-hash-based-pycs=never`` is in effect, unchecked hash-based pycs"
" will be regenerated as unchecked hash-based pycs. Timestamp-based pycs "
"are unaffected by ``--check-hash-based-pycs``."
msgstr ""

#: ../../pep-0552.rst:137
msgid "References"
msgstr ""

#: ../../pep-0552.rst:143
msgid "http://benno.id.au/blog/2013/01/15/python-determinism"
msgstr ""

#: ../../pep-0552.rst:144
msgid "http://bugzilla.opensuse.org/show_bug.cgi?id=1049186"
msgstr ""

#: ../../pep-0552.rst:149
msgid "Credits"
msgstr ""

#: ../../pep-0552.rst:151
msgid ""
"The author would like to thank Gregory P. Smith, Christian Heimes, and "
"Steve Dower for useful conversations on the topic of this PEP."
msgstr ""

#: ../../pep-0552.rst:156
msgid "Copyright"
msgstr ""

#: ../../pep-0552.rst:158
msgid "This document has been placed in the public domain."
msgstr ""

