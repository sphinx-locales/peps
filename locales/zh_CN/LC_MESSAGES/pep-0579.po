# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0579.rst
msgid "PEP"
msgstr ""

#: ../../pep-0579.rst:1
msgid "579"
msgstr ""

#: ../../pep-0579.rst
msgid "Title"
msgstr ""

#: ../../pep-0579.rst:2
msgid "Refactoring C functions and methods"
msgstr ""

#: ../../pep-0579.rst
msgid "Author"
msgstr ""

#: ../../pep-0579.rst:3
msgid "Jeroen Demeyer <J.Demeyer@UGent.be>"
msgstr ""

#: ../../pep-0579.rst
msgid "BDFL-Delegate"
msgstr ""

#: ../../pep-0579.rst:4
msgid "Petr Viktorin"
msgstr ""

#: ../../pep-0579.rst
msgid "Status"
msgstr ""

#: ../../pep-0579.rst:5
msgid "Final"
msgstr ""

#: ../../pep-0579.rst
msgid "Type"
msgstr ""

#: ../../pep-0579.rst:6
msgid "Informational"
msgstr ""

#: ../../pep-0579.rst
msgid "Created"
msgstr ""

#: ../../pep-0579.rst:8
msgid "04-Jun-2018"
msgstr ""

#: ../../pep-0579.rst
msgid "Post-History"
msgstr ""

#: ../../pep-0579.rst:9
msgid "20-Jun-2018"
msgstr ""

#: ../../pep-0579.rst:13
msgid "Approval Notice"
msgstr ""

#: ../../pep-0579.rst:15
msgid ""
"This PEP describes design issues addressed in PEP 575, PEP 580, PEP 590 "
"(and possibly later proposals)."
msgstr ""

#: ../../pep-0579.rst:18
msgid ""
"As noted in `PEP 1 <https://www.python.org/dev/peps/pep-0001/#pep-"
"types>`_:"
msgstr ""

#: ../../pep-0579.rst:20
msgid ""
"Informational PEPs do not necessarily represent a Python community "
"consensus or recommendation, so users and implementers are free to ignore"
" Informational PEPs or follow their advice."
msgstr ""

#: ../../pep-0579.rst:24
msgid ""
"While there is no consensus on whether the issues or the solutions in "
"this PEP are valid, the list is still useful to guide further design."
msgstr ""

#: ../../pep-0579.rst:29
msgid "Abstract"
msgstr ""

#: ../../pep-0579.rst:31
msgid ""
"This meta-PEP collects various issues with CPython's existing "
"implementation of built-in functions (functions implemented in C) and "
"methods."
msgstr ""

#: ../../pep-0579.rst:34
msgid ""
"Fixing all these issues is too much for one PEP, so that will be "
"delegated to other standards track PEPs. However, this PEP does give some"
" brief ideas of possible fixes. This is mainly meant to coordinate an "
"overall strategy. For example, a proposed solution may sound too "
"complicated for fixing any one single issue, but it may be the best "
"overall solution for multiple issues."
msgstr ""

#: ../../pep-0579.rst:42
msgid ""
"This PEP is purely informational: it does not imply that all issues will "
"eventually be fixed, nor that they will be fixed using the solution "
"proposed here."
msgstr ""

#: ../../pep-0579.rst:46
msgid ""
"It also serves as a check-list of possible requested features to verify "
"that a given fix does not make those other features harder to implement."
msgstr ""

#: ../../pep-0579.rst:50
msgid ""
"The major proposed change is replacing ``PyMethodDef`` by a new structure"
" ``PyCCallDef`` which collects everything needed for calling the "
"function/method. In the ``PyTypeObject`` structure, a new field "
"``tp_ccalloffset`` is added giving an offset to a ``PyCCallDef *`` in the"
" object structure."
msgstr ""

#: ../../pep-0579.rst:56
msgid ""
"**NOTE**: This PEP deals only with CPython implementation details, it "
"does not affect the Python language or standard library."
msgstr ""

#: ../../pep-0579.rst:61
msgid "Issues"
msgstr ""

#: ../../pep-0579.rst:63
msgid ""
"This lists various issues with built-in functions and methods, together "
"with a plan for a solution and (if applicable) pointers to standards "
"track PEPs discussing the details."
msgstr ""

#: ../../pep-0579.rst:69
msgid "1. Naming"
msgstr ""

#: ../../pep-0579.rst:71
msgid ""
"The word \"built-in\" is overused in Python. From a quick skim of the "
"Python documentation, it mostly refers to things from the ``builtins`` "
"module. In other words: things which are available in the global "
"namespace without a need for importing them. This conflicts with the use "
"of the word \"built-in\" to mean \"implemented in C\"."
msgstr ""

#: ../../pep-0579.rst:78
msgid ""
"**Solution**: since the C structure for built-in functions and methods is"
" already called ``PyCFunctionObject``, let's use the name \"cfunction\" "
"and \"cmethod\" instead of \"built-in function\" and \"built-in method\"."
msgstr ""

#: ../../pep-0579.rst:85
msgid "2. Not extendable"
msgstr ""

#: ../../pep-0579.rst:87
msgid ""
"The various classes involved (such as ``builtin_function_or_method``) "
"cannot be subclassed::"
msgstr ""

#: ../../pep-0579.rst:97
msgid ""
"This is a problem because it makes it impossible to add features such as "
"introspection support to these classes."
msgstr ""

#: ../../pep-0579.rst:100
msgid ""
"If one wants to implement a function in C with additional functionality, "
"an entirely new class must be implemented from scratch. The problem with "
"this is that the existing classes like ``builtin_function_or_method`` are"
" special-cased in the Python interpreter to allow faster calling (for "
"example, by using ``METH_FASTCALL``). It is currently impossible to have "
"a custom class with the same optimizations."
msgstr ""

#: ../../pep-0579.rst:107
msgid ""
"**Solution**: make the existing optimizations available to arbitrary "
"classes. This is done by adding a new ``PyTypeObject`` field "
"``tp_ccalloffset`` (or can we re-use ``tp_print`` for that?) specifying "
"the offset of a ``PyCCallDef`` pointer. This is a new structure holding "
"all information needed to call a cfunction and it would be used instead "
"of ``PyMethodDef``. This implements the new \"C call\" protocol."
msgstr ""

#: ../../pep-0579.rst:115
msgid ""
"For constructing cfunctions and cmethods, ``PyMethodDef`` arrays will "
"still be used (for example, in ``tp_methods``) but that will be the "
"*only* remaining purpose of the ``PyMethodDef`` structure."
msgstr ""

#: ../../pep-0579.rst:119
msgid ""
"Additionally, we can also make some function classes subclassable. "
"However, this seems less important once we have ``tp_ccalloffset``."
msgstr ""

#: ../../pep-0579.rst:122 ../../pep-0579.rst:161 ../../pep-0579.rst:229
msgid "**Reference**: PEP 580"
msgstr ""

#: ../../pep-0579.rst:126
msgid "3. cfunctions do not become methods"
msgstr ""

#: ../../pep-0579.rst:128
msgid ""
"A cfunction like ``repr`` does not implement ``__get__`` to bind as a "
"method::"
msgstr ""

#: ../../pep-0579.rst:139
msgid ""
"In this example, one would have expected that ``x.meth()`` returns "
"``repr(x)`` by applying the normal rules of methods."
msgstr ""

#: ../../pep-0579.rst:142
msgid ""
"This is surprising and a needless difference between cfunctions and "
"Python functions. For the standard built-in functions, this is not really"
" a problem since those are not meant to used as methods. But it does "
"become a problem when one wants to implement a new cfunction with the "
"goal of being usable as method."
msgstr ""

#: ../../pep-0579.rst:149
msgid ""
"Again, a solution could be to create a new class behaving just like "
"cfunctions but which bind as methods. However, that would lose some "
"existing optimizations for methods, such as the "
"``LOAD_METHOD``/``CALL_METHOD`` opcodes."
msgstr ""

#: ../../pep-0579.rst:154
msgid ""
"**Solution**: the same as the previous issue. It just shows that handling"
" ``self`` and ``__get__`` should be part of the new C call protocol."
msgstr ""

#: ../../pep-0579.rst:158
msgid ""
"For backwards compatibility, we would keep the existing non-binding "
"behavior of cfunctions. We would just allow it in custom classes."
msgstr ""

#: ../../pep-0579.rst:165
msgid "4. Semantics of inspect.isfunction"
msgstr ""

#: ../../pep-0579.rst:167
msgid ""
"Currently, ``inspect.isfunction`` returns ``True`` only for instances of "
"``types.FunctionType``. That is, true Python functions."
msgstr ""

#: ../../pep-0579.rst:171
msgid ""
"A common use case for ``inspect.isfunction`` is checking for "
"introspection: it guarantees for example that ``inspect.getfile()`` will "
"work. Ideally, it should be possible for other classes to be treated as "
"functions too."
msgstr ""

#: ../../pep-0579.rst:176
msgid ""
"**Solution**: introduce a new ``InspectFunction`` abstract base class and"
" use that to implement ``inspect.isfunction``. Alternatively, use duck "
"typing for ``inspect.isfunction`` (as proposed in [#bpo30071]_)::"
msgstr ""

#: ../../pep-0579.rst:186
msgid "5. C functions should have access to the function object"
msgstr ""

#: ../../pep-0579.rst:188
msgid ""
"The underlying C function of a cfunction currently takes a ``self`` "
"argument (for bound methods) and then possibly a number of arguments. "
"There is no way for the C function to actually access the Python "
"cfunction object (the ``self`` in ``__call__`` or ``tp_call``). This "
"would for example allow implementing the C call protocol for Python "
"functions (``types.FunctionType``): the C function which implements "
"calling Python functions needs access to the ``__code__`` attribute of "
"the function."
msgstr ""

#: ../../pep-0579.rst:198
msgid ""
"This is also needed for PEP 573 where all cfunctions require access to "
"their \"parent\" (the module for functions of a module or the defining "
"class for methods)."
msgstr ""

#: ../../pep-0579.rst:203
msgid ""
"**Solution**: add a new ``PyMethodDef`` flag to specify that the C "
"function takes an additional argument (as first argument), namely the "
"function object."
msgstr ""

#: ../../pep-0579.rst:207
msgid "**References**: PEP 580, PEP 573"
msgstr ""

#: ../../pep-0579.rst:211
msgid "6. METH_FASTCALL is private and undocumented"
msgstr ""

#: ../../pep-0579.rst:213
msgid ""
"The ``METH_FASTCALL`` mechanism allows calling cfunctions and cmethods "
"using a C array of Python objects instead of a ``tuple``. This was "
"introduced in Python 3.6 for positional arguments only and extended in "
"Python 3.7 with support for keyword arguments."
msgstr ""

#: ../../pep-0579.rst:218
msgid ""
"However, given that it is undocumented, it is presumably only supposed to"
" be used by CPython itself."
msgstr ""

#: ../../pep-0579.rst:221
msgid ""
"**Solution**: since this is an important optimization, everybody should "
"be encouraged to use it. Now that the implementation of ``METH_FASTCALL``"
" is stable, document it!"
msgstr ""

#: ../../pep-0579.rst:225
msgid "As part of the C call protocol, we should also add a C API function ::"
msgstr ""

#: ../../pep-0579.rst:233
msgid "7. Allowing native C arguments"
msgstr ""

#: ../../pep-0579.rst:235
msgid ""
"A cfunction always takes its arguments as Python objects (say, an array "
"of ``PyObject`` pointers). In cases where the cfunction is really "
"wrapping a native C function (for example, coming from ``ctypes`` or some"
" compiler like Cython), this is inefficient: calls from C code to C code "
"are forced to use Python objects to pass arguments."
msgstr ""

#: ../../pep-0579.rst:242
msgid ""
"Analogous to the buffer protocol which allows access to C data, we should"
" also allow access to the underlying C callable."
msgstr ""

#: ../../pep-0579.rst:245
msgid ""
"**Solution**: when wrapping a C function with native arguments (for "
"example, a C ``long``) inside a cfunction, we should also store a "
"function pointer to the underlying C function, together with its C "
"signature."
msgstr ""

#: ../../pep-0579.rst:250
msgid ""
"Argument Clinic could automatically do this by storing a pointer to the "
"\"impl\" function."
msgstr ""

#: ../../pep-0579.rst:255
msgid "8. Complexity"
msgstr ""

#: ../../pep-0579.rst:257
msgid ""
"There are a huge number of classes involved to implement all variations "
"of methods. This is not a problem by itself, but a compounding issue."
msgstr ""

#: ../../pep-0579.rst:261
msgid ""
"For ordinary Python classes, the table below gives the classes for "
"various kinds of methods. The columns refer to the class in the class "
"``__dict__``, the class for unbound methods (bound to the class) and the "
"class for bound methods (bound to the instance):"
msgstr ""

#: ../../pep-0579.rst:268 ../../pep-0579.rst:279
msgid "kind"
msgstr ""

#: ../../pep-0579.rst:268 ../../pep-0579.rst:279
msgid "__dict__"
msgstr ""

#: ../../pep-0579.rst:268 ../../pep-0579.rst:279
msgid "unbound"
msgstr ""

#: ../../pep-0579.rst:268 ../../pep-0579.rst:279
msgid "bound"
msgstr ""

#: ../../pep-0579.rst:270 ../../pep-0579.rst:281
msgid "Normal method"
msgstr ""

#: ../../pep-0579.rst:270 ../../pep-0579.rst:271 ../../pep-0579.rst:273
msgid "``function``"
msgstr ""

#: ../../pep-0579.rst:270 ../../pep-0579.rst:272 ../../pep-0579.rst:273
msgid "``method``"
msgstr ""

#: ../../pep-0579.rst:271 ../../pep-0579.rst:282
msgid "Static method"
msgstr ""

#: ../../pep-0579.rst:271 ../../pep-0579.rst:282
msgid "``staticmethod``"
msgstr ""

#: ../../pep-0579.rst:272 ../../pep-0579.rst:283
msgid "Class method"
msgstr ""

#: ../../pep-0579.rst:272
msgid "``classmethod``"
msgstr ""

#: ../../pep-0579.rst:273 ../../pep-0579.rst:284
msgid "Slot method"
msgstr ""

#: ../../pep-0579.rst:276
msgid "This is the analogous table for extension types (C classes):"
msgstr ""

#: ../../pep-0579.rst:281
msgid "``method_descriptor``"
msgstr ""

#: ../../pep-0579.rst:281 ../../pep-0579.rst:282 ../../pep-0579.rst:283
msgid "``builtin_function_or_method``"
msgstr ""

#: ../../pep-0579.rst:283
msgid "``classmethod_descriptor``"
msgstr ""

#: ../../pep-0579.rst:284
msgid "``wrapper_descriptor``"
msgstr ""

#: ../../pep-0579.rst:284
msgid "``method-wrapper``"
msgstr ""

#: ../../pep-0579.rst:287
msgid ""
"There are a lot of classes involved and these two tables look very "
"different. There is no good reason why Python methods should be treated "
"fundamentally different from C methods. Also the features are slightly "
"different: for example, ``method`` supports ``__func__`` but "
"``builtin_function_or_method`` does not."
msgstr ""

#: ../../pep-0579.rst:295
msgid ""
"Since CPython has optimizations for calls to most of these objects, the "
"code for dealing with them can also become complex. A good example of "
"this is the ``call_function`` function in ``Python/ceval.c``."
msgstr ""

#: ../../pep-0579.rst:299
msgid ""
"**Solution**: all these classes should implement the C call protocol. "
"Then the complexity in the code can mostly be fixed by checking for the C"
" call protocol (``tp_ccalloffset != 0``) instead of doing type checks."
msgstr ""

#: ../../pep-0579.rst:304
msgid ""
"Furthermore, it should be investigated whether some of these classes can "
"be merged and whether ``method`` can be re-used also for bound methods of"
" extension types (see PEP 576 for the latter, keeping in mind that this "
"may have some minor backwards compatibility issues). This is not a goal "
"by itself but just something to keep in mind when working on these "
"classes."
msgstr ""

#: ../../pep-0579.rst:313
msgid "9. PyMethodDef is too limited"
msgstr ""

#: ../../pep-0579.rst:315
msgid ""
"The typical way to create a cfunction or cmethod in an extension module "
"is by using a ``PyMethodDef`` to define it. These are then stored in an "
"array ``PyModuleDef.m_methods`` (for cfunctions) or "
"``PyTypeObject.tp_methods`` (for cmethods). However, because of the "
"stable ABI (PEP 384), we cannot change the ``PyMethodDef`` structure."
msgstr ""

#: ../../pep-0579.rst:322
msgid ""
"So, this means that we cannot add new fields for creating "
"cfunctions/cmethods this way. This is probably the reason for the hack "
"that ``__doc__`` and ``__text_signature__`` are stored in the same C "
"string (with the ``__doc__`` and ``__text_signature__`` descriptors "
"extracting the relevant part)."
msgstr ""

#: ../../pep-0579.rst:329
msgid ""
"**Solution**: stop assuming that a single ``PyMethodDef`` entry is "
"sufficient to describe a cfunction/cmethod. Instead, we could add some "
"flag which means that one of the ``PyMethodDef`` fields is instead a "
"pointer to an additional structure. Or, we could add a flag to use two or"
" more consecutive ``PyMethodDef`` entries in the array to store more "
"data. Then the ``PyMethodDef`` array would be used only to construct "
"cfunctions/cmethods but it would no longer be used after that."
msgstr ""

#: ../../pep-0579.rst:340
msgid "10. Slot wrappers have no custom documentation"
msgstr ""

#: ../../pep-0579.rst:342
msgid ""
"Right now, slot wrappers like ``__init__`` or ``__lt__`` only have very "
"generic documentation, not at all specific to the class::"
msgstr ""

#: ../../pep-0579.rst:350
msgid "The same happens for the signature::"
msgstr ""

#: ../../pep-0579.rst:355
msgid ""
"As you can see, slot wrappers do support ``__doc__`` and "
"``__text_signature__``. The problem is that these are stored in ``struct "
"wrapperbase``, which is common for all wrappers of a specific slot (for "
"example, the same ``wrapperbase`` is used for ``str.__eq__`` and "
"``int.__eq__``)."
msgstr ""

#: ../../pep-0579.rst:361
msgid ""
"**Solution**: rethink the slot wrapper class to allow docstrings (and "
"text signatures) for each instance separately."
msgstr ""

#: ../../pep-0579.rst:364
msgid ""
"This still leaves the question of how extension modules should specify "
"the documentation. The ``PyTypeObject`` entries like ``tp_init`` are just"
" function pointers, we cannot do anything with those. One solution would "
"be to add entries to the ``tp_methods`` array just for adding docstrings."
" Such an entry could look like ::"
msgstr ""

#: ../../pep-0579.rst:376
msgid "11. Static methods and class methods should be callable"
msgstr ""

#: ../../pep-0579.rst:378
msgid ""
"Instances of ``staticmethod`` and ``classmethod`` should be callable. "
"Admittedly, there is no strong use case for this, but it has occasionally"
" been requested (see for example [#bpo20309]_)."
msgstr ""

#: ../../pep-0579.rst:382
msgid ""
"Making static/class methods callable would increase consistency. First of"
" all, function decorators typically add functionality or modify a "
"function, but the result remains callable. This is not true for "
"``@staticmethod`` and ``@classmethod``."
msgstr ""

#: ../../pep-0579.rst:387
msgid "Second, class methods of extension types are already callable::"
msgstr ""

#: ../../pep-0579.rst:395
msgid ""
"Third, one can see ``function``, ``staticmethod`` and ``classmethod`` as "
"different kinds of unbound methods: they all become ``method`` when "
"bound, but the implementation of ``__get__`` is slightly different. From "
"this point of view, it looks strange that ``function`` is callable but "
"the others are not."
msgstr ""

#: ../../pep-0579.rst:402
msgid ""
"**Solution**: when changing the implementation of ``staticmethod``, "
"``classmethod``, we should consider making instances callable. Even if "
"this is not a goal by itself, it may happen naturally because of the "
"implementation."
msgstr ""

#: ../../pep-0579.rst:410
msgid "References"
msgstr ""

#: ../../pep-0579.rst:412
msgid ""
"Not all method descriptors are callable "
"(https://bugs.python.org/issue20309)"
msgstr ""

#: ../../pep-0579.rst:415
msgid "Duck-typing inspect.isfunction() (https://bugs.python.org/issue30071)"
msgstr ""

#: ../../pep-0579.rst:420
msgid "Copyright"
msgstr ""

#: ../../pep-0579.rst:422
msgid "This document has been placed in the public domain."
msgstr ""

