# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0491.txt
msgid "PEP"
msgstr ""

#: ../../pep-0491.txt:1
msgid "491"
msgstr ""

#: ../../pep-0491.txt
msgid "Title"
msgstr ""

#: ../../pep-0491.txt:2
msgid "The Wheel Binary Package Format 1.9"
msgstr ""

#: ../../pep-0491.txt
msgid "Author"
msgstr ""

#: ../../pep-0491.txt:5
msgid "Daniel Holth <dholth@gmail.com>"
msgstr ""

#: ../../pep-0491.txt
msgid "Discussions-To"
msgstr ""

#: ../../pep-0491.txt:6
msgid "<distutils-sig@python.org>"
msgstr ""

#: ../../pep-0491.txt
msgid "Status"
msgstr ""

#: ../../pep-0491.txt:7
msgid "Deferred"
msgstr ""

#: ../../pep-0491.txt
msgid "Type"
msgstr ""

#: ../../pep-0491.txt:8
msgid "Standards Track"
msgstr ""

#: ../../pep-0491.txt
msgid "Created"
msgstr ""

#: ../../pep-0491.txt:10
msgid "16-Apr-2015"
msgstr ""

#: ../../pep-0491.txt:13
msgid "Abstract"
msgstr ""

#: ../../pep-0491.txt:15
msgid ""
"This PEP describes the second version of a built-package format for "
"Python called \"wheel\".  Wheel provides a Python-specific, relocatable "
"package format that allows people to install software more quickly and "
"predictably than re-building from source each time."
msgstr ""

#: ../../pep-0491.txt:20
msgid ""
"A wheel is a ZIP-format archive with a specially formatted file name and "
"the ``.whl`` extension.  It contains a single distribution nearly as it "
"would be installed according to PEP 376 with a particular installation "
"scheme.  Simple wheels can be unpacked onto ``sys.path`` and used "
"directly but wheels are usually installed with a specialized installer."
msgstr ""

#: ../../pep-0491.txt:26
msgid ""
"This version of the wheel specification adds support for installing "
"distributions into many different directories, and adds a way to find "
"those files after they have been installed."
msgstr ""

#: ../../pep-0491.txt:32
msgid "PEP Deferral"
msgstr ""

#: ../../pep-0491.txt:34
msgid ""
"This PEP is not currently being actively pursued, with Python packaging "
"improvements currently focusing on the package build process rather than "
"expanding the binary archive format to cover additional use cases."
msgstr ""

#: ../../pep-0491.txt:38
msgid ""
"Some specific elements to be addressed when work on this PEP is resumed "
"in the future:"
msgstr ""

#: ../../pep-0491.txt:41
msgid ""
"migrating the official wheel format definition to "
"https://packaging.python.org/specifications/ (similar to what PEP 566 did"
" for https://packaging.python.org/specifications/core-metadata/)"
msgstr ""

#: ../../pep-0491.txt:44
msgid ""
"updating the PEP itself to focus on the *changes* being made between the "
"two versions of the format and the rationale for those changes, rather "
"than having to repeat all the information that is unchanged from PEP 427"
msgstr ""

#: ../../pep-0491.txt:47
msgid ""
"clarifying that the PEP is deliberately written to allow existing "
"installers to be compliant with the specification when using existing "
"install scheme definitions, while also allowing the creation of new "
"install scheme definitions that take advantage of the richer "
"categorisation scheme for the contents of the binary archive"
msgstr ""

#: ../../pep-0491.txt:55
msgid "Rationale"
msgstr ""

#: ../../pep-0491.txt:57
msgid ""
"Wheel 1.0 is best at installing files into ``site-packages`` and a few "
"other locations specified by distutils, but users would like to install "
"files from single distribution into many directories -- perhaps separate "
"locations for docs, data, and code.  Unfortunately not everyone agrees on"
" where these install locations should be relative to the root directory. "
"This version of the format adds many more categories, each of which can "
"be installed to a different destination based on policy.  Since it might "
"also be important to locate the installed files at runtime, this version "
"of the format also adds a way to record the installed paths in a way that"
" can be read by the installed software."
msgstr ""

#: ../../pep-0491.txt:69
msgid "Details"
msgstr ""

#: ../../pep-0491.txt:72
msgid "Installing a wheel 'distribution-1.0-py32-none-any.whl'"
msgstr ""

#: ../../pep-0491.txt:74
msgid "Wheel installation notionally consists of two phases:"
msgstr ""

#: ../../pep-0491.txt:76
msgid "Unpack."
msgstr ""

#: ../../pep-0491.txt:78
msgid "Parse ``distribution-1.0.dist-info/WHEEL``."
msgstr ""

#: ../../pep-0491.txt:79
msgid ""
"Check that installer is compatible with Wheel-Version.  Warn if minor "
"version is greater, abort if major version is greater."
msgstr ""

#: ../../pep-0491.txt:81
msgid "If Root-Is-Purelib == 'true', unpack archive into purelib (site-packages)."
msgstr ""

#: ../../pep-0491.txt:83
msgid "Else unpack archive into platlib (site-packages)."
msgstr ""

#: ../../pep-0491.txt:85
msgid "Spread."
msgstr ""

#: ../../pep-0491.txt:87
msgid ""
"Unpacked archive includes ``distribution-1.0.dist-info/`` and (if there "
"is data) ``distribution-1.0.data/``."
msgstr ""

#: ../../pep-0491.txt:89
msgid ""
"Move each subtree of ``distribution-1.0.data/`` onto its destination "
"path. Each subdirectory of ``distribution-1.0.data/`` is a key into a "
"dict of destination directories, such as "
"``distribution-1.0.data/(purelib|platlib|headers|scripts|data)``."
msgstr ""

#: ../../pep-0491.txt:93
msgid ""
"Update scripts starting with ``#!python`` to point to the correct "
"interpreter.  (Note: Python scripts are usually handled by package "
"metadata, and not included verbatim in wheel.)"
msgstr ""

#: ../../pep-0491.txt:96
msgid "Update ``distribution-1.0.dist.info/RECORD`` with the installed paths."
msgstr ""

#: ../../pep-0491.txt:98
msgid "If empty, remove the ``distribution-1.0.data`` directory."
msgstr ""

#: ../../pep-0491.txt:99
msgid ""
"Compile any installed .py to .pyc. (Uninstallers should be smart enough "
"to remove .pyc even if it is not mentioned in RECORD.)"
msgstr ""

#: ../../pep-0491.txt:102
msgid ""
"In practice, installers will usually extract files directly from the "
"archive to their destinations without writing a temporary "
"``distribution-1.0.data/`` directory."
msgstr ""

#: ../../pep-0491.txt:107
msgid "Recommended installer features"
msgstr ""

#: ../../pep-0491.txt:117
msgid "Rewrite ``#!python``."
msgstr ""

#: ../../pep-0491.txt:110
msgid ""
"In wheel, verbatim scripts are packaged in "
"``{distribution}-{version}.data/scripts/``.  If the first line of a file "
"in ``scripts/`` starts with exactly ``b'#!python'``, rewrite to point to "
"the correct interpreter.  Unix installers may need to add the +x bit to "
"these files if the archive was created on Windows."
msgstr ""

#: ../../pep-0491.txt:116
msgid ""
"The ``b'#!pythonw'`` convention is allowed. ``b'#!pythonw'`` indicates a "
"GUI script instead of a console script."
msgstr ""

#: ../../pep-0491.txt:123
msgid "Generate script wrappers."
msgstr ""

#: ../../pep-0491.txt:120
msgid ""
"Python scripts are more commonly represented as a ``module:callable`` "
"string in package metadata, and are not included verbatim in the wheel "
"archive's ``scripts`` directory.  This kind of script gives the installer"
" an opportunity to generate platform specific wrappers."
msgstr ""

#: ../../pep-0491.txt:126
msgid "Recommended archiver features"
msgstr ""

#: ../../pep-0491.txt:133
msgid "Place ``.dist-info`` at the end of the archive."
msgstr ""

#: ../../pep-0491.txt:129
msgid ""
"Archivers are encouraged to place the ``.dist-info`` files physically at "
"the end of the archive.  This enables some potentially interesting ZIP "
"tricks including the ability to amend the metadata without rewriting the "
"entire archive."
msgstr ""

#: ../../pep-0491.txt:136
msgid "File Format"
msgstr ""

#: ../../pep-0491.txt:139
msgid "File name convention"
msgstr ""

#: ../../pep-0491.txt:141
msgid ""
"The wheel filename is ``{distribution}-{version}(-{build tag})?-{python "
"tag}-{abi tag}-{platform tag}.whl``."
msgstr ""

#: ../../pep-0491.txt:145
msgid "distribution"
msgstr ""

#: ../../pep-0491.txt:145
msgid "Distribution name, e.g. 'django', 'pyramid'."
msgstr ""

#: ../../pep-0491.txt:148
msgid "version"
msgstr ""

#: ../../pep-0491.txt:148
msgid "Distribution version, e.g. 1.0."
msgstr ""

#: ../../pep-0491.txt:154
msgid "build tag"
msgstr ""

#: ../../pep-0491.txt:151
msgid ""
"Optional build number.  Must start with a digit.  A tie breaker if two "
"wheels have the same version.  Sort as the empty string if unspecified, "
"else sort the initial digits as a number, and the remainder "
"lexicographically."
msgstr ""

#: ../../pep-0491.txt:157
msgid "language implementation and version tag"
msgstr ""

#: ../../pep-0491.txt:157
msgid "E.g. 'py27', 'py2', 'py3'."
msgstr ""

#: ../../pep-0491.txt:160
msgid "abi tag"
msgstr ""

#: ../../pep-0491.txt:160
msgid "E.g. 'cp33m', 'abi3', 'none'."
msgstr ""

#: ../../pep-0491.txt:163
msgid "platform tag"
msgstr ""

#: ../../pep-0491.txt:163
msgid "E.g. 'linux_x86_64', 'any'."
msgstr ""

#: ../../pep-0491.txt:165
msgid ""
"For example, ``distribution-1.0-1-py27-none-any.whl`` is the first build "
"of a package called 'distribution', and is compatible with Python 2.7 "
"(any Python 2.7 implementation), with no ABI (pure Python), on any CPU "
"architecture."
msgstr ""

#: ../../pep-0491.txt:170
msgid ""
"The last three components of the filename before the extension are called"
" \"compatibility tags.\"  The compatibility tags express the package's "
"basic interpreter requirements and are detailed in PEP 425."
msgstr ""

#: ../../pep-0491.txt:175
msgid "Escaping and Unicode"
msgstr ""

#: ../../pep-0491.txt:177
msgid ""
"Each component of the filename is escaped by replacing runs of non-"
"alphanumeric characters with an underscore ``_``::"
msgstr ""

#: ../../pep-0491.txt:182
msgid ""
"The archive filename is Unicode.  The packaging tools may only support "
"ASCII package names, but Unicode filenames are supported in this "
"specification."
msgstr ""

#: ../../pep-0491.txt:186
msgid ""
"The filenames *inside* the archive are encoded as UTF-8.  Although some "
"ZIP clients in common use do not properly display UTF-8 filenames, the "
"encoding is supported by both the ZIP specification and Python's "
"``zipfile``."
msgstr ""

#: ../../pep-0491.txt:192
msgid "File contents"
msgstr ""

#: ../../pep-0491.txt:194
msgid ""
"The contents of a wheel file, where {distribution} is replaced with the "
"name of the package, e.g. ``beaglevote`` and {version} is replaced with "
"its version, e.g. ``1.0.0``, consist of:"
msgstr ""

#: ../../pep-0491.txt:198
msgid ""
"``/``, the root of the archive, contains all files to be installed in "
"``purelib`` or ``platlib`` as specified in ``WHEEL``.  ``purelib`` and "
"``platlib`` are usually both ``site-packages``."
msgstr ""

#: ../../pep-0491.txt:201
msgid "``{distribution}-{version}.dist-info/`` contains metadata."
msgstr ""

#: ../../pep-0491.txt:202
msgid ""
"``{distribution}-{version}.data/`` contains one subdirectory for each "
"non-empty install scheme key not already covered, where the subdirectory "
"name is an index into a dictionary of install paths (e.g. ``data``, "
"``scripts``, ``include``, ``purelib``, ``platlib``)."
msgstr ""

#: ../../pep-0491.txt:206
msgid ""
"Python scripts must appear in ``scripts`` and begin with exactly "
"``b'#!python'`` in order to enjoy script wrapper generation and "
"``#!python`` rewriting at install time.  They may have any or no "
"extension."
msgstr ""

#: ../../pep-0491.txt:210
msgid ""
"``{distribution}-{version}.dist-info/METADATA`` is Metadata version 1.1 "
"or greater format metadata."
msgstr ""

#: ../../pep-0491.txt:212
msgid ""
"``{distribution}-{version}.dist-info/WHEEL`` is metadata about the "
"archive itself in the same basic key: value format::"
msgstr ""

#: ../../pep-0491.txt:224
msgid "``Wheel-Version`` is the version number of the Wheel specification."
msgstr ""

#: ../../pep-0491.txt:225
msgid ""
"``Generator`` is the name and optionally the version of the software that"
" produced the archive."
msgstr ""

#: ../../pep-0491.txt:227
msgid ""
"``Root-Is-Purelib`` is true if the top level directory of the archive "
"should be installed into purelib; otherwise the root should be installed "
"into platlib."
msgstr ""

#: ../../pep-0491.txt:230
msgid ""
"``Tag`` is the wheel's expanded compatibility tags; in the example the "
"filename would contain ``py2.py3-none-any``."
msgstr ""

#: ../../pep-0491.txt:232
msgid "``Build`` is the build number and is omitted if there is no build number."
msgstr ""

#: ../../pep-0491.txt:233
msgid ""
"``Install-Paths-To`` is a location *relative to the archive* that will be"
" overwritten with the install-time paths of each category in the install "
"scheme.  See the install paths section.  May appear 0 or more times."
msgstr ""

#: ../../pep-0491.txt:236
msgid ""
"A wheel installer should warn if Wheel-Version is greater than the "
"version it supports, and must fail if Wheel-Version has a greater major "
"version than the version it supports."
msgstr ""

#: ../../pep-0491.txt:239
msgid ""
"Wheel, being an installation format that is intended to work across "
"multiple versions of Python, does not generally include .pyc files."
msgstr ""

#: ../../pep-0491.txt:241
msgid "Wheel does not contain setup.py or setup.cfg."
msgstr ""

#: ../../pep-0491.txt:244
msgid "The .dist-info directory"
msgstr ""

#: ../../pep-0491.txt:246
msgid ""
"Wheel .dist-info directories include at a minimum METADATA, WHEEL, and "
"RECORD."
msgstr ""

#: ../../pep-0491.txt:248
msgid ""
"METADATA is the package metadata, the same format as PKG-INFO as found at"
" the root of sdists."
msgstr ""

#: ../../pep-0491.txt:250
msgid "WHEEL is the wheel metadata specific to a build of the package."
msgstr ""

#: ../../pep-0491.txt:251
msgid ""
"RECORD is a list of (almost) all the files in the wheel and their secure "
"hashes.  Unlike PEP 376, every file except RECORD, which cannot contain a"
" hash of itself, must include its hash.  The hash algorithm must be "
"sha256 or better; specifically, md5 and sha1 are not permitted, as signed"
" wheel files rely on the strong hashes in RECORD to validate the "
"integrity of the archive."
msgstr ""

#: ../../pep-0491.txt:257
msgid "PEP 376's INSTALLER and REQUESTED are not included in the archive."
msgstr ""

#: ../../pep-0491.txt:258
msgid "RECORD.jws is used for digital signatures.  It is not mentioned in RECORD."
msgstr ""

#: ../../pep-0491.txt:260
msgid ""
"RECORD.p7s is allowed as a courtesy to anyone who would prefer to use "
"S/MIME signatures to secure their wheel files.  It is not mentioned in "
"RECORD."
msgstr ""

#: ../../pep-0491.txt:263
msgid ""
"During extraction, wheel installers verify all the hashes in RECORD "
"against the file contents.  Apart from RECORD and its signatures, "
"installation will fail if any file in the archive is not both mentioned "
"and correctly hashed in RECORD."
msgstr ""

#: ../../pep-0491.txt:269
msgid "The .data directory"
msgstr ""

#: ../../pep-0491.txt:271
msgid ""
"Any file that is not normally installed inside site-packages goes into "
"the .data directory, named as the .dist-info directory but with the "
".data/ extension::"
msgstr ""

#: ../../pep-0491.txt:279
msgid ""
"The .data directory contains subdirectories with the scripts, headers, "
"documentation and so forth from the distribution.  During installation "
"the contents of these subdirectories are moved onto their destination "
"paths."
msgstr ""

#: ../../pep-0491.txt:283
msgid ""
"If a subdirectory is not found in the install scheme, the installer "
"should emit a warning, and it should be installed at "
"``distribution-1.0.data/...`` as if the package was unpacked by a "
"standard unzip tool."
msgstr ""

#: ../../pep-0491.txt:288
msgid "Install paths"
msgstr ""

#: ../../pep-0491.txt:290
msgid ""
"In addition to the distutils install paths, wheel now includes the listed"
" categories based on GNU autotools.  This expanded scheme should help "
"installers to implement system policy, but installers may root each "
"category at any location."
msgstr ""

#: ../../pep-0491.txt:295
msgid ""
"A UNIX install scheme might map the categories to their installation "
"paths like this::"
msgstr ""

#: ../../pep-0491.txt:321
msgid ""
"If a package needs to find its files at runtime, it can request they be "
"written to a specified file or files by the installer *and* included in "
"those same files inside the archive itself, relative to their location "
"within the archive (so a wheel is still installed correctly if unpacked "
"with a standard unzip tool, or perhaps not unpacked at all)."
msgstr ""

#: ../../pep-0491.txt:328
msgid "If the ``WHEEL`` metadata contains these fields::"
msgstr ""

#: ../../pep-0491.txt:333
msgid ""
"Then the wheel installer, when it is about to unpack ``wheel/_paths.py`` "
"from the archive, replaces it with the actual paths used at install time."
"  The paths may be absolute or relative to the generated file."
msgstr ""

#: ../../pep-0491.txt:337
msgid ""
"If the filename ends with ``.py`` then a Python script is written.  The "
"script MUST be executed to get the paths, but it will probably look like "
"this::"
msgstr ""

#: ../../pep-0491.txt:348
msgid "If the filename ends with ``.json`` then a JSON document is written::"
msgstr ""

#: ../../pep-0491.txt:352
msgid ""
"Only the categories actually used by a particular wheel must be written "
"to this file."
msgstr ""

#: ../../pep-0491.txt:355
msgid ""
"These files are designed to be written to a location that can be found by"
" the installed package without introducing any dependency on a packaging "
"library."
msgstr ""

#: ../../pep-0491.txt:360
msgid "Signed wheel files"
msgstr ""

#: ../../pep-0491.txt:362
msgid ""
"Wheel files include an extended RECORD that enables digital signatures.  "
"PEP 376's RECORD is altered to include a secure hash "
"``digestname=urlsafe_b64encode_nopad(digest)`` (urlsafe base64 encoding "
"with no trailing = characters) as the second column instead of an md5sum."
"  All possible entries are hashed, including any generated files such as "
".pyc files, but not RECORD which cannot contain its own hash. For "
"example::"
msgstr ""

#: ../../pep-0491.txt:373
msgid ""
"The signature file(s) RECORD.jws and RECORD.p7s are not mentioned in "
"RECORD at all since they can only be added after RECORD is generated. "
"Every other file in the archive must have a correct hash in RECORD or the"
" installation will fail."
msgstr ""

#: ../../pep-0491.txt:378
msgid ""
"If JSON web signatures are used, one or more JSON Web Signature JSON "
"Serialization (JWS-JS) signatures is stored in a file RECORD.jws adjacent"
" to RECORD.  JWS is used to sign RECORD by including the SHA-256 hash of "
"RECORD as the signature's JSON payload::"
msgstr ""

#: ../../pep-0491.txt:385
msgid "(The hash value is the same format used in RECORD.)"
msgstr ""

#: ../../pep-0491.txt:387
msgid ""
"If RECORD.p7s is used, it must contain a detached S/MIME format signature"
" of RECORD."
msgstr ""

#: ../../pep-0491.txt:390
msgid ""
"A wheel installer is not required to understand digital signatures but "
"MUST verify the hashes in RECORD against the extracted file contents. "
"When the installer checks file hashes against RECORD, a separate "
"signature checker only needs to establish that RECORD matches the "
"signature."
msgstr ""

#: ../../pep-0491.txt:395
msgid "See"
msgstr ""

#: ../../pep-0491.txt:397
msgid "http://self-issued.info/docs/draft-ietf-jose-json-web-signature.html"
msgstr ""

#: ../../pep-0491.txt:398
msgid "http://self-issued.info/docs/draft-jones-jose-jws-json-serialization.html"
msgstr ""

#: ../../pep-0491.txt:399
msgid "http://self-issued.info/docs/draft-ietf-jose-json-web-key.html"
msgstr ""

#: ../../pep-0491.txt:400
msgid "http://self-issued.info/docs/draft-jones-jose-json-private-key.html"
msgstr ""

#: ../../pep-0491.txt:404
msgid "Comparison to .egg"
msgstr ""

#: ../../pep-0491.txt:406
msgid ""
"Wheel is an installation format; egg is importable.  Wheel archives do "
"not need to include .pyc and are less tied to a specific Python version "
"or implementation. Wheel can install (pure Python) packages built with "
"previous versions of Python so you don't always have to wait for the "
"packager to catch up."
msgstr ""

#: ../../pep-0491.txt:411
msgid ""
"Wheel uses .dist-info directories; egg uses .egg-info.  Wheel is "
"compatible with the new world of Python packaging and the new concepts it"
" brings."
msgstr ""

#: ../../pep-0491.txt:414
msgid ""
"Wheel has a richer file naming convention for today's multi-"
"implementation world.  A single wheel archive can indicate its "
"compatibility with a number of Python language versions and "
"implementations, ABIs, and system architectures.  Historically the ABI "
"has been specific to a CPython release, wheel is ready for the stable "
"ABI."
msgstr ""

#: ../../pep-0491.txt:420
msgid ""
"Wheel is lossless.  The first wheel implementation bdist_wheel always "
"generates egg-info, and then converts it to a .whl.  It is also possible "
"to convert existing eggs and bdist_wininst distributions."
msgstr ""

#: ../../pep-0491.txt:424
msgid ""
"Wheel is versioned.  Every wheel file contains the version of the wheel "
"specification and the implementation that packaged it. Hopefully the next"
" migration can simply be to Wheel 2.0."
msgstr ""

#: ../../pep-0491.txt:427
msgid "Wheel is a reference to the other Python."
msgstr ""

#: ../../pep-0491.txt:431
msgid "FAQ"
msgstr ""

#: ../../pep-0491.txt:435
msgid "Wheel defines a .data directory.  Should I put all my data there?"
msgstr ""

#: ../../pep-0491.txt:437
msgid ""
"This specification does not have an opinion on how you should organize "
"your code.  The .data directory is just a place for any files that are "
"not normally installed inside ``site-packages`` or on the PYTHONPATH. In "
"other words, you may continue to use ``pkgutil.get_data(package, "
"resource)`` even though *those* files will usually not be distributed in "
"*wheel's* ``.data`` directory."
msgstr ""

#: ../../pep-0491.txt:446
msgid "Why does wheel include attached signatures?"
msgstr ""

#: ../../pep-0491.txt:448
msgid ""
"Attached signatures are more convenient than detached signatures because "
"they travel with the archive.  Since only the individual files are "
"signed, the archive can be recompressed without invalidating the "
"signature or individual files can be verified without having to download "
"the whole archive."
msgstr ""

#: ../../pep-0491.txt:456
msgid "Why does wheel allow JWS signatures?"
msgstr ""

#: ../../pep-0491.txt:458
msgid ""
"The JOSE specifications of which JWS is a part are designed to be easy to"
" implement, a feature that is also one of wheel's primary design goals.  "
"JWS yields a useful, concise pure-Python implementation."
msgstr ""

#: ../../pep-0491.txt:464
msgid "Why does wheel also allow S/MIME signatures?"
msgstr ""

#: ../../pep-0491.txt:466
msgid ""
"S/MIME signatures are allowed for users who need or want to use existing "
"public key infrastructure with wheel."
msgstr ""

#: ../../pep-0491.txt:469
msgid ""
"Signed packages are only a basic building block in a secure package "
"update system.  Wheel only provides the building block."
msgstr ""

#: ../../pep-0491.txt:474
msgid "What's the deal with \"purelib\" vs. \"platlib\"?"
msgstr ""

#: ../../pep-0491.txt:476
msgid ""
"Wheel preserves the \"purelib\" vs. \"platlib\" distinction, which is "
"significant on some platforms. For example, Fedora installs pure Python "
"packages to '/usr/lib/pythonX.Y/site-packages' and platform dependent "
"packages to '/usr/lib64/pythonX.Y/site-packages'."
msgstr ""

#: ../../pep-0491.txt:481
msgid ""
"A wheel with \"Root-Is-Purelib: false\" with all its files in "
"``{name}-{version}.data/purelib`` is equivalent to a wheel with \"Root-"
"Is-Purelib: true\" with those same files in the root, and it is legal to "
"have files in both the \"purelib\" and \"platlib\" categories."
msgstr ""

#: ../../pep-0491.txt:486
msgid ""
"In practice a wheel should have only one of \"purelib\" or \"platlib\" "
"depending on whether it is pure Python or not and those files should be "
"at the root with the appropriate setting given for \"Root-is-purelib\"."
msgstr ""

#: ../../pep-0491.txt:492
msgid "Is it possible to import Python code directly from a wheel file?"
msgstr ""

#: ../../pep-0491.txt:494
msgid ""
"Technically, due to the combination of supporting installation via simple"
" extraction and using an archive format that is compatible with "
"``zipimport``, a subset of wheel files *do* support being placed directly"
" on ``sys.path``. However, while this behaviour is a natural consequence "
"of the format design, actually relying on it is generally discouraged."
msgstr ""

#: ../../pep-0491.txt:500
msgid ""
"Firstly, wheel *is* designed primarily as a distribution format, so "
"skipping the installation step also means deliberately avoiding any "
"reliance on features that assume full installation (such as being able to"
" use standard tools like ``pip`` and ``virtualenv`` to capture and manage"
" dependencies in a way that can be properly tracked for auditing and "
"security update purposes, or integrating fully with the standard build "
"machinery for C extensions by publishing header files in the appropriate "
"place)."
msgstr ""

#: ../../pep-0491.txt:509
msgid ""
"Secondly, while some Python software is written to support running "
"directly from a zip archive, it is still common for code to be written "
"assuming it has been fully installed. When that assumption is broken by "
"trying to run the software from a zip archive, the failures can often be "
"obscure and hard to diagnose (especially when they occur in third party "
"libraries). The two most common sources of problems with this are the "
"fact that importing C extensions from a zip archive is *not* supported by"
" CPython (since doing so is not supported directly by the dynamic loading"
" machinery on any platform) and that when running from a zip archive the "
"``__file__`` attribute no longer refers to an ordinary filesystem path, "
"but to a combination path that includes both the location of the zip "
"archive on the filesystem and the relative path to the module inside the "
"archive. Even when software correctly uses the abstract resource APIs "
"internally, interfacing with external components may still require the "
"availability of an actual on-disk file."
msgstr ""

#: ../../pep-0491.txt:526
msgid ""
"Like metaclasses, monkeypatching and metapath importers, if you're not "
"already sure you need to take advantage of this feature, you almost "
"certainly don't need it. If you *do* decide to use it anyway, be aware "
"that many projects will require a failure to be reproduced with a fully "
"installed package before accepting it as a genuine bug."
msgstr ""

#: ../../pep-0491.txt:534
msgid "References"
msgstr ""

#: ../../pep-0491.txt:536
msgid ""
"PEP acceptance (https://mail.python.org/pipermail/python-"
"dev/2013-February/124103.html)"
msgstr ""

#: ../../pep-0491.txt:541
msgid "Appendix"
msgstr ""

#: ../../pep-0491.txt:543
msgid "Example urlsafe-base64-nopad implementation::"
msgstr ""

#: ../../pep-0491.txt:557
msgid "Copyright"
msgstr ""

#: ../../pep-0491.txt:559
msgid "This document has been placed into the public domain."
msgstr ""

