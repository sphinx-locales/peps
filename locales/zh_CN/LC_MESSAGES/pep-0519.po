# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0519.txt
msgid "PEP"
msgstr ""

#: ../../pep-0519.txt:1
msgid "519"
msgstr ""

#: ../../pep-0519.txt
msgid "Title"
msgstr ""

#: ../../pep-0519.txt:2
msgid "Adding a file system path protocol"
msgstr ""

#: ../../pep-0519.txt
msgid "Author"
msgstr ""

#: ../../pep-0519.txt:5
msgid "Brett Cannon <brett@python.org>, Koos Zevenhoven <k7hoven@gmail.com>"
msgstr ""

#: ../../pep-0519.txt
msgid "Status"
msgstr ""

#: ../../pep-0519.txt:7
msgid "Final"
msgstr ""

#: ../../pep-0519.txt
msgid "Type"
msgstr ""

#: ../../pep-0519.txt:8
msgid "Standards Track"
msgstr ""

#: ../../pep-0519.txt
msgid "Created"
msgstr ""

#: ../../pep-0519.txt:10
msgid "11-May-2016"
msgstr ""

#: ../../pep-0519.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0519.txt:11
msgid "3.6"
msgstr ""

#: ../../pep-0519.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0519.txt:12
msgid "11-May-2016, 12-May-2016, 13-May-2016"
msgstr ""

#: ../../pep-0519.txt
msgid "Resolution"
msgstr ""

#: ../../pep-0519.txt:15
msgid "https://mail.python.org/pipermail/python-dev/2016-May/144646.html"
msgstr ""

#: ../../pep-0519.txt:19
msgid "Abstract"
msgstr ""

#: ../../pep-0519.txt:21
msgid ""
"This PEP proposes a protocol for classes which represent a file system "
"path to be able to provide a ``str`` or ``bytes`` representation. Changes"
" to Python's standard library are also proposed to utilize this protocol "
"where appropriate to facilitate the use of path objects where "
"historically only ``str`` and/or ``bytes`` file system paths are "
"accepted. The goal is to facilitate the migration of users towards rich "
"path objects while providing an easy way to work with code expecting "
"``str`` or ``bytes``."
msgstr ""

#: ../../pep-0519.txt:32
msgid "Rationale"
msgstr ""

#: ../../pep-0519.txt:34
msgid ""
"Historically in Python, file system paths have been represented as "
"strings or bytes. This choice of representation has stemmed from C's own "
"decision to represent file system paths as ``const char *`` [#libc-"
"open]_. While that is a totally serviceable format to use for file system"
" paths, it's not necessarily optimal. At issue is the fact that while all"
" file system paths can be represented as strings or bytes, not all "
"strings or bytes represent a file system path. This can lead to issues "
"where any e.g. string duck-types to a file system path whether it "
"actually represents a path or not."
msgstr ""

#: ../../pep-0519.txt:44
msgid ""
"To help elevate the representation of file system paths from their "
"representation as strings and bytes to a richer object representation, "
"the pathlib module [#pathlib]_ was provisionally introduced in Python 3.4"
" through PEP 428. While considered by some as an improvement over strings"
" and bytes for file system paths, it has suffered from a lack of "
"adoption. Typically the key issue listed for the low adoption rate has "
"been the lack of support in the standard library. This lack of support "
"required users of pathlib to manually convert path objects to strings by "
"calling ``str(path)`` which many found error-prone."
msgstr ""

#: ../../pep-0519.txt:54
msgid ""
"One issue in converting path objects to strings comes from the fact that "
"the only generic way to get a string representation of the path was to "
"pass the object to ``str()``. This can pose a problem when done blindly "
"as nearly all Python objects have some string representation whether they"
" are a path or not, e.g. ``str(None)`` will give a result that "
"``builtins.open()`` [#builtins-open]_ will happily use to create a new "
"file."
msgstr ""

#: ../../pep-0519.txt:63
msgid ""
"Exacerbating this whole situation is the ``DirEntry`` object [#os-"
"direntry]_. While path objects have a representation that can be "
"extracted using ``str()``, ``DirEntry`` objects expose a ``path`` "
"attribute instead. Having no common interface between path objects, "
"``DirEntry``, and any other third-party path library has become an issue."
" A solution that allows any path-representing object to declare that it "
"is a path and a way to extract a low-level representation that all path "
"objects could support is desired."
msgstr ""

#: ../../pep-0519.txt:73
msgid ""
"This PEP then proposes to introduce a new protocol to be followed by "
"objects which represent file system paths. Providing a protocol allows "
"for explicit signaling of what objects represent file system paths as "
"well as a way to extract a lower-level representation that can be used "
"with older APIs which only support strings or bytes."
msgstr ""

#: ../../pep-0519.txt:79
msgid ""
"Discussions regarding path objects that led to this PEP can be found in "
"multiple threads on the python-ideas mailing list archive [#python-ideas-"
"archive]_ for the months of March and April 2016 and on the python-dev "
"mailing list archives [#python-dev-archive]_ during April 2016."
msgstr ""

#: ../../pep-0519.txt:87
msgid "Proposal"
msgstr ""

#: ../../pep-0519.txt:89
msgid ""
"This proposal is split into two parts. One part is the proposal of a "
"protocol for objects to declare and provide support for exposing a file "
"system path representation. The other part deals with changes to Python's"
" standard library to support the new protocol. These changes will also "
"lead to the pathlib module dropping its provisional status."
msgstr ""

#: ../../pep-0519.txt:96
msgid "Protocol"
msgstr ""

#: ../../pep-0519.txt:98
msgid ""
"The following abstract base class defines the protocol for an object to "
"be considered a path object::"
msgstr ""

#: ../../pep-0519.txt:115
msgid ""
"Objects representing file system paths will implement the "
"``__fspath__()`` method which will return the ``str`` or ``bytes`` "
"representation of the path. The ``str`` representation is the preferred "
"low-level path representation as it is human-readable and what people "
"historically represent paths as."
msgstr ""

#: ../../pep-0519.txt:123
msgid "Standard library changes"
msgstr ""

#: ../../pep-0519.txt:125
msgid ""
"It is expected that most APIs in Python's standard library that currently"
" accept a file system path will be updated appropriately to accept path "
"objects (whether that requires code or simply an update to documentation "
"will vary). The modules mentioned below, though, deserve specific details"
" as they have either fundamental changes that empower the ability to use "
"path objects, or entail additions/removal of APIs."
msgstr ""

#: ../../pep-0519.txt:135
msgid "builtins"
msgstr ""

#: ../../pep-0519.txt:137
msgid ""
"``open()`` [#builtins-open]_ will be updated to accept path objects as "
"well as continue to accept ``str`` and ``bytes``."
msgstr ""

#: ../../pep-0519.txt:142
msgid "os"
msgstr ""

#: ../../pep-0519.txt:144
msgid "The ``fspath()`` function will be added with the following semantics::"
msgstr ""

#: ../../pep-0519.txt:178
msgid ""
"The ``os.fsencode()`` [#os-fsencode]_ and ``os.fsdecode()`` [#os-"
"fsdecode]_ functions will be updated to accept path objects. As both "
"functions coerce their arguments to ``bytes`` and ``str``, respectively, "
"they will be updated to call ``__fspath__()`` if present to convert the "
"path object to a ``str`` or ``bytes`` representation, and then perform "
"their appropriate coercion operations as if the return value from "
"``__fspath__()`` had been the original argument to the coercion function "
"in question."
msgstr ""

#: ../../pep-0519.txt:187
msgid ""
"The addition of ``os.fspath()``, the updates to "
"``os.fsencode()``/``os.fsdecode()``, and the current semantics of "
"``pathlib.PurePath`` provide the semantics necessary to get the path "
"representation one prefers. For a path object, "
"``pathlib.PurePath``/``Path`` can be used. To obtain the ``str`` or "
"``bytes`` representation without any coercion, then ``os.fspath()`` can "
"be used. If a ``str`` is desired and the encoding of ``bytes`` should be "
"assumed to be the default file system encoding, then ``os.fsdecode()`` "
"should be used. If a ``bytes`` representation is desired and any strings "
"should be encoded using the default file system encoding, then "
"``os.fsencode()`` is used. This PEP recommends using path objects when "
"possible and falling back to string paths as necessary and using "
"``bytes`` as a last resort."
msgstr ""

#: ../../pep-0519.txt:201
msgid ""
"Another way to view this is as a hierarchy of file system path "
"representations (highest- to lowest-level): path → str → bytes. The "
"functions and classes under discussion can all accept objects on the same"
" level of the hierarchy, but they vary in whether they promote or demote "
"objects to another level. The ``pathlib.PurePath`` class can promote a "
"``str`` to a path object. The ``os.fspath()`` function can demote a path "
"object to a ``str`` or ``bytes`` instance, depending on what "
"``__fspath__()`` returns. The ``os.fsdecode()`` function will demote a "
"path object to a string or promote a ``bytes`` object to a ``str``. The "
"``os.fsencode()`` function will demote a path or string object to "
"``bytes``. There is no function that provides a way to demote a path "
"object directly to ``bytes`` while bypassing string demotion."
msgstr ""

#: ../../pep-0519.txt:215
msgid ""
"The ``DirEntry`` object [#os-direntry]_ will gain an ``__fspath__()`` "
"method. It will return the same value as currently found on the ``path`` "
"attribute of ``DirEntry`` instances."
msgstr ""

#: ../../pep-0519.txt:219
msgid ""
"The Protocol_ ABC will be added to the ``os`` module under the name "
"``os.PathLike``."
msgstr ""

#: ../../pep-0519.txt:224
msgid "os.path"
msgstr ""

#: ../../pep-0519.txt:226
msgid ""
"The various path-manipulation functions of ``os.path`` [#os-path]_ will "
"be updated to accept path objects. For polymorphic functions that accept "
"both bytes and strings, they will be updated to simply use "
"``os.fspath()``."
msgstr ""

#: ../../pep-0519.txt:231
msgid ""
"During the discussions leading up to this PEP it was suggested that "
"``os.path`` not be updated using an \"explicit is better than implicit\" "
"argument. The thinking was that since ``__fspath__()`` is polymorphic "
"itself it may be better to have code working with ``os.path`` extract the"
" path representation from path objects explicitly. There is also the "
"consideration that adding support this deep into the low-level OS APIs "
"will lead to code magically supporting path objects without requiring any"
" documentation updated, leading to potential complaints when it doesn't "
"work, unbeknownst to the project author."
msgstr ""

#: ../../pep-0519.txt:241
msgid ""
"But it is the view of this PEP that \"practicality beats purity\" in this"
" instance. To help facilitate the transition to supporting path objects, "
"it is better to make the transition as easy as possible than to worry "
"about unexpected/undocumented duck typing support for path objects by "
"projects."
msgstr ""

#: ../../pep-0519.txt:247
msgid ""
"There has also been the suggestion that ``os.path`` functions could be "
"used in a tight loop and the overhead of checking or calling "
"``__fspath__()`` would be too costly. In this scenario only path-"
"consuming APIs would be directly updated and path-manipulating APIs like "
"the ones in ``os.path`` would go unmodified. This would require library "
"authors to update their code to support path objects if they performed "
"any path manipulations, but if the library code passed the path straight "
"through then the library wouldn't need to be updated. It is the view of "
"this PEP and Guido, though, that this is an unnecessary worry and that "
"performance will still be acceptable."
msgstr ""

#: ../../pep-0519.txt:260
msgid "pathlib"
msgstr ""

#: ../../pep-0519.txt:262
msgid ""
"The constructor for ``pathlib.PurePath`` and ``pathlib.Path`` will be "
"updated to accept ``PathLike`` objects. Both ``PurePath`` and ``Path`` "
"will continue to not accept ``bytes`` path representations, and so if "
"``__fspath__()`` returns ``bytes`` it will raise an exception."
msgstr ""

#: ../../pep-0519.txt:267
msgid ""
"The ``path`` attribute will be removed as this PEP makes it redundant (it"
" has not been included in any released version of Python and so is not a "
"backwards-compatibility concern)."
msgstr ""

#: ../../pep-0519.txt:273
msgid "C API"
msgstr ""

#: ../../pep-0519.txt:275
msgid "The C API will gain an equivalent function to ``os.fspath()``::"
msgstr ""

#: ../../pep-0519.txt:321
msgid "Backwards compatibility"
msgstr ""

#: ../../pep-0519.txt:323
msgid ""
"There are no explicit backwards-compatibility concerns. Unless an object "
"incidentally already defines a ``__fspath__()`` method there is no reason"
" to expect the pre-existing code to break or expect to have its semantics"
" implicitly changed."
msgstr ""

#: ../../pep-0519.txt:328
msgid ""
"Libraries wishing to support path objects and a version of Python prior "
"to Python 3.6 and the existence of ``os.fspath()`` can use the idiom of "
"``path.__fspath__() if hasattr(path, \"__fspath__\") else path``."
msgstr ""

#: ../../pep-0519.txt:335
msgid "Implementation"
msgstr ""

#: ../../pep-0519.txt:337
msgid ""
"This is the task list for what this PEP proposes to be changed in Python "
"3.6:"
msgstr ""

#: ../../pep-0519.txt:340
msgid ""
"Remove the ``path`` attribute from pathlib (`done "
"<http://bugs.python.org/issue22570>`__)"
msgstr ""

#: ../../pep-0519.txt:342
msgid ""
"Remove the provisional status of pathlib (`done "
"<https://hg.python.org/lookup/a5a013ca5687>`__)"
msgstr ""

#: ../../pep-0519.txt:344
msgid ""
"Add ``os.PathLike`` (`code <https://hg.python.org/lookup/e672cf63d08a>`__"
" and `docs <http://hg.python.org/lookup/6239673d5e1d>`__ done)"
msgstr ""

#: ../../pep-0519.txt:347
msgid ""
"Add ``PyOS_FSPath()`` (`code "
"<https://hg.python.org/lookup/780cbe18082e>`__ and `docs "
"<http://hg.python.org/lookup/cec1f00c538d>`__ done)"
msgstr ""

#: ../../pep-0519.txt:350
msgid ""
"Add ``os.fspath()`` (`done <done "
"<https://hg.python.org/lookup/780cbe18082e>`__)"
msgstr ""

#: ../../pep-0519.txt:352
msgid ""
"Update ``os.fsencode()`` (`done "
"<https://hg.python.org/lookup/00991aa5fdb5>`__)"
msgstr ""

#: ../../pep-0519.txt:354
msgid ""
"Update ``os.fsdecode()`` (`done "
"<https://hg.python.org/lookup/00991aa5fdb5>`__)"
msgstr ""

#: ../../pep-0519.txt:356
msgid ""
"Update ``pathlib.PurePath`` and ``pathlib.Path`` (`done "
"<https://hg.python.org/lookup/a5a013ca5687>`__)"
msgstr ""

#: ../../pep-0519.txt:359
msgid "Add ``__fspath__()``"
msgstr ""

#: ../../pep-0519.txt:360
msgid "Add ``os.PathLike`` support to the constructors"
msgstr ""

#: ../../pep-0519.txt:362
msgid ""
"Add ``__fspath__()`` to ``DirEntry`` (`done "
"<https://hg.python.org/lookup/5a62d682636e>`__)"
msgstr ""

#: ../../pep-0519.txt:365
msgid ""
"Update ``builtins.open()`` (`done "
"<https://hg.python.org/lookup/254125a265d2>`__)"
msgstr ""

#: ../../pep-0519.txt:367
msgid ""
"Update ``os.path`` (`done "
"<https://hg.python.org/cpython/rev/b64f83d6ff24>`__)"
msgstr ""

#: ../../pep-0519.txt:369
msgid ""
"Add a `glossary <https://docs.python.org/3.6/glossary.html>`__ entry for "
"\"path-like\" (`done <https://hg.python.org/lookup/9c57178f13dc>`__)"
msgstr ""

#: ../../pep-0519.txt:371
msgid ""
"Update `\"What's New\" <https://docs.python.org/3.6/whatsnew/3.6.html>`_ "
"(`done <https://hg.python.org/cpython/rev/95361959d451>`__)"
msgstr ""

#: ../../pep-0519.txt:376
msgid "Rejected Ideas"
msgstr ""

#: ../../pep-0519.txt:379
msgid "Other names for the protocol's method"
msgstr ""

#: ../../pep-0519.txt:381
msgid ""
"Various names were proposed during discussions leading to this PEP, "
"including ``__path__``, ``__pathname__``, and ``__fspathname__``. In the "
"end people seemed to gravitate towards ``__fspath__`` for being "
"unambiguous without being unnecessarily long."
msgstr ""

#: ../../pep-0519.txt:388
msgid "Separate str/bytes methods"
msgstr ""

#: ../../pep-0519.txt:390
msgid ""
"At one point it was suggested that ``__fspath__()`` only return strings "
"and another method named ``__fspathb__()`` be introduced to return bytes."
" The thinking is that by making ``__fspath__()`` not be polymorphic it "
"could make dealing with the potential string or bytes representations "
"easier. But the general consensus was that returning bytes will more than"
" likely be rare and that the various functions in the os module are the "
"better abstraction to promote over direct calls to ``__fspath__()``."
msgstr ""

#: ../../pep-0519.txt:401
msgid "Providing a ``path`` attribute"
msgstr ""

#: ../../pep-0519.txt:403
msgid ""
"To help deal with the issue of ``pathlib.PurePath`` not inheriting from "
"``str``, originally it was proposed to introduce a ``path`` attribute to "
"mirror what ``os.DirEntry`` provides. In the end, though, it was "
"determined that a protocol would provide the same result while not "
"directly exposing an API that most people will never need to interact "
"with directly."
msgstr ""

#: ../../pep-0519.txt:412
msgid "Have ``__fspath__()`` only return strings"
msgstr ""

#: ../../pep-0519.txt:414
msgid ""
"Much of the discussion that led to this PEP revolved around whether "
"``__fspath__()`` should be polymorphic and return ``bytes`` as well as "
"``str`` or only return ``str``. The general sentiment for this view was "
"that ``bytes`` are difficult to work with due to their inherent lack of "
"information about their encoding and PEP 383 makes it possible to "
"represent all file system paths using ``str`` with the "
"``surrogateescape`` handler. Thus, it would be better to forcibly promote"
" the use of ``str`` as the low-level path representation for high-level "
"path objects."
msgstr ""

#: ../../pep-0519.txt:424
msgid ""
"In the end, it was decided that using ``bytes`` to represent paths is "
"simply not going to go away and thus they should be supported to some "
"degree. The hope is that people will gravitate towards path objects like "
"pathlib and that will move people away from operating directly with "
"``bytes``."
msgstr ""

#: ../../pep-0519.txt:432
msgid "A generic string encoding mechanism"
msgstr ""

#: ../../pep-0519.txt:434
msgid ""
"At one point there was a discussion of developing a generic mechanism to "
"extract a string representation of an object that had semantic meaning "
"(``__str__()`` does not necessarily return anything of semantic "
"significance beyond what may be helpful for debugging). In the end, it "
"was deemed to lack a motivating need beyond the one this PEP is trying to"
" solve in a specific fashion."
msgstr ""

#: ../../pep-0519.txt:443
msgid "Have __fspath__ be an attribute"
msgstr ""

#: ../../pep-0519.txt:445
msgid ""
"It was briefly considered to have ``__fspath__`` be an attribute instead "
"of a method. This was rejected for two reasons. One, historically "
"protocols have been implemented as \"magic methods\" and not \"magic "
"methods and attributes\". Two, there is no guarantee that the lower-level"
" representation of a path object will be pre-computed, potentially "
"misleading users that there was no expensive computation behind the "
"scenes in case the attribute was implemented as a property."
msgstr ""

#: ../../pep-0519.txt:453
msgid ""
"This also indirectly ties into the idea of introducing a ``path`` "
"attribute to accomplish the same thing. This idea has an added issue, "
"though, of accidentally having any object with a ``path`` attribute meet "
"the protocol's duck typing. Introducing a new magic method for the "
"protocol helpfully avoids any accidental opting into the protocol."
msgstr ""

#: ../../pep-0519.txt:461
msgid "Provide specific type hinting support"
msgstr ""

#: ../../pep-0519.txt:463
msgid ""
"There was some consideration to providing a generic ``typing.PathLike`` "
"class which would allow for e.g. ``typing.PathLike[str]`` to specify a "
"type hint for a path object which returned a string representation. While"
" potentially beneficial, the usefulness was deemed too small to bother "
"adding the type hint class."
msgstr ""

#: ../../pep-0519.txt:469
msgid ""
"This also removed any desire to have a class in the ``typing`` module "
"which represented the union of all acceptable path-representing types as "
"that can be represented with ``typing.Union[str, bytes, os.PathLike]`` "
"easily enough and the hope is users will slowly gravitate to path objects"
" only."
msgstr ""

#: ../../pep-0519.txt:477
msgid "Provide ``os.fspathb()``"
msgstr ""

#: ../../pep-0519.txt:479
msgid ""
"It was suggested that to mirror the structure of e.g. "
"``os.getcwd()``/``os.getcwdb()``, that ``os.fspath()`` only return "
"``str`` and that another function named ``os.fspathb()`` be introduced "
"that only returned ``bytes``. This was rejected as the purposes of the "
"``*b()`` functions are tied to querying the file system where there is a "
"need to get the raw bytes back. As this PEP does not work directly with "
"data on a file system (but which *may* be), the view was taken this "
"distinction is unnecessary. It's also believed that the need for only "
"bytes will not be common enough to need to support in such a specific "
"manner as ``os.fsencode()`` will provide similar functionality."
msgstr ""

#: ../../pep-0519.txt:493
msgid "Call ``__fspath__()`` off of the instance"
msgstr ""

#: ../../pep-0519.txt:495
msgid ""
"An earlier draft of this PEP had ``os.fspath()`` calling "
"``path.__fspath__()`` instead of ``type(path).__fspath__(path)``. The "
"changed to be consistent with how other magic methods in Python are "
"resolved."
msgstr ""

#: ../../pep-0519.txt:502
msgid "Acknowledgements"
msgstr ""

#: ../../pep-0519.txt:504
msgid ""
"Thanks to everyone who participated in the various discussions related to"
" this PEP that spanned both python-ideas and python-dev. Special thanks "
"to Stephen Turnbull for direct feedback on early drafts of this PEP. More"
" special thanks to Koos Zevenhoven and Ethan Furman for not only feedback"
" on early drafts of this PEP but also helping to drive the overall "
"discussion on this topic across the two mailing lists."
msgstr ""

#: ../../pep-0519.txt:513
msgid "References"
msgstr ""

#: ../../pep-0519.txt:515
msgid ""
"The python-ideas mailing list archive (https://mail.python.org/pipermail"
"/python-ideas/)"
msgstr ""

#: ../../pep-0519.txt:518
msgid ""
"The python-dev mailing list archive (https://mail.python.org/pipermail"
"/python-dev/)"
msgstr ""

#: ../../pep-0519.txt:521
msgid ""
"``open()`` documentation for the C standard library "
"(http://www.gnu.org/software/libc/manual/html_node/Opening-and-Closing-"
"Files.html)"
msgstr ""

#: ../../pep-0519.txt:524
msgid ""
"The ``pathlib`` module (https://docs.python.org/3/library/pathlib.html"
"#module-pathlib)"
msgstr ""

#: ../../pep-0519.txt:527
msgid ""
"The ``builtins.open()`` function "
"(https://docs.python.org/3/library/functions.html#open)"
msgstr ""

#: ../../pep-0519.txt:530
msgid ""
"The ``os.fsencode()`` function "
"(https://docs.python.org/3/library/os.html#os.fsencode)"
msgstr ""

#: ../../pep-0519.txt:533
msgid ""
"The ``os.fsdecode()`` function "
"(https://docs.python.org/3/library/os.html#os.fsdecode)"
msgstr ""

#: ../../pep-0519.txt:536
msgid ""
"The ``os.DirEntry`` class "
"(https://docs.python.org/3/library/os.html#os.DirEntry)"
msgstr ""

#: ../../pep-0519.txt:539
msgid ""
"The ``os.path`` module (https://docs.python.org/3/library/os.path.html"
"#module-os.path)"
msgstr ""

#: ../../pep-0519.txt:544
msgid "Copyright"
msgstr ""

#: ../../pep-0519.txt:546
msgid "This document has been placed in the public domain."
msgstr ""

