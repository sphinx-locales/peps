# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0643.rst
msgid "PEP"
msgstr ""

#: ../../pep-0643.rst:1
msgid "643"
msgstr ""

#: ../../pep-0643.rst
msgid "Title"
msgstr ""

#: ../../pep-0643.rst:2
msgid "Metadata for Package Source Distributions"
msgstr ""

#: ../../pep-0643.rst
msgid "Author"
msgstr ""

#: ../../pep-0643.rst:3
msgid "Paul Moore <p.f.moore@gmail.com>"
msgstr ""

#: ../../pep-0643.rst
msgid "BDFL-Delegate"
msgstr ""

#: ../../pep-0643.rst:4
msgid "Paul Ganssle <paul@ganssle.io>"
msgstr ""

#: ../../pep-0643.rst
msgid "Discussions-To"
msgstr ""

#: ../../pep-0643.rst:5
msgid ""
"https://discuss.python.org/t/pep-643-metadata-for-package-source-"
"distributions/5577"
msgstr ""

#: ../../pep-0643.rst
msgid "Status"
msgstr ""

#: ../../pep-0643.rst:6
msgid "Accepted"
msgstr ""

#: ../../pep-0643.rst
msgid "Type"
msgstr ""

#: ../../pep-0643.rst:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0643.rst
msgid "Created"
msgstr ""

#: ../../pep-0643.rst:9
msgid "24-Oct-2020"
msgstr ""

#: ../../pep-0643.rst
msgid "Post-History"
msgstr ""

#: ../../pep-0643.rst:10
msgid "24-Oct-2020, 01-Nov-2020, 02-Nov-2020, 14-Nov-2020"
msgstr ""

#: ../../pep-0643.rst
msgid "Resolution"
msgstr ""

#: ../../pep-0643.rst:11
msgid ""
"https://discuss.python.org/t/pep-643-metadata-for-package-source-"
"distributions/5577/53"
msgstr ""

#: ../../pep-0643.rst:15
msgid "Abstract"
msgstr ""

#: ../../pep-0643.rst:17
msgid ""
"Python package metadata is stored in the distribution file in a standard "
"format, defined in the `Core Metadata Specification`_. However, for "
"source distributions, while the format of the data is defined, there has "
"traditionally been a lot of inconsistency in what data is recorded in the"
" source distribution. See `here <https://discuss.python.org/t/why-isnt-"
"source-distribution-metadata-trustworthy-can-we-make-it-so/2620>`_ for a "
"discussion of this issue."
msgstr ""

#: ../../pep-0643.rst:25
msgid ""
"As a result, metadata consumers are unable to rely on the data available "
"from source distributions, and need to use the (costly) :pep:`517` build "
"mechanisms to extract medatata."
msgstr ""

#: ../../pep-0643.rst:29
msgid ""
"This PEP defines a standard that allows build backends to reliably store "
"package metadata in the source distribution, while still retaining the "
"necessary flexibility to handle metadata fields that have to be "
"calculated at build time."
msgstr ""

#: ../../pep-0643.rst:36
msgid "Motivation"
msgstr ""

#: ../../pep-0643.rst:38
msgid ""
"There are a number of issues with the way that metadata is currently "
"stored in source distributions:"
msgstr ""

#: ../../pep-0643.rst:41
msgid ""
"The details of how to store metadata, while standardised, are not easy to"
" find."
msgstr ""

#: ../../pep-0643.rst:43
msgid ""
"The specification requires an old metadata version, and has not been "
"updated in line with changes to the core metadata spec."
msgstr ""

#: ../../pep-0643.rst:45
msgid ""
"There is no way in the spec to distinguish between \"this field has been "
"omitted because its value will not be known until build time\" and \"this"
" field does not have a value\"."
msgstr ""

#: ../../pep-0643.rst:48
msgid ""
"The core metadata specification allows most fields to be optional, "
"meaning that the previous issue affects nearly every metadata field."
msgstr ""

#: ../../pep-0643.rst:51
msgid ""
"This PEP proposes an update to the metadata specification to allow "
"recording of fields which are expected to be \"filled in later\", and "
"updates the source distribution specification to clarify that backends "
"should record sdist metadata using that version of the spec (or later)."
msgstr ""

#: ../../pep-0643.rst:58
msgid "Rationale"
msgstr ""

#: ../../pep-0643.rst:60
msgid ""
"This PEP allows projects to define source distribution metadata values as"
" being \"dynamic\". In this context, saying that a field is \"dynamic\" "
"means that the value has not been fixed at the time that the source "
"distribution was generated. Dynamic values will be supplied by the build "
"backend at the time when the wheel is generated, and could depend on "
"details of the build environment."
msgstr ""

#: ../../pep-0643.rst:67
msgid ""
":pep:`621` has a similar concept, of \"dynamic\" values that will be "
"\"filled in later\", and so we choose to use the same term here by "
"analogy."
msgstr ""

#: ../../pep-0643.rst:73
msgid "Specification"
msgstr ""

#: ../../pep-0643.rst:75
msgid ""
"This PEP defines the relationship between metadata values specified in a "
"source distribution, and the corresponding values in wheels built from "
"it. It requires build backends to clearly mark any fields which will "
"*not* simply be copied unchanged from the sdist to the wheel."
msgstr ""

#: ../../pep-0643.rst:80
msgid ""
"In addition, this PEP makes the `PyPA Specifications`_ document the "
"canonical location for the specification of the source distribution "
"format (collecting the information in :pep:`517` and in this PEP)."
msgstr ""

#: ../../pep-0643.rst:84
msgid ""
"A new field, ``Dynamic``, will be added to the `Core Metadata "
"Specification`_. This field will be multiple use, and will be allowed to "
"contain the name of another core metadata field."
msgstr ""

#: ../../pep-0643.rst:88
msgid ""
"When found in the metadata of a source distribution, the following rules "
"apply:"
msgstr ""

#: ../../pep-0643.rst:91
msgid ""
"If a field is *not* marked as ``Dynamic``, then the value of the field in"
" any wheel built from the sdist MUST match the value in the sdist. If the"
" field is not in the sdist, and not marked as ``Dynamic``, then it MUST "
"NOT be present in the wheel."
msgstr ""

#: ../../pep-0643.rst:95
msgid ""
"If a field is marked as ``Dynamic``, it may contain any valid value in a "
"wheel built from the sdist (including not being present at all)."
msgstr ""

#: ../../pep-0643.rst:97
msgid ""
"Backends MUST NOT mark a field as ``Dynamic`` if they can determine that "
"it was generated from data that will not change at build time."
msgstr ""

#: ../../pep-0643.rst:100
msgid ""
"Backends MAY record the value they calculated for a field they mark as "
"``Dynamic`` in a source distribution. Consumers, however, MUST NOT treat "
"this value as canonical, but MAY use it as an hint about what the final "
"value in a wheel could be."
msgstr ""

#: ../../pep-0643.rst:105
msgid ""
"In any context other than a source distribution, if a field is marked as "
"``Dynamic``, that indicates that the value was generated at wheel build "
"time and may not match the value in the sdist (or in other builds of the "
"project). Backends are not required to record this information, though, "
"and consumers MUST NOT assume that the lack of a ``Dynamic`` marking has "
"any significance, except in a source distribution."
msgstr ""

#: ../../pep-0643.rst:112
msgid "The fields ``Name`` and ``Version`` MUST NOT be marked as ``Dynamic``."
msgstr ""

#: ../../pep-0643.rst:114
msgid ""
"As it adds a new metadata field, this PEP updates the core metadata "
"format to version 2.2."
msgstr ""

#: ../../pep-0643.rst:117
msgid ""
"Source distributions SHOULD use the latest version of the core metadata "
"specification that was available when they were created."
msgstr ""

#: ../../pep-0643.rst:120
msgid ""
"Build backends are strongly encouraged to only mark fields as ``Dynamic``"
" when absolutely necessary, and to encourage projects to avoid backend "
"features that require the use of ``Dynamic``. Projects should prefer to "
"use environment markers on static values to adapt to details of the "
"install location."
msgstr ""

#: ../../pep-0643.rst:128
msgid "Backwards Compatibility"
msgstr ""

#: ../../pep-0643.rst:130
msgid ""
"As this proposal increments the core metadata version, it is compatible "
"with existing source distributions, which will use an older metadata "
"version. Tools can determine whether a source distribution conforms to "
"this PEP by checking the metadata version."
msgstr ""

#: ../../pep-0643.rst:137
msgid "Security Implications"
msgstr ""

#: ../../pep-0643.rst:139
msgid ""
"As this specification is purely for the storage of data that is intended "
"to be publicly available, there are no security implications."
msgstr ""

#: ../../pep-0643.rst:144
msgid "How to Teach This"
msgstr ""

#: ../../pep-0643.rst:146
msgid ""
"This is a data storage format for project metadata, and so will not "
"typically be visible to end users. There is therefore no need to teach "
"users how to use the format. Developers wanting to reference the metadata"
" will be able to find the details in the `PyPA Specifications`_."
msgstr ""

#: ../../pep-0643.rst:153
msgid "Rejected Ideas"
msgstr ""

#: ../../pep-0643.rst:155
msgid ""
"Rather than marking fields as ``Dynamic``, fields should be assumed to be"
" dynamic unless explicitly marked as ``Static``."
msgstr ""

#: ../../pep-0643.rst:158
msgid ""
"This is logically equivalent to the current proposal, but it implies that"
" fields being dynamic is the norm. Packaging tools can be much more "
"efficient in the presence of metadata that is known to be static, so the "
"PEP chooses to make dynamic fields the exception, and require backends to"
" \"opt in\" to making a field dynamic."
msgstr ""

#: ../../pep-0643.rst:164
msgid ""
"In addition, if dynamic is the default, then in future, as more and more "
"metadata becomes static, metadata files will include an increasing number"
" of ``Static`` declarations."
msgstr ""

#: ../../pep-0643.rst:168
msgid ""
"Rather than having a ``Dynamic`` field, add a special value that "
"indicates that a field is \"not yet defined\"."
msgstr ""

#: ../../pep-0643.rst:171
msgid ""
"Again, this is logically equivalent to the current proposal. It makes "
"\"being dynamic\" an explicit choice, but requires a special value.  As "
"some fields can contain arbitrary text, choosing a such a value is "
"somewhat awkward (although likely not a problem in practice). There does "
"not seem to be enough benefit to this approach to make it worth using "
"instead of the proposed mechanism."
msgstr ""

#: ../../pep-0643.rst:178
msgid "Special handling of ``Requires-Python``."
msgstr ""

#: ../../pep-0643.rst:180
msgid ""
"Early drafts of the PEP needed special discussion of ``Requires-Python``,"
" because the lack of environment markers for this field meant that it "
"might be difficult to require it to be static. The final form of the PEP "
"no longer needs this, as the idea of a whitelist of fields allowed to be "
"dynamic was dropped."
msgstr ""

#: ../../pep-0643.rst:186
msgid ""
"Restrict the use of ``Dynamic`` to a minimal \"white list\" of permitted "
"fields."
msgstr ""

#: ../../pep-0643.rst:189
msgid ""
"This approach was likely to prove extremely difficult for setuptools to "
"implement in a backward compatible way, due to the dynamic nature of the "
"setuptools interface. Instead, the proposal now allows most fields to be "
"dynamic, but encourages backends to avoid dynamic values unless "
"essential."
msgstr ""

#: ../../pep-0643.rst:197
msgid "Open Issues"
msgstr ""

#: ../../pep-0643.rst:199
msgid "None"
msgstr ""

#: ../../pep-0643.rst:202
msgid "References"
msgstr ""

#: ../../pep-0643.rst:208
msgid "Copyright"
msgstr ""

#: ../../pep-0643.rst:210
msgid ""
"This document is placed in the public domain or under the "
"CC0-1.0-Universal license, whichever is more permissive."
msgstr ""

