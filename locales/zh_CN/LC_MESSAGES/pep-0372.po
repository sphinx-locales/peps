# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0372.txt
msgid "PEP"
msgstr ""

#: ../../pep-0372.txt:1
msgid "372"
msgstr ""

#: ../../pep-0372.txt
msgid "Title"
msgstr ""

#: ../../pep-0372.txt:2
msgid "Adding an ordered dictionary to collections"
msgstr ""

#: ../../pep-0372.txt
msgid "Author"
msgstr ""

#: ../../pep-0372.txt:5
msgid ""
"Armin Ronacher <armin.ronacher@active-4.com> Raymond Hettinger "
"<python@rcn.com>"
msgstr ""

#: ../../pep-0372.txt
msgid "Status"
msgstr ""

#: ../../pep-0372.txt:7
msgid "Final"
msgstr ""

#: ../../pep-0372.txt
msgid "Type"
msgstr ""

#: ../../pep-0372.txt:8
msgid "Standards Track"
msgstr ""

#: ../../pep-0372.txt
msgid "Created"
msgstr ""

#: ../../pep-0372.txt:10
msgid "15-Jun-2008"
msgstr ""

#: ../../pep-0372.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0372.txt:11
msgid "2.7, 3.1"
msgstr ""

#: ../../pep-0372.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0372.txt:16
msgid "Abstract"
msgstr ""

#: ../../pep-0372.txt:18
msgid ""
"This PEP proposes an ordered dictionary as a new data structure for the "
"``collections`` module, called \"OrderedDict\" in this PEP.  The proposed"
" API incorporates the experiences gained from working with similar "
"implementations that exist in various real-world applications and other "
"programming languages."
msgstr ""

#: ../../pep-0372.txt:26
msgid "Patch"
msgstr ""

#: ../../pep-0372.txt:28
msgid "A working Py3.1 patch including tests and documentation is at:"
msgstr ""

#: ../../pep-0372.txt:30 ../../pep-0372.txt:267
msgid "`OrderedDict patch <http://bugs.python.org/issue5397>`_"
msgstr ""

#: ../../pep-0372.txt:32
msgid "The check-in was in revisions: 70101 and 70102"
msgstr ""

#: ../../pep-0372.txt:35
msgid "Rationale"
msgstr ""

#: ../../pep-0372.txt:37
msgid ""
"In current Python versions, the widely used built-in dict type does not "
"specify an order for the key/value pairs stored.  This makes it hard to "
"use dictionaries as data storage for some specific use cases."
msgstr ""

#: ../../pep-0372.txt:41
msgid ""
"Some dynamic programming languages like PHP and Ruby 1.9 guarantee a "
"certain order on iteration.  In those languages, and existing Python "
"ordered-dict implementations, the ordering of items is defined by the "
"time of insertion of the key.  New keys are appended at the end, but keys"
" that are overwritten are not moved to the end."
msgstr ""

#: ../../pep-0372.txt:47
msgid "The following example shows the behavior for simple assignments:"
msgstr ""

#: ../../pep-0372.txt:55
msgid ""
"That the ordering is preserved makes an OrderedDict useful for a couple "
"of situations:"
msgstr ""

#: ../../pep-0372.txt:58
msgid ""
"XML/HTML processing libraries currently drop the ordering of attributes, "
"use a list instead of a dict which makes filtering cumbersome, or "
"implement their own ordered dictionary.  This affects ElementTree, "
"html5lib, Genshi and many more libraries."
msgstr ""

#: ../../pep-0372.txt:63
msgid ""
"There are many ordered dict implementations in various libraries and "
"applications, most of them subtly incompatible with each other. "
"Furthermore, subclassing dict is a non-trivial task and many "
"implementations don't override all the methods properly which can lead to"
" unexpected results."
msgstr ""

#: ../../pep-0372.txt:69
msgid ""
"Additionally, many ordered dicts are implemented in an inefficient way, "
"making many operations more complex then they have to be."
msgstr ""

#: ../../pep-0372.txt:72
msgid ""
"PEP 3115 allows metaclasses to change the mapping object used for the "
"class body.  An ordered dict could be used to create ordered member "
"declarations similar to C structs.  This could be useful, for example, "
"for future ``ctypes`` releases as well as ORMs that define database "
"tables as classes, like the one the Django framework ships. Django "
"currently uses an ugly hack to restore the ordering of members in "
"database models."
msgstr ""

#: ../../pep-0372.txt:80
msgid ""
"The RawConfigParser class accepts a ``dict_type`` argument that allows an"
" application to set the type of dictionary used internally. The "
"motivation for this addition was expressly to allow users to provide an "
"ordered dictionary. [1]_"
msgstr ""

#: ../../pep-0372.txt:85
msgid ""
"Code ported from other programming languages such as PHP often depends on"
" an ordered dict.  Having an implementation of an ordering-preserving "
"dictionary in the standard library could ease the transition and improve "
"the compatibility of different libraries."
msgstr ""

#: ../../pep-0372.txt:92
msgid "Ordered Dict API"
msgstr ""

#: ../../pep-0372.txt:94
msgid ""
"The ordered dict API would be mostly compatible with dict and existing "
"ordered dicts.  Note: this PEP refers to the 2.7 and 3.0 dictionary API "
"as described in collections.Mapping abstract base class."
msgstr ""

#: ../../pep-0372.txt:98
msgid ""
"The constructor and ``update()`` both accept iterables of tuples as well "
"as mappings like a dict does.  Unlike a regular dictionary, the insertion"
" order is preserved."
msgstr ""

#: ../../pep-0372.txt:107
msgid ""
"If ordered dicts are updated from regular dicts, the ordering of new keys"
" is of course undefined."
msgstr ""

#: ../../pep-0372.txt:110
msgid ""
"All iteration methods as well as ``keys()``, ``values()`` and ``items()``"
" return the values ordered by the time the key was first inserted:"
msgstr ""

#: ../../pep-0372.txt:122
msgid "New methods not available on dict:"
msgstr ""

#: ../../pep-0372.txt:126
msgid "``OrderedDict.__reversed__()``"
msgstr ""

#: ../../pep-0372.txt:125
msgid "Supports reverse iteration by key."
msgstr ""

#: ../../pep-0372.txt:129
msgid "Questions and Answers"
msgstr ""

#: ../../pep-0372.txt:131
msgid "What happens if an existing key is reassigned?"
msgstr ""

#: ../../pep-0372.txt:133
msgid ""
"The key is not moved but assigned a new value in place.  This is "
"consistent with existing implementations."
msgstr ""

#: ../../pep-0372.txt:136
msgid ""
"What happens if keys appear multiple times in the list passed to the "
"constructor?"
msgstr ""

#: ../../pep-0372.txt:139
msgid ""
"The same as for regular dicts -- the latter item overrides the former.  "
"This has the side-effect that the position of the first key is used "
"because only the value is actually overwritten::"
msgstr ""

#: ../../pep-0372.txt:146
msgid ""
"This behavior is consistent with existing implementations in Python, the "
"PHP array and the hashmap in Ruby 1.9."
msgstr ""

#: ../../pep-0372.txt:149
msgid "Is the ordered dict a dict subclass?  Why?"
msgstr ""

#: ../../pep-0372.txt:151
msgid ""
"Yes.  Like ``defaultdict``, an ordered dictionary `` subclasses ``dict``."
" Being a dict subclass make some of the methods faster (like "
"``__getitem__`` and ``__len__``).  More importantly, being a dict "
"subclass lets ordered dictionaries be usable with tools like json that "
"insist on having dict inputs by testing isinstance(d, dict)."
msgstr ""

#: ../../pep-0372.txt:157
msgid "Do any limitations arise from subclassing dict?"
msgstr ""

#: ../../pep-0372.txt:159
msgid ""
"Yes.  Since the API for dicts is different in Py2.x and Py3.x, the "
"OrderedDict API must also be different.  So, the Py2.7 version will need "
"to override iterkeys, itervalues, and iteritems."
msgstr ""

#: ../../pep-0372.txt:163
msgid "Does ``OrderedDict.popitem()`` return a particular key/value pair?"
msgstr ""

#: ../../pep-0372.txt:165
msgid ""
"Yes.  It pops-off the most recently inserted new key and its "
"corresponding value.  This corresponds to the usual LIFO behavior "
"exhibited by traditional push/pop pairs.  It is semantically equivalent "
"to ``k=list(od)[-1]; v=od[k]; del od[k]; return (k,v)``. The actual "
"implementation is more efficient and pops directly from a sorted list of "
"keys."
msgstr ""

#: ../../pep-0372.txt:172
msgid "Does OrderedDict support indexing, slicing, and whatnot?"
msgstr ""

#: ../../pep-0372.txt:174
msgid ""
"As a matter of fact, ``OrderedDict`` does not implement the ``Sequence`` "
"interface.  Rather, it is a ``MutableMapping`` that remembers the order "
"of key insertion.  The only sequence-like addition is support for "
"``reversed``."
msgstr ""

#: ../../pep-0372.txt:179
msgid ""
"A further advantage of not allowing indexing is that it leaves open the "
"possibility of a fast C implementation using linked lists."
msgstr ""

#: ../../pep-0372.txt:182
msgid "Does OrderedDict support alternate sort orders such as alphabetical?"
msgstr ""

#: ../../pep-0372.txt:184
msgid ""
"No.  Those wanting different sort orders really need to be using another "
"technique.  The OrderedDict is all about recording insertion order.   If "
"any other order is of interest, then another structure (like an in-memory"
" dbm) is likely a better fit."
msgstr ""

#: ../../pep-0372.txt:189
msgid ""
"How well does OrderedDict work with the json module, PyYAML, and "
"ConfigParser?"
msgstr ""

#: ../../pep-0372.txt:191
msgid ""
"For json, the good news is that json's encoder respects OrderedDict's "
"iteration order::"
msgstr ""

#: ../../pep-0372.txt:197
msgid ""
"In Py2.6, the object_hook for json decoders passes-in an already built "
"dictionary so order is lost before the object hook sees it.  This problem"
" is being fixed for Python 2.7/3.1 by adding a new hook that preserves "
"order (see http://bugs.python.org/issue5381 ). With the new hook, order "
"can be preserved::"
msgstr ""

#: ../../pep-0372.txt:207
msgid "For PyYAML, a full round-trip is problem free::"
msgstr ""

#: ../../pep-0372.txt:221
msgid ""
"For the ConfigParser module, round-tripping is also problem free.  Custom"
" dicts were added in Py2.6 specifically to support ordered dictionaries::"
msgstr ""

#: ../../pep-0372.txt:229
msgid "How does OrderedDict handle equality testing?"
msgstr ""

#: ../../pep-0372.txt:231
msgid ""
"Comparing two ordered dictionaries implies that the test will be order-"
"sensitive so that list ``(od1.items())==list(od2.items())``."
msgstr ""

#: ../../pep-0372.txt:234
msgid ""
"When ordered dicts are compared with other Mappings, their order "
"insensitive comparison is used.  This allows ordered dictionaries to be "
"substituted anywhere regular dictionaries are used."
msgstr ""

#: ../../pep-0372.txt:238
msgid "How __repr__ format will maintain order during a repr/eval round-trip?"
msgstr ""

#: ../../pep-0372.txt:240
msgid "OrderedDict([('a', 1), ('b', 2)])"
msgstr ""

#: ../../pep-0372.txt:242
msgid "What are the trade-offs of the possible underlying data structures?"
msgstr ""

#: ../../pep-0372.txt:244
msgid ""
"Keeping a sorted list of keys is fast for all operations except "
"__delitem__() which becomes an O(n) exercise.  This data structure leads "
"to very simple code and little wasted space."
msgstr ""

#: ../../pep-0372.txt:248
msgid ""
"Keeping a separate dictionary to record insertion sequence numbers makes "
"the code a little bit more complex.  All of the basic operations are O(1)"
" but the constant factor is increased for __setitem__() and __delitem__()"
" meaning that every use case will have to pay for this speedup (since all"
" buildup go through __setitem__). Also, the first traversal incurs a one-"
"time ``O(n log n)`` sorting cost.  The storage costs are double that for "
"the sorted-list-of-keys approach."
msgstr ""

#: ../../pep-0372.txt:256
msgid ""
"A version written in C could use a linked list.  The code would be more "
"complex than the other two approaches but it would conserve space and "
"would keep the same big-oh performance as regular dictionaries.  It is "
"the fastest and most space efficient."
msgstr ""

#: ../../pep-0372.txt:263
msgid "Reference Implementation"
msgstr ""

#: ../../pep-0372.txt:265
msgid "An implementation with tests and documentation is at:"
msgstr ""

#: ../../pep-0372.txt:269
msgid "The proposed version has several merits:"
msgstr ""

#: ../../pep-0372.txt:271
msgid ""
"Strict compliance with the MutableMapping API and no new methods so that "
"the learning curve is near zero.  It is simply a dictionary that "
"remembers insertion order."
msgstr ""

#: ../../pep-0372.txt:275
msgid ""
"Generally good performance.  The big-oh times are the same as regular "
"dictionaries except that key deletion is O(n)."
msgstr ""

#: ../../pep-0372.txt:278
msgid ""
"Other implementations of ordered dicts in various Python projects or "
"standalone libraries, that inspired the API proposed here, are:"
msgstr ""

#: ../../pep-0372.txt:281
msgid "`odict in Python`_"
msgstr ""

#: ../../pep-0372.txt:282
msgid "`odict in Babel`_"
msgstr ""

#: ../../pep-0372.txt:283
msgid "`OrderedDict in Django`_"
msgstr ""

#: ../../pep-0372.txt:284
msgid "`The odict module`_"
msgstr ""

#: ../../pep-0372.txt:285
msgid "`ordereddict`_ (a C implementation of the odict module)"
msgstr ""

#: ../../pep-0372.txt:286
msgid "`StableDict`_"
msgstr ""

#: ../../pep-0372.txt:287
msgid "`Armin Rigo's OrderedDict`_"
msgstr ""

#: ../../pep-0372.txt:300
msgid "Future Directions"
msgstr ""

#: ../../pep-0372.txt:302
msgid ""
"With the availability of an ordered dict in the standard library, other "
"libraries may take advantage of that.  For example, ElementTree could "
"return odicts in the future that retain the attribute ordering of the "
"source file."
msgstr ""

#: ../../pep-0372.txt:309
msgid "References"
msgstr ""

#: ../../pep-0372.txt:311
msgid "http://bugs.python.org/issue1371075"
msgstr ""

#: ../../pep-0372.txt:315
msgid "Copyright"
msgstr ""

#: ../../pep-0372.txt:317
msgid "This document has been placed in the public domain."
msgstr ""

