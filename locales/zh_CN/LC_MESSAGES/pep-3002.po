# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-3002.txt
msgid "PEP"
msgstr ""

#: ../../pep-3002.txt:1
msgid "3002"
msgstr ""

#: ../../pep-3002.txt
msgid "Title"
msgstr ""

#: ../../pep-3002.txt:2
msgid "Procedure for Backwards-Incompatible Changes"
msgstr ""

#: ../../pep-3002.txt
msgid "Author"
msgstr ""

#: ../../pep-3002.txt:5
msgid "Steven Bethard <steven.bethard@gmail.com>"
msgstr ""

#: ../../pep-3002.txt
msgid "Status"
msgstr ""

#: ../../pep-3002.txt:6
msgid "Final"
msgstr ""

#: ../../pep-3002.txt
msgid "Type"
msgstr ""

#: ../../pep-3002.txt:7
msgid "Process"
msgstr ""

#: ../../pep-3002.txt
msgid "Created"
msgstr ""

#: ../../pep-3002.txt:9
msgid "27-Mar-2006"
msgstr ""

#: ../../pep-3002.txt
msgid "Post-History"
msgstr ""

#: ../../pep-3002.txt:10
msgid "27-Mar-2006, 13-Apr-2006"
msgstr ""

#: ../../pep-3002.txt:14
msgid "Abstract"
msgstr ""

#: ../../pep-3002.txt:16
msgid ""
"This PEP describes the procedure for changes to Python that are "
"backwards-incompatible between the Python 2.X series and Python 3000. All"
" such changes must be documented by an appropriate Python 3000 PEP and "
"must be accompanied by code that can identify when pieces of Python 2.X "
"code may be problematic in Python 3000."
msgstr ""

#: ../../pep-3002.txt:24
msgid "Rationale"
msgstr ""

#: ../../pep-3002.txt:26
msgid ""
"Python 3000 will introduce a number of backwards-incompatible changes to "
"Python, mainly to streamline the language and to remove some previous "
"design mistakes.  But Python 3000 is not intended to be a new and "
"completely different language from the Python 2.X series, and it is "
"expected that much of the Python user community will make the transition "
"to Python 3000 when it becomes available."
msgstr ""

#: ../../pep-3002.txt:33
msgid ""
"To encourage this transition, it is crucial to provide a clear and "
"complete guide on how to upgrade Python 2.X code to Python 3000 code. "
"Thus, for any backwards-incompatible change, two things are required:"
msgstr ""

#: ../../pep-3002.txt:37
msgid "An official Python Enhancement Proposal (PEP)"
msgstr ""

#: ../../pep-3002.txt:38
msgid ""
"Code that can identify pieces of Python 2.X code that may be problematic "
"in Python 3000"
msgstr ""

#: ../../pep-3002.txt:43
msgid "Python Enhancement Proposals"
msgstr ""

#: ../../pep-3002.txt:45
msgid ""
"Every backwards-incompatible change must be accompanied by a PEP. This "
"PEP should follow the usual PEP guidelines and explain the purpose and "
"reasoning behind the backwards incompatible change.  In addition to the "
"usual PEP sections, all PEPs proposing backwards-incompatible changes "
"must include an additional section: Compatibility Issues.  This section "
"should describe what is backwards incompatible about the proposed change "
"to Python, and the major sorts of breakage to be expected."
msgstr ""

#: ../../pep-3002.txt:54
msgid ""
"While PEPs must still be evaluated on a case-by-case basis, a PEP may be "
"inappropriate for Python 3000 if its Compatibility Issues section implies"
" any of the following:"
msgstr ""

#: ../../pep-3002.txt:58
msgid ""
"Most or all instances of a Python 2.X construct are incorrect in Python "
"3000, and most or all instances of the Python 3000 construct are "
"incorrect in Python 2.X."
msgstr ""

#: ../../pep-3002.txt:62
msgid ""
"So for example, changing the meaning of the for-loop else-clause from "
"\"executed when the loop was not broken out of\" to \"executed when the "
"loop had zero iterations\" would mean that all Python 2.X for-loop else-"
"clauses would be broken, and there would be no way to use a for-loop "
"else-clause in a Python-3000-appropriate manner. Thus a PEP for such an "
"idea would likely be rejected."
msgstr ""

#: ../../pep-3002.txt:69
msgid ""
"Many instances of a Python 2.X construct are incorrect in Python 3000 and"
" the PEP fails to demonstrate real-world use-cases for the changes."
msgstr ""

#: ../../pep-3002.txt:73
msgid ""
"Backwards incompatible changes are allowed in Python 3000, but not to "
"excess.  A PEP that proposes backwards-incompatible changes should "
"provide good examples of code that visibly benefits from the changes."
msgstr ""

#: ../../pep-3002.txt:78
msgid ""
"PEP-writing is time-consuming, so when a number of backwards-incompatible"
" changes are closely related, they should be proposed in the same PEP.  "
"Such PEPs will likely have longer Compatibility Issues sections, however,"
" since they must now describe the sorts of breakage expected from *all* "
"the proposed changes."
msgstr ""

#: ../../pep-3002.txt:86
msgid "Identifying Problematic Code"
msgstr ""

#: ../../pep-3002.txt:88
msgid ""
"In addition to the PEP requirement, backwards incompatible changes to "
"Python must also be accompanied by code to issue warnings for pieces of "
"Python 2.X code that will behave differently in Python 3000. Such "
"warnings will be enabled in Python 2.X using a new command-line switch: "
"-3. All backwards incompatible changes should be accompanied by a patch "
"for Python 2.X that, when -3 is specified, issues warnings for each "
"construct that is being changed."
msgstr ""

#: ../../pep-3002.txt:96
msgid ""
"For example, if ``dict.keys()`` returns an iterator in Python 3000, the "
"patch to the Python 2.X branch should do something like:"
msgstr ""

#: ../../pep-3002.txt:99
msgid ""
"If -3 was specified, change ``dict.keys()`` to return a subclass of "
"``list`` that issues warnings whenever you use any methods other than "
"``__iter__()``."
msgstr ""

#: ../../pep-3002.txt:103
msgid ""
"Such a patch would mean that warnings are only issued when features that "
"will not be present in Python 3000 are used, and almost all existing code"
" should continue to work. (Code that relies on ``dict.keys()`` always "
"returning a ``list`` and not a subclass should be pretty much non-"
"existent.)"
msgstr ""

#: ../../pep-3002.txt:111
msgid "References"
msgstr ""

#: ../../pep-3002.txt:113
msgid "TBD"
msgstr ""

#: ../../pep-3002.txt:117
msgid "Copyright"
msgstr ""

#: ../../pep-3002.txt:119
msgid "This document has been placed in the public domain."
msgstr ""

