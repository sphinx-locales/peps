# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0598.rst
msgid "PEP"
msgstr ""

#: ../../pep-0598.rst:1
msgid "598"
msgstr ""

#: ../../pep-0598.rst
msgid "Title"
msgstr ""

#: ../../pep-0598.rst:2
msgid "Introducing incremental feature releases"
msgstr ""

#: ../../pep-0598.rst
msgid "Author"
msgstr ""

#: ../../pep-0598.rst:5
msgid "Nick Coghlan <ncoghlan@gmail.com>"
msgstr ""

#: ../../pep-0598.rst
msgid "Discussions-To"
msgstr ""

#: ../../pep-0598.rst:6
msgid ""
"https://discuss.python.org/t/pep-596-python-3-9-release-schedule-"
"doubling-the-release-cadence/1828"
msgstr ""

#: ../../pep-0598.rst
msgid "Status"
msgstr ""

#: ../../pep-0598.rst:7
msgid "Withdrawn"
msgstr ""

#: ../../pep-0598.rst
msgid "Type"
msgstr ""

#: ../../pep-0598.rst:8
msgid "Informational"
msgstr ""

#: ../../pep-0598.rst
msgid "Created"
msgstr ""

#: ../../pep-0598.rst:10
msgid "15-Jun-2019"
msgstr ""

#: ../../pep-0598.rst
msgid "Python-Version"
msgstr ""

#: ../../pep-0598.rst:11
msgid "3.9"
msgstr ""

#: ../../pep-0598.rst:15
msgid "Abstract"
msgstr ""

#: ../../pep-0598.rst:17
msgid ""
"PEP 602 proposes reducing the feature delivery latency for the Python "
"standard library and CPython reference interpreter by increasing the "
"frequency of CPython feature releases from every 18-24 months to instead "
"occur every 9-12 months."
msgstr ""

#: ../../pep-0598.rst:22
msgid ""
"This PEP proposes to instead *reduce* the frequency of new baseline "
"feature releases (with the associated filesystem layout changes, bytecode"
" format changes, and C ABI compatibility breaks) to occur only every "
"other year (2020, 2022, 2024, etc), but to combine that change with a new"
" policy and approach that allows the introduction of backwards compatible"
" features in the initial set of point releases within a given release "
"series."
msgstr ""

#: ../../pep-0598.rst:31
msgid "PEP Withdrawal"
msgstr ""

#: ../../pep-0598.rst:33
msgid ""
"This PEP has been withdrawn in favour of the rolling beta release stream "
"proposal in PEP 605."
msgstr ""

#: ../../pep-0598.rst:36
msgid ""
"However, the concerns raised in this PEP are likely to apply to any other"
" \"Long Term Support branch\" proposals that allow feature backports to "
"improve the developer experience of supporting such releases (such as the"
" EL Python draft at [3_]), so the ideas presented here may provide useful"
" design suggestions for such proposals."
msgstr ""

#: ../../pep-0598.rst:44
msgid "Summary"
msgstr ""

#: ../../pep-0598.rst:46
msgid ""
"The proposal to keep the current CPython release compatibility management"
" process, but go through it more often has significant practical "
"downsides, as a CPython feature release carries certain expectations "
"(most notably, a 5-year maintenance lifecycle, support for parallel "
"installation with the previous feature release, and the possibility of "
"breaking changes to the CPython-specific ABI, requiring recompilation of "
"all extension modules) that mean faster feature releases in their current"
" form have the potential to significantly increase the burden of "
"maintaining 3rd party Python libraries and applications across all "
"actively supported CPython releases."
msgstr ""

#: ../../pep-0598.rst:56
msgid ""
"It's also arguable whether such an approach would noticeably reduce the "
"typical feature delivery latency in practice for most end users, as the "
"adoption cycle for new feature releases is typically measured in months "
"or years, so more frequent releases may just lead to end users updating "
"to every 3rd or 4th feature release, rather than every 2nd or 3rd feature"
" release (as often happens today)."
msgstr ""

#: ../../pep-0598.rst:63
msgid ""
"This PEP presents a competing proposal to instead *slow down* the "
"frequency of parallel installable feature releases that change the "
"filesystem layout and CPython ABI to a consistent 24-month cycle, but to "
"compensate for this by introducing the notion of build compatible "
"incremental feature releases, and then deferring the full feature freeze "
"of a given feature release series from the initial baseline X.Y.0 release"
" to a subsequent X.Y.Z feature complete release that occurs ~12 months "
"after the initial baseline feature release."
msgstr ""

#: ../../pep-0598.rst:71
msgid ""
"A new ``feature_complete`` attribute on the ``sys.version_info`` "
"structure will provide a programmatic indicator as to whether or not a "
"release series remains open to further incremental feature releases. "
"Alternate implementations of Python would also be free to clear this flag"
" to indicate that their support for their nominal Python version may "
"still be a work in progress."
msgstr ""

#: ../../pep-0598.rst:77
msgid ""
"For compatibility testing purposes, and to maintain pickle compatibility "
"in mixed version environments, a new ``sys.feature_limit`` attribute (and"
" corresponding CPython CLI parameter, ``--feature-limit X.Y.Z``, and "
"environment variable, ``PYTHONFEATURELIMIT``) will provide a way to limit"
" the runtime availability of features added in incremental feature "
"releases."
msgstr ""

#: ../../pep-0598.rst:83
msgid ""
"The existing cycle and the new cycle would be synchronised on their "
"feature freeze release dates, so the full Python 3.9.x feature freeze "
"would occur in October 2021, 24 months after the Python 3.8.0 feature "
"release, with the initial Python 3.9.0 release taking place in October "
"2020."
msgstr ""

#: ../../pep-0598.rst:90
msgid "Example Future Release Schedules"
msgstr ""

#: ../../pep-0598.rst:92
msgid ""
"Under this proposal, Python 3.9.0a1 would be released in November 2019, "
"shortly after the Python 3.8.0 feature complete release in October 2019."
msgstr ""

#: ../../pep-0598.rst:95
msgid ""
"The 3.9.0b1 release would then follow 6 months later in May 2020, with "
"3.9.0 itself being released in October 2020."
msgstr ""

#: ../../pep-0598.rst:98
msgid ""
"Assuming micro releases of 3.9.x were to occur quarterly, then the "
"overall release timeline would look like:"
msgstr ""

#: ../../pep-0598.rst:101 ../../pep-0598.rst:741
msgid "2019-11: 3.9.0a1"
msgstr ""

#: ../../pep-0598.rst:102 ../../pep-0598.rst:130 ../../pep-0598.rst:742
#: ../../pep-0598.rst:851
msgid "... additional alpha releases as determined by the release manager"
msgstr ""

#: ../../pep-0598.rst:103
msgid "2020-05: 3.9.0b1"
msgstr ""

#: ../../pep-0598.rst:104 ../../pep-0598.rst:132 ../../pep-0598.rst:853
msgid "... additional beta releases as determined by the release manager"
msgstr ""

#: ../../pep-0598.rst:105
msgid "2020-08: 3.9.0bX (final beta release that locks ABI compatibility)"
msgstr ""

#: ../../pep-0598.rst:106
msgid "2020-09: 3.9.0rc1"
msgstr ""

#: ../../pep-0598.rst:107 ../../pep-0598.rst:135 ../../pep-0598.rst:747
#: ../../pep-0598.rst:856
msgid "... additional release candidates as determined by the release manager"
msgstr ""

#: ../../pep-0598.rst:108
msgid "2020-10: 3.9.0 (BFR - baseline feature release)"
msgstr ""

#: ../../pep-0598.rst:109
msgid "2021-01: 3.9.1 (IFR - incremental feature release)"
msgstr ""

#: ../../pep-0598.rst:110
msgid "2021-04: 3.9.2 (IFR)"
msgstr ""

#: ../../pep-0598.rst:111
msgid "2021-07: 3.9.3 (IFR)"
msgstr ""

#: ../../pep-0598.rst:112
msgid "2021-10: 3.9.4 (feature complete release)"
msgstr ""

#: ../../pep-0598.rst:113
msgid "2022-01: 3.9.5"
msgstr ""

#: ../../pep-0598.rst:114
msgid "2022-04: 3.9.6"
msgstr ""

#: ../../pep-0598.rst:115
msgid "2022-07: 3.9.7"
msgstr ""

#: ../../pep-0598.rst:116
msgid "2022-10: 3.9.8 (final regular maintenance release)"
msgstr ""

#: ../../pep-0598.rst:117 ../../pep-0598.rst:145 ../../pep-0598.rst:758
#: ../../pep-0598.rst:866
msgid "... additional security fix only releases as needed"
msgstr ""

#: ../../pep-0598.rst:118 ../../pep-0598.rst:759
msgid "2025-10: 3.9.x branch closed"
msgstr ""

#: ../../pep-0598.rst:120
msgid ""
"Feature complete release numbers would typically be written without any "
"qualifier (as they are today), while the baseline and incremental feature"
" releases would be expected to have a qualifier appended indicating that "
"they aren't a traditional CPython release (``3.9.0 (BFR)``, ``3.9.1 "
"(IFR)``, etc)."
msgstr ""

#: ../../pep-0598.rst:125
msgid ""
"The Python 3.10 release series would start being published the month "
"after the first Python 3.9 feature complete release, in parallel with the"
" final 12 months of routine Python 3.9 maintenance releases:"
msgstr ""

#: ../../pep-0598.rst:129
msgid "2021-11: 3.10.0a1"
msgstr ""

#: ../../pep-0598.rst:131
msgid "2022-05: 3.10.0b1"
msgstr ""

#: ../../pep-0598.rst:133
msgid "2022-08: 3.10.0bX (final beta release that locks ABI compatibility)"
msgstr ""

#: ../../pep-0598.rst:134
msgid "2022-09: 3.10.0rc1"
msgstr ""

#: ../../pep-0598.rst:136
msgid "2022-10: 3.10.0 (BFR)"
msgstr ""

#: ../../pep-0598.rst:137
msgid "2023-01: 3.10.1 (IFR)"
msgstr ""

#: ../../pep-0598.rst:138
msgid "2023-04: 3.10.2 (IFR)"
msgstr ""

#: ../../pep-0598.rst:139
msgid "2023-07: 3.10.3 (IFR)"
msgstr ""

#: ../../pep-0598.rst:140
msgid "2023-10: 3.10.4"
msgstr ""

#: ../../pep-0598.rst:141
msgid "2024-01: 3.10.5"
msgstr ""

#: ../../pep-0598.rst:142
msgid "2024-04: 3.10.6"
msgstr ""

#: ../../pep-0598.rst:143
msgid "2024-07: 3.10.7"
msgstr ""

#: ../../pep-0598.rst:144
msgid "2024-10: 3.10.8 (final regular maintenance release)"
msgstr ""

#: ../../pep-0598.rst:146
msgid "2027-10: 3.10.x branch closed"
msgstr ""

#: ../../pep-0598.rst:148
msgid "In this model, there are always two or three active branches:"
msgstr ""

#: ../../pep-0598.rst:150 ../../pep-0598.rst:766 ../../pep-0598.rst:871
msgid "2019-04 -> 2019-10: 3.9.0 pre-alpha, 3.8.0 pre-release, 3.7.x maintenance"
msgstr ""

#: ../../pep-0598.rst:151 ../../pep-0598.rst:872
msgid "2019-10 -> 2020-05: 3.9.0 pre-beta, 3.8.x maintenance"
msgstr ""

#: ../../pep-0598.rst:152
msgid "2020-05 -> 2020-10: 3.10.0 pre-alpha, 3.9.0 pre-release, 3.8.x maintenance"
msgstr ""

#: ../../pep-0598.rst:153
msgid ""
"2020-10 -> 2021-10: 3.10.0 pre-alpha, 3.9.x feature releases, 3.8.x "
"maintenance"
msgstr ""

#: ../../pep-0598.rst:154
msgid "2021-10 -> 2022-05: 3.10.0 pre-beta, 3.9.x maintenance"
msgstr ""

#: ../../pep-0598.rst:155
msgid ""
"2022-05 -> 2022-10: 3.11.0 pre-alpha, 3.10.0 pre-release, 3.9.x "
"maintenance"
msgstr ""

#: ../../pep-0598.rst:156
msgid ""
"2022-10 -> 2023-10: 3.11.0 pre-alpha, 3.10.x feature releases, 3.9.x "
"maintenance"
msgstr ""

#: ../../pep-0598.rst:157
msgid "2023-10 -> 2024-05: 3.11.0 pre-beta, 3.10.x maintenance"
msgstr ""

#: ../../pep-0598.rst:158
msgid ""
"2024-05 -> 2024-10: 3.12.0 pre-alpha, 3.11.0 pre-release, 3.10.x "
"maintenance"
msgstr ""

#: ../../pep-0598.rst:159 ../../pep-0598.rst:775 ../../pep-0598.rst:880
msgid "... etc"
msgstr ""

#: ../../pep-0598.rst:161
msgid ""
"(Pre-alpha and pre-beta development occurs on the main git branch, all "
"other development occurs on a release specific branch with changes "
"typically backported from the main git branch)"
msgstr ""

#: ../../pep-0598.rst:165
msgid ""
"TODO: this really needs a diagram to help explain it, so I'll add a "
"picture once I have one to add."
msgstr ""

#: ../../pep-0598.rst:168
msgid ""
"This is quite similar to the status quo, but with a more consistent "
"cadence, alternating between baseline feature release years (2020, 2022, "
"etc) that focus on the alpha and beta cycle for a new baseline feature "
"release (while continuing to publish maintenance releases for the "
"previous feature release series), and feature complete release years "
"(2021, 2023, etc), that focus on making smaller improvements to the "
"current feature release series (while making plans for the next feature "
"release series the following year)."
msgstr ""

#: ../../pep-0598.rst:178
msgid "Proposal"
msgstr ""

#: ../../pep-0598.rst:180
msgid ""
"Excluding alpha and beta releases, CPython currently has 3 different "
"kinds of release increment:"
msgstr ""

#: ../../pep-0598.rst:183
msgid "Feature release (i.e. X.Y.0 releases)"
msgstr ""

#: ../../pep-0598.rst:184
msgid "Maintenance release (X.Y.Z releases within ~2 years of X.Y.0)"
msgstr ""

#: ../../pep-0598.rst:185
msgid "Source-only security release (subsequent X.Y.Z releases)"
msgstr ""

#: ../../pep-0598.rst:187
msgid ""
"Feature freeze takes place at the time of the X.Y.0b1 release. Build "
"compatibility freeze now takes place at the time of the last beta release"
" (providing time for projects to upload wheel archives to PyPI prior to "
"the first release candidate)."
msgstr ""

#: ../../pep-0598.rst:192
msgid ""
"This then creates the following periods in the lifecycle of a release "
"series:"
msgstr ""

#: ../../pep-0598.rst:194 ../../pep-0598.rst:213
msgid "Pre-beta (release series is the CPython development branch)"
msgstr ""

#: ../../pep-0598.rst:195
msgid "Beta (release enters maintenance mode, ABI compatibility mostly locked)"
msgstr ""

#: ../../pep-0598.rst:196 ../../pep-0598.rst:216
msgid "Maintenance (ABI locked, only bug fixes & docs enhancements accepted)"
msgstr ""

#: ../../pep-0598.rst:197 ../../pep-0598.rst:217
msgid ""
"Security fix only (no further binary releases, only security fixes "
"accepted)"
msgstr ""

#: ../../pep-0598.rst:198 ../../pep-0598.rst:218
msgid "End of life (no further releases of any kind)"
msgstr ""

#: ../../pep-0598.rst:200
msgid ""
"The proposal in this PEP is that the \"Feature release\" category be "
"split up into three different kinds of feature release:"
msgstr ""

#: ../../pep-0598.rst:203
msgid "Baseline feature release (X.Y.0 releases)"
msgstr ""

#: ../../pep-0598.rst:204
msgid ""
"Incremental feature release (any X.Y.Z releases published between a "
"baseline feature release and the corresponding feature complete release)"
msgstr ""

#: ../../pep-0598.rst:206
msgid "Feature complete release (a specific X.Y.Z release ~1 year after X.Y.0)"
msgstr ""

#: ../../pep-0598.rst:207
msgid ""
"Maintenance release (X.Y.Z releases within ~1 years of the feature "
"complete release)"
msgstr ""

#: ../../pep-0598.rst:208
msgid "Source-only security release (subsequent ``X.Y.Z`` releases)"
msgstr ""

#: ../../pep-0598.rst:210
msgid ""
"This would then introduce a new \"Feature releases\" phase in the release"
" series lifecycle:"
msgstr ""

#: ../../pep-0598.rst:214
msgid ""
"Beta (release enters feature additions mode, ABI compatibility not yet "
"locked)"
msgstr ""

#: ../../pep-0598.rst:215
msgid "Feature releases (ABI locked, backwards compatible API additions accepted)"
msgstr ""

#: ../../pep-0598.rst:220
msgid ""
"The pre-release beta period would be relaxed to use the incremental "
"feature release policy for changes, rather than the stricter maintenance "
"release policy."
msgstr ""

#: ../../pep-0598.rst:223
msgid ""
"For governance purposes, baseline feature releases are the only releases "
"that would qualify as a \"feature release\" in the PEP 13 sense "
"(incremental feature releases wouldn't count)."
msgstr ""

#: ../../pep-0598.rst:229
msgid "Baseline feature releases and feature release series"
msgstr ""

#: ../../pep-0598.rst:231
msgid ""
"Baseline feature releases are essentially just the existing feature "
"releases, given a new name to help distinguish them from the new "
"incremental feature releases, and also to help indicate that unlike their"
" predecessors, they are no longer considered feature complete at release."
msgstr ""

#: ../../pep-0598.rst:236
msgid ""
"Baseline feature releases would continue to define a new feature release "
"series, locking in the following language, build, and installation "
"compatibility constraints for the remainder of that series:"
msgstr ""

#: ../../pep-0598.rst:240
msgid "Python language grammar"
msgstr ""

#: ../../pep-0598.rst:241
msgid "``ast`` module AST format"
msgstr ""

#: ../../pep-0598.rst:242
msgid "CPython interpreter opcode format"
msgstr ""

#: ../../pep-0598.rst:243
msgid "``pyc`` file magic number and filename compatibility tags"
msgstr ""

#: ../../pep-0598.rst:244
msgid "extension module filename compatibility tags"
msgstr ""

#: ../../pep-0598.rst:245
msgid "wheel archive compatibility tags"
msgstr ""

#: ../../pep-0598.rst:246
msgid "default package and module import directories"
msgstr ""

#: ../../pep-0598.rst:247
msgid "default installation filename and directories"
msgstr ""

#: ../../pep-0598.rst:249
msgid ""
"Baseline feature releases would also continue to be the only releases "
"where:"
msgstr ""

#: ../../pep-0598.rst:251
msgid ""
"new deprecations, pending deprecations, and other warnings can be "
"introduced"
msgstr ""

#: ../../pep-0598.rst:252
msgid "existing pending deprecations can be converted to full deprecations"
msgstr ""

#: ../../pep-0598.rst:253
msgid "existing warnings can be converted to errors"
msgstr ""

#: ../../pep-0598.rst:254
msgid ""
"other changes requiring \"Porting to Python X.Y\" entries in the What's "
"New document can be introduced"
msgstr ""

#: ../../pep-0598.rst:257
msgid "Key characteristics of a feature release series:"
msgstr ""

#: ../../pep-0598.rst:259
msgid ""
"an installation within one feature release series does not conflict with "
"installations of other feature release series (i.e. they can be installed"
" in parallel)"
msgstr ""

#: ../../pep-0598.rst:261
msgid ""
"an installation within a feature release series can be updated to a later"
" micro release within the same series without requiring reinstallation or"
" any other changes to previously installed components"
msgstr ""

#: ../../pep-0598.rst:265
msgid "Key characteristics of a baseline feature release:"
msgstr ""

#: ../../pep-0598.rst:267
msgid ""
"in a baseline feature release, ``sys.version_info.feature_complete == "
"False``"
msgstr ""

#: ../../pep-0598.rst:268
msgid "in a baseline feature release, ``sys.version_info.micro == 0``"
msgstr ""

#: ../../pep-0598.rst:269
msgid ""
"baseline feature releases may contain higher risk changes to the language"
" and interpreter, such as grammar modifications, major refactoring of "
"interpreter and standard library internals, or potentially invasive "
"feature additions that carry a risk of unintended side effects on other "
"existing functionality"
msgstr ""

#: ../../pep-0598.rst:273
msgid ""
"features introduced in a baseline feature release are the *only* features"
" permitted to rely on ``sys.version_info`` as their sole runtime "
"indicator of the feature's availability"
msgstr ""

#: ../../pep-0598.rst:277
msgid ""
"Key expectations around feature release series and baseline feature "
"releases:"
msgstr ""

#: ../../pep-0598.rst:279
msgid ""
"most public projects will only actively test against the *most recent* "
"micro release within a release series"
msgstr ""

#: ../../pep-0598.rst:281
msgid ""
"many (most?) public projects will only add a new release series to their "
"test matrix *after* the initial baseline feature release has already been"
" published, which can make it difficult to resolve issues that require "
"providing new flags or APIs to explicitly opt-in to old behaviour after a"
" default behaviour changed"
msgstr ""

#: ../../pep-0598.rst:285
msgid ""
"private projects with known target environments will test against "
"whichever micro release version they're actually using"
msgstr ""

#: ../../pep-0598.rst:287
msgid ""
"most private projects will also only consider migrating to a new release "
"series *after* the initial baseline feature release has already been "
"published, again posing a problem if the resolution of their problems "
"requires an API addition"
msgstr ""

#: ../../pep-0598.rst:293
msgid ""
"The key motivation of the proposal in this PEP is that the public and "
"private project behaviours described above aren't *new* expectations: "
"they're descriptions of the way CPython release series are already "
"handled by the wider community today. As such, the PEP represents an "
"attempt to adjust our release policies and processes to better match the "
"way the wider community already handles them, rather than changing our "
"processes in a way that then means the wider community needs to adjust to"
" us rather than the other way around."
msgstr ""

#: ../../pep-0598.rst:303
msgid "Incremental feature releases"
msgstr ""

#: ../../pep-0598.rst:305
msgid ""
"Incremental feature releases are the key new process addition being "
"proposed by this PEP. They are subject to the same strict runtime "
"compatibility requirements as the existing maintenance releases, but "
"would have the following more relaxed policies around API additions and "
"enhancements:"
msgstr ""

#: ../../pep-0598.rst:310
msgid ""
"new public APIs can be added to any standard library module (including "
"builtins)"
msgstr ""

#: ../../pep-0598.rst:311
msgid ""
"subject to the feature detection requirement below, new optional "
"arguments can be added to existing APIs (including builtins)"
msgstr ""

#: ../../pep-0598.rst:313
msgid ""
"new public APIs can be added to the stable C ABI (with appropriate "
"version guards)"
msgstr ""

#: ../../pep-0598.rst:314
msgid "new public APIs can be added to the CPython C API"
msgstr ""

#: ../../pep-0598.rst:315
msgid ""
"with the approval of the release manager, backwards compatible "
"reliability improvements can be made to existing APIs and syntactic "
"constructs"
msgstr ""

#: ../../pep-0598.rst:317
msgid ""
"with the approval of the release manager, performance improvements can be"
" incorporated for existing APIs and syntactic constructs"
msgstr ""

#: ../../pep-0598.rst:320
msgid ""
"The intent of this change in policy is to allow usability improvements "
"for new (and existing!) language features to be delivered in a more "
"timely fashion, rather than requiring users to incur the inherent delay "
"and costs of waiting for and then upgrading to the next feature release "
"series."
msgstr ""

#: ../../pep-0598.rst:325
msgid ""
"It is also designed such that the approval to add a feature to the next "
"baseline feature release can be considered separately from the question "
"of whether or not to make it available in the next incremental feature "
"release for the current release series, potentially allowing the first "
"task to be completed by volunteer contributors, while the latter activity"
" could be handled by paid contributors (e.g. customers of commercial "
"Python redistributors could potentially request that their vendor "
"backport a feature, or core developers could offer to undertake specific "
"backports on a contract basis). (There would be potential ethical "
"concerns with gating bug fixes this way, but those concerns don't apply "
"for backports of new features)"
msgstr ""

#: ../../pep-0598.rst:336
msgid "Key characteristics of an incremental feature release:"
msgstr ""

#: ../../pep-0598.rst:338
msgid ""
"in an incremental feature release, ``sys.version_info.feature_complete =="
" False``"
msgstr ""

#: ../../pep-0598.rst:339
msgid "in an incremental feature release, ``sys.version_info.micro != 0``"
msgstr ""

#: ../../pep-0598.rst:340
msgid ""
"all API additions made in an incremental feature release must support "
"efficient runtime feature detection that doesn't rely on either "
"``sys.version_info`` or runtime code object introspection. In most cases,"
" a simple ``hasattr`` check on the affected module will serve this "
"purpose, but when it doesn't, an alternative approach will need to be "
"implemented as part of the feature addition. Prior art in this area "
"includes the ``pickle.HIGHEST_PROTOCOL`` attribute, the "
"``hashlib.algorithms_available`` set, and the various ``os.supports_*`` "
"sets that the ``os`` module already offers for platform dependent "
"capability detection"
msgstr ""

#: ../../pep-0598.rst:349
msgid ""
"to maintain pickle compatibility in mixed version environments, and to "
"enable easier compatibility testing across multiple API versions within "
"the same release series, all API additions made in an incremental feature"
" release must support the new ``sys.feature_limit`` setting as described "
"in the next section"
msgstr ""

#: ../../pep-0598.rst:355
msgid "Key expectations around incremental feature releases:"
msgstr ""

#: ../../pep-0598.rst:357
msgid ""
"\"don't break existing installations on upgrade\" remains a key "
"requirement for all micro releases, even with the more permissive change "
"inclusion policy"
msgstr ""

#: ../../pep-0598.rst:359
msgid ""
"more intrusive changes should still be deferred to the next baseline "
"feature release"
msgstr ""

#: ../../pep-0598.rst:361
msgid ""
"public Python projects that start relying on features added in an "
"incremental feature release should set their ``Python-Requires`` metadata"
" appropriately (projects already do this when necessary - e.g. "
"``aiohttp`` specifically requires 3.5.3 or later due to an issue with "
"``asyncio.get_event_loop()`` in earlier versions)"
msgstr ""

#: ../../pep-0598.rst:367
msgid ""
"Some standard library modules may also impose their own restrictions on "
"acceptable changes in incremental feature releases (for example, only a "
"baseline feature release should ever add new hash algorithms to "
"``hashlib.algorithms_guaranteed`` - incremental feature releases would "
"only be permitted to add algorithms to ``hashlib.algorithms_available``)"
msgstr ""

#: ../../pep-0598.rst:375
msgid "Maintaining interoperability across incremental feature releases"
msgstr ""

#: ../../pep-0598.rst:377
msgid ""
"It is a common practice to use Python's ``pickle`` module to exchange "
"information between Python processes running on different versions of "
"Python. Between release series, this compatibility is expected to only "
"run one way (i.e. excluding deprecated APIs, Python \"X.Y+1\" processes "
"should be able to read pickle archives produced by Python \"X.Y\" "
"processes, but the reverse does not hold, as the newer archives may "
"reference attributes and parameters that don't exist in the older "
"version)."
msgstr ""

#: ../../pep-0598.rst:385
msgid ""
"Within a release series, however, it is expected to hold in both "
"directions, as the \"No new features\" policy means that almost all "
"pickle archives created on Python \"X.Y.Z+1\" will be readable by Python "
"\"X.Y.Z\" processes."
msgstr ""

#: ../../pep-0598.rst:389
msgid ""
"Similarly, Python libraries and applications are often only tested "
"against the latest version in a release series, and this is usually "
"sufficient to keep code working on earlier releases in that same series."
msgstr ""

#: ../../pep-0598.rst:393
msgid ""
"Allowing feature additions in later \"X.Y.Z\" releases with no way to "
"turn them off would pose a problem for these common practices, as a "
"library or application that works fine when tested on CPython version "
"\"X.Y.Z\" would fail on earlier versions if it used a feature newly "
"introduced in \"X.Y.Z\", and any pickle archives it creates that rely on "
"those new interfaces may also not be readable on the older versions."
msgstr ""

#: ../../pep-0598.rst:400
msgid ""
"To help address these problems, a new ``sys.feature_limit`` attribute "
"would be added, as a structured sequence corresponding to the first 3 "
"fields in ``sys.version_info`` (``major``, ``minor``, ``micro``)."
msgstr ""

#: ../../pep-0598.rst:404
msgid ""
"A new CLI option (``--feature-limit X.Y.Z``) and environment variable "
"(``PYTHONFEATURELIMIT=X.Y.Z``) would be used to set this attribute. The "
"``PyCoreConfig`` struct would also gain a new field::"
msgstr ""

#: ../../pep-0598.rst:410
msgid ""
"If the limit is not set explicitly, it would default to the first 3 "
"fields in ``sys.version_info``. If the limit is set to a value outside "
"the lower bound of ``sys.version_info[:2]`` and the upper bound of "
"``sys.version_info[:3]``, it will be clamped to those bounds, padding "
"with zeroes if necessary."
msgstr ""

#: ../../pep-0598.rst:415
msgid ""
"For example, given a current version of \"3.9.3\", nominal limits would "
"be converted to runtime ``sys.feature_limit`` values as follows::"
msgstr ""

#: ../../pep-0598.rst:427
msgid ""
"New APIs backported to an incremental feature release would be expected "
"to include a guard that deletes the API from the module if the feature "
"limit is too low::"
msgstr ""

#: ../../pep-0598.rst:438
msgid ""
"Similarly, new parameters would be expected to include a guard that "
"adjusts the function signature to match the old one::"
msgstr ""

#: ../../pep-0598.rst:454
msgid ""
"Structuring the guards this way would keep the code structure as similar "
"as possible between the main development branch and the backport "
"branches, so future bug fixes can still be backported automatically."
msgstr ""

#: ../../pep-0598.rst:458
msgid ""
"It is expected that convenience functions and/or additional automated "
"tests would eventually be added to help ensure these backported APIs are "
"guarded appropriately, but it seems reasonable to wait until specific "
"concrete examples are available to drive the design of those APIs and "
"automated tests, rather than designing them solely on the basis of "
"hypothetical examples."
msgstr ""

#: ../../pep-0598.rst:466
msgid "Feature complete release and subsequent maintenance releases"
msgstr ""

#: ../../pep-0598.rst:468
msgid ""
"The feature complete release for a given feature release series would be "
"developed under the normal policy for an incremental feature release, but"
" would have one distinguishing feature:"
msgstr ""

#: ../../pep-0598.rst:472
msgid ""
"in a feature complete release, ``sys.version_info.feature_complete == "
"True``"
msgstr ""

#: ../../pep-0598.rst:474
msgid ""
"Any subsequent maintenance and security fix only releases would also have"
" that flag set, and may informally be referred to as \"feature complete "
"releases\". For release series definition purposes though, the feature "
"complete release is the first one that sets that flag to \"True\"."
msgstr ""

#: ../../pep-0598.rst:481
msgid "Proposed policy adjustment for provisional APIs"
msgstr ""

#: ../../pep-0598.rst:483
msgid ""
"To help improve consistency in management of provisional APIs, this PEP "
"proposes that provisional APIs be subject to regular backwards "
"compatibility requirements following the feature complete release for a "
"given release series."
msgstr ""

#: ../../pep-0598.rst:487
msgid ""
"Other aspects of managing provisional APIs would remain as they are "
"today, so as long as an API remains in the provisional state, regular "
"backwards compatibility requirements would not apply to that API in "
"baseline and incremental feature releases."
msgstr ""

#: ../../pep-0598.rst:492
msgid ""
"This policy is expected to provide increased clarity to end users (as "
"even provisional APIs will become stable for that release series in the "
"feature complete release), with minimal practical downsides for standard "
"library maintainers, based on the following analysis of documented API "
"additions and changes in micro releases of CPython since 3.0.0:"
msgstr ""

#: ../../pep-0598.rst:498
msgid "21 3.x.1 version added/changed notes"
msgstr ""

#: ../../pep-0598.rst:499
msgid "30 3.x.2 version added/changed notes"
msgstr ""

#: ../../pep-0598.rst:500
msgid "18 3.x.3 version added/changed notes"
msgstr ""

#: ../../pep-0598.rst:501
msgid "11 3.x.4 version added/changed notes"
msgstr ""

#: ../../pep-0598.rst:502
msgid "1 3.x.5 version added/changed notes"
msgstr ""

#: ../../pep-0598.rst:503
msgid "0 3.x.6+ version added/changed notes"
msgstr ""

#: ../../pep-0598.rst:505
msgid ""
"When post-baseline-release changes need to be made, the majority of them "
"occur within the first two maintenance releases, which have always "
"occurred within 12 months of the baseline release."
msgstr ""

#: ../../pep-0598.rst:509
msgid ""
"(Note: these counts are not solely for provisional APIs - they cover all "
"APIs where semantic changes were made after the baseline release that "
"were considered necessary to cover in the documentation. To avoid double "
"counting changes, the numbers exclude any change markers from the What's "
"New section)"
msgstr ""

#: ../../pep-0598.rst:516
msgid "Motivation"
msgstr ""

#: ../../pep-0598.rst:518
msgid ""
"The motivation for change in this PEP is essentially the same as the "
"motivation for change in PEP 596: the current 18-24 month gap between "
"feature releases has a lot of undesirable consequences, especially for "
"the standard library (see PEP 596 for further articulation of the "
"details)."
msgstr ""

#: ../../pep-0598.rst:523
msgid ""
"This PEP's concern with the specific proposal in PEP 596 is that it "
"doubles the number of actively supported Python branches, increasing the "
"complexity of compatibility testing matrices for the entire Python "
"community, increasing the number of binary Python wheels to be uploaded "
"to PyPI when not using the stable ABI, and just generally having a high "
"chance of inflicting a relatively high level of additional cost across "
"the entire Python ecosystem."
msgstr ""

#: ../../pep-0598.rst:530
msgid ""
"The view taken in this PEP is that there's an alternative approach that "
"provides most of the benefits of a faster feature release without "
"actually incurring the associated costs: we can split the current X.Y.0 "
"\"feature freeze\" into two parts, such that the baseline X.Y.0 release "
"only imposes a \"runtime compatibility freeze\", and the full standard "
"library feature freeze is deferred until later in the release series "
"lifecycle."
msgstr ""

#: ../../pep-0598.rst:539
msgid "Caveats and Limitations"
msgstr ""

#: ../../pep-0598.rst:541
msgid ""
"This proposal does NOT retroactively apply to Python 3.8 - it is being "
"proposed for Python 3.9 and later releases only."
msgstr ""

#: ../../pep-0598.rst:544
msgid ""
"Actual release dates may be adjusted up to a month earlier or later at "
"the discretion of the release manager, based on release team "
"availability, and the timing of other events (e.g. PyCon US, or the "
"annual core development sprints). However, part of the goal of this "
"proposal is to provide a consistent annual cadence for both contributors "
"and end users, so adjustments ideally would be rare."
msgstr ""

#: ../../pep-0598.rst:551
msgid ""
"This PEP does not dictate a specific cadence for micro releases within a "
"release series - it just specifies the rough timelines for transitions "
"between the release series lifecycle phases (pre-alpha, alpha, beta, "
"feature releases, bug fixes, security fixes). The number of micro "
"releases within each phase is determined by the release manager for that "
"series based on how frequently they and the rest of the release team for "
"that series are prepared to undertake the associated work."
msgstr ""

#: ../../pep-0598.rst:559
msgid ""
"However, for the sake of the example timelines, the PEP assumes quarterly"
" micro releases (the cadence used for Python 3.6 and 3.7, splitting the "
"difference between the twice yearly cadence used for some historical "
"release series, and the monthly cadence planned for Python 3.8 and 3.9)."
msgstr ""

#: ../../pep-0598.rst:566
msgid "Design Discussion"
msgstr ""

#: ../../pep-0598.rst:569
msgid ""
"Why this proposal over simply doing more frequent baseline feature "
"releases?"
msgstr ""

#: ../../pep-0598.rst:571
msgid ""
"The filesystem layout changes and other inherently incompatible changes "
"involved in a baseline feature release create additional work for large "
"sections of the wider Python community."
msgstr ""

#: ../../pep-0598.rst:575
msgid ""
"Decoupling those layout changes from the Python version numbering scheme "
"is also something that would in and of itself involve making backwards "
"incompatible changes, as well as adjusting community expectations around "
"which versions will install over the top of each other, and which can be "
"installed in parallel on a single system."
msgstr ""

#: ../../pep-0598.rst:581
msgid ""
"We also don't have a straightforward means to communicate to the "
"community variations in support periods like \"Only support Python "
"version X.Y until X.Y+1 is out, but support X.Z until X.Z+2 is out\"."
msgstr ""

#: ../../pep-0598.rst:585
msgid ""
"So this PEP takes as its starting assumption that the vast majority of "
"Python users simply *shouldn't need to care* that we're changing our "
"release policy, and the only folks that should be affected are those that"
" are eagerly waiting for standard library improvements (and other "
"backwards compatible interpreter enhancements), and those that need to "
"manage mission critical applications in complex deployment environments."
msgstr ""

#: ../../pep-0598.rst:594
msgid "Implications for Python library development"
msgstr ""

#: ../../pep-0598.rst:596
msgid ""
"Many Python libraries (both open source and proprietary) currently adopt "
"the practice of testing solely against the latest micro release within "
"each feature release series that the project still supports."
msgstr ""

#: ../../pep-0598.rst:600
msgid ""
"The design assumption in this PEP is that this practice will continue to "
"be followed during the feature release phase of a release series, with "
"the expectation being that anyone choosing to adopt a new release series "
"before it is feature complete will closely track the incremental feature "
"releases."
msgstr ""

#: ../../pep-0598.rst:605
msgid ""
"Libraries that support a previous feature release series are unlikely to "
"adopt features added in an incremental feature release, and if they do "
"adopt such a feature, then any associated fallback compatibility "
"strategies should be implemented in such a way that they're also "
"effective on the earlier releases in that release series."
msgstr ""

#: ../../pep-0598.rst:613
msgid "Implications for the proposed Scientific Python ecosystem support period"
msgstr ""

#: ../../pep-0598.rst:615
msgid ""
"Based on discussions at SciPy 2019, a NEP is currently being drafted [2_]"
" to define a common convention across the Scientific Python ecosystem for"
" dropping support for older Python versions."
msgstr ""

#: ../../pep-0598.rst:619
msgid ""
"While the exact formulation of that policy is still being discussed, the "
"initial proposal was very simple: support any Python feature release "
"published within the last 42 months."
msgstr ""

#: ../../pep-0598.rst:623
msgid ""
"For an 18-month feature release cadence, that works out to always "
"supporting at least the two most recent feature releases, and then "
"dropping support for all X.Y.z releases around 6 months after X.(Y+2).0 "
"is released. This means there is a 6-month period roughly every other "
"year where the three most recent feature releases are supported."
msgstr ""

#: ../../pep-0598.rst:629
msgid ""
"For a 12-month release cadence, it would work out to always supporting at"
" least the three most recent feature releases, and then dropping support "
"for all X.Y.z releases around 6 months after X.(Y+3).0 is released. This "
"means that for half of each year, the four most recent feature releases "
"would be supported."
msgstr ""

#: ../../pep-0598.rst:634
msgid ""
"For a 24-month release cadence, a 42-month support cycle works out to "
"always supporting at least the most recent feature release, and then "
"dropping support for all X.Y.z feature releases around 18 months after "
"X.(Y+1).0 is released. This means there is a 6-month period every other "
"year where only one feature release is supported (and that period "
"overlaps with the pre-release testing period for the X.(Y+2).0 baseline "
"feature release)."
msgstr ""

#: ../../pep-0598.rst:641
msgid ""
"Importantly for the proposal in this PEP, that support period would abide"
" by the recommendation that library developers maintain support for the "
"previous release series until the latest release series has attained "
"feature complete status: dropping support 18 months after the baseline "
"feature release will be roughly equivalent to dropping support 6 months "
"after the feature complete release, without needing to track exactly "
"*which* release marked the series as feature complete."
msgstr ""

#: ../../pep-0598.rst:651
msgid "Implications for simple deployment environments"
msgstr ""

#: ../../pep-0598.rst:653
msgid ""
"For the purposes of this PEP, a \"simple\" deployment environment is any "
"use case where it is straightforward to ensure that all target "
"environments are updated to a new Python micro version at the same time "
"(or at least in advance of the rollout of new higher level application "
"versions), and there isn't any requirement for older Python versions to "
"be able to reliably read pickle streams generated with the newer Python "
"version, such that any pre-release testing that occurs need only target a"
" single Python micro version."
msgstr ""

#: ../../pep-0598.rst:661
msgid ""
"The simplest such case would be scripting for personal use, where the "
"testing and target environments are the exact same environment."
msgstr ""

#: ../../pep-0598.rst:664
msgid ""
"Similarly simple environments would be containerised web services, where "
"the same Python container is used in the CI pipeline as is used on "
"deployment, and any application that bundles its own Python runtime, "
"rather than relying on a pre-existing Python deployment on the target "
"system."
msgstr ""

#: ../../pep-0598.rst:669
msgid ""
"For these use cases, this PEP shouldn't have any significant implications"
" - only a single micro version needs to be tested, independently of "
"whether that version is feature complete or not."
msgstr ""

#: ../../pep-0598.rst:675
msgid "Implications for complex deployment environments"
msgstr ""

#: ../../pep-0598.rst:677
msgid ""
"For the purposes of this PEP, \"complex\" deployment environments are use"
" cases which don't meet the \"simple deployment\" criterion above: new "
"application versions are combined with two or more distinct micro "
"versions within the same release series as part of the deployment "
"process, rather than always targeting exactly one micro version at a "
"time."
msgstr ""

#: ../../pep-0598.rst:683
msgid ""
"If the proposal in this PEP has the desired effect of reducing feature "
"delivery latency, then it can be expected that developers using a release"
" series that is not yet feature complete will actually make use of the "
"new features as they're made available. This then means that testing "
"against a newer incremental feature release becomes an even less valid "
"test of compatibility with the baseline feature release and older "
"incremental feature releases than testing against a newer maintenance "
"release is for older maintenance releases."
msgstr ""

#: ../../pep-0598.rst:691
msgid ""
"One option for handling such cases is to simply prohibit the use of new "
"Python versions until the series has reached \"feature complete\" status."
" Such a policy is effectively already adopted by many organisations when "
"it comes to new feature release series, with acceptance into operational "
"environments occurring months or years after the original release. If "
"this policy is adopted, then such organisations could potentially still "
"adopt a new Python version every other year - it would just be based on "
"the availability of the feature complete releases, rather than the "
"baseline feature releases."
msgstr ""

#: ../../pep-0598.rst:700
msgid ""
"A less strict alternative to outright prohibition would be to make use of"
" the proposed ``PYTHONFEATURELIMIT`` setting to enable phased migrations "
"to new incremental feature releases:"
msgstr ""

#: ../../pep-0598.rst:704
msgid ""
"initially roll out Python X.Y.0 with ``PYTHONFEATURELIMIT=X.Y.0`` set in "
"CI and on deployment"
msgstr ""

#: ../../pep-0598.rst:706
msgid ""
"roll out Python X.Y.1 to CI, keeping the ``PYTHONFEATURELIMIT=X.Y.0`` "
"setting"
msgstr ""

#: ../../pep-0598.rst:707
msgid "deploy Python X.Y.1 to production based on successful CI results"
msgstr ""

#: ../../pep-0598.rst:708
msgid "update deployment environments to set ``PYTHONFEATURELIMIT=X.Y.1``"
msgstr ""

#: ../../pep-0598.rst:709
msgid ""
"set ``PYTHONFEATURELIMIT=X.Y.1`` in CI only after all deployment "
"environments have been updated"
msgstr ""

#: ../../pep-0598.rst:711
msgid ""
"repeat this process for each new release up to and including the feature "
"complete release for the release series"
msgstr ""

#: ../../pep-0598.rst:713
msgid ""
"once the series is feature complete, either continue with this same "
"process for consistency's sake, or else stop updating "
"``PYTHONFEATURELIMIT`` and leave it at the feature complete version "
"number"
msgstr ""

#: ../../pep-0598.rst:719
msgid "Duration of the feature additions period"
msgstr ""

#: ../../pep-0598.rst:721
msgid ""
"This PEP proposes that feature additions be limited to 12 months after "
"the initial baseline feature release."
msgstr ""

#: ../../pep-0598.rst:724
msgid ""
"The primary motivation for that is specifically to sync up with the "
"Ubuntu LTS timing, such that the feature complete release for the Python "
"3.9.x series gets published in October 2021, ready for inclusion in the "
"Ubuntu 22.04 release. (other LTS Linux distributions like RHEL, SLES, and"
" Debian don't have a fixed publishing cadence, so they can more easily "
"tweak their LTS timing a bit to align with stable versions of their "
"inputs. Canonical deliberately haven't given themselves that flexibility "
"with their own release cycle)."
msgstr ""

#: ../../pep-0598.rst:732
msgid ""
"The 12 month feature addition period then arises from splitting the time "
"from the 2019-10 release of Python 3.8.0 and a final Python 3.9.x "
"incremental feature release in 2021-10 evenly between pre-release "
"development and subsequent incremental feature releases."
msgstr ""

#: ../../pep-0598.rst:737
msgid ""
"This is an area where this PEP could adopt part of the proposal in PEP "
"596, by instead making that split ~9 months of pre-release development, "
"and ~15 months of incremental feature releases:"
msgstr ""

#: ../../pep-0598.rst:743
msgid "2020-03: 3.9.0b1"
msgstr ""

#: ../../pep-0598.rst:744
msgid "2020-04: 3.9.0b2"
msgstr ""

#: ../../pep-0598.rst:745
msgid "2020-05: 3.9.0b3 (final beta release that locks ABI compatibility)"
msgstr ""

#: ../../pep-0598.rst:746
msgid "2020-06: 3.9.0rc1"
msgstr ""

#: ../../pep-0598.rst:748
msgid "2020-07: 3.9.0 (BFR)"
msgstr ""

#: ../../pep-0598.rst:749
msgid "2020-10: 3.9.1 (IFR)"
msgstr ""

#: ../../pep-0598.rst:750
msgid "2021-01: 3.9.2 (IFR)"
msgstr ""

#: ../../pep-0598.rst:751
msgid "2021-04: 3.9.3 (IFR)"
msgstr ""

#: ../../pep-0598.rst:752
msgid "2021-07: 3.9.4 (IFR)"
msgstr ""

#: ../../pep-0598.rst:753
msgid "2021-10: 3.9.5"
msgstr ""

#: ../../pep-0598.rst:754
msgid "2022-01: 3.9.6"
msgstr ""

#: ../../pep-0598.rst:755
msgid "2022-04: 3.9.7"
msgstr ""

#: ../../pep-0598.rst:756
msgid "2022-07: 3.9.8"
msgstr ""

#: ../../pep-0598.rst:757
msgid "2022-10: 3.9.9 (final regular maintenance release)"
msgstr ""

#: ../../pep-0598.rst:761
msgid ""
"This approach would mean there were still always two or three active "
"branches, it's just that proportionally more time would be spent with a "
"branch in the \"feature releases\" phase, as compared to the \"pre-"
"alpha\", \"pre-beta\", and \"pre-release\" phases:"
msgstr ""

#: ../../pep-0598.rst:767
msgid "2019-10 -> 2020-03: 3.9.0 pre-beta, 3.8.x maintenance"
msgstr ""

#: ../../pep-0598.rst:768
msgid "2020-03 -> 2020-07: 3.10.0 pre-alpha, 3.9.0 pre-release, 3.8.x maintenance"
msgstr ""

#: ../../pep-0598.rst:769
msgid ""
"2020-07 -> 2021-10: 3.10.0 pre-alpha, 3.9.x feature releases, 3.8.x "
"maintenance"
msgstr ""

#: ../../pep-0598.rst:770
msgid "2021-10 -> 2022-03: 3.10.0 pre-beta, 3.9.x maintenance"
msgstr ""

#: ../../pep-0598.rst:771
msgid ""
"2022-03 -> 2022-07: 3.11.0 pre-alpha, 3.10.0 pre-release, 3.9.x "
"maintenance"
msgstr ""

#: ../../pep-0598.rst:772
msgid ""
"2022-07 -> 2023-10: 3.11.0 pre-alpha, 3.10.x feature releases, 3.9.x "
"maintenance"
msgstr ""

#: ../../pep-0598.rst:773
msgid "2023-10 -> 2024-03: 3.11.0 pre-beta, 3.10.x maintenance"
msgstr ""

#: ../../pep-0598.rst:774
msgid ""
"2024-03 -> 2024-07: 3.12.0 pre-alpha, 3.11.0 pre-release, 3.10.x "
"maintenance"
msgstr ""

#: ../../pep-0598.rst:779
msgid "Duration of the unreleased pre-alpha period"
msgstr ""

#: ../../pep-0598.rst:781
msgid ""
"In the baseline proposal in this PEP, the proposed timelines still "
"include periods where we go for 18 months without making a release from "
"the main git branch (e.g. 3.9.0b1 would branch off in 2020-05, and "
"3.10.0a1 wouldn't be published until 2021-11). They just allow for a "
"wider variety of changes to be backported to the most recent maintenance "
"branch for 12 of those months."
msgstr ""

#: ../../pep-0598.rst:787
msgid ""
"The variant of the proposal that moves the beta branch point earlier in "
"the release series lifecycle would increase that period of no direct "
"releases to 21 months - the only period where releases were made directly"
" from the main branch would be during the relatively short window between"
" the last incremental feature release of the previous release series, and"
" the beta branch point a few months later."
msgstr ""

#: ../../pep-0598.rst:794
msgid ""
"While alternating the annual cadence between \"big foundational "
"enhancements\" and \"targeted low risk API usability improvements\" is a "
"deliberate feature of this proposal, it still seems strange to wait that "
"long for feedback in the event that changes *are* made shortly after the "
"previous release series is branched."
msgstr ""

#: ../../pep-0598.rst:800
msgid ""
"An alternative way of handling this would be to start publishing alpha "
"releases for the next baseline feature release during the feature "
"addition period (similar to the way that PEP 596 proposes to starting "
"publishing Python 3.9.0 alpha releases during the Python 3.8.0 release "
"candidate period)."
msgstr ""

#: ../../pep-0598.rst:805
msgid ""
"However, rather than setting specific timelines for that at a policy "
"level, it may make sense to leave that decision to individual release "
"managers, based on the specific changes that are being proposed for the "
"release they're managing."
msgstr ""

#: ../../pep-0598.rst:812
msgid "Why not switch directly to full semantic versioning?"
msgstr ""

#: ../../pep-0598.rst:814
msgid ""
"If this were a versioning design document for a new language, it *would* "
"use semantic versioning: the policies described above for baseline "
"feature releases would be applied to X.0.0 releases, the policies for "
"incremental feature releases would be applied to X.Y.0 releases, and the "
"policies for maintenance releases would be applied to X.Y.Z releases."
msgstr ""

#: ../../pep-0598.rst:820
msgid ""
"The problem for Python specifically is that all the policies and "
"properties for parallel installation support and ABI compatibility "
"definitions are currently associated with the first *two* fields of the "
"version number, and it has been that way for the better part of thirty "
"years."
msgstr ""

#: ../../pep-0598.rst:825
msgid ""
"As a result, it makes sense to split out the policy question of "
"introducing incremental feature releases in the first place from the "
"technical question of making the version numbering scheme better match "
"the semantics of the different release types."
msgstr ""

#: ../../pep-0598.rst:830
msgid ""
"If the proposal in this PEP were to be accepted by the Steering Council "
"for Python 3.9, then a better time to tackle that technical question "
"would be for the subsequent October 2022 baseline feature release, as "
"there are already inherent compatibility risks associated with the choice"
" of either \"Python 4.0\" (erroneous checks for the major version being "
"exactly 3 rather than 3 or greater), or \"Python 3.10\" (code incorrectly"
" assuming that the minor version will always contain exactly one decimal "
"digit) [1_]."
msgstr ""

#: ../../pep-0598.rst:838
msgid ""
"While the text of this PEP assumes that the release published in 2022 "
"will be 3.10 (as the PEP author personally considers that the more "
"reasonable and most likely choice), there are complex pros and cons on "
"both sides of that decision, and this PEP does arguably add a potential "
"pro in favour of choosing the \"Python 4.0\" option (with the caveat that"
" we would also need to amend the affected installation layout and "
"compatibility markers to only consider the major version number, rather "
"than both the major and minor version)."
msgstr ""

#: ../../pep-0598.rst:846
msgid ""
"If such a version numbering change were to be proposed and accepted, then"
" the example 3.10.x timeline given above would instead become the "
"following 4.x series timeline:"
msgstr ""

#: ../../pep-0598.rst:850
msgid "2021-11: 4.0.0a1"
msgstr ""

#: ../../pep-0598.rst:852
msgid "2022-05: 4.0.0b1"
msgstr ""

#: ../../pep-0598.rst:854
msgid "2022-08: 4.0.0bX (final beta release that locks ABI compatibility)"
msgstr ""

#: ../../pep-0598.rst:855
msgid "2022-09: 4.0.0rc1"
msgstr ""

#: ../../pep-0598.rst:857
msgid "2022-10: 4.0.0 (BFR)"
msgstr ""

#: ../../pep-0598.rst:858
msgid "2023-01: 4.1.0 (IFR)"
msgstr ""

#: ../../pep-0598.rst:859
msgid "2023-04: 4.2.0 (IFR)"
msgstr ""

#: ../../pep-0598.rst:860
msgid "2023-07: 4.3.0 (IFR)"
msgstr ""

#: ../../pep-0598.rst:861
msgid "2023-10: 4.4.0 (IFR)"
msgstr ""

#: ../../pep-0598.rst:862
msgid "2024-01: 4.4.1"
msgstr ""

#: ../../pep-0598.rst:863
msgid "2024-04: 4.4.2"
msgstr ""

#: ../../pep-0598.rst:864
msgid "2024-07: 4.4.3"
msgstr ""

#: ../../pep-0598.rst:865
msgid "2024-10: 4.4.4 (final regular maintenance release)"
msgstr ""

#: ../../pep-0598.rst:867
msgid "2027-10: 4.x branch closed"
msgstr ""

#: ../../pep-0598.rst:869
msgid "And the 5 year schedule forecast would look like:"
msgstr ""

#: ../../pep-0598.rst:873
msgid "2020-05 -> 2020-10: 4.0.0 pre-alpha, 3.9.0 pre-release, 3.8.x maintenance"
msgstr ""

#: ../../pep-0598.rst:874
msgid ""
"2020-10 -> 2021-10: 4.0.0 pre-alpha, 3.9.x feature releases, 3.8.x "
"maintenance"
msgstr ""

#: ../../pep-0598.rst:875
msgid "2021-10 -> 2022-05: 4.0.0 pre-beta, 3.9.x maintenance"
msgstr ""

#: ../../pep-0598.rst:876
msgid "2022-05 -> 2022-10: 5.0.0 pre-alpha, 4.0.0 pre-release, 3.9.x maintenance"
msgstr ""

#: ../../pep-0598.rst:877
msgid ""
"2022-10 -> 2023-10: 5.0.0 pre-alpha, 4.x.0 feature releases, 3.9.x "
"maintenance"
msgstr ""

#: ../../pep-0598.rst:878
msgid "2023-10 -> 2024-05: 5.0.0 pre-beta, 4.x.y maintenance"
msgstr ""

#: ../../pep-0598.rst:879
msgid "2024-05 -> 2024-10: 6.0.0 pre-alpha, 5.0.0 pre-release, 4.x.y maintenance"
msgstr ""

#: ../../pep-0598.rst:883
msgid "References"
msgstr ""

#: ../../pep-0598.rst:885
msgid ""
"Anthony Sottile created a pseudo \"Python 3.10\" to find and fix such "
"issues (https://github.com/asottile/python3.10)"
msgstr ""

#: ../../pep-0598.rst:888
msgid ""
"NEP proposing a standard policy for dropping support of old Python "
"versions (https://github.com/numpy/numpy/pull/14086)"
msgstr ""

#: ../../pep-0598.rst:891
msgid ""
"Draft Extended Lifecycle for Python (ELPython) design concept "
"(https://github.com/elpython/elpython-meta/blob/master/README.md)"
msgstr ""

#: ../../pep-0598.rst:895
msgid "Copyright"
msgstr ""

#: ../../pep-0598.rst:897
msgid "This document has been placed in the public domain."
msgstr ""

