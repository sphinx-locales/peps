# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0304.txt
msgid "PEP"
msgstr ""

#: ../../pep-0304.txt:1
msgid "304"
msgstr ""

#: ../../pep-0304.txt
msgid "Title"
msgstr ""

#: ../../pep-0304.txt:2
msgid "Controlling Generation of Bytecode Files"
msgstr ""

#: ../../pep-0304.txt
msgid "Author"
msgstr ""

#: ../../pep-0304.txt:5
msgid "Skip Montanaro"
msgstr ""

#: ../../pep-0304.txt
msgid "Status"
msgstr ""

#: ../../pep-0304.txt:6
msgid "Withdrawn"
msgstr ""

#: ../../pep-0304.txt
msgid "Type"
msgstr ""

#: ../../pep-0304.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0304.txt
msgid "Created"
msgstr ""

#: ../../pep-0304.txt:9
msgid "22-Jan-2003"
msgstr ""

#: ../../pep-0304.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0304.txt:10
msgid "27-Jan-2003, 31-Jan-2003, 17-Jun-2005"
msgstr ""

#: ../../pep-0304.txt:13
msgid "Historical Note"
msgstr ""

#: ../../pep-0304.txt:15
msgid ""
"While this original PEP was withdrawn, a variant of this feature was "
"eventually implemented for Python 3.8 in "
"https://bugs.python.org/issue33499"
msgstr ""

#: ../../pep-0304.txt:18
msgid ""
"Several of the issues and concerns originally raised in this PEP were "
"resolved by other changes in the intervening years:"
msgstr ""

#: ../../pep-0304.txt:21
msgid "the introduction of isolated mode to handle potential security concerns"
msgstr ""

#: ../../pep-0304.txt:22
msgid ""
"the switch to ``importlib``, a fully import-hook based import system "
"implementation"
msgstr ""

#: ../../pep-0304.txt:23
msgid ""
"PEP 3147's change in the bytecode cache layout to use ``__pycache__`` "
"subdirectories, including the ``source_to_cache(path)`` and "
"``cache_to_source(path)`` APIs that allow the interpreter to "
"automatically handle the redirection to a separate cache directory"
msgstr ""

#: ../../pep-0304.txt:29
msgid "Abstract"
msgstr ""

#: ../../pep-0304.txt:31
msgid ""
"This PEP outlines a mechanism for controlling the generation and location"
" of compiled Python bytecode files.  This idea originally arose as a "
"patch request [1]_ and evolved into a discussion thread on the python-dev"
" mailing list [2]_.  The introduction of an environment variable will "
"allow people installing Python or Python-based third-party packages to "
"control whether or not bytecode files should be generated at installation"
" time, and if so, where they should be written.  It will also allow users"
" to control whether or not bytecode files should be generated at "
"application run-time, and if so, where they should be written."
msgstr ""

#: ../../pep-0304.txt:44
msgid "Proposal"
msgstr ""

#: ../../pep-0304.txt:46
msgid ""
"Add a new environment variable, PYTHONBYTECODEBASE, to the mix of "
"environment variables which Python understands.  PYTHONBYTECODEBASE is "
"interpreted as follows:"
msgstr ""

#: ../../pep-0304.txt:50
msgid ""
"If not defined, Python bytecode is generated in exactly the same way as "
"is currently done.  sys.bytecodebase is set to the root directory (either"
" / on Unix and Mac OSX or the root directory of the startup "
"(installation???) drive -- typically ``C:\\`` -- on Windows)."
msgstr ""

#: ../../pep-0304.txt:55
msgid ""
"If defined and it refers to an existing directory to which the user has "
"write permission, sys.bytecodebase is set to that directory and bytecode "
"files are written into a directory structure rooted at that location."
msgstr ""

#: ../../pep-0304.txt:60
msgid ""
"If defined but empty, sys.bytecodebase is set to None and generation of "
"bytecode files is suppressed altogether."
msgstr ""

#: ../../pep-0304.txt:63
msgid "If defined and one of the following is true:"
msgstr ""

#: ../../pep-0304.txt:65
msgid "it does not refer to a directory,"
msgstr ""

#: ../../pep-0304.txt:67
msgid ""
"it refers to a directory, but not one for which the user has write "
"permission"
msgstr ""

#: ../../pep-0304.txt:70
msgid ""
"a warning is displayed, sys.bytecodebase is set to None and generation of"
" bytecode files is suppressed altogether."
msgstr ""

#: ../../pep-0304.txt:73
msgid ""
"After startup initialization, all runtime references are to "
"sys.bytecodebase, not the PYTHONBYTECODEBASE environment variable. "
"sys.path is not modified."
msgstr ""

#: ../../pep-0304.txt:77
msgid ""
"From the above, we see sys.bytecodebase can only take on two valid types "
"of values: None or a string referring to a valid directory on the system."
msgstr ""

#: ../../pep-0304.txt:81
msgid "During import, this extension works as follows:"
msgstr ""

#: ../../pep-0304.txt:83
msgid ""
"The normal search for a module is conducted.  The search order is "
"roughly: dynamically loaded extension module, Python source file, Python "
"bytecode file.  The only time this mechanism comes into play is if a "
"Python source file is found."
msgstr ""

#: ../../pep-0304.txt:88
msgid ""
"Once we've found a source module, an attempt to read a byte-compiled file"
" in the same directory is made.  (This is the same as before.)"
msgstr ""

#: ../../pep-0304.txt:91
msgid ""
"If no byte-compiled file is found, an attempt to read a byte-compiled "
"file from the augmented directory is made."
msgstr ""

#: ../../pep-0304.txt:94
msgid ""
"If bytecode generation is required, the generated bytecode is written to "
"the augmented directory if possible."
msgstr ""

#: ../../pep-0304.txt:97
msgid ""
"Note that this PEP is explicitly *not* about providing module-by-module "
"or directory-by-directory control over the disposition of bytecode files."
msgstr ""

#: ../../pep-0304.txt:103
msgid "Glossary"
msgstr ""

#: ../../pep-0304.txt:105
msgid "\"bytecode base\" refers to the current setting of sys.bytecodebase."
msgstr ""

#: ../../pep-0304.txt:108
msgid ""
"\"augmented directory\" refers to the directory formed from the bytecode "
"base and the directory name of the source file."
msgstr ""

#: ../../pep-0304.txt:111
msgid ""
"PYTHONBYTECODEBASE refers to the environment variable when necessary to "
"distinguish it from \"bytecode base\"."
msgstr ""

#: ../../pep-0304.txt:116
msgid "Locating bytecode files"
msgstr ""

#: ../../pep-0304.txt:118
msgid ""
"When the interpreter is searching for a module, it will use sys.path as "
"usual.  However, when a possible bytecode file is considered, an extra "
"probe for a bytecode file may be made.  First, a check is made for the "
"bytecode file using the directory in sys.path which holds the source file"
" (the current behavior).  If a valid bytecode file is not found there "
"(either one does not exist or exists but is out-of-date) and the bytecode"
" base is not None, a second probe is made using the directory in sys.path"
" prefixed appropriately by the bytecode base."
msgstr ""

#: ../../pep-0304.txt:129
msgid "Writing bytecode files"
msgstr ""

#: ../../pep-0304.txt:131
msgid ""
"When the bytecode base is not None, a new bytecode file is written to the"
" appropriate augmented directory, never directly to a directory in "
"sys.path."
msgstr ""

#: ../../pep-0304.txt:137
msgid "Defining augmented directories"
msgstr ""

#: ../../pep-0304.txt:139
msgid ""
"Conceptually, the augmented directory for a bytecode file is the "
"directory in which the source file exists prefixed by the bytecode base."
"  In a Unix environment this would be::"
msgstr ""

#: ../../pep-0304.txt:147
msgid ""
"On Windows, which does not have a single-rooted directory tree, the drive"
" letter of the directory containing the source file is treated as a "
"directory component after removing the trailing colon.  The augmented "
"directory is thus derived as ::"
msgstr ""

#: ../../pep-0304.txt:160
msgid "Fixing the location of the bytecode base"
msgstr ""

#: ../../pep-0304.txt:162
msgid ""
"During program startup, the value of the PYTHONBYTECODEBASE environment "
"variable is made absolute, checked for validity and added to the sys "
"module, effectively::"
msgstr ""

#: ../../pep-0304.txt:176
msgid ""
"This allows the user to specify the bytecode base as a relative path, but"
" not have it subject to changes to the current working directory during "
"program execution.  (I can't imagine you'd want it to move around during "
"program execution.)"
msgstr ""

#: ../../pep-0304.txt:181
msgid ""
"There is nothing special about sys.bytecodebase.  The user may change it "
"at runtime if desired, but normally it will not be modified."
msgstr ""

#: ../../pep-0304.txt:186
msgid "Rationale"
msgstr ""

#: ../../pep-0304.txt:188
msgid ""
"In many environments it is not possible for non-root users to write into "
"directories containing Python source files.  Most of the time, this is "
"not a problem as Python source is generally byte compiled during "
"installation.  However, there are situations where bytecode files are "
"either missing or need to be updated.  If the directory containing the "
"source file is not writable by the current user a performance penalty is "
"incurred each time a program importing the module is run. [3]_ Warning "
"messages may also be generated in certain circumstances.  If the "
"directory is writable, nearly simultaneous attempts to write the bytecode"
" file by two separate processes may occur, resulting in file corruption. "
"[4]_"
msgstr ""

#: ../../pep-0304.txt:200
msgid ""
"In environments with RAM disks available, it may be desirable for "
"performance reasons to write bytecode files to a directory on such a "
"disk.  Similarly, in environments where Python source code resides on "
"network file systems, it may be desirable to cache bytecode files on "
"local disks."
msgstr ""

#: ../../pep-0304.txt:208
msgid "Alternatives"
msgstr ""

#: ../../pep-0304.txt:210
msgid ""
"The only other alternative proposed so far [1]_ seems to be to add a -R "
"flag to the interpreter to disable writing bytecode files altogether.  "
"This proposal subsumes that.  Adding a command-line option is certainly "
"possible, but is probably not sufficient, as the interpreter's command "
"line is not readily available during installation (early during program "
"startup???)."
msgstr ""

#: ../../pep-0304.txt:219
msgid "Issues"
msgstr ""

#: ../../pep-0304.txt:221
msgid ""
"Interpretation of a module's __file__ attribute.  I believe the __file__ "
"attribute of a module should reflect the true location of the bytecode "
"file.  If people want to locate a module's source code, they should use "
"imp.find_module(module)."
msgstr ""

#: ../../pep-0304.txt:226
msgid ""
"Security - What if root has PYTHONBYTECODEBASE set?  Yes, this can "
"present a security risk, but so can many other things the root user does."
"  The root user should probably not set PYTHONBYTECODEBASE except "
"possibly during installation.  Still, perhaps this problem can be "
"minimized.  When running as root the interpreter should check to see if "
"PYTHONBYTECODEBASE refers to a directory which is writable by anyone "
"other than root.  If so, it could raise an exception or warning and set "
"sys.bytecodebase to None.  Or, see the next item."
msgstr ""

#: ../../pep-0304.txt:235
msgid ""
"More security - What if PYTHONBYTECODEBASE refers to a general directory "
"(say, /tmp)?  In this case, perhaps loading of a preexisting bytecode "
"file should occur only if the file is owned by the current user or root."
"  (Does this matter on Windows?)"
msgstr ""

#: ../../pep-0304.txt:240
msgid ""
"The interaction of this PEP with import hooks has not been considered "
"yet.  In fact, the best way to implement this idea might be as an import "
"hook.  See PEP 302. [5]_"
msgstr ""

#: ../../pep-0304.txt:244
msgid ""
"In the current (pre-PEP 304) environment, it is safe to delete a source "
"file after the corresponding bytecode file has been created, since they "
"reside in the same directory.  With PEP 304 as currently defined, this is"
" not the case.  A bytecode file in the augmented directory is only "
"considered when the source file is present and it thus never considered "
"when looking for module files ending in \".pyc\".  I think this behavior "
"may have to change."
msgstr ""

#: ../../pep-0304.txt:254
msgid "Examples"
msgstr ""

#: ../../pep-0304.txt:256
msgid ""
"In the examples which follow, the urllib source code resides in "
"/usr/lib/python2.3/urllib.py and /usr/lib/python2.3 is in sys.path but is"
" not writable by the current user."
msgstr ""

#: ../../pep-0304.txt:260
msgid ""
"The bytecode base is /tmp.  /usr/lib/python2.3/urllib.pyc exists and is "
"valid.  When urllib is imported, the contents of "
"/usr/lib/python2.3/urllib.pyc are used.  The augmented directory is not "
"consulted.  No other bytecode file is generated."
msgstr ""

#: ../../pep-0304.txt:265
msgid ""
"The bytecode base is /tmp.  /usr/lib/python2.3/urllib.pyc exists, but is "
"out-of-date.  When urllib is imported, the generated bytecode file is "
"written to urllib.pyc in the augmented directory which has the value "
"/tmp/usr/lib/python2.3.  Intermediate directories will be created as "
"needed."
msgstr ""

#: ../../pep-0304.txt:271
msgid ""
"The bytecode base is None.  No urllib.pyc file is found.  When urllib is "
"imported, no bytecode file is written."
msgstr ""

#: ../../pep-0304.txt:274
msgid ""
"The bytecode base is /tmp.  No urllib.pyc file is found.  When urllib is "
"imported, the generated bytecode file is written to the augmented "
"directory which has the value /tmp/usr/lib/python2.3. Intermediate "
"directories will be created as needed."
msgstr ""

#: ../../pep-0304.txt:279
msgid ""
"At startup, PYTHONBYTECODEBASE is /tmp/foobar, which does not exist. A "
"warning is emitted, sys.bytecodebase is set to None and no bytecode files"
" are written during program execution unless sys.bytecodebase is later "
"changed to refer to a valid, writable directory."
msgstr ""

#: ../../pep-0304.txt:285
msgid ""
"At startup, PYTHONBYTECODEBASE is set to /, which exists, but is not "
"writable by the current user.  A warning is emitted, sys.bytecodebase is "
"set to None and no bytecode files are written during program execution "
"unless sys.bytecodebase is later changed to refer to a valid, writable "
"directory.  Note that even though the augmented directory constructed for"
" a particular bytecode file may be writable by the current user, what "
"counts is that the bytecode base directory itself is writable."
msgstr ""

#: ../../pep-0304.txt:294
msgid ""
"At startup PYTHONBYTECODEBASE is set to the empty string. "
"sys.bytecodebase is set to None.  No warning is generated, however. If no"
" urllib.pyc file is found when urllib is imported, no bytecode file is "
"written."
msgstr ""

#: ../../pep-0304.txt:299
msgid ""
"In the Windows examples which follow, the urllib source code resides in "
"``C:\\PYTHON22\\urllib.py``.  ``C:\\PYTHON22`` is in sys.path but is not "
"writable by the current user."
msgstr ""

#: ../../pep-0304.txt:303
msgid ""
"The bytecode base is set to ``C:\\TEMP``.  ``C:\\PYTHON22\\urllib.pyc`` "
"exists and is valid.  When urllib is imported, the contents of "
"``C:\\PYTHON22\\urllib.pyc`` are used.  The augmented directory is not "
"consulted."
msgstr ""

#: ../../pep-0304.txt:308
msgid ""
"The bytecode base is set to ``C:\\TEMP``.  ``C:\\PYTHON22\\urllib.pyc`` "
"exists, but is out-of-date.  When urllib is imported, a new bytecode file"
" is written to the augmented directory which has the value "
"``C:\\TEMP\\C\\PYTHON22``.  Intermediate directories will be created as "
"needed."
msgstr ""

#: ../../pep-0304.txt:314
msgid ""
"At startup PYTHONBYTECODEBASE is set to ``TEMP`` and the current working "
"directory at application startup is ``H:\\NET``.  The potential bytecode "
"base is thus ``H:\\NET\\TEMP``.  If this directory exists and is writable"
" by the current user, sys.bytecodebase will be set to that value.  If "
"not, a warning will be emitted and sys.bytecodebase will be set to None."
msgstr ""

#: ../../pep-0304.txt:321
msgid ""
"The bytecode base is ``C:\\TEMP``.  No urllib.pyc file is found. When "
"urllib is imported, the generated bytecode file is written to the "
"augmented directory which has the value ``C:\\TEMP\\C\\PYTHON22``. "
"Intermediate directories will be created as needed."
msgstr ""

#: ../../pep-0304.txt:328
msgid "Implementation"
msgstr ""

#: ../../pep-0304.txt:330
msgid "See the patch on Sourceforge. [6]_"
msgstr ""

#: ../../pep-0304.txt:333
msgid "References"
msgstr ""

#: ../../pep-0304.txt:335
msgid ""
"patch 602345, Option for not writing py.[co] files, Klose "
"(https://bugs.python.org/issue602345)"
msgstr ""

#: ../../pep-0304.txt:338
msgid ""
"python-dev thread, Disable writing .py[co], Norwitz "
"(https://mail.python.org/pipermail/python-dev/2003-January/032270.html)"
msgstr ""

#: ../../pep-0304.txt:341
msgid ""
"Debian bug report, Mailman is writing to /usr in cron, Wegner "
"(http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=96111)"
msgstr ""

#: ../../pep-0304.txt:344
msgid ""
"python-dev thread, Parallel pyc construction, Dubois "
"(https://mail.python.org/pipermail/python-dev/2003-January/032060.html)"
msgstr ""

#: ../../pep-0304.txt:347
msgid ""
"PEP 302, New Import Hooks, van Rossum and Moore "
"(http://www.python.org/dev/peps/pep-0302)"
msgstr ""

#: ../../pep-0304.txt:350
msgid ""
"patch 677103, PYTHONBYTECODEBASE patch (PEP 304), Montanaro "
"(https://bugs.python.org/issue677103)"
msgstr ""

#: ../../pep-0304.txt:355
msgid "Copyright"
msgstr ""

#: ../../pep-0304.txt:357
msgid "This document has been placed in the public domain."
msgstr ""

