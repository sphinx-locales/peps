# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0393.txt
msgid "PEP"
msgstr ""

#: ../../pep-0393.txt:1
msgid "393"
msgstr ""

#: ../../pep-0393.txt
msgid "Title"
msgstr ""

#: ../../pep-0393.txt:2
msgid "Flexible String Representation"
msgstr ""

#: ../../pep-0393.txt
msgid "Author"
msgstr ""

#: ../../pep-0393.txt:5
msgid "Martin v. LÃ¶wis <martin@v.loewis.de>"
msgstr ""

#: ../../pep-0393.txt
msgid "Status"
msgstr ""

#: ../../pep-0393.txt:6
msgid "Final"
msgstr ""

#: ../../pep-0393.txt
msgid "Type"
msgstr ""

#: ../../pep-0393.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0393.txt
msgid "Created"
msgstr ""

#: ../../pep-0393.txt:9
msgid "24-Jan-2010"
msgstr ""

#: ../../pep-0393.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0393.txt:10
msgid "3.3"
msgstr ""

#: ../../pep-0393.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0393.txt:14
msgid "Abstract"
msgstr ""

#: ../../pep-0393.txt:16
msgid ""
"The Unicode string type is changed to support multiple internal "
"representations, depending on the character with the largest Unicode "
"ordinal (1, 2, or 4 bytes). This will allow a space-efficient "
"representation in common cases, but give access to full UCS-4 on all "
"systems. For compatibility with existing APIs, several representations "
"may exist in parallel; over time, this compatibility should be phased "
"out. The distinction between narrow and wide Unicode builds is dropped.  "
"An implementation of this PEP is available at [1]_."
msgstr ""

#: ../../pep-0393.txt:26
msgid "Rationale"
msgstr ""

#: ../../pep-0393.txt:28
msgid ""
"There are two classes of complaints about the current implementation of "
"the unicode type: on systems only supporting UTF-16, users complain that "
"non-BMP characters are not properly supported. On systems using UCS-4 "
"internally (and also sometimes on systems using UCS-2), there is a "
"complaint that Unicode strings take up too much memory - especially "
"compared to Python 2.x, where the same code would often use ASCII strings"
" (i.e. ASCII-encoded byte strings). With the proposed approach, ASCII-"
"only Unicode strings will again use only one byte per character; while "
"still allowing efficient indexing of strings containing non-BMP "
"characters (as strings containing them will use 4 bytes per character)."
msgstr ""

#: ../../pep-0393.txt:40
msgid ""
"One problem with the approach is support for existing applications (e.g. "
"extension modules). For compatibility, redundant representations may be "
"computed. Applications are encouraged to phase out reliance on a specific"
" internal representation if possible. As interaction with other libraries"
" will often require some sort of internal representation, the "
"specification chooses UTF-8 as the recommended way of exposing strings to"
" C code."
msgstr ""

#: ../../pep-0393.txt:48
msgid ""
"For many strings (e.g. ASCII), multiple representations may actually "
"share memory (e.g. the shortest form may be shared with the UTF-8 form if"
" all characters are ASCII). With such sharing, the overhead of "
"compatibility representations is reduced. If representations do share "
"data, it is also possible to omit structure fields, reducing the base "
"size of string objects."
msgstr ""

#: ../../pep-0393.txt:56
msgid "Specification"
msgstr ""

#: ../../pep-0393.txt:58
msgid "Unicode structures are now defined as a hierarchy of structures, namely::"
msgstr ""

#: ../../pep-0393.txt:92
msgid ""
"Objects for which both size and maximum character are known at creation "
"time are called \"compact\" unicode objects; character data immediately "
"follow the base structure. If the maximum character is less than 128, "
"they use the PyASCIIObject structure, and the UTF-8 data, the UTF-8 "
"length and the wstr length are the same as the length of the ASCII data. "
"For non-ASCII strings, the PyCompactObject structure is used. Resizing "
"compact objects is not supported."
msgstr ""

#: ../../pep-0393.txt:100
msgid ""
"Objects for which the maximum character is not given at creation time are"
" called \"legacy\" objects, created through "
"PyUnicode_FromStringAndSize(NULL, length). They use the PyUnicodeObject "
"structure. Initially, their data is only in the wstr pointer; when "
"PyUnicode_READY is called, the data pointer (union) is allocated. "
"Resizing is possible as long PyUnicode_READY has not been called."
msgstr ""

#: ../../pep-0393.txt:108
msgid "The fields have the following interpretations:"
msgstr ""

#: ../../pep-0393.txt:110
msgid "length: number of code points in the string (result of sq_length)"
msgstr ""

#: ../../pep-0393.txt:111
msgid "interned: interned-state (SSTATE_*) as in 3.2"
msgstr ""

#: ../../pep-0393.txt:112
msgid "kind: form of string"
msgstr ""

#: ../../pep-0393.txt:114
msgid "00 => str is not initialized (data are in wstr)"
msgstr ""

#: ../../pep-0393.txt:115
msgid "01 => 1 byte (Latin-1)"
msgstr ""

#: ../../pep-0393.txt:116
msgid "10 => 2 byte (UCS-2)"
msgstr ""

#: ../../pep-0393.txt:117
msgid "11 => 4 byte (UCS-4);"
msgstr ""

#: ../../pep-0393.txt:119
msgid ""
"compact: the object uses one of the compact representations (implies "
"ready)"
msgstr ""

#: ../../pep-0393.txt:121
msgid ""
"ascii: the object uses the PyASCIIObject representation (implies compact "
"and ready)"
msgstr ""

#: ../../pep-0393.txt:123
msgid ""
"ready: the canonical representation is ready to be accessed through "
"PyUnicode_DATA and PyUnicode_GET_LENGTH. This is set either if the object"
" is compact, or the data pointer and length have been initialized."
msgstr ""

#: ../../pep-0393.txt:127
msgid ""
"wstr_length, wstr: representation in platform's wchar_t (null-"
"terminated). If wchar_t is 16-bit, this form may use surrogate pairs (in "
"which cast wstr_length differs form length). wstr_length differs from "
"length only if there are surrogate pairs in the representation."
msgstr ""

#: ../../pep-0393.txt:132
msgid "utf8_length, utf8: UTF-8 representation (null-terminated)."
msgstr ""

#: ../../pep-0393.txt:133
msgid ""
"data: shortest-form representation of the unicode string. The string is "
"null-terminated (in its respective representation)."
msgstr ""

#: ../../pep-0393.txt:136
msgid ""
"All three representations are optional, although the data form is "
"considered the canonical representation which can be absent only while "
"the string is being created. If the representation is absent, the pointer"
" is NULL, and the corresponding length field may contain arbitrary data."
msgstr ""

#: ../../pep-0393.txt:142
msgid ""
"The Py_UNICODE type is still supported but deprecated. It is always "
"defined as a typedef for wchar_t, so the wstr representation can double "
"as Py_UNICODE representation."
msgstr ""

#: ../../pep-0393.txt:146
msgid ""
"The data and utf8 pointers point to the same memory if the string uses "
"only ASCII characters (using only Latin-1 is not sufficient). The data "
"and wstr pointers point to the same memory if the string happens to fit "
"exactly to the wchar_t type of the platform (i.e. uses some BMP-not-"
"Latin-1 characters if sizeof(wchar_t) is 2, and uses some non-BMP "
"characters if sizeof(wchar_t) is 4)."
msgstr ""

#: ../../pep-0393.txt:154
msgid "String Creation"
msgstr ""

#: ../../pep-0393.txt:156
msgid ""
"The recommended way to create a Unicode object is to use the function "
"PyUnicode_New::"
msgstr ""

#: ../../pep-0393.txt:161
msgid ""
"Both parameters must denote the eventual size/range of the strings. In "
"particular, codecs using this API must compute both the number of "
"characters and the maximum character in advance. A string is allocated "
"according to the specified size and character range and is null-"
"terminated; the actual characters in it may be uninitialized."
msgstr ""

#: ../../pep-0393.txt:167
msgid ""
"PyUnicode_FromString and PyUnicode_FromStringAndSize remain supported for"
" processing UTF-8 input; the input is decoded, and the UTF-8 "
"representation is not yet set for the string."
msgstr ""

#: ../../pep-0393.txt:171
msgid ""
"PyUnicode_FromUnicode remains supported but is deprecated. If the "
"Py_UNICODE pointer is non-null, the data representation is set. If the "
"pointer is NULL, a properly-sized wstr representation is allocated, which"
" can be modified until PyUnicode_READY() is called (explicitly or "
"implicitly). Resizing a Unicode string remains possible until it is "
"finalized."
msgstr ""

#: ../../pep-0393.txt:178
msgid ""
"PyUnicode_READY() converts a string containing only a wstr representation"
" into the canonical representation. Unless wstr and data can share the "
"memory, the wstr representation is discarded after the conversion. The "
"macro returns 0 on success and -1 on failure, which happens in particular"
" if the memory allocation fails."
msgstr ""

#: ../../pep-0393.txt:185
msgid "String Access"
msgstr ""

#: ../../pep-0393.txt:187
msgid ""
"The canonical representation can be accessed using two macros "
"PyUnicode_Kind and PyUnicode_Data. PyUnicode_Kind gives one of the values"
" PyUnicode_WCHAR_KIND (0), PyUnicode_1BYTE_KIND (1), PyUnicode_2BYTE_KIND"
" (2), or PyUnicode_4BYTE_KIND (3). PyUnicode_DATA gives the void pointer "
"to the data. Access to individual characters should use "
"PyUnicode_{READ|WRITE}[_CHAR]:"
msgstr ""

#: ../../pep-0393.txt:194
msgid "PyUnicode_READ(kind, data, index)"
msgstr ""

#: ../../pep-0393.txt:195 ../../pep-0393.txt:230
msgid "PyUnicode_WRITE(kind, data, index, value)"
msgstr ""

#: ../../pep-0393.txt:196
msgid "PyUnicode_READ_CHAR(unicode, index)"
msgstr ""

#: ../../pep-0393.txt:198
msgid ""
"All these macros assume that the string is in canonical form; callers "
"need to ensure this by calling PyUnicode_READY."
msgstr ""

#: ../../pep-0393.txt:201
msgid ""
"A new function PyUnicode_AsUTF8 is provided to access the UTF-8 "
"representation. It is thus identical to the existing _PyUnicode_AsString,"
" which is removed. The function will compute the utf8 representation when"
" first called. Since this representation will consume memory until the "
"string object is released, applications should use the existing "
"PyUnicode_AsUTF8String where possible (which generates a new string "
"object every time). APIs that implicitly converts a string to a char* "
"(such as the ParseTuple functions) will use PyUnicode_AsUTF8 to compute a"
" conversion."
msgstr ""

#: ../../pep-0393.txt:212
msgid "New API"
msgstr ""

#: ../../pep-0393.txt:214
msgid "This section summarizes the API additions."
msgstr ""

#: ../../pep-0393.txt:216
msgid ""
"Macros to access the internal representation of a Unicode object (read-"
"only):"
msgstr ""

#: ../../pep-0393.txt:219
msgid ""
"PyUnicode_IS_COMPACT_ASCII(o), PyUnicode_IS_COMPACT(o), "
"PyUnicode_IS_READY(o)"
msgstr ""

#: ../../pep-0393.txt:221
msgid "PyUnicode_GET_LENGTH(o)"
msgstr ""

#: ../../pep-0393.txt:222
msgid ""
"PyUnicode_KIND(o), PyUnicode_CHARACTER_SIZE(o), "
"PyUnicode_MAX_CHAR_VALUE(o)"
msgstr ""

#: ../../pep-0393.txt:224
msgid ""
"PyUnicode_DATA(o), PyUnicode_1BYTE_DATA(o), PyUnicode_2BYTE_DATA(o), "
"PyUnicode_4BYTE_DATA(o)"
msgstr ""

#: ../../pep-0393.txt:227
msgid "Character access macros:"
msgstr ""

#: ../../pep-0393.txt:229
msgid "PyUnicode_READ(kind, data, index), PyUnicode_READ_CHAR(o, index)"
msgstr ""

#: ../../pep-0393.txt:232
msgid "Other macros:"
msgstr ""

#: ../../pep-0393.txt:234
msgid "PyUnicode_READY(o)"
msgstr ""

#: ../../pep-0393.txt:235
msgid "PyUnicode_CONVERT_BYTES(from_type, to_type, begin, end, to)"
msgstr ""

#: ../../pep-0393.txt:237
msgid "String creation functions:"
msgstr ""

#: ../../pep-0393.txt:239
msgid "PyUnicode_New(size, maxchar)"
msgstr ""

#: ../../pep-0393.txt:240
msgid "PyUnicode_FromKindAndData(kind, data, size)"
msgstr ""

#: ../../pep-0393.txt:241
msgid "PyUnicode_Substring(o, start, end)"
msgstr ""

#: ../../pep-0393.txt:243
msgid "Character access utility functions:"
msgstr ""

#: ../../pep-0393.txt:245
msgid ""
"PyUnicode_GetLength(o), PyUnicode_ReadChar(o, index), "
"PyUnicode_WriteChar(o, index, character)"
msgstr ""

#: ../../pep-0393.txt:247
msgid "PyUnicode_CopyCharacters(to, to_start, from, from_start, how_many)"
msgstr ""

#: ../../pep-0393.txt:248
msgid "PyUnicode_FindChar(str, ch, start, end, direction)"
msgstr ""

#: ../../pep-0393.txt:250
msgid "Representation conversion:"
msgstr ""

#: ../../pep-0393.txt:252
msgid "PyUnicode_AsUCS4(o, buffer, buflen)"
msgstr ""

#: ../../pep-0393.txt:253
msgid "PyUnicode_AsUCS4Copy(o)"
msgstr ""

#: ../../pep-0393.txt:254
msgid "PyUnicode_AsUnicodeAndSize(o, size_out)"
msgstr ""

#: ../../pep-0393.txt:255
msgid "PyUnicode_AsUTF8(o)"
msgstr ""

#: ../../pep-0393.txt:256
msgid "PyUnicode_AsUTF8AndSize(o, size_out)"
msgstr ""

#: ../../pep-0393.txt:258
msgid "UCS4 utility functions:"
msgstr ""

#: ../../pep-0393.txt:260
msgid ""
"Py_UCS4_{strlen, strcpy, strcat, strncpy, strcmp, strncpy, strcmp, "
"strncmp, strchr, strrchr}"
msgstr ""

#: ../../pep-0393.txt:264
msgid "Stable ABI"
msgstr ""

#: ../../pep-0393.txt:266
msgid ""
"The following functions are added to the stable ABI (PEP 384), as they "
"are independent of the actual representation of Unicode objects: "
"PyUnicode_New, PyUnicode_Substring, PyUnicode_GetLength, "
"PyUnicode_ReadChar, PyUnicode_WriteChar, PyUnicode_Find, "
"PyUnicode_FindChar."
msgstr ""

#: ../../pep-0393.txt:273
msgid "GDB Debugging Hooks"
msgstr ""

#: ../../pep-0393.txt:274
msgid ""
"Tools/gdb/libpython.py contains debugging hooks that embed knowledge "
"about the internals of CPython's data types, include PyUnicodeObject "
"instances.  It has been updated to track the change."
msgstr ""

#: ../../pep-0393.txt:279
msgid "Deprecations, Removals, and Incompatibilities"
msgstr ""

#: ../../pep-0393.txt:281
msgid ""
"While the Py_UNICODE representation and APIs are deprecated with this "
"PEP, no removal of the respective APIs is scheduled. The APIs should "
"remain available at least five years after the PEP is accepted; before "
"they are removed, existing extension modules should be studied to find "
"out whether a sufficient majority of the open-source code on PyPI has "
"been ported to the new API. A reasonable motivation for using the "
"deprecated API even in new code is for code that shall work both on "
"Python 2 and Python 3."
msgstr ""

#: ../../pep-0393.txt:290
msgid "The following macros and functions are deprecated:"
msgstr ""

#: ../../pep-0393.txt:292
msgid "PyUnicode_FromUnicode"
msgstr ""

#: ../../pep-0393.txt:293
msgid "PyUnicode_GET_SIZE, PyUnicode_GetSize, PyUnicode_GET_DATA_SIZE,"
msgstr ""

#: ../../pep-0393.txt:294
msgid "PyUnicode_AS_UNICODE, PyUnicode_AsUnicode, PyUnicode_AsUnicodeAndSize"
msgstr ""

#: ../../pep-0393.txt:295
msgid "PyUnicode_COPY, PyUnicode_FILL, PyUnicode_MATCH"
msgstr ""

#: ../../pep-0393.txt:296
msgid ""
"PyUnicode_Encode, PyUnicode_EncodeUTF7, PyUnicode_EncodeUTF8, "
"PyUnicode_EncodeUTF16, PyUnicode_EncodeUTF32, "
"PyUnicode_EncodeUnicodeEscape, PyUnicode_EncodeRawUnicodeEscape, "
"PyUnicode_EncodeLatin1, PyUnicode_EncodeASCII, PyUnicode_EncodeCharmap, "
"PyUnicode_TranslateCharmap, PyUnicode_EncodeMBCS, "
"PyUnicode_EncodeDecimal, PyUnicode_TransformDecimalToASCII"
msgstr ""

#: ../../pep-0393.txt:303
msgid "Py_UNICODE_{strlen, strcat, strcpy, strcmp, strchr, strrchr}"
msgstr ""

#: ../../pep-0393.txt:304
msgid "PyUnicode_AsUnicodeCopy"
msgstr ""

#: ../../pep-0393.txt:305
msgid "PyUnicode_GetMax"
msgstr ""

#: ../../pep-0393.txt:307
msgid ""
"_PyUnicode_AsDefaultEncodedString is removed. It previously returned a "
"borrowed reference to an UTF-8-encoded bytes object. Since the unicode "
"object cannot anymore cache such a reference, implementing it without "
"leaking memory is not possible. No deprecation phase is provided, since "
"it was an API for internal use only."
msgstr ""

#: ../../pep-0393.txt:313
msgid ""
"Extension modules using the legacy API may inadvertently call "
"PyUnicode_READY, by calling some API that requires that the object is "
"ready, and then continue accessing the (now invalid) Py_UNICODE pointer. "
"Such code will break with this PEP. The code was already flawed in 3.2, "
"as there is was no explicit guarantee that the PyUnicode_AS_UNICODE "
"result would stay valid after an API call (due to the possibility of "
"string resizing). Modules that face this issue need to re-fetch the "
"Py_UNICODE pointer after API calls; doing so will continue to work "
"correctly in earlier Python versions."
msgstr ""

#: ../../pep-0393.txt:324
msgid "Discussion"
msgstr ""

#: ../../pep-0393.txt:326
msgid "Several concerns have been raised about the approach presented here:"
msgstr ""

#: ../../pep-0393.txt:328
msgid ""
"It makes the implementation more complex. That's true, but considered "
"worth it given the benefits."
msgstr ""

#: ../../pep-0393.txt:331
msgid ""
"The Py_UNICODE representation is not instantaneously available, slowing "
"down applications that request it. While this is also true, applications "
"that care about this problem can be rewritten to use the data "
"representation."
msgstr ""

#: ../../pep-0393.txt:337
msgid "Performance"
msgstr ""

#: ../../pep-0393.txt:339
msgid ""
"Performance of this patch must be considered for both memory consumption "
"and runtime efficiency. For memory consumption, the expectation is that "
"applications that have many large strings will see a reduction in memory "
"usage. For small strings, the effects depend on the pointer size of the "
"system, and the size of the Py_UNICODE/wchar_t type. The following table "
"demonstrates this for various small ASCII and Latin-1 string sizes and "
"platforms."
msgstr ""

#: ../../pep-0393.txt:348
msgid "string size"
msgstr ""

#: ../../pep-0393.txt:348
msgid "Python 3.2"
msgstr ""

#: ../../pep-0393.txt:348
msgid "This PEP"
msgstr ""

#: ../../pep-0393.txt:350
msgid "16-bit wchar_t"
msgstr ""

#: ../../pep-0393.txt:350
msgid "32-bit wchar_t"
msgstr ""

#: ../../pep-0393.txt:350
msgid "ASCII"
msgstr ""

#: ../../pep-0393.txt:350
msgid "Latin-1"
msgstr ""

#: ../../pep-0393.txt:352
msgid "32-bit"
msgstr ""

#: ../../pep-0393.txt:352
msgid "64-bit"
msgstr ""

#: ../../pep-0393.txt:354
msgid "1"
msgstr ""

#: ../../pep-0393.txt:354 ../../pep-0393.txt:356 ../../pep-0393.txt:358
#: ../../pep-0393.txt:360 ../../pep-0393.txt:362 ../../pep-0393.txt:364
#: ../../pep-0393.txt:366
msgid "32"
msgstr ""

#: ../../pep-0393.txt:354 ../../pep-0393.txt:356 ../../pep-0393.txt:358
#: ../../pep-0393.txt:366 ../../pep-0393.txt:368
msgid "64"
msgstr ""

#: ../../pep-0393.txt:354 ../../pep-0393.txt:356 ../../pep-0393.txt:358
#: ../../pep-0393.txt:360 ../../pep-0393.txt:362 ../../pep-0393.txt:368
msgid "40"
msgstr ""

#: ../../pep-0393.txt:354 ../../pep-0393.txt:356 ../../pep-0393.txt:358
#: ../../pep-0393.txt:360 ../../pep-0393.txt:362 ../../pep-0393.txt:364
#: ../../pep-0393.txt:366
msgid "56"
msgstr ""

#: ../../pep-0393.txt:354 ../../pep-0393.txt:356 ../../pep-0393.txt:358
#: ../../pep-0393.txt:360 ../../pep-0393.txt:362 ../../pep-0393.txt:364
#: ../../pep-0393.txt:366 ../../pep-0393.txt:368
msgid "80"
msgstr ""

#: ../../pep-0393.txt:356
msgid "2"
msgstr ""

#: ../../pep-0393.txt:356 ../../pep-0393.txt:358 ../../pep-0393.txt:360
#: ../../pep-0393.txt:362 ../../pep-0393.txt:364 ../../pep-0393.txt:366
msgid "72"
msgstr ""

#: ../../pep-0393.txt:358
msgid "3"
msgstr ""

#: ../../pep-0393.txt:358 ../../pep-0393.txt:360 ../../pep-0393.txt:362
#: ../../pep-0393.txt:364 ../../pep-0393.txt:366 ../../pep-0393.txt:368
msgid "48"
msgstr ""

#: ../../pep-0393.txt:360
msgid "4"
msgstr ""

#: ../../pep-0393.txt:362
msgid "5"
msgstr ""

#: ../../pep-0393.txt:364
msgid "6"
msgstr ""

#: ../../pep-0393.txt:364 ../../pep-0393.txt:366 ../../pep-0393.txt:368
msgid "88"
msgstr ""

#: ../../pep-0393.txt:366
msgid "7"
msgstr ""

#: ../../pep-0393.txt:368
msgid "8"
msgstr ""

#: ../../pep-0393.txt:368
msgid "96"
msgstr ""

#: ../../pep-0393.txt:371
msgid ""
"The runtime effect is significantly affected by the API being used. After"
" porting the relevant pieces of code to the new API, the iobench, "
"stringbench, and json benchmarks see typically slowdowns of 1% to 30%; "
"for specific benchmarks, speedups may happen as may happen significantly "
"larger slowdowns."
msgstr ""

#: ../../pep-0393.txt:377
msgid ""
"In actual measurements of a Django application ([2]_), significant "
"reductions of memory usage could be found. For example, the storage for "
"Unicode objects reduced to 2216807 bytes, down from 6378540 bytes for a "
"wide Unicode build, and down from 3694694 bytes for a narrow Unicode "
"build (all on a 32-bit system). This reduction came from the prevalence "
"of ASCII strings in this application; out of 36,000 strings (with "
"1,310,000 chars), 35713 where ASCII strings (with 1,300,000 chars). The "
"sources for these strings where not further analysed; many of them likely"
" originate from identifiers in the library, and string constants in "
"Django's source code."
msgstr ""

#: ../../pep-0393.txt:388
msgid ""
"In comparison to Python 2, both Unicode and byte strings need to be "
"accounted. In the test application, Unicode and byte strings combined had"
" a length of 2,046,000 units (bytes/chars) in 2.x, and 2,200,000 units in"
" 3.x. On a 32-bit system, where the 2.x build used 32-bit "
"wchar_t/Py_UNICODE, the 2.x test used 3,620,000 bytes, and the 3.x build "
"3,340,000 bytes. This reduction in 3.x using the PEP compared to 2.x only"
" occurs when comparing with a wide unicode build."
msgstr ""

#: ../../pep-0393.txt:397
msgid "Porting Guidelines"
msgstr ""

#: ../../pep-0393.txt:399
msgid ""
"Only a small fraction of C code is affected by this PEP, namely code that"
" needs to look \"inside\" unicode strings.  That code doesn't necessarily"
" need to be ported to this API, as the existing API will continue to work"
" correctly. In particular, modules that need to support both Python 2 and"
" Python 3 might get too complicated when simultaneously supporting this "
"new API and the old Unicode API."
msgstr ""

#: ../../pep-0393.txt:406
msgid ""
"In order to port modules to the new API, try to eliminate the use of "
"these API elements:"
msgstr ""

#: ../../pep-0393.txt:409
msgid "the Py_UNICODE type,"
msgstr ""

#: ../../pep-0393.txt:410
msgid "PyUnicode_AS_UNICODE and PyUnicode_AsUnicode,"
msgstr ""

#: ../../pep-0393.txt:411
msgid "PyUnicode_GET_SIZE and PyUnicode_GetSize, and"
msgstr ""

#: ../../pep-0393.txt:412
msgid "PyUnicode_FromUnicode."
msgstr ""

#: ../../pep-0393.txt:414
msgid ""
"When iterating over an existing string, or looking at specific "
"characters, use indexing operations rather than pointer arithmetic; "
"indexing works well for PyUnicode_READ(_CHAR) and PyUnicode_WRITE. Use "
"void* as the buffer type for characters to let the compiler detect "
"invalid dereferencing operations. If you do want to use pointer "
"arithmetics (e.g. when converting existing code), use (unsigned) char* as"
" the buffer type, and keep the element size (1, 2, or 4) in a variable. "
"Notice that (1<<(kind-1)) will produce the element size given a buffer "
"kind."
msgstr ""

#: ../../pep-0393.txt:424
msgid ""
"When creating new strings, it was common in Python to start of with a "
"heuristical buffer size, and then grow or shrink if the heuristics "
"failed. With this PEP, this is now less practical, as you need not only a"
" heuristics for the length of the string, but also for the maximum "
"character."
msgstr ""

#: ../../pep-0393.txt:430
msgid ""
"In order to avoid heuristics, you need to make two passes over the input:"
" once to determine the output length, and the maximum character; then "
"allocate the target string with PyUnicode_New and iterate over the input "
"a second time to produce the final output. While this may sound "
"expensive, it could actually be cheaper than having to copy the result "
"again as in the following approach."
msgstr ""

#: ../../pep-0393.txt:437
msgid ""
"If you take the heuristical route, avoid allocating a string meant to be "
"resized, as resizing strings won't work for their canonical "
"representation.  Instead, allocate a separate buffer to collect the "
"characters, and then construct a unicode object from that using "
"PyUnicode_FromKindAndData. One option is to use Py_UCS4 as the buffer "
"element, assuming for the worst case in character ordinals. This will "
"allow for pointer arithmetics, but may require a lot of memory. "
"Alternatively, start with a 1-byte buffer, and increase the element size "
"as you encounter larger characters. In any case, "
"PyUnicode_FromKindAndData will scan over the buffer to verify the maximum"
" character."
msgstr ""

#: ../../pep-0393.txt:449
msgid ""
"For common tasks, direct access to the string representation may not be "
"necessary: PyUnicode_Find, PyUnicode_FindChar, PyUnicode_Ord, and "
"PyUnicode_CopyCharacters help in analyzing and creating string objects, "
"operating on indexes instead of data pointers."
msgstr ""

#: ../../pep-0393.txt:455
msgid "References"
msgstr ""

#: ../../pep-0393.txt:457
msgid "PEP 393 branch https://bitbucket.org/t0rsten/pep-393"
msgstr ""

#: ../../pep-0393.txt:459
msgid ""
"Django measurement results http://www.dcl.hpi.uni-"
"potsdam.de/home/loewis/djmemprof/"
msgstr ""

#: ../../pep-0393.txt:463
msgid "Copyright"
msgstr ""

#: ../../pep-0393.txt:465
msgid "This document has been placed in the public domain."
msgstr ""

