# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0273.txt
msgid "PEP"
msgstr ""

#: ../../pep-0273.txt:1
msgid "273"
msgstr ""

#: ../../pep-0273.txt
msgid "Title"
msgstr ""

#: ../../pep-0273.txt:2
msgid "Import Modules from Zip Archives"
msgstr ""

#: ../../pep-0273.txt
msgid "Author"
msgstr ""

#: ../../pep-0273.txt:5
msgid "jim@interet.com (James C. Ahlstrom)"
msgstr ""

#: ../../pep-0273.txt
msgid "Status"
msgstr ""

#: ../../pep-0273.txt:6
msgid "Final"
msgstr ""

#: ../../pep-0273.txt
msgid "Type"
msgstr ""

#: ../../pep-0273.txt:7
msgid "Standards Track"
msgstr ""

#: ../../pep-0273.txt
msgid "Created"
msgstr ""

#: ../../pep-0273.txt:9
msgid "11-Oct-2001"
msgstr ""

#: ../../pep-0273.txt
msgid "Python-Version"
msgstr ""

#: ../../pep-0273.txt:10
msgid "2.3"
msgstr ""

#: ../../pep-0273.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0273.txt:11
msgid "26-Oct-2001"
msgstr ""

#: ../../pep-0273.txt:15
msgid "Abstract"
msgstr ""

#: ../../pep-0273.txt:17
msgid ""
"This PEP adds the ability to import Python modules ``*.py``, ``*.py[co]``"
" and packages from zip archives.  The same code is used to speed up "
"normal directory imports provided ``os.listdir`` is available."
msgstr ""

#: ../../pep-0273.txt:24
msgid "Note"
msgstr ""

#: ../../pep-0273.txt:26
msgid ""
"Zip imports were added to Python 2.3, but the final implementation uses "
"an approach different from the one described in this PEP. The 2.3 "
"implementation is SourceForge patch #652586 [1]_, which adds new import "
"hooks described in PEP 302."
msgstr ""

#: ../../pep-0273.txt:31
msgid "The rest of this PEP is therefore only of historical interest."
msgstr ""

#: ../../pep-0273.txt:35
msgid "Specification"
msgstr ""

#: ../../pep-0273.txt:37
msgid ""
"Currently, ``sys.path`` is a list of directory names as strings.  If this"
" PEP is implemented, an item of ``sys.path`` can be a string naming a zip"
" file archive.  The zip archive can contain a subdirectory structure to "
"support package imports.  The zip archive satisfies imports exactly as a "
"subdirectory would."
msgstr ""

#: ../../pep-0273.txt:43
msgid ""
"The implementation is in C code in the Python core and works on all "
"supported Python platforms."
msgstr ""

#: ../../pep-0273.txt:46
msgid ""
"Any files may be present in the zip archive, but only files ``*.py`` and "
"``*.py[co]`` are available for import.  Zip import of dynamic modules "
"(``*.pyd``, ``*.so``) is disallowed."
msgstr ""

#: ../../pep-0273.txt:50
msgid ""
"Just as ``sys.path`` currently has default directory names, a default zip"
" archive name is added too.  Otherwise there is no way to import all "
"Python library files from an archive."
msgstr ""

#: ../../pep-0273.txt:56
msgid "Subdirectory Equivalence"
msgstr ""

#: ../../pep-0273.txt:58
msgid ""
"The zip archive must be treated exactly as a subdirectory tree so we can "
"support package imports based on current and future rules. All zip data "
"is taken from the Central Directory, the data must be correct, and brain "
"dead zip files are not accommodated."
msgstr ""

#: ../../pep-0273.txt:63
msgid ""
"Suppose ``sys.path`` contains \"/A/B/SubDir\" and \"/C/D/E/Archive.zip\","
" and we are trying to import ``modfoo`` from the ``Q`` package.  Then "
"``import.c`` will generate a list of paths and extensions and will look "
"for the file.  The list of generated paths does not change for zip "
"imports.  Suppose ``import.c`` generates the path "
"\"/A/B/SubDir/Q/R/modfoo.pyc\".  Then it will also generate the path "
"\"/C/D/E/Archive.zip/Q/R/modfoo.pyc\".  Finding the SubDir path is "
"exactly equivalent to finding \"Q/R/modfoo.pyc\" in the archive."
msgstr ""

#: ../../pep-0273.txt:72
msgid ""
"Suppose you zip up /A/B/SubDir/* and all its subdirectories.  Then your "
"zip file will satisfy imports just as your subdirectory did."
msgstr ""

#: ../../pep-0273.txt:75
msgid ""
"Well, not quite.  You can't satisfy dynamic modules from a zip file.  "
"Dynamic modules have extensions like ``.dll``, ``.pyd``, and ``.so``. "
"They are operating system dependent, and probably can't be loaded except "
"from a file.  It might be possible to extract the dynamic module from the"
" zip file, write it to a plain file and load it. But that would mean "
"creating temporary files, and dealing with all the ``dynload_*.c``, and "
"that's probably not a good idea."
msgstr ""

#: ../../pep-0273.txt:83
msgid ""
"When trying to import ``*.pyc``, if it is not available then ``*.pyo`` "
"will be used instead.  And vice versa when looking for ``*.pyo``. If "
"neither ``*.pyc`` nor ``*.pyo`` is available, or if the magic numbers are"
" invalid, then ``*.py`` will be compiled and used to satisfy the import, "
"but the compiled file will not be saved.  Python would normally write it "
"to the same directory as ``*.py``, but surely we don't want to write to "
"the zip file.  We could write to the directory of the zip archive, but "
"that would clutter it up, not good if it is ``/usr/bin`` for example."
msgstr ""

#: ../../pep-0273.txt:93
msgid ""
"Failing to write the compiled files will make zip imports very slow, and "
"the user will probably not figure out what is wrong.  So it is best to "
"put ``*.pyc`` and ``*.pyo`` in the archive with the ``*.py``."
msgstr ""

#: ../../pep-0273.txt:99
msgid "Efficiency"
msgstr ""

#: ../../pep-0273.txt:101
msgid ""
"The only way to find files in a zip archive is linear search.  So for "
"each zip file in ``sys.path``, we search for its names once, and put the "
"names plus other relevant data into a static Python dictionary.  The key "
"is the archive name from ``sys.path`` joined with the file name "
"(including any subdirectories) within the archive. This is exactly the "
"name generated by ``import.c``, and makes lookup easy."
msgstr ""

#: ../../pep-0273.txt:109
msgid ""
"This same mechanism is used to speed up directory (non-zip) imports. See "
"below."
msgstr ""

#: ../../pep-0273.txt:114
msgid "zlib"
msgstr ""

#: ../../pep-0273.txt:116
msgid ""
"Compressed zip archives require ``zlib`` for decompression.  Prior to any"
" other imports, we attempt an import of ``zlib``.  Import of compressed "
"files will fail with a message \"missing ``zlib``\" unless ``zlib`` is "
"available."
msgstr ""

#: ../../pep-0273.txt:123
msgid "Booting"
msgstr ""

#: ../../pep-0273.txt:125
msgid ""
"Python imports ``site.py`` itself, and this imports ``os``, ``nt``, "
"``ntpath``, ``stat``, and ``UserDict``.  It also imports "
"``sitecustomize.py`` which may import more modules.  Zip imports must be "
"available before ``site.py`` is imported."
msgstr ""

#: ../../pep-0273.txt:130
msgid ""
"Just as there are default directories in ``sys.path``, there must be one "
"or more default zip archives too."
msgstr ""

#: ../../pep-0273.txt:133
msgid ""
"The problem is what the name should be.  The name should be linked with "
"the Python version, so the Python executable can correctly find its "
"corresponding libraries even when there are multiple Python versions on "
"the same machine."
msgstr ""

#: ../../pep-0273.txt:138
#, python-format
msgid ""
"We add one name to ``sys.path``.  On Unix, the directory is ``sys.prefix "
"+ \"/lib\"``, and the file name is ``\"python%s%s.zip\" % "
"(sys.version[0], sys.version[2])``. So for Python 2.2 and prefix "
"``/usr/local``, the path ``/usr/local/lib/python2.2/`` is already on "
"``sys.path``, and ``/usr/local/lib/python22.zip`` would be added. On "
"Windows, the file is the full path to ``python22.dll``, with \"dll\" "
"replaced by \"zip\".  The zip archive name is always inserted as the "
"second item in ``sys.path``.  The first is the directory of the "
"``main.py`` (thanks Tim)."
msgstr ""

#: ../../pep-0273.txt:151
msgid "Directory Imports"
msgstr ""

#: ../../pep-0273.txt:153
msgid ""
"The static Python dictionary used to speed up zip imports can be used to "
"speed up normal directory imports too.  For each item in ``sys.path`` "
"that is not a zip archive, we call ``os.listdir``, and add the directory "
"contents to the dictionary.  Then instead of calling ``fopen()`` in a "
"double loop, we just check the dictionary.  This greatly speeds up "
"imports.  If ``os.listdir`` doesn't exist, the dictionary is not used."
msgstr ""

#: ../../pep-0273.txt:163
msgid "Benchmarks"
msgstr ""

#: ../../pep-0273.txt:166
msgid "Case"
msgstr ""

#: ../../pep-0273.txt:166
msgid "Original 2.2a3"
msgstr ""

#: ../../pep-0273.txt:166
msgid "Using os.listdir"
msgstr ""

#: ../../pep-0273.txt:166
msgid "Zip Uncomp"
msgstr ""

#: ../../pep-0273.txt:166
msgid "Zip Compr"
msgstr ""

#: ../../pep-0273.txt:168
msgid "1"
msgstr ""

#: ../../pep-0273.txt:168
msgid "3.2 2.5 3.2->1.02"
msgstr ""

#: ../../pep-0273.txt:168
msgid "2.3 2.5 2.3->0.87"
msgstr ""

#: ../../pep-0273.txt:168
msgid "1.66->0.93"
msgstr ""

#: ../../pep-0273.txt:168
msgid "1.5->1.07"
msgstr ""

#: ../../pep-0273.txt:169
msgid "2"
msgstr ""

#: ../../pep-0273.txt:169
msgid "2.8 3.9 3.0->1.32"
msgstr ""

#: ../../pep-0273.txt:169
msgid "Same as Case 1."
msgstr ""

#: ../../pep-0273.txt:170
msgid "3"
msgstr ""

#: ../../pep-0273.txt:170
msgid "5.7 5.7 5.7->5.7"
msgstr ""

#: ../../pep-0273.txt:170
msgid "2.1 2.1 2.1->1.8"
msgstr ""

#: ../../pep-0273.txt:170
msgid "1.25->0.99"
msgstr ""

#: ../../pep-0273.txt:170
msgid "1.19->1.13"
msgstr ""

#: ../../pep-0273.txt:171
msgid "4"
msgstr ""

#: ../../pep-0273.txt:171
msgid "9.4 9.4 9.3->9.35"
msgstr ""

#: ../../pep-0273.txt:171
msgid "Same as Case 3."
msgstr ""

#: ../../pep-0273.txt:174
msgid ""
"Case 1: Local drive C:, ``sys.path`` has its default value. Case 2: Local"
" drive C:, directory with files is at the end of ``sys.path``. Case 3: "
"Network  drive, ``sys.path`` has its default value. Case 4: Network  "
"drive, directory with files is at the end of ``sys.path``."
msgstr ""

#: ../../pep-0273.txt:179
msgid ""
"Benchmarks were performed on a Pentium 4 clone, 1.4 GHz, 256 Meg. The "
"machine was running Windows 2000 with a Linux/Samba network server. Times"
" are in seconds, and are the time to import about 100 Lib modules. Case 2"
" and 4 have the \"correct\" directory moved to the end of ``sys.path``. "
"\"Uncomp\" means uncompressed zip archive, \"Compr\" means compressed."
msgstr ""

#: ../../pep-0273.txt:185
msgid ""
"Initial times are after a re-boot of the system; the time after \"->\" is"
" the time after repeated runs.  Times to import from C: after a re-boot "
"are rather highly variable for the \"Original\" case, but are more "
"realistic."
msgstr ""

#: ../../pep-0273.txt:192
msgid "Custom Imports"
msgstr ""

#: ../../pep-0273.txt:194
msgid ""
"The logic demonstrates the ability to import using default searching "
"until a needed Python module (in this case, ``os``) becomes available. "
"This can be used to bootstrap custom importers.  For example, if "
"\"``importer()``\" in ``__init__.py`` exists, then it could be used for "
"imports. The \"``importer()``\" can freely import os and other modules, "
"and these will be satisfied from the default mechanism.  This PEP does "
"not define any custom importers, and this note is for information only."
msgstr ""

#: ../../pep-0273.txt:204
msgid "Implementation"
msgstr ""

#: ../../pep-0273.txt:206
msgid ""
"A C implementation is available as SourceForge patch 492105. Superseded "
"by patch 652586 and current CVS. [2]_"
msgstr ""

#: ../../pep-0273.txt:209
msgid ""
"A newer version (updated for recent CVS by Paul Moore) is 645650. "
"Superseded by patch 652586 and current CVS. [3]_"
msgstr ""

#: ../../pep-0273.txt:212
msgid ""
"A competing implementation by Just van Rossum is 652586, which is the "
"basis for the final implementation of PEP 302.  PEP 273 has been "
"implemented using PEP 302's import hooks. [1]_"
msgstr ""

#: ../../pep-0273.txt:218
msgid "References"
msgstr ""

#: ../../pep-0273.txt:220
msgid ""
"Just van Rossum, New import hooks + Import from Zip files "
"https://bugs.python.org/issue652586"
msgstr ""

#: ../../pep-0273.txt:223
msgid ""
"Import from Zip archive, James C. Ahlstrom "
"https://bugs.python.org/issue492105"
msgstr ""

#: ../../pep-0273.txt:226
msgid "Import from Zip Archive, Paul Moore https://bugs.python.org/issue645650"
msgstr ""

#: ../../pep-0273.txt:233
msgid "Copyright"
msgstr ""

#: ../../pep-0273.txt:235
msgid "This document has been placed in the public domain."
msgstr ""

